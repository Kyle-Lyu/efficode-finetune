{"date": "2025-02-04 08:15", "hash": "fe585eb4df8c88d844eeb463ea4d0302", "eval": {"HumanEval/1": [{"task_id": "HumanEval/1", "solution": "from typing import List", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/13": [{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return a greatest common divisor of two integers a and b.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: Greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/12": [{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): List of strings.\n\n    Returns:\n        Optional[str]: Longest string in the list, or None if the list is empty.\n\n    Examples:\n        >>> longest([])\n\n        >>> longest(['a', 'b', 'c'])\n        'a'\n        >>> longest(['a', 'bb', 'ccc'])\n        'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/0": [{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): List of numbers.\n        threshold (float): Threshold value.\n\n    Returns:\n        bool: True if any two numbers in the list are closer to each other than the threshold,\n              False otherwise.\n\n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n        False\n        >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) < threshold:\n                return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/8": [{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the integers in the list.\n\n    Examples:\n        >>> sum_product([])\n        (0, 1)\n        >>> sum_product([1, 2, 3, 4])\n        (10, 24)\n    \"\"\"\n    sum_result = 0\n    product_result = 1\n\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n\n    return sum_result, product_result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/4": [{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\"\n    Calculates the mean absolute deviation (MAD) of a given list of numbers.\n\n    The mean absolute deviation (MAD) is the average absolute difference between each\n    element and the mean of the dataset. It provides a measure of the spread of the\n    data around the mean.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        float: The mean absolute deviation of the input numbers.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n        1.0\n        >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0, 5.0])\n        1.2\n        >>> mean_absolute_deviation([1.0, 1.0, 1.0, 1.0, 1.0])\n        0.0\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n\n    return mad", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/10": [{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest palindromic suffix\n    for i in range(len(string), 0, -1):\n        if is_palindrome(string[-i:]):\n            break\n\n    # Append the reverse of the prefix before the palindromic suffix\n    return string + string[:-i][::-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/5": [{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'.\n\n    Args:\n        numbers (List[int]): The input list of integers.\n        delimeter (int): The number to be inserted between consecutive elements.\n\n    Returns:\n        List[int]: The modified list with the delimeter inserted between consecutive elements.\n\n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers)):\n        result.append(numbers[i])\n        if i < len(numbers) - 1:\n            result.append(delimeter)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/2": [{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    and integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    Args:\n        number (float): The positive floating point number.\n\n    Returns:\n        float: The decimal part of the number.\n\n    Raises:\n        ValueError: If the input number is not positive.\n\n    Examples:\n        >>> truncate_number(3.5)\n        0.5\n        >>> truncate_number(10.99)\n        0.99\n        >>> truncate_number(0)\n        Traceback (most recent call last):\n        ...\n        ValueError: Input number must be positive.\n    \"\"\"\n    if number <= 0:\n        raise ValueError(\"Input number must be positive.\")\n\n    return number % 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/7": [{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to search for in the strings.\n\n    Returns:\n        List[str]: A new list containing only the strings that contain the given substring.\n\n    Examples:\n        >>> filter_by_substring([], 'a')\n        []\n        >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n        ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/11": [{"task_id": "HumanEval/11", "solution": "def string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Perform binary XOR on two strings of 1s and 0s and return the result as a string.\n\n    Args:\n        a (str): The first string of 1s and 0s.\n        b (str): The second string of 1s and 0s.\n\n    Returns:\n        str: The result of performing binary XOR on the two input strings.\n\n    Raises:\n        ValueError: If the input strings are not of equal length.\n\n    Examples:\n        >>> string_xor('010', '110')\n        '100'\n        >>> string_xor('10101', '01010')\n        '11111'\n        >>> string_xor('10101', '0101')\n        Traceback (most recent call last):\n        ...\n        ValueError: Input strings must be of equal length.\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must be of equal length.\")\n\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/3": [{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function takes a list of deposit and withdrawal operations on a bank account and checks if at any point the balance falls below zero.\n\n    Args:\n        operations (List[int]): A list of deposit and withdrawal operations on a bank account.\n\n    Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n\n    Examples:\n        >>> below_zero([1, 2, 3])\n        False\n        >>> below_zero([1, 2, -4, 5])\n        True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/9": [{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): The input list of integers.\n\n    Returns:\n        List[int]: A list of rolling maximum elements.\n\n    Examples:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/6": [{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    Args:\n        paren_string (str): The string representing multiple groups of nested parentheses.\n\n    Returns:\n        List[int]: A list of integers representing the deepest level of nesting for each group of parentheses.\n\n    Examples:\n        >>> parse_nested_parens('(()()) ((())) () ((())()())')\n        [2, 3, 1, 3]\n    \"\"\"\n\n    # Split the input string into groups of parentheses\n    groups = paren_string.split()\n\n    # Initialize a list to store the deepest level of nesting for each group\n    deepest_levels = []\n\n    for group in groups:\n        # Initialize a counter to keep track of the current level of nesting\n        level = 0\n        max_level = 0\n\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n\n        deepest_levels.append(max_level)\n\n    return deepest_levels", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/14": [{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        List[str]: A list of all prefixes from shortest to longest.\n\n    Examples:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/17": [{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\"\n    Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    :param music_string: A string representing musical notes in a special ASCII format.\n    :return: A list of integers representing the number of beats each note lasts.\n\n    Example:\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Split the music string into individual notes\n    notes = music_string.split()\n\n    # Create a dictionary to map note characters to their corresponding number of beats\n    note_to_beats = {'o': 4, 'o|': 2, '.|': 1}\n\n    # Initialize an empty list to store the number of beats for each note\n    beats_per_note = []\n\n    # Iterate over each note and append the corresponding number of beats to the list\n    for note in notes:\n        beats_per_note.append(note_to_beats[note])\n\n    return beats_per_note", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/16": [{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n    \"\"\"\n    # Convert the string to lowercase to ignore case\n    string = string.lower()\n\n    # Create a set to store distinct characters\n    distinct_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n\n    # Return the length of the set\n    return len(distinct_chars)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/53": [{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"\n    Add two numbers x and y.\n\n    Args:\n        x (int): The first number to be added.\n        y (int): The second number to be added.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/54": [{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n\n    Args:\n        s0 (str): The first word.\n        s1 (str): The second word.\n\n    Returns:\n        bool: True if the words have the same characters, False otherwise.\n\n    Examples:\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n        True\n        >>> same_chars('abcd', 'dddddddabc')\n        True\n        >>> same_chars('dddddddabc', 'abcd')\n        True\n        >>> same_chars('eabcd', 'dddddddabc')\n        False\n        >>> same_chars('abcd', 'dddddddabce')\n        False\n        >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n        False\n    \"\"\"\n    # Convert the words to lowercase and remove any non-alphabetic characters\n    s0 = ''.join(c for c in s0.lower() if c.isalpha())\n    s1 = ''.join(c for c in s1.lower() if c.isalpha())\n\n    # Check if the sorted characters of the two words are equal\n    return sorted(s0) == sorted(s1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["eabcdzzzz", "dddzzzzzzzddeddabc"]], "plus_fail_tests": [["aaabbbccc", "abbabcbc"]]}], "HumanEval/55": [{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to be returned.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n    for i in range(2, n+1):\n        fib_sequence.append(fib_sequence[i-1] + fib_sequence[i-2])\n\n    return fib_sequence[n-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[0]]}], "HumanEval/19": [{"task_id": "HumanEval/19", "solution": "def sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Sorts a string of numbers from 'zero' to 'nine' in ascending order.\n\n    Args:\n        numbers (str): A string of numbers separated by spaces.\n\n    Returns:\n        str: The sorted string of numbers.\n\n    Raises:\n        ValueError: If the input string contains an invalid number.\n\n    Examples:\n        >>> sort_numbers('three one five')\n        'one three five'\n        >>> sort_numbers('nine zero one')\n        'zero one nine'\n        >>> sort_numbers('two three four')\n        'two three four'\n    \"\"\"\n\n    # Create a dictionary to map numbers to their corresponding strings\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numbers\n    number_list = numbers.split()\n\n    # Convert each number to its corresponding integer value\n    try:\n        number_list = [number_map[number] for number in number_list]\n    except KeyError as e:\n        raise ValueError(f\"Invalid number: {e.args[0]}\")\n\n    # Sort the list of numbers\n    number_list.sort()\n\n    # Convert each number back to its corresponding string\n    number_list = [list(number_map.keys())[list(number_map.values()).index(number)] for number in number_list]\n\n    # Join the list of numbers into a string\n    sorted_numbers = ' '.join(number_list)\n\n    return sorted_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/52": [{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Check if all numbers in the given list are below the given threshold.\n\n    Args:\n        l (list): The list of numbers to check.\n        t (int): The threshold value.\n\n    Returns:\n        bool: True if all numbers in the list are below the threshold, False otherwise.\n\n    Examples:\n        >>> below_threshold([1, 2, 4, 10], 100)\n        True\n        >>> below_threshold([1, 20, 4, 10], 5)\n        False\n    \"\"\"\n    return all(num < t for num in l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/29": [{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\"\n    Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        prefix (str): The prefix to filter the strings by.\n\n    Returns:\n        List[str]: A new list containing only the strings that start with the given prefix.\n\n    Examples:\n        >>> filter_by_prefix([], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/18": [{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n\n    Args:\n        string (str): The original string to search in.\n        substring (str): The substring to search for.\n\n    Returns:\n        int: The number of times the substring is found in the original string.\n\n    Examples:\n        >>> how_many_times('', 'a')\n        0\n        >>> how_many_times('aaa', 'a')\n        3\n        >>> how_many_times('aaaa', 'aa')\n        3\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/57": [{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"\n    Return True if the list elements are monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of integers.\n\n    Returns:\n    bool: True if the list elements are monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    # Check if the list is empty or has only one element\n    if len(l) <= 1:\n        return True\n\n    # Check if the list is monotonically increasing\n    increasing = all(l[i] <= l[i+1] for i in range(len(l)-1))\n\n    # Check if the list is monotonically decreasing\n    decreasing = all(l[i] >= l[i+1] for i in range(len(l)-1))\n\n    # Return True if either increasing or decreasing is True, otherwise return False\n    return increasing or decreasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/56": [{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Check if a string of brackets is correctly bracketed.\n\n    Args:\n        brackets (str): A string of brackets, where '<' represents an opening bracket and '>' represents a closing bracket.\n\n    Returns:\n        bool: True if the brackets are correctly bracketed, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"<\")\n        False\n        >>> correct_bracketing(\"<>\")\n        True\n        >>> correct_bracketing(\"<<><>>\")\n        True\n        >>> correct_bracketing(\"><<>\")\n        False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == '<':\n            stack.append(bracket)\n        elif bracket == '>':\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/26": [{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A new list with all duplicates removed.\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    \"\"\"\n    # Create a set to store unique elements\n    unique_elements = set()\n\n    # Create a new list to store the result\n    result = []\n\n    # Iterate over the input list\n    for number in numbers:\n        # If the element is not in the set, add it to the set and the result list\n        if number not in unique_elements:\n            unique_elements.add(number)\n            result.append(number)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 4, 3, 5]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4, 4]]]}], "HumanEval/62": [{"task_id": "HumanEval/62", "solution": "def derivative(xs):\n    \"\"\"\n    Calculates the derivative of a polynomial represented by a list of coefficients.\n\n    Parameters:\n    xs (list): A list of coefficients representing a polynomial.\n\n    Returns:\n    list: A list of coefficients representing the derivative of the polynomial.\n\n    Example:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n    # Initialize the derivative list with zeros\n    derivative_coefficients = [0] * (len(xs) - 1)\n\n    # Calculate the derivative coefficients\n    for i in range(1, len(xs)):\n        derivative_coefficients[i - 1] = i * xs[i]\n\n    return derivative_coefficients", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/58": [{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n\n    Returns:\n        list: A sorted list of unique common elements.\n\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n    \"\"\"\n    return sorted(set(l1) & set(l2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/31": [{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a given number is prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/45": [{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of a side and the height.\n\n    Parameters:\n    a (float): Length of a side of the triangle.\n    h (float): Height of the triangle.\n\n    Returns:\n    float: The area of the triangle.\n\n    Raises:\n    ValueError: If either a or h is negative.\n\n    Examples:\n    >>> triangle_area(5, 3)\n    7.5\n    >>> triangle_area(0, 0)\n    0.0\n    >>> triangle_area(10, 5)\n    25.0\n    \"\"\"\n    if a < 0 or h < 0:\n        raise ValueError(\"Length and height must be positive.\")\n    return 0.5 * a * h", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/23": [{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the input string.\n\n    Examples:\n        >>> strlen('')\n        0\n        >>> strlen('abc')\n        3\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/67": [{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n\n    Args:\n        s (str): A string representing the number of apples and oranges in the basket.\n        n (int): An integer representing the total number of fruits in the basket.\n\n    Returns:\n        int: The number of mango fruits in the basket.\n\n    Raises:\n        ValueError: If the input string is not in the correct format.\n\n    Examples:\n        >>> fruit_distribution(\"5 apples and 6 oranges\", 19)\n        8\n        >>> fruit_distribution(\"0 apples and 1 oranges\",3)\n        2\n        >>> fruit_distribution(\"2 apples and 3 oranges\", 100)\n        95\n        >>> fruit_distribution(\"100 apples and 1 oranges\",120)\n        19\n    \"\"\"\n    # Split the string into apples and oranges\n    apples, oranges = s.split(\" and \")\n\n    # Extract the number of apples and oranges from the string\n    num_apples = int(apples.split()[0])\n    num_oranges = int(oranges.split()[0])\n\n    # Calculate the number of mangoes\n    num_mangoes = n - num_apples - num_oranges\n\n    return num_mangoes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/39": [{"task_id": "HumanEval/39", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Parameters:\n    n (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n):\n    \"\"\"\n    Generate the n-th Fibonacci number that is also prime.\n\n    Parameters:\n    n (int): The position of the Fibonacci number to generate.\n\n    Returns:\n    int: The n-th Fibonacci number that is also prime.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    fib_nums = [0, 1]\n    while len(fib_nums) < n:\n        fib_nums.append(fib_nums[-1] + fib_nums[-2])\n\n    for num in fib_nums[::-1]:\n        if is_prime(num):\n            return num\n\n    raise ValueError(\"No prime Fibonacci number found.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[11]]}], "HumanEval/32": [{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs, x):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    \n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n    \n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        raise ValueError(\"Largest coefficient cannot be zero.\")\n    \n    # Use the Newton-Raphson method to find a zero point\n    x_prev = 0\n    x_next = x_prev - poly(xs, x_prev) / poly_derivative(xs, x_prev)\n    \n    while abs(x_next - x_prev) > 1e-6:\n        x_prev = x_next\n        x_next = x_prev - poly(xs, x_prev) / poly_derivative(xs, x_prev)\n    \n    return x_next\ndef poly_derivative(xs, x):\n    \"\"\"\n    Calculates the derivative of a polynomial with coefficients xs at point x.\n    \"\"\"\n    return sum([i * coeff * math.pow(x, i - 1) for i, coeff in enumerate(xs)])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-10, -2]]], "plus_fail_tests": [[[5, 10, -3, 1]]]}], "HumanEval/69": [{"task_id": "HumanEval/69", "solution": "def search(lst):\n    \"\"\"\n    You are given a non-empty list of positive integers. Return the greatest integer that is greater than \n    zero, and has a frequency greater than or equal to the value of the integer itself. \n    The frequency of an integer is the number of times it appears in the list.\n    If no such a value exist, return -1.\n    Examples:\n        search([4, 1, 2, 2, 3, 1]) == 2\n        search([1, 2, 2, 3, 3, 3, 4, 4, 4]) == 3\n        search([5, 5, 4, 4, 4]) == -1\n    \"\"\"\n    # Create a dictionary to store the frequency of each element in the list\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    # Find the greatest integer that has a frequency greater than or equal to the value of the integer itself\n    max_freq = -1\n    for num in freq_dict:\n        if num > max_freq and freq_dict[num] >= num:\n            max_freq = num\n    \n    # If no such a value exist, return -1\n    if max_freq == -1:\n        return -1\n    \n    return max_freq", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/20": [{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n    other and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the two numbers that are closest to each other.\n\n    Raises:\n        ValueError: If the input list has less than two numbers.\n\n    Examples:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two numbers.\")\n\n    numbers.sort()\n    min_diff = float('inf')\n    closest_pair = (0.0, 0.0)\n\n    for i in range(len(numbers) - 1):\n        diff = numbers[i + 1] - numbers[i]\n        if diff < min_diff:\n            min_diff = diff\n            closest_pair = (numbers[i], numbers[i + 1])\n\n    return closest_pair", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/63": [{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\n    This function efficiently computes the n-th element of the FibFib number sequence.\n\n    Args:\n        n (int): The index of the FibFib number to compute.\n\n    Returns:\n        int: The n-th FibFib number.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        fibfib_sequence = [0, 0, 1]\n        for i in range(3, n+1):\n            fibfib_sequence.append(fibfib_sequence[i-1] + fibfib_sequence[i-2] + fibfib_sequence[i-3])\n        return fibfib_sequence[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/48": [{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str) -> bool:\n    \"\"\"\n    Checks if given string is a palindrome.\n\n    A palindrome is a word, phrase, number, or other sequence of characters that reads the same forward and backward.\n\n    Args:\n        text (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a palindrome, False otherwise.\n\n    Examples:\n        >>> is_palindrome('')\n        True\n        >>> is_palindrome('aba')\n        True\n        >>> is_palindrome('aaaaa')\n        True\n        >>> is_palindrome('zbcd')\n        False\n    \"\"\"\n    # Remove any non-alphanumeric characters and convert to lowercase\n    cleaned_text = ''.join(char.lower() for char in text if char.isalnum())\n\n    # Check if the cleaned text is equal to its reverse\n    return cleaned_text == cleaned_text[::-1]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["never odd or even"]]}], "HumanEval/70": [{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1, 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5, 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n    if len(lst) <= 1:\n        return lst\n\n    sorted_lst = []\n    while lst:\n        min_val = min(lst)\n        max_val = max(lst)\n        sorted_lst.append(min_val)\n        sorted_lst.append(max_val)\n        lst.remove(min_val)\n        lst.remove(max_val)\n\n    return sorted_lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 7, 8, 9]]], "plus_fail_tests": [[[100, 200, 300, 150, 75, 35, 10]]]}], "HumanEval/85": [{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of the even elements that are at odd indices.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n        >>> add([1, 3, 5, 7])\n        0\n        >>> add([2, 4, 6, 8])\n        16\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    return sum(lst[1::2])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, 6, 7, 2, 122]]], "plus_fail_tests": [[[3, 5, 7, 9]]]}], "HumanEval/21": [{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers, rescales the values to the range [0, 1] by dividing each number by the maximum value in the list.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        List[float]: A new list with the rescaled values.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-numeric values.\n\n    Examples:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n        >>> rescale_to_unit([-1.0, 0.0, 1.0])\n        [0.0, 0.5, 1.0]\n        >>> rescale_to_unit([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot be empty.\n        >>> rescale_to_unit([1.0, 'a', 3.0])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot contain non-numeric values.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise ValueError(\"Input list cannot contain non-numeric values.\")\n\n    max_value = max(numbers)\n    return [num / max_value for num in numbers]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2.0, 49.9]]], "plus_fail_tests": [[[-10.0, 0.0, 10.0]]]}], "HumanEval/72": [{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    \"\"\"\n    Check if an object will fly based on its weight and balance.\n\n    Parameters:\n    q (list): A list of integers representing the object's weights.\n    w (int): The maximum possible weight the object can carry.\n\n    Returns:\n    bool: True if the object will fly, False otherwise.\n\n    \"\"\"\n\n    # Check if the object is balanced\n    if sum(q) <= w and q == q[::-1]:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/61": [{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str) -> bool:\n    \"\"\"\n    Check if a string of brackets is correctly bracketed.\n\n    Args:\n        brackets (str): A string of brackets.\n\n    Returns:\n        bool: True if the brackets are correctly bracketed, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"(\")\n        False\n        >>> correct_bracketing(\"()\")\n        True\n        >>> correct_bracketing(\"(()())\")\n        True\n        >>> correct_bracketing(\")(()\")\n        False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return not stack", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/33": [{"task_id": "HumanEval/33", "solution": "def sort_third(l: list) -> list:\n    \"\"\"\n    This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The modified list l'.\n\n    Examples:\n        >>> sort_third([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n        [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = l.copy()  # Create a copy of the input list\n\n    # Sort the values at the indices divisible by three\n    l_prime[2::3] = sorted(l_prime[2::3])\n\n    return l_prime", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]]], "plus_fail_tests": [[[9, 12, 15, 6, 3, 8, 10, 23, 7]]]}], "HumanEval/68": [{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    \"\"\"\n    Given an array representing a branch of a tree that has non-negative integer nodes,\n    your task is to pluck one of the nodes and return it.\n    The plucked node should be the node with the smallest even value.\n    If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n    The plucked node should be returned in a list, [ smalest_value, its index ],\n    If there are no even values or the given array is empty, return [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation: 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5, 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest value, but  there are two zeros,\n                     so we will choose the first zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length <= 10000\n        * 0 <= node.value\n    \"\"\"\n\n    # Initialize variables to store the smallest even value and its index\n    smallest_even_value = float('inf')\n    smallest_even_index = None\n\n    # Iterate through the array\n    for i, value in enumerate(arr):\n        # Check if the value is even and smaller than the current smallest even value\n        if value % 2 == 0 and value < smallest_even_value:\n            smallest_even_value = value\n            smallest_even_index = i\n\n    # If no even values were found, return an empty list\n    if smallest_even_index is None:\n        return []\n\n    # Return the smallest even value and its index as a list\n    return [smallest_even_value, smallest_even_index]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/66": [{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Calculates the sum of the ASCII codes of uppercase characters in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The sum of the ASCII codes of uppercase characters in the input string.\n\n    Examples:\n        >>> digitSum(\"\")\n        0\n        >>> digitSum(\"abAB\")\n        131\n        >>> digitSum(\"abcCd\")\n        67\n        >>> digitSum(\"helloE\")\n        69\n        >>> digitSum(\"woArBld\")\n        131\n        >>> digitSum(\"aAaaaXa\")\n        153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/73": [{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    count = 0\n\n    # Iterate until left and right pointers meet\n    while left < right:\n        # If elements at left and right pointers are different, increment count\n        if arr[left] != arr[right]:\n            count += 1\n\n        # Move left pointer one step to the right\n        left += 1\n\n        # Move right pointer one step to the left\n        right -= 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/84": [{"task_id": "HumanEval/84", "solution": "def solve(N):\n    \"\"\"\n    Given a positive integer N, return the total sum of its digits in binary.\n\n    Args:\n        N (int): A positive integer.\n\n    Returns:\n        str: A string representation of the binary sum of the digits of N.\n\n    Raises:\n        ValueError: If N is not a positive integer.\n\n    Examples:\n        >>> solve(1000)\n        '1'\n        >>> solve(150)\n        '110'\n        >>> solve(147)\n        '1100'\n    \"\"\"\n    if not isinstance(N, int) or N < 0:\n        raise ValueError(\"N must be a positive integer.\")\n\n    binary_sum = bin(N)[2:]  # Convert N to binary string and remove the '0b' prefix\n    return str(sum(int(digit) for digit in binary_sum))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1000]], "plus_fail_tests": [[10]]}], "HumanEval/28": [{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n\n    Args:\n        strings (List[str]): List of strings to be concatenated.\n\n    Returns:\n        str: Concatenated string.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    return ''.join(strings)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/79": [{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to binary representation.\n\n    Args:\n        decimal (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary representation of the decimal number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n\n    Examples:\n        >>> decimal_to_binary(15)\n        'db1111db'\n        >>> decimal_to_binary(32)\n        'db100000db'\n    \"\"\"\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    binary = bin(decimal)[2:]  # Convert decimal to binary string, removing the '0b' prefix\n    return f\"db{binary}db\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/75": [{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"\n    Check if a given number is the multiplication of 3 prime numbers.\n\n    Parameters:\n    a (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is the multiplication of 3 prime numbers, False otherwise.\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Check if a given number is prime.\n\n        Parameters:\n        n (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n ** 0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 100:\n        primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n        for p1 in primes:\n            if a % p1 == 0:\n                for p2 in primes:\n                    if a % p2 == 0 and p2 != p1:\n                        for p3 in primes:\n                            if a % p3 == 0 and p3 != p1 and p3 != p2:\n                                return True\n        return False\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[99]]}], "HumanEval/83": [{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n    Args:\n        n (int): The number of digits in the positive integers.\n\n    Returns:\n        int: The count of positive integers that start or end with 1.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> starts_one_ends(1)\n        2\n        >>> starts_one_ends(2)\n        10\n        >>> starts_one_ends(3)\n        180\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    if n == 1:\n        return 2\n\n    count = 10\n    for _ in range(2, n):\n        count *= 10\n\n    return count * 2", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[6]]}], "HumanEval/65": [{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Args:\n        x (int): The integer to be shifted.\n        shift (int): The number of digits to shift.\n    \n    Returns:\n        str: The shifted integer as a string.\n    \"\"\"\n    # Convert the integer to a string\n    x_str = str(x)\n    \n    # Calculate the number of digits in the integer\n    num_digits = len(x_str)\n    \n    # If shift is greater than the number of digits, return the reversed string\n    if shift > num_digits:\n        return x_str[::-1]\n    \n    # Calculate the index of the first digit to shift\n    shift_index = num_digits - shift\n    \n    # Shift the digits and return the result as a string\n    shifted_str = x_str[shift_index:] + x_str[:shift_index]\n    return shifted_str", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/91": [{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    Count the number of boredoms in a given string of words.\n\n    Parameters:\n    S (str): The input string of words.\n\n    Returns:\n    int: The number of boredoms in the string.\n\n    \"\"\"\n\n    # Split the string into sentences\n    sentences = S.split('.') + S.split('?') + S.split('\u00a1')\n\n    # Initialize the count of boredoms\n    boredom_count = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Split the sentence into words\n        words = sentence.split()\n\n        # Check if the first word is \"I\"\n        if words and words[0].lower() == \"i\":\n            boredom_count += 1\n\n    return boredom_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["I love It !"]], "plus_fail_tests": [["I am very happy today. I love spending time with my friends."]]}], "HumanEval/30": [{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        list: A list containing only the positive numbers from the input list.\n\n    Examples:\n        >>> get_positive([-1, 2, -4, 5, 6])\n        [2, 5, 6]\n        >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/76": [{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    Check if a number x is a simple power of n.\n\n    Parameters:\n    x (int): The number to be checked.\n    n (int): The base number.\n\n    Returns:\n    bool: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x == 1:\n        return True\n    elif x % n != 0:\n        return False\n    else:\n        return is_simple_power(x // n, n)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[82, 1]]}], "HumanEval/49": [{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n\n    Parameters:\n    n (int): The exponent.\n    p (int): The modulus.\n\n    Returns:\n    int: The result of 2^n mod p.\n\n    Raises:\n    ValueError: If p is not a positive integer.\n\n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if p <= 0:\n        raise ValueError(\"Modulus p must be a positive integer.\")\n\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 1]]}], "HumanEval/34": [{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: A sorted list of unique elements.\n\n    Examples:\n        >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [0, 2, 3, 5, 9, 123]\n    \"\"\"\n    return sorted(set(l))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/22": [{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\n    Args:\n        values (List[Any]): List of any python values\n\n    Returns:\n        List[int]: List of integers only\n\n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[true, false, null, 0, -10, "test", [], {}, 3.14]]]}], "HumanEval/87": [{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    \"\"\"\n    You are given a 2 dimensional data, as a nested lists,\n    which is similar to matrix, however, unlike matrices,\n    each row may contain a different number of columns.\n    Given lst, and integer x, find integers x in the list,\n    and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n    each tuple is a coordinate - (row, columns), starting with 0.\n    Sort coordinates initially by rows in ascending order.\n    Also, sort coordinates of the row by columns in descending order.\n    \n    Examples:\n    get_row([\n      [1,2,3,4,5,6],\n      [1,2,3,4,1,6],\n      [1,2,3,4,5,1]\n    ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n    get_row([], 1) == []\n    get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n    \"\"\"\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, j))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/71": [{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    \"\"\"\n    Calculates the area of a triangle given the lengths of its sides.\n\n    Parameters:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n    c (float): Length of the third side of the triangle.\n\n    Returns:\n    float: The area of the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n    -1: If the three sides do not form a valid triangle.\n\n    Raises:\n    ValueError: If any of the side lengths is not a positive number.\n\n    \"\"\"\n\n    # Check if any side length is negative or zero\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Side lengths must be positive numbers.\")\n\n    # Check if the three sides form a valid triangle\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1\n\n    # Calculate the semi-perimeter of the triangle\n    s = (a + b + c) / 2\n\n    # Calculate the area using Heron's formula\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n\n    # Round the area to 2 decimal points\n    area = round(area, 2)\n\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/81": [{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of letter grades based on the given criteria.\n\n    Parameters:\n    grades (list): A list of GPAs.\n\n    Returns:\n    list: A list of letter grades corresponding to the given GPAs.\n\n    \"\"\"\n\n    # Define the grade criteria\n    grade_criteria = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over each GPA in the input list\n    for gpa in grades:\n        # Find the highest grade criteria that is less than or equal to the GPA\n        letter_grade = max([grade for grade in grade_criteria if grade <= gpa])\n        # Append the corresponding letter grade to the list\n        letter_grades.append(grade_criteria[letter_grade])\n\n    return letter_grades\ngrades = [4.0, 3, 1.7, 2, 3.5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4.0, 3, 1.7, 2, 3.5]]], "plus_fail_tests": [[[3.8, 2.5, 3.9, 2.2, 1.0]]]}], "HumanEval/74": [{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    \"\"\"\n    Write a function that accepts two lists of strings and returns the list that has \n    total number of chars in the all strings of the list less than the other list.\n\n    if the two lists have the same number of chars, return the first list.\n\n    Examples\n    --------\n    >>> total_match([], [])\n    []\n    >>> total_match(['hi', 'admin'], ['hI', 'Hi'])\n    ['hI', 'Hi']\n    >>> total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ['hi', 'admin']\n    >>> total_match(['hi', 'admin'], ['hI', 'hi', 'hi'])\n    ['hI', 'hi', 'hi']\n    >>> total_match(['4'], ['1', '2', '3', '4', '5'])\n    ['4']\n    \"\"\"\n    total_chars1 = sum(len(s) for s in lst1)\n    total_chars2 = sum(len(s) for s in lst2)\n\n    if total_chars1 < total_chars2:\n        return lst1\n    elif total_chars1 > total_chars2:\n        return lst2\n    else:\n        return lst1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/37": [{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies,\n    while its values at the even indicies are equal to the values of the even indicies of l, but sorted.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The modified list l'.\n\n    Examples:\n        >>> sort_even([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_even([5, 6, 3, 4])\n        [3, 6, 5, 4]\n    \"\"\"\n    l_even = [l[i] for i in range(len(l)) if i % 2 == 0]\n    l_even.sort()\n    l_odd = [l[i] for i in range(len(l)) if i % 2 != 0]\n    l_sorted = l_odd + l_even\n    return l_sorted", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": [[[2, 6, 4, 8, 10]]]}], "HumanEval/47": [{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"\n    Return median of elements in the list l.\n\n    Parameters:\n    l (list): A list of numbers.\n\n    Returns:\n    float: The median value of the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> median([3, 1, 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\"\"\n\n    if len(l) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n\n    if n % 2 == 1:\n        return sorted_l[n // 2]\n    else:\n        return (sorted_l[n // 2 - 1] + sorted_l[n // 2]) / 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/93": [{"task_id": "HumanEval/93", "solution": "def encode(message):\n    \"\"\"\n    Write a function that takes a message, and encodes in such a \n    way that it swaps case of all letters, replaces all vowels in \n    the message with the letter that appears 2 places ahead of that \n    vowel in the english alphabet. \n    Assume only letters. \n    \n    Examples:\n    >>> encode('test')\n    'TGST'\n    >>> encode('This is a message')\n    'tHKS KS C MGSSCGG'\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    \n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_char = char.upper()\n            else:\n                encoded_char = char.lower()\n        else:\n            encoded_char = char\n        \n        if char.lower() in vowels:\n            vowel_index = vowels.index(char.lower())\n            encoded_char = vowels[(vowel_index + 2) % len(vowels)]\n        \n        encoded_message += encoded_char\n    \n    return encoded_message", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["TEST"]], "plus_fail_tests": [["abcdefghijklmnopqrstuvwxyz"]]}], "HumanEval/38": [{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/59": [{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n):\n    \"\"\"\n    Return the largest prime factor of n.\n\n    Parameters:\n    n (int): The number to find the largest prime factor of.\n\n    Returns:\n    int: The largest prime factor of n.\n\n    Raises:\n    ValueError: If n is less than or equal to 1 or is a prime number.\n\n    \"\"\"\n\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1.\")\n\n    if is_prime(n):\n        raise ValueError(\"n must not be a prime number.\")\n\n    largest_factor = 1\n    factor = 2\n\n    while factor <= n:\n        if n % factor == 0:\n            largest_factor = factor\n            n = n // factor\n        else:\n            factor += 1\n\n    return largest_factor\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if n is prime, False otherwise.\n\n    \"\"\"\n\n    if n <= 1:\n        return False\n\n    if n == 2:\n        return True\n\n    if n % 2 == 0:\n        return False\n\n    for i in range(3, int(n ** 0.5) + 1, 2):\n        if n % i == 0:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/50": [{"task_id": "HumanEval/50", "solution": "def decode_shift(s: str) -> str:\n    \"\"\"\n    Decodes a string encoded with the encode_shift function.\n\n    Args:\n        s (str): The encoded string.\n\n    Returns:\n        str: The decoded string.\n\n    Examples:\n        >>> decode_shift(\"mjqqt\")\n        'hello'\n        >>> decode_shift(\"zvxivs\")\n        'python'\n    \"\"\"\n    decoded_string = \"\"\n    for char in s:\n        if char.isalpha():\n            decoded_char = chr((ord(char) - ord('a') - 5) % 26 + ord('a'))\n            decoded_string += decoded_char\n        else:\n            decoded_string += char\n    return decoded_string", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["encoded message with shift"]]}], "HumanEval/82": [{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_length(string):\n    \"\"\"Check if the length of a string is a prime number.\n\n    Args:\n        string (str): The string to check.\n\n    Returns:\n        bool: True if the length of the string is prime, False otherwise.\n    \"\"\"\n    return is_prime(len(string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/86": [{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    \"\"\"\n    Write a function that takes a string and returns an ordered version of it.\n    Ordered version of string, is a string where all words (separated by space)\n    are replaced by a new word where all the characters arranged in\n    ascending order based on ascii value.\n    Note: You should keep the order of words and blank spaces in the sentence.\n\n    For example:\n    anti_shuffle('Hi') returns 'Hi'\n    anti_shuffle('hello') returns 'ehllo'\n    anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n    \"\"\"\n\n    def sort_word(word):\n        \"\"\"\n        Helper function to sort a word based on ascii value.\n        \"\"\"\n        return ''.join(sorted(word))\n\n    # Split the string into words\n    words = s.split()\n\n    # Sort each word and join them back together\n    sorted_words = [sort_word(word) for word in words]\n\n    # Join the sorted words with spaces\n    sorted_string = ' '.join(sorted_words)\n\n    return sorted_string", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\n\n123 456\n789\n"]]}], "HumanEval/80": [{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"\n    Check if a string is happy or not.\n\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        bool: True if the string is happy, False otherwise.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] == s[i+2]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aabb"]], "plus_fail_tests": [["agbebf"]]}], "HumanEval/51": [{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \n    Args:\n        text (str): The input string.\n        \n    Returns:\n        str: The input string without vowels.\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    return ''.join(char for char in text if char not in vowels)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/44": [{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n\n    Args:\n        x (int): The number to be converted.\n        base (int): The base to which the number should be converted.\n\n    Returns:\n        str: The string representation of the number after conversion.\n\n    Raises:\n        ValueError: If the base is less than 2 or greater than 10.\n\n    Examples:\n        >>> change_base(8, 3)\n        '22'\n        >>> change_base(8, 2)\n        '1000'\n        >>> change_base(7, 2)\n        '111'\n    \"\"\"\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be between 2 and 10.\")\n\n    if x == 0:\n        return '0'\n\n    digits = []\n    while x > 0:\n        digits.append(str(x % base))\n        x //= base\n\n    return ''.join(digits[::-1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/40": [{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if the list has at least 3 elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate through the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers, one at the next element after i, and the other at the end of the list\n        j = i + 1\n        k = len(l) - 1\n\n        # Move the pointers towards each other until they meet\n        while j < k:\n            # Calculate the sum of the three elements\n            sum_ = l[i] + l[j] + l[k]\n\n            # If the sum is zero, return True\n            if sum_ == 0:\n                return True\n\n            # If the sum is less than zero, move the left pointer to the right\n            elif sum_ < 0:\n                j += 1\n\n            # If the sum is greater than zero, move the right pointer to the left\n            else:\n                k -= 1\n\n    # If no triplet is found, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/90": [{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = float('inf')\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/41": [{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right;  simultaneously, a different set of n cars\n    are driving right to left.   The two sets of cars start out being very far from\n    each other.  All cars move in the same speed.  Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    Args:\n        n (int): The number of cars in each direction.\n\n    Returns:\n        int: The number of collisions.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> car_race_collision(3)\n        2\n        >>> car_race_collision(4)\n        3\n        >>> car_race_collision(5)\n        4\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the number of collisions\n    collisions = n * (n - 1) // 2\n\n    return collisions", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[5]]}], "HumanEval/35": [{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        int: The maximum element in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_element([1, 2, 3])\n        3\n        >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        123\n    \"\"\"\n    if not l:\n        raise ValueError(\"Input list cannot be empty.\")\n    return max(l)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/43": [{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    Args:\n        l (list): A list of integers.\n    \n    Returns:\n        bool: True if there are two distinct elements in the list that sum to zero, False otherwise.\n    \"\"\"\n    # Create an empty set to store the complements of the elements\n    complements = set()\n    \n    # Iterate through each element in the list\n    for num in l:\n        # Check if the complement of the current element is already in the set\n        if -num in complements:\n            # If the complement is found, return True\n            return True\n        # Add the current element to the set of complements\n        complements.add(num)\n    \n    # If no pair of elements sum to zero is found, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/89": [{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    \"\"\"\n    Create a function encrypt that takes a string as an argument and\n    returns a string encrypted with the alphabet being rotated. \n    The alphabet should be rotated in a manner such that the letters \n    shift down by two multiplied to two places.\n\n    Args:\n        s (str): The string to be encrypted.\n\n    Returns:\n        str: The encrypted string.\n\n    Examples:\n        >>> encrypt('hi')\n        'lm'\n        >>> encrypt('asdfghjkl')\n        'ewhjklnop'\n        >>> encrypt('gf')\n        'kj'\n        >>> encrypt('et')\n        'ix'\n    \"\"\"\n    encrypted_string = ''\n    for char in s:\n        if char.isalpha():\n            ascii_value = ord(char)\n            encrypted_value = ascii_value - 2 * 2\n            if encrypted_value < ord('a'):\n                encrypted_value += 26\n            encrypted_string += chr(encrypted_value)\n        else:\n            encrypted_string += char\n    return encrypted_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hi"]], "plus_fail_tests": [["abcde"]]}], "HumanEval/88": [{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Create a copy of the given array\n    sorted_array = array.copy()\n\n    # Check if the sum of the first and last index values is odd\n    if (array[0] + array[-1]) % 2 != 0:\n        sorted_array.sort()  # Sort the array in ascending order\n    else:\n        sorted_array.sort(reverse=True)  # Sort the array in descending order\n\n    return sorted_array", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[]]], "plus_fail_tests": []}], "HumanEval/42": [{"task_id": "HumanEval/42", "solution": "def incr_list(l: list) -> list:\n    \"\"\"\n    Return list with elements incremented by 1.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The list with elements incremented by 1.\n\n    Examples:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/64": [{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    \"\"\"\n    Count the number of vowels in a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of vowels in the string.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> vowels_count(\"abcde\")\n        2\n        >>> vowels_count(\"ACEDY\")\n        3\n        >>> vowels_count(\"\")\n        0\n    \"\"\"\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string.\")\n\n    vowels = \"aeiouAEIOU\"\n    count = 0\n    for char in s:\n        if char in vowels:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["key"]], "plus_fail_tests": [["candy"]]}], "HumanEval/92": [{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    \"\"\"\n    Create a function that takes 3 numbers.\n    Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n    Returns false in any other cases.\n\n    Examples:\n    >>> any_int(5, 2, 7)\n    True\n    >>> any_int(3, 2, 2)\n    False\n    >>> any_int(3, -2, 1)\n    True\n    >>> any_int(3.6, -2.2, 2)\n    False\n    \"\"\"\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/46": [{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    \"\"\"\n    The Fib4 number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fib4(0) -> 0\n    fib4(1) -> 0\n    fib4(2) -> 2\n    fib4(3) -> 0\n    fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n\n    This function efficiently computes the n-th element of the Fib4 number sequence.\n\n    Args:\n        n (int): The index of the Fib4 number to compute.\n\n    Returns:\n        int: The n-th Fib4 number.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> fib4(5)\n        4\n        >>> fib4(6)\n        8\n        >>> fib4(7)\n        14\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n\n    fib4_sequence = [0, 0, 2, 0]\n\n    for i in range(4, n + 1):\n        fib4_sequence.append(fib4_sequence[i - 1] + fib4_sequence[i - 2] + fib4_sequence[i - 3] + fib4_sequence[i - 4])\n\n    return fib4_sequence[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/27": [{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with flipped case.\n\n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        elif char.isupper():\n            flipped_string += char.lower()\n        else:\n            flipped_string += char\n    return flipped_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/94": [{"task_id": "HumanEval/94", "solution": "def find_largest_prime_sum(lst):\n    \"\"\"\n    Finds the largest prime value in a given list and returns the sum of its digits.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of the digits of the largest prime value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_largest_prime_sum([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3])\n        10\n        >>> find_largest_prime_sum([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1])\n        25\n        >>> find_largest_prime_sum([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3])\n        13\n        >>> find_largest_prime_sum([0,724,32,71,99,32,6,0,5,91,83,0,5,6])\n        11\n        >>> find_largest_prime_sum([0,81,12,3,1,21])\n        3\n        >>> find_largest_prime_sum([0,8,1,2,1,7])\n        7\n    \"\"\"\n\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def sum_of_digits(n):\n        return sum(int(digit) for digit in str(n))\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    largest_prime = max(filter(is_prime, lst))\n    return sum_of_digits(largest_prime)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/95": [{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    \n    keys = list(dict.keys())\n    if all(isinstance(key, str) for key in keys):\n        if all(key.islower() for key in keys) or all(key.isupper() for key in keys):\n            return True\n    \n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/97": [{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The product of the unit digits of a and b.\n\n    Examples:\n        >>> multiply(148, 412)\n        16\n        >>> multiply(19, 28)\n        72\n        >>> multiply(2020, 1851)\n        0\n        >>> multiply(14, -15)\n        20\n    \"\"\"\n    # Extract the unit digits of a and b\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n\n    # Multiply the unit digits\n    product = unit_digit_a * unit_digit_b\n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/99": [{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n    # Convert the value to a float\n    num = float(value)\n\n    # Check if the number is negative\n    if num < 0:\n        # If negative, round the number down to the nearest integer\n        return int(num - 0.5)\n    else:\n        # If positive, round the number up to the nearest integer\n        return int(num + 0.5)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/77": [{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    \"\"\"\n    Check if a given number is a cube of some integer.\n\n    Parameters:\n    a (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a cube of some integer, False otherwise.\n    \"\"\"\n    if a == 0:\n        return True\n\n    # Check if the number is negative\n    if a < 0:\n        a = abs(a)\n\n    # Find the cube root of the number\n    cube_root = int(a ** (1 / 3))\n\n    # Check if the cube of the cube root is equal to the original number\n    return cube_root ** 3 == a", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[64]], "plus_fail_tests": [[125]]}], "HumanEval/101": [{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into an array of words.\n\n    Args:\n        s (str): The input string of words.\n\n    Returns:\n        list: A list of words extracted from the input string.\n\n    Examples:\n        >>> words_string(\"Hi, my name is John\")\n        ['Hi', 'my', 'name', 'is', 'John']\n        >>> words_string(\"One, two, three, four, five, six\")\n        ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n    # Split the string into words using either commas or spaces as delimiters\n    words = s.split(', ') if ',' in s else s.split(' ')\n\n    # Remove any leading/trailing whitespace from each word\n    words = [word.strip() for word in words]\n\n    return words", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Hi, my name is John"]], "plus_fail_tests": [[",,,,"]]}], "HumanEval/78": [{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    \"\"\"\n    Counts the number of hexadecimal digits that are primes in a given hexadecimal number.\n\n    Parameters:\n    num (str): A hexadecimal number as a string.\n\n    Returns:\n    int: The number of hexadecimal digits that are primes.\n\n    \"\"\"\n\n    # Define a set of prime hexadecimal digits\n    prime_hex_digits = {'2', '3', '5', '7', 'B', 'D'}\n\n    # Initialize a counter for the number of primes\n    prime_count = 0\n\n    # Iterate over each character in the hexadecimal number\n    for char in num:\n        # Check if the character is a prime hexadecimal digit\n        if char.upper() in prime_hex_digits:\n            prime_count += 1\n\n    return prime_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/102": [{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    Args:\n        x (int): The lower bound of the range.\n        y (int): The upper bound of the range.\n\n    Returns:\n        int: The biggest even integer number in the range [x, y] or -1 if there's no such number.\n\n    Raises:\n        ValueError: If either x or y is negative or if x is greater than y.\n\n    Examples:\n        >>> choose_num(12, 15)\n        14\n        >>> choose_num(13, 12)\n        -1\n    \"\"\"\n    if x < 0 or y < 0:\n        raise ValueError(\"x and y must be positive integers.\")\n    if x > y:\n        raise ValueError(\"x must be less than or equal to y.\")\n\n    # Find the biggest even number in the range [x, y]\n    even_num = -1\n    for num in range(x, y+1):\n        if num % 2 == 0 and num > even_num:\n            even_num = num\n\n    return even_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[13, 12]], "plus_fail_tests": [[100, 6]]}], "HumanEval/103": [{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    \"\"\"\n    Compute the average of the integers from n through m (including n and m),\n    round the answer to the nearest integer, and convert it to binary.\n\n    Args:\n        n (int): The starting integer.\n        m (int): The ending integer.\n\n    Returns:\n        str: The binary representation of the rounded average.\n\n    Raises:\n        ValueError: If n is greater than m.\n\n    Examples:\n        >>> rounded_avg(1, 5)\n        '0b11'\n        >>> rounded_avg(7, 5)\n        -1\n        >>> rounded_avg(10, 20)\n        '0b1111'\n        >>> rounded_avg(20, 33)\n        '0b11010'\n    \"\"\"\n    if n > m:\n        raise ValueError(\"n cannot be greater than m\")\n\n    # Compute the average of the integers from n through m\n    avg = (n + m) / 2\n\n    # Round the average to the nearest integer\n    rounded_avg = round(avg)\n\n    # Convert the rounded average to binary\n    binary_avg = bin(rounded_avg)\n\n    return binary_avg", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7, 5]], "plus_fail_tests": [[200, 30]]}], "HumanEval/106": [{"task_id": "HumanEval/106", "solution": "def f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n    i starts from 1.\n    The factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n\n    Args:\n        n (int): The size of the list to be generated.\n\n    Returns:\n        list: A list of size n, where the value of the element at index i is the factorial of i if i is even\n        or the sum of numbers from 1 to i otherwise.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> f(5)\n        [1, 2, 6, 24, 15]\n        >>> f(10)\n        [1, 2, 6, 24, 120, 720, 5040, 40320, 362880, 3628800]\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n\n    return result\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a number.\n\n    Args:\n        n (int): The number to calculate the factorial of.\n\n    Returns:\n        int: The factorial of the given number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> factorial(5)\n        120\n        >>> factorial(0)\n        1\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    if n == 0:\n        return 1\n\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "HumanEval/108": [{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The number of elements in the list whose sum of digits is greater than 0.\n\n    Examples:\n        >>> count_nums([])\n        0\n        >>> count_nums([-1, 11, -11])\n        1\n        >>> count_nums([1, 1, 2])\n        3\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        Calculate the sum of the digits of a number.\n\n        Args:\n            num (int): The number for which the sum of digits needs to be calculated.\n\n        Returns:\n            int: The sum of the digits of the number.\n        \"\"\"\n        if num < 0:\n            num = -num\n        return sum(int(digit) for digit in str(num))\n\n    return sum(sum_of_digits(num) > 0 for num in arr)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -2, 0]]], "plus_fail_tests": [[[-1, 0, 1]]]}], "HumanEval/111": [{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    \"\"\"\n    Given a string representing a space separated lowercase letters, return a dictionary\n    of the letter with the most repetition and containing the corresponding count.\n    If several letters have the same occurrence, return all of them.\n\n    Example:\n    histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n    histogram('a b b a') == {'a': 2, 'b': 2}\n    histogram('a b c a b') == {'a': 2, 'b': 2}\n    histogram('b b b b a') == {'b': 4}\n    histogram('') == {}\n    \"\"\"\n\n    # Split the string into a list of lowercase letters\n    letters = test.lower().split()\n\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Iterate over the letters and update the counts in the dictionary\n    for letter in letters:\n        if letter in letter_counts:\n            letter_counts[letter] += 1\n        else:\n            letter_counts[letter] = 1\n\n    # Find the letter(s) with the maximum count\n    max_count = max(letter_counts.values())\n\n    # Create a new dictionary to store the letter(s) with the maximum count\n    max_letters = {letter: count for letter, count in letter_counts.items() if count == max_count}\n\n    return max_letters", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[""]], "plus_fail_tests": [[""]]}], "HumanEval/110": [{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between two lists to make lst1 a list of only even numbers.\n\n    Args:\n        lst1 (list): The first list of numbers.\n        lst2 (list): The second list of numbers.\n\n    Returns:\n        str: \"YES\" if it is possible to exchange elements between lst1 and lst2 to make all the elements of lst1 to be even, otherwise \"NO\".\n\n    Raises:\n        ValueError: If either lst1 or lst2 is empty.\n\n    Examples:\n        >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n        'YES'\n        >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n        'NO'\n    \"\"\"\n\n    # Check if either lst1 or lst2 is empty\n    if not lst1 or not lst2:\n        raise ValueError(\"Both lists must be non-empty.\")\n\n    # Count the number of odd numbers in lst1\n    odd_count1 = sum(1 for num in lst1 if num % 2 != 0)\n\n    # Count the number of odd numbers in lst2\n    odd_count2 = sum(1 for num in lst2 if num % 2 != 0)\n\n    # If the difference between the number of odd numbers in lst1 and lst2 is even, it is possible to exchange elements\n    if (odd_count1 - odd_count2) % 2 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 7, 3], [2, 6, 4]]], "plus_fail_tests": [[[2, 4, 6], [1, 3, 5]]]}], "HumanEval/109": [{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it is possible to get an array sorted in non-decreasing order by performing\n    a right shift operation on the given array.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    bool: True if it is possible to get a sorted array, False otherwise.\n    \"\"\"\n\n    # If the array is empty, it is already sorted\n    if not arr:\n        return True\n\n    # Find the index of the first element that is not in non-decreasing order\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n\n    # If the first element is not in non-decreasing order, it is not possible to sort the array\n    if arr[i] > arr[i + 1]:\n        return False\n\n    # If the first element is the smallest, it is possible to sort the array by performing a right shift operation\n    if arr[i] == min(arr):\n        return True\n\n    # If the first element is not the smallest, it is not possible to sort the array\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4, 5, 1, 2]]], "plus_fail_tests": [[[1]]]}], "HumanEval/98": [{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i, char in enumerate(s):\n        if i % 2 == 0 and char.isupper() and char in vowels:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/107": [{"task_id": "HumanEval/107", "solution": "def even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Example 1:\n\n        Input: 3\n        Output: (1, 2)\n        Explanation:\n        Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n    Example 2:\n\n        Input: 12\n        Output: (4, 6)\n        Explanation:\n        Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n    Note:\n        1. 1 <= n <= 10^3\n        2. returned tuple has the number of even and odd integer palindromes respectively.\n    \"\"\"\n\n    def is_palindrome(num):\n        \"\"\"\n        Helper function to check if a number is a palindrome.\n        \"\"\"\n        return str(num) == str(num)[::-1]\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/105": [{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    \"\"\"\n    Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n    \n      If the array is empty, return an empty array:\n      arr = []\n      return []\n    \n      If the array has any strange number ignore it:\n      arr = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n\n    # Create a dictionary to map numbers to their corresponding names\n    number_names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n\n    # Filter out numbers outside the range 1-9\n    filtered_arr = [num for num in arr if 1 <= num <= 9]\n\n    # Sort the filtered array in ascending order\n    sorted_arr = sorted(filtered_arr)\n\n    # Reverse the sorted array\n    reversed_arr = sorted_arr[::-1]\n\n    # Map the numbers in the reversed array to their corresponding names\n    result = [number_names[num] for num in reversed_arr]\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/115": [{"task_id": "HumanEval/115", "solution": "def max_fill(grid, capacity):\n    \"\"\"\n    You are given a rectangular grid of wells. Each row represents a single well,\n    and each 1 in a row represents a single unit of water.\n    Each well has a corresponding bucket that can be used to extract water from it, \n    and all buckets have the same capacity.\n    Your task is to use the buckets to empty the wells.\n    Output the number of times you need to lower the buckets.\n\n    Example 1:\n        Input: \n            grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n            bucket_capacity : 1\n        Output: 6\n\n    Example 2:\n        Input: \n            grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n            bucket_capacity : 2\n        Output: 5\n    \n    Example 3:\n        Input: \n            grid : [[0,0,0], [0,0,0]]\n            bucket_capacity : 5\n        Output: 0\n\n    Constraints:\n        * all wells have the same length\n        * 1 <= grid.length <= 10^2\n        * 1 <= grid[:,1].length <= 10^2\n        * grid[i][j] -> 0 | 1\n        * 1 <= capacity <= 10\n    \"\"\"\n\n    # Initialize variables\n    num_rows = len(grid)\n    num_cols = len(grid[0])\n    num_buckets = 0\n    num_fills = 0\n\n    # Count the number of buckets needed\n    for row in grid:\n        num_buckets += sum(row)\n\n    # Calculate the number of fills needed\n    num_fills = math.ceil(num_buckets / capacity)\n\n    return num_fills", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]], 1]], "plus_fail_tests": [[[[1, 0, 0, 1], [0, 1, 1, 1], [0, 0, 0, 0], [1, 0, 1, 1]], 2]]}], "HumanEval/116": [{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    Sorts an array of non-negative integers according to the number of ones in their binary representation.\n\n    Args:\n        arr (list): The input array of non-negative integers.\n\n    Returns:\n        list: The sorted array.\n\n    Examples:\n        >>> sort_array([1, 5, 2, 3, 4])\n        [1, 2, 3, 4, 5]\n        >>> sort_array([-2, -3, -4, -5, -6])\n        [-6, -5, -4, -3, -2]\n        >>> sort_array([1, 0, 2, 3, 4])\n        [0, 1, 2, 3, 4]\n    \"\"\"\n\n    # Convert each integer to binary representation and count the number of ones\n    binary_counts = [(bin(num)[2:], bin(num)[2:].count('1')) for num in arr]\n\n    # Sort the array based on the number of ones in binary representation\n    sorted_arr = sorted(arr, key=lambda x: binary_counts[arr.index(x)][1])\n\n    return sorted_arr", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 2, 3, 4]]], "plus_fail_tests": [[[3, 7, 6, 5, 4]]]}], "HumanEval/104": [{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements that has no even digit.\n\n    Args:\n        x (list): A list of positive integers.\n\n    Returns:\n        list: A sorted list of elements that has no even digit.\n\n    Examples:\n        >>> unique_digits([15, 33, 1422, 1])\n        [1, 15, 33]\n        >>> unique_digits([152, 323, 1422, 10])\n        []\n    \"\"\"\n    def has_even_digit(num):\n        \"\"\"\n        Check if a number has an even digit.\n\n        Args:\n            num (int): A positive integer.\n\n        Returns:\n            bool: True if the number has an even digit, False otherwise.\n        \"\"\"\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return True\n            num //= 10\n        return False\n\n    result = []\n    for num in x:\n        if not has_even_digit(num):\n            result.append(num)\n    return sorted(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/113": [{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    Args:\n        lst (list): A list of strings, where each string consists of only digits.\n\n    Returns:\n        list: A list of strings with the number of odd digits in each string.\n\n    Examples:\n        >>> odd_count(['1234567'])\n        [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        >>> odd_count(['3',\"11111111\"])\n        [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n         \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for i, string in enumerate(lst):\n        odd_count = sum(int(digit) % 2 != 0 for digit in string)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {i} of the {i}nput.\")\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["1234567"]]], "plus_fail_tests": [[["0", "00", "000"]]]}], "HumanEval/114": [{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n\n    Args:\n        nums (list): List of integers.\n\n    Returns:\n        int: Minimum sum of any non-empty sub-array of nums.\n\n    Raises:\n        ValueError: If nums is empty.\n\n    \"\"\"\n\n    if not nums:\n        raise ValueError(\"nums cannot be empty\")\n\n    min_sum = float('inf')\n    current_sum = 0\n\n    for num in nums:\n        current_sum += num\n        min_sum = min(min_sum, current_sum)\n        if current_sum > 0:\n            current_sum = 0\n\n    return min_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/118": [{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    \"\"\"\n    Finds the closest vowel that stands between two consonants from the right side of the word.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        str: The closest vowel, or an empty string if no vowel is found.\n\n    Raises:\n        ValueError: If the input word is empty or contains non-alphabetic characters.\n\n    Examples:\n        >>> get_closest_vowel(\"yogurt\")\n        'u'\n        >>> get_closest_vowel(\"FULL\")\n        'U'\n        >>> get_closest_vowel(\"quick\")\n        ''\n        >>> get_closest_vowel(\"ab\")\n        ''\n    \"\"\"\n    if not word:\n        raise ValueError(\"Input word cannot be empty.\")\n\n    vowels = \"aeiouAEIOU\"\n    consonants = \"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\"\n\n    # Find the index of the last consonant\n    last_consonant_index = -1\n    for i in range(len(word) - 1, -1, -1):\n        if word[i] in consonants:\n            last_consonant_index = i\n            break\n\n    if last_consonant_index == -1:\n        return \"\"\n\n    # Find the closest vowel after the last consonant\n    closest_vowel = \"\"\n    for i in range(last_consonant_index + 1, len(word)):\n        if word[i] in vowels:\n            closest_vowel = word[i]\n            break\n\n    return closest_vowel", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["yogurt"]], "plus_fail_tests": [["hello"]]}], "HumanEval/100": [{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    stones = n\n    for i in range(n):\n        levels.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n    return levels", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[15]]}], "HumanEval/121": [{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of all odd elements in even positions.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> solution([5, 8, 7, 1])\n        12\n        >>> solution([3, 3, 3, 3, 3])\n        9\n        >>> solution([30, 13, 24, 321])\n        0\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    return sum(lst[1::2])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 8, 7, 1]]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "HumanEval/112": [{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    \"\"\"\n    This function takes two strings, s and c, as input. It deletes all characters in s that are equal to any character in c,\n    and then checks if the resulting string is a palindrome.\n\n    Args:\n        s (str): The input string.\n        c (str): The characters to be deleted.\n\n    Returns:\n        tuple: A tuple containing the resulting string and a boolean value indicating whether the resulting string is a palindrome.\n\n    Examples:\n        >>> reverse_delete(\"abcde\", \"ae\")\n        ('bcd', False)\n        >>> reverse_delete(\"abcdef\", \"b\")\n        ('acdef', False)\n        >>> reverse_delete(\"abcdedcba\", \"ab\")\n        ('cdedc', True)\n    \"\"\"\n\n    # Delete all characters in s that are equal to any character in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if the resulting string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/120": [{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-3, -4, 5], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 3]]}], "HumanEval/123": [{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize an empty list to store the odd numbers in the Collatz sequence\n    odd_collatz_nums = []\n\n    # Iterate through the Collatz sequence until reaching 1\n    while n != 1:\n        # If the current number is odd, add it to the list\n        if n % 2 != 0:\n            odd_collatz_nums.append(n)\n\n        # Calculate the next number in the Collatz sequence\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    # Add 1 to the list since it is the last number in the Collatz sequence\n    odd_collatz_nums.append(1)\n\n    # Sort the list in increasing order\n    odd_collatz_nums.sort()\n\n    return odd_collatz_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/125": [{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    \"\"\"\n    Splits a string of words into a list of words based on whitespace or commas.\n\n    Args:\n        txt (str): The input string to be split.\n\n    Returns:\n        list: A list of words split from the input string.\n\n    Raises:\n        ValueError: If the input string contains neither whitespace nor commas.\n\n    Examples:\n        >>> split_words(\"Hello world\")\n        ['Hello', 'world']\n        >>> split_words(\"Hello,world\")\n        ['Hello', 'world']\n        >>> split_words(\"abcdef\")\n        3\n    \"\"\"\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaabb"]], "plus_fail_tests": [["abc123"]]}], "HumanEval/122": [{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum\n            total_sum += arr[i]\n\n    return total_sum\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-99, -88, -77, -66, -55, -44, -33, -22, -11], 5]]}], "HumanEval/119": [{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    \"\"\"\n    Check if it is possible to concatenate the two strings in some order to form a good string.\n\n    Args:\n        lst (list): A list of two strings, each string consisting of open parentheses '(' or close parentheses ')'.\n\n    Returns:\n        str: 'Yes' if it is possible to form a good string, 'No' otherwise.\n\n    Raises:\n        ValueError: If the input list does not contain exactly two strings.\n\n    Examples:\n        >>> match_parens(['()(', ')'])\n        'Yes'\n        >>> match_parens([')', ')'])\n        'No'\n    \"\"\"\n\n    if len(lst) != 2:\n        raise ValueError(\"Input list must contain exactly two strings.\")\n\n    # Count the number of open and close parentheses in each string\n    open_count1, close_count1 = count_parens(lst[0])\n    open_count2, close_count2 = count_parens(lst[1])\n\n    # If the number of open parentheses in the first string is greater than the number of close parentheses in the second string,\n    # it is not possible to form a good string.\n    if open_count1 > close_count2:\n        return 'No'\n\n    # If the number of close parentheses in the first string is greater than the number of open parentheses in the second string,\n    # it is not possible to form a good string.\n    if close_count1 > open_count2:\n        return 'No'\n\n    # If the number of open parentheses in the first string is equal to the number of close parentheses in the second string,\n    # it is possible to form a good string by swapping the order of the strings.\n    if open_count1 == close_count2:\n        return 'Yes'\n\n    # If the number of open parentheses in the first string is less than the number of close parentheses in the second string,\n    # it is possible to form a good string by swapping the order of the strings and reversing the order of the first string.\n    if open_count1 < close_count2:\n        return 'Yes'\n\n    # If the number of open parentheses in the first string is greater than the number of close parentheses in the second string,\n    # it is possible to form a good string by swapping the order of the strings and reversing the order of the second string.\n    if open_count1 > close_count2:\n        return 'Yes'\ndef count_parens(string):\n    \"\"\"\n    Count the number of open and close parentheses in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple containing the count of open parentheses and close parentheses.\n    \"\"\"\n    open_count = 0\n    close_count = 0\n\n    for char in string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            close_count += 1\n\n    return open_count, close_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["()(", ")"]]], "plus_fail_tests": [[["(", "()())("]]]}], "HumanEval/124": [{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    \"\"\"\n    Validates a given date string and returns True if the date is valid, otherwise False.\n\n    The date is valid if all of the following rules are satisfied:\n    1. The date string is not empty.\n    2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12.\n       And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11.\n       And, the number of days is not less than 1 or higher than 29 for the month 2.\n    3. The months should not be less than 1 or higher than 12.\n    4. The date should be in the format: mm-dd-yyyy\n\n    Args:\n        date (str): The date string to be validated.\n\n    Returns:\n        bool: True if the date is valid, False otherwise.\n    \"\"\"\n\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for the given month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month in [4, 6, 9, 11]:\n        if day < 1 or day > 30:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n\n    # Check if the year is valid\n    if year < 0:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["06-04-202"]]}], "HumanEval/126": [{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    \"\"\"\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    --------\n    >>> is_sorted([5])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5])\n    False\n    >>> is_sorted([1, 2, 3, 4, 5, 6])\n    True\n    >>> is_sorted([1, 2, 3, 4, 5, 6, 7])\n    True\n    >>> is_sorted([1, 3, 2, 4, 5, 6, 7])\n    False\n    >>> is_sorted([1, 2, 2, 3, 3, 4])\n    True\n    >>> is_sorted([1, 2, 2, 2, 3, 4])\n    False\n    \"\"\"\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list has more than one duplicate of the same number\n    if len(lst) != len(set(lst)):\n        return False\n\n    # Check if the list is sorted in ascending order\n    for i in range(len(lst) - 1):\n        if lst[i] > lst[i + 1]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, 3, 3, 4]]], "plus_fail_tests": [[[1, 1, 2, 2, 3, 3, 4]]]}], "HumanEval/128": [{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    \"\"\"\n    You are given an array arr of integers and you need to return\n    sum of magnitudes of integers multiplied by product of all signs\n    of each number in the array, represented by 1, -1 or 0.\n    Note: return None for empty arr.\n\n    Example:\n    >>> prod_signs([1, 2, 2, -4]) == -9\n    >>> prod_signs([0, 1]) == 0\n    >>> prod_signs([]) == None\n    \"\"\"\n\n    if not arr:\n        return None\n\n    signs = [1 if num > 0 else -1 if num < 0 else 0 for num in arr]\n    magnitudes = [abs(num) for num in arr]\n\n    return sum(magnitudes) * sum(signs)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 2, -4]]], "plus_fail_tests": [[[-1, -2, -2, -4]]]}], "HumanEval/129": [{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    \"\"\"\n    Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n    each cell of the grid contains a value. Every integer in the range [1, N * N]\n    inclusive appears exactly once on the cells of the grid.\n\n    You have to find the minimum path of length k in the grid. You can start\n    from any cell, and in each step you can move to any of the neighbor cells,\n    in other words, you can go to cells which share an edge with you current\n    cell.\n    Please note that a path of length k means visiting exactly k cells (not\n    necessarily distinct).\n    You CANNOT go off the grid.\n    A path A (of length k) is considered less than a path B (of length k) if\n    after making the ordered lists of the values on the cells that A and B go\n    through (let's call them lst_A and lst_B), lst_A is lexicographically less\n    than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n    such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n    lst_A[j] = lst_B[j].\n    It is guaranteed that the answer is unique.\n    Return an ordered list of the values on the cells that the minimum path go through.\n\n    Examples:\n\n        Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n        Output: [1, 2, 1]\n\n        Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n        Output: [1]\n    \"\"\"\n\n    def dfs(row, col, path, visited):\n        # Base case: if the path is of length k, return the path\n        if len(path) == k:\n            return path\n\n        # Mark the current cell as visited\n        visited[row][col] = True\n\n        # Find the neighbors of the current cell\n        neighbors = []\n        if row > 0 and not visited[row - 1][col]:\n            neighbors.append((row - 1, col))\n        if row < n - 1 and not visited[row + 1][col]:\n            neighbors.append((row + 1, col))\n        if col > 0 and not visited[row][col - 1]:\n            neighbors.append((row, col - 1))\n        if col < n - 1 and not visited[row][col + 1]:\n            neighbors.append((row, col + 1))\n\n        # Recursively explore each neighbor\n        min_path = None\n        for neighbor in neighbors:\n            new_path = dfs(neighbor[0], neighbor[1], path + [grid[neighbor[0]][neighbor[1]]], visited)\n            if min_path is None or new_path < min_path:\n                min_path = new_path\n\n        # Mark the current cell as unvisited\n        visited[row][col] = False\n\n        return min_path\n\n    # Initialize the visited matrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 3]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1]]}], "HumanEval/117": [{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    \"\"\"\n    Given a string s and a natural number n, this function returns a list of all words from string s that contain exactly n consonants,\n    in the order these words appear in the string s. If the string s is empty, the function returns an empty list.\n\n    Args:\n        s (str): The input string.\n        n (int): The number of consonants each word in the string must have.\n\n    Returns:\n        list: A list of words from string s that contain exactly n consonants.\n\n    Raises:\n        ValueError: If n is not a non-negative integer.\n\n    Examples:\n        >>> select_words(\"Mary had a little lamb\", 4)\n        ['little']\n        >>> select_words(\"Mary had a little lamb\", 3)\n        ['Mary', 'lamb']\n        >>> select_words(\"simple white space\", 2)\n        []\n        >>> select_words(\"Hello world\", 4)\n        ['world']\n        >>> select_words(\"Uncle sam\", 3)\n        ['Uncle']\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    # Define a set of consonants\n    consonants = set(\"bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ\")\n\n    # Split the string into words\n    words = s.split()\n\n    # Filter the words that have exactly n consonants\n    selected_words = [word for word in words if len([char for char in word if char in consonants]) == n]\n\n    return selected_words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/127": [{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    \"\"\"\n    Determine whether the length of the intersection of two intervals is a prime number.\n\n    Args:\n        interval1 (tuple): The first interval, represented as a tuple of two integers.\n        interval2 (tuple): The second interval, represented as a tuple of two integers.\n\n    Returns:\n        str: \"YES\" if the length of the intersection is a prime number, \"NO\" otherwise.\n\n    Raises:\n        ValueError: If either interval1 or interval2 is not a tuple of two integers.\n\n    Examples:\n        >>> intersection((1, 2), (2, 3))\n        'NO'\n        >>> intersection((-1, 1), (0, 4))\n        'NO'\n        >>> intersection((-3, -1), (-5, 5))\n        'YES'\n    \"\"\"\n\n    # Check if interval1 and interval2 are valid tuples of two integers\n    if not isinstance(interval1, tuple) or not isinstance(interval2, tuple) or len(interval1) != 2 or len(interval2) != 2:\n        raise ValueError(\"Both interval1 and interval2 must be tuples of two integers.\")\n\n    # Check if the intervals intersect\n    if interval1[1] < interval2[0] or interval2[1] < interval1[0]:\n        return \"NO\"\n\n    # Calculate the intersection\n    intersection_start = max(interval1[0], interval2[0])\n    intersection_end = min(interval1[1], interval2[1])\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\ndef is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2], [2, 3]]], "plus_fail_tests": [[[0, 0], [0, 1]]]}], "HumanEval/25": [{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    Args:\n        n (int): The number to factorize.\n\n    Returns:\n        List[int]: List of prime factors of the given number.\n\n    Raises:\n        ValueError: If the input number is not a positive integer.\n\n    Examples:\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input number should be a positive integer.\")\n\n    factors = []\n    divisor = 2\n\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[123456791]]}], "HumanEval/60": [{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n\n    Parameters:\n    n (int): The number up to which the sum is calculated.\n\n    Returns:\n    int: The sum of numbers from 1 to n.\n\n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return sum(range(1, n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/96": [{"task_id": "HumanEval/96", "solution": "def count_up_to(n):\n    \"\"\"\n    Implement a function that takes an non-negative integer and returns an array of the first n\n    integers that are prime numbers and less than n.\n\n    Args:\n        n (int): The upper limit for the prime numbers.\n\n    Returns:\n        list: A list of prime numbers less than n.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> count_up_to(5)\n        [2, 3]\n        >>> count_up_to(11)\n        [2, 3, 5, 7]\n        >>> count_up_to(0)\n        []\n        >>> count_up_to(20)\n        [2, 3, 5, 7, 11, 13, 17, 19]\n        >>> count_up_to(1)\n        []\n        >>> count_up_to(18)\n        [2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    primes = []\n    for num in range(2, n):\n        is_prime = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(num)\n\n    return primes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/138": [{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n\n    Args:\n        n (int): The number to be evaluated.\n\n    Returns:\n        bool: True if the number can be written as the sum of exactly 4 positive even numbers, False otherwise.\n    \"\"\"\n    # Check if n is divisible by 4\n    if n % 4 != 0:\n        return False\n\n    # Check if n is divisible by 2 four times\n    count = 0\n    while n % 2 == 0:\n        n //= 2\n        count += 1\n\n    return count == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[8]], "plus_fail_tests": [[20]]}], "HumanEval/140": [{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    \"\"\"\n    Given a string text, replace all spaces in it with underscores, \n    and if a string has more than 2 consecutive spaces, \n    then replace all consecutive spaces with - \n    \n    fix_spaces(\"Example\") == \"Example\"\n    fix_spaces(\"Example 1\") == \"Example_1\"\n    fix_spaces(\" Example 2\") == \"_Example_2\"\n    fix_spaces(\" Example   3\") == \"_Example-3\"\n    \"\"\"\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n    \n    # Replace all consecutive spaces with -\n    while \"__\" in text:\n        text = text.replace(\"__\", \"_\")\n    \n    # Remove leading and trailing underscores\n    text = text.strip(\"_\")\n    \n    return text", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Mudasir Hanif "]], "plus_fail_tests": [["Hello,   world!"]]}], "HumanEval/132": [{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    \"\"\"\n    Check if a string contains a valid subsequence of brackets where at least one bracket is nested.\n\n    Args:\n        string (str): The input string containing only square brackets.\n\n    Returns:\n        bool: True if a valid subsequence of brackets is found, False otherwise.\n\n    Examples:\n        >>> is_nested('[[]]')\n        True\n        >>> is_nested('[]]]]]]][[[[[]')\n        False\n        >>> is_nested('[][]')\n        False\n        >>> is_nested('[]')\n        False\n        >>> is_nested('[[][]]')\n        True\n        >>> is_nested('[[]][[')\n        True\n    \"\"\"\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    return bool(stack)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["[[]]"]], "plus_fail_tests": [["[[]][]"]]}], "HumanEval/135": [{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    >>> can_arrange([1,2,4,3,5])\n    3\n    >>> can_arrange([1,2,3])\n    -1\n    \"\"\"\n    max_index = -1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            max_index = i-1\n    return max_index", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 3, 5]]], "plus_fail_tests": [[[5, 4, 3, 2, 1]]]}], "HumanEval/134": [{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    \"\"\"\n    Check if the last character of a given string is an alphabetical character and is not a part of a word.\n\n    Args:\n        txt (str): The input string to check.\n\n    Returns:\n        bool: True if the last character is an alphabetical character and is not a part of a word, False otherwise.\n\n    Examples:\n        >>> check_if_last_char_is_a_letter(\"apple pie\")\n        False\n        >>> check_if_last_char_is_a_letter(\"apple pi e\")\n        True\n        >>> check_if_last_char_is_a_letter(\"apple pi e \")\n        False\n        >>> check_if_last_char_is_a_letter(\"\")\n        False\n    \"\"\"\n    if not txt:\n        return False\n\n    last_char = txt[-1]\n    if last_char.isalpha() and txt.rstrip().endswith(last_char):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["apple"]], "plus_fail_tests": [["pUMPKIN PIE"]]}], "HumanEval/131": [{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n\n    Args:\n        n (int): The positive integer to process.\n\n    Returns:\n        int: The product of the odd digits in the given integer.\n\n    Examples:\n        >>> digits(1)\n        1\n        >>> digits(4)\n        0\n        >>> digits(235)\n        15\n    \"\"\"\n    # Convert the integer to a string to access individual digits\n    digits = str(n)\n\n    # Initialize the product to 1\n    product = 1\n\n    # Iterate over each digit in the string\n    for digit in digits:\n        # Convert the digit back to an integer\n        digit = int(digit)\n\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n\n    # Return the product\n    return product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2468]], "plus_fail_tests": [[246]]}], "HumanEval/137": [{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    \"\"\"\n    Create a function that takes integers, floats, or strings representing\n    real numbers, and returns the larger variable in its given variable type.\n    Return None if the values are equal.\n    Note: If a real number is represented as a string, the floating point might be . or ,\n\n    compare_one(1, 2.5) \u279e 2.5\n    compare_one(1, \"2,3\") \u279e \"2,3\"\n    compare_one(\"5,1\", \"6\") \u279e \"6\"\n    compare_one(\"1\", 1) \u279e None\n    \"\"\"\n\n    # Convert strings to floats if necessary\n    if isinstance(a, str):\n        a = float(a.replace(\",\", \".\"))\n    if isinstance(b, str):\n        b = float(b.replace(\",\", \".\"))\n\n    # Compare the variables and return the larger one\n    if a > b:\n        return a\n    elif b > a:\n        return b\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, "2,3"]], "plus_fail_tests": [["-4,1", "-4.0"]]}], "HumanEval/133": [{"task_id": "HumanEval/133", "solution": "def sum_squares(lst):\n    \"\"\"\n    Calculates the sum of squared numbers in a given list,\n    rounding each element in the list to the upper int(Ceiling) first.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of squared numbers in the given list.\n\n    Examples:\n        >>> sum_squares([1, 2, 3])\n        14\n        >>> sum_squares([1, 4, 9])\n        98\n        >>> sum_squares([1, 3, 5, 7])\n        84\n        >>> sum_squares([1.4, 4.2, 0])\n        29\n        >>> sum_squares([-2.4, 1, 1])\n        6\n    \"\"\"\n    squared_lst = [int(round(num ** 2)) for num in lst]\n    return sum(squared_lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1.4, 4.2, 0]]], "plus_fail_tests": [[[0, 3.3, 7.7, -2.2]]]}], "HumanEval/139": [{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"\n    Calculates the Brazilian factorial of a given number.\n\n    The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n * (n-1) * (n-2) * ... * 1\n\n    Parameters:\n    n (int): The number for which the Brazilian factorial is to be calculated.\n\n    Returns:\n    int: The Brazilian factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is not a positive integer.\n\n    Examples:\n    >>> special_factorial(4)\n    288\n    >>> special_factorial(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Input number must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input number must be a positive integer.\")\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[3]]}], "HumanEval/142": [{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    sum_of_squares = 0\n    for i, num in enumerate(lst):\n        if i % 3 == 0 and i % 4 != 0:\n            sum_of_squares += num ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            sum_of_squares += num ** 3\n        else:\n            sum_of_squares += num\n    return sum_of_squares", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, -1, -1, -1, -1, -1, -1, -1, -1]]], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12]]]}], "HumanEval/136": [{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n    negative_integers = [x for x in lst if x < 0]\n    positive_integers = [x for x in lst if x > 0]\n\n    if not negative_integers:\n        largest_negative = None\n    else:\n        largest_negative = max(negative_integers)\n\n    if not positive_integers:\n        smallest_positive = None\n    else:\n        smallest_positive = min(positive_integers)\n\n    return largest_negative, smallest_positive", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/145": [{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    # Helper function to calculate the sum of digits\n    def sum_of_digits(num):\n        return sum(int(digit) for digit in str(abs(num)))\n\n    # Sort the list based on the sum of digits\n    sorted_nums = sorted(nums, key=sum_of_digits)\n\n    # If there are multiple items with the same sum of digits,\n    # sort them based on their index in the original list\n    sorted_nums.sort(key=nums.index)\n\n    return sorted_nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 11, -1, -11, -12]]], "plus_fail_tests": [[[-5, -12, 9, 15]]]}], "HumanEval/143": [{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence):\n    \"\"\"\n    Return a string containing the words from the original sentence whose lengths are prime numbers.\n\n    Parameters:\n    sentence (str): The input sentence.\n\n    Returns:\n    str: A string containing the words from the original sentence whose lengths are prime numbers.\n    \"\"\"\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/153": [{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension in a list of extensions and returns a string in the format 'ClassName.StrongestExtensionName'.\n\n    Parameters:\n    class_name (str): The name of the class.\n    extensions (list): A list of extension names.\n\n    Returns:\n    str: The strongest extension in the format 'ClassName.StrongestExtensionName'.\n\n    \"\"\"\n\n    # Initialize variables to store the strongest extension and its strength\n    strongest_extension = ''\n    strongest_strength = float('-inf')\n\n    # Iterate over each extension in the list\n    for extension in extensions:\n        # Calculate the strength of the extension\n        strength = sum(1 for char in extension if char.isupper()) - sum(1 for char in extension if char.islower())\n\n        # If the strength is greater than the current strongest strength, update the strongest extension and strength\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    # Return the strongest extension in the format 'ClassName.StrongestExtensionName'\n    return f\"{class_name}.{strongest_extension}\"", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/156": [{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    True\n    >>> int_to_mini_roman(152) == 'clii'\n    True\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    True\n    \"\"\"\n\n    # Define the mapping of integers to roman numerals\n    roman_mapping = {\n        1000: 'M',\n        900: 'CM',\n        500: 'D',\n        400: 'CD',\n        100: 'C',\n        90: 'XC',\n        50: 'L',\n        40: 'XL',\n        10: 'X',\n        9: 'IX',\n        5: 'V',\n        4: 'IV',\n        1: 'I'\n    }\n\n    # Initialize an empty string to store the roman numeral\n    roman_numeral = ''\n\n    # Iterate through the roman_mapping in descending order of keys\n    for value, symbol in roman_mapping.items():\n        # Repeat the current symbol as many times as possible\n        while number >= value:\n            roman_numeral += symbol\n            number -= value\n\n    return roman_numeral.lower()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/141": [{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    \"\"\"\n    Check if a file name is valid.\n\n    A file's name is considered to be valid if and only if all the following conditions\n    are met:\n    - There should not be more than three digits ('0'-'9') in the file's name.\n    - The file's name contains exactly one dot '.'\n    - The substring before the dot should not be empty, and it starts with a letter from\n      the latin alphapet ('a'-'z' and 'A'-'Z').\n    - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n\n    Args:\n        file_name (str): The file name to be checked.\n\n    Returns:\n        str: 'Yes' if the file name is valid, 'No' otherwise.\n    \"\"\"\n    # Check if there are more than three digits in the file name\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into the substring before and after the dot\n    substring_before, substring_after = file_name.split('.')\n\n    # Check if the substring before the dot is empty or does not start with a letter\n    if not substring_before or not substring_before[0].isalpha():\n        return 'No'\n\n    # Check if the substring after the dot is not one of the allowed extensions\n    if substring_after not in ['txt', 'exe', 'dll']:\n        return 'No'\n\n    return 'Yes'", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/160": [{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    \"\"\"\n    Given two lists operator, and operand. The first list has basic algebra operations, and \n    the second list is a list of integers. Use the two given lists to build the algebric \n    expression and return the evaluation of this expression.\n\n    The basic algebra operations:\n    Addition ( + ) \n    Subtraction ( - ) \n    Multiplication ( * ) \n    Floor division ( // ) \n    Exponentiation ( ** ) \n\n    Example:\n    operator['+', '*', '-']\n    array = [2, 3, 4, 5]\n    result = 2 + 3 * 4 - 5\n    => result = 9\n\n    Note:\n        The length of operator list is equal to the length of operand list minus one.\n        Operand is a list of of non-negative integers.\n        Operator list has at least one operator, and operand list has at least two operands.\n\n    \"\"\"\n\n    # Check if the length of operator list is equal to the length of operand list minus one\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Length of operator list is not equal to the length of operand list minus one.\")\n\n    # Check if operand list has at least two operands\n    if len(operand) < 2:\n        raise ValueError(\"Operand list has less than two operands.\")\n\n    # Check if operator list has at least one operator\n    if len(operator) < 1:\n        raise ValueError(\"Operator list has less than one operator.\")\n\n    # Check if operand list has only non-negative integers\n    if not all(isinstance(num, int) and num >= 0 for num in operand):\n        raise ValueError(\"Operand list has non-negative integers.\")\n\n    # Evaluate the expression using the given operator and operand lists\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i+1]\n        elif operator[i] == '-':\n            result -= operand[i+1]\n        elif operator[i] == '*':\n            result *= operand[i+1]\n        elif operator[i] == '//':\n            result //= operand[i+1]\n        elif operator[i] == '**':\n            result **= operand[i+1]\n        else:\n            raise ValueError(\"Invalid operator.\")\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["+", "*", "-"], [2, 3, 4, 5]]], "plus_fail_tests": [[["+", "-", "*", "//"], [5, 2, 3, 4, 7]]]}], "HumanEval/150": [{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Args:\n        n (int): The number to check.\n        x (int): The value to return if n is prime.\n        y (int): The value to return if n is not prime.\n\n    Returns:\n        int: The value of x if n is prime, otherwise the value of y.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/144": [{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    \"\"\"\n    Simplifies the expression x * n.\n\n    Args:\n        x (str): The first fraction in the expression.\n        n (str): The second fraction in the expression.\n\n    Returns:\n        bool: True if x * n evaluates to a whole number, False otherwise.\n\n    Raises:\n        ValueError: If either x or n is not a valid fraction.\n\n    Examples:\n        >>> simplify(\"1/5\", \"5/1\")\n        True\n        >>> simplify(\"1/6\", \"2/1\")\n        False\n        >>> simplify(\"7/10\", \"10/2\")\n        False\n    \"\"\"\n\n    def parse_fraction(fraction):\n        \"\"\"\n        Parses a fraction string and returns its numerator and denominator.\n\n        Args:\n            fraction (str): The fraction string to parse.\n\n        Returns:\n            tuple: A tuple containing the numerator and denominator of the fraction.\n\n        Raises:\n            ValueError: If the fraction is not in the correct format.\n        \"\"\"\n        try:\n            numerator, denominator = map(int, fraction.split('/'))\n            return numerator, denominator\n        except ValueError:\n            raise ValueError(\"Invalid fraction format. Expected '<numerator>/<denominator>'.\")\n\n    def gcd(a, b):\n        \"\"\"\n        Calculates the greatest common divisor (GCD) of two numbers.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            int: The GCD of a and b.\n        \"\"\"\n        while b:\n            a, b = b, a % b\n        return a\n\n    def simplify_fraction(numerator, denominator):\n        \"\"\"\n        Simplifies a fraction by dividing both the numerator and denominator by their GCD.\n\n        Args:\n            numerator (int): The numerator of the fraction.\n            denominator (int): The denominator of the fraction.\n\n        Returns:\n            tuple: A tuple containing the simplified numerator and denominator.\n        \"\"\"\n        gcd_value = gcd(numerator, denominator)\n        return numerator // gcd_value, denominator // gcd_value\n\n    x_numerator, x_denominator = parse_fraction(x)\n    n_numerator, n_denominator = parse_fraction(n)\n\n    simplified_numerator = x_numerator * n_numerator\n    simplified_denominator = x_denominator * n_denominator\n\n    simplified_numerator, simplified_denominator = simplify_fraction(simplified_numerator, simplified_denominator)\n\n    return simplified_denominator == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/151": [{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of squares of the odd numbers in the list.\n\n    Examples:\n        >>> double_the_difference([1, 3, 2, 0])\n        10\n        >>> double_the_difference([-1, -2, 0])\n        0\n        >>> double_the_difference([9, -2])\n        81\n        >>> double_the_difference([0])\n        0\n    \"\"\"\n    # Initialize the sum to 0\n    sum_of_squares = 0\n\n    # Iterate over each number in the list\n    for num in lst:\n        # Check if the number is an integer and positive\n        if isinstance(num, int) and num > 0:\n            # Check if the number is odd\n            if num % 2 != 0:\n                # Add the square of the number to the sum\n                sum_of_squares += num ** 2\n\n    return sum_of_squares", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/159": [{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    \"\"\"\n    You're a hungry rabbit, and you already have eaten a certain number of carrots,\n    but now you need to eat more carrots to complete the day's meals.\n    you should return an array of [ total number of eaten carrots after your meals,\n                                    the number of carrots left after your meals ]\n    if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n    \n    Example:\n    * eat(5, 6, 10) -> [11, 4]\n    * eat(4, 8, 9) -> [12, 1]\n    * eat(1, 10, 10) -> [11, 0]\n    * eat(2, 11, 5) -> [7, 0]\n    \n    Variables:\n    @number : integer\n        the number of carrots that you have eaten.\n    @need : integer\n        the number of carrots that you need to eat.\n    @remaining : integer\n        the number of remaining carrots thet exist in stock\n    \n    Constrain:\n    * 0 <= number <= 1000\n    * 0 <= need <= 1000\n    * 0 <= remaining <= 1000\n\n    Have fun :)\n    \"\"\"\n    total_eaten = number + min(need, remaining)\n    remaining_carrots = remaining - min(need, remaining)\n    return [total_eaten, remaining_carrots]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/161": [{"task_id": "HumanEval/161", "solution": "def solve(s):\n    \"\"\"\n    Reverse the case of letters in a string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with reversed case of letters.\n\n    Examples:\n        >>> solve(\"1234\")\n        '4321'\n        >>> solve(\"ab\")\n        'AB'\n        >>> solve(\"#a@C\")\n        '#A@c'\n    \"\"\"\n    result = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                result += char.upper()\n            else:\n                result += char.lower()\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1234"]], "plus_fail_tests": [["!!!!1234!!!!"]]}], "HumanEval/152": [{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    \"\"\"\n    Compare the results of a number of matches.\n\n    Args:\n        game (list): A list of scores for each match.\n        guess (list): A list of guesses for each match.\n\n    Returns:\n        list: A list of the absolute differences between the guesses and scores.\n\n    Raises:\n        ValueError: If the lengths of game and guess are not equal.\n\n    Examples:\n        >>> compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])\n        [0, 0, 0, 0, 3, 3]\n        >>> compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2])\n        [4, 4, 1, 0, 0, 6]\n    \"\"\"\n    if len(game) != len(guess):\n        raise ValueError(\"The lengths of game and guess must be equal.\")\n\n    differences = []\n    for i in range(len(game)):\n        differences.append(abs(game[i] - guess[i]))\n\n    return differences", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/148": [{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    \"\"\"\n    There are eight planets in our solar system: the closerst to the Sun \n    is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn, \n    Uranus, Neptune.\n\n    Write a function that takes two planet names as strings planet1 and planet2. \n    The function should return a tuple containing all planets whose orbits are \n    located between the orbit of planet1 and the orbit of planet2, sorted by \n    the proximity to the sun. \n\n    The function should return an empty tuple if planet1 or planet2\n    are not correct planet names. \n\n    Examples\n    --------\n    >>> bf(\"Jupiter\", \"Neptune\")\n    ('Saturn', 'Uranus')\n    >>> bf(\"Earth\", \"Mercury\")\n    ('Venus',)\n    >>> bf(\"Mercury\", \"Uranus\")\n    ('Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn')\n    \"\"\"\n\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n\n    planet1_index = planets.index(planet1)\n    planet2_index = planets.index(planet2)\n\n    if planet1_index < planet2_index:\n        return tuple(planets[planet1_index + 1:planet2_index])\n    else:\n        return tuple(planets[planet2_index + 1:planet1_index])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/146": [{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements in the array that are greater than 10 and both first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The number of elements in the array that satisfy the condition.\n\n    Examples:\n    >>> specialFilter([15, -73, 14, -15])\n    1\n    >>> specialFilter([33, -2, -3, 45, 21, 109])\n    2\n    \"\"\"\n\n    def is_odd_digits(num):\n        \"\"\"\n        This helper function checks if the first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n        Parameters:\n        num (int): A number.\n\n        Returns:\n        bool: True if the first and last digits of the number are odd, False otherwise.\n        \"\"\"\n        num_str = str(num)\n        first_digit = int(num_str[0])\n        last_digit = int(num_str[-1])\n        return first_digit % 2 != 0 and last_digit % 2 != 0\n\n    count = 0\n    for num in nums:\n        if num > 10 and is_odd_digits(num):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/155": [{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Args:\n        num (int): The integer to count the even and odd digits in.\n\n    Returns:\n        tuple: A tuple containing the count of even and odd digits respectively.\n\n    Examples:\n        >>> even_odd_count(-12)\n        (1, 1)\n        >>> even_odd_count(123)\n        (1, 2)\n    \"\"\"\n    # Convert the number to a positive integer\n    num = abs(num)\n\n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Iterate through each digit in the number\n    while num > 0:\n        digit = num % 10\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n        num //= 10\n\n    return even_count, odd_count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0]]}], "HumanEval/157": [{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    \"\"\"\n    Check if a triangle with sides a, b, and c is a right-angled triangle.\n\n    Parameters:\n    a (float): Length of side a of the triangle.\n    b (float): Length of side b of the triangle.\n    c (float): Length of side c of the triangle.\n\n    Returns:\n    bool: True if the triangle is a right-angled triangle, False otherwise.\n    \"\"\"\n    # Check if the triangle is valid\n    if a <= 0 or b <= 0 or c <= 0:\n        return False\n\n    # Calculate the squares of the sides\n    a_squared = a ** 2\n    b_squared = b ** 2\n    c_squared = c ** 2\n\n    # Check if any two sides are equal\n    if a_squared == b_squared + c_squared or b_squared == a_squared + c_squared or c_squared == a_squared + b_squared:\n        return True\n\n    # Check if any two sides are perpendicular to the third side\n    if a_squared + b_squared == c_squared or a_squared + c_squared == b_squared or b_squared + c_squared == a_squared:\n        return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/158": [{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    \"\"\"\n    Find the word with the maximum number of unique characters.\n\n    Args:\n        words (list): A list of strings.\n\n    Returns:\n        str: The word with the maximum number of unique characters.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_max([\"name\", \"of\", \"string\"])\n        'string'\n        >>> find_max([\"name\", \"enam\", \"game\"])\n        'enam'\n        >>> find_max([\"aaaaaaa\", \"bb\", \"cc\"])\n        'aaaaaaa'\n    \"\"\"\n    if not words:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_unique_chars = 0\n    max_word = \"\"\n\n    for word in words:\n        unique_chars = set(word)\n        num_unique_chars = len(unique_chars)\n\n        if num_unique_chars > max_unique_chars:\n            max_unique_chars = num_unique_chars\n            max_word = word\n        elif num_unique_chars == max_unique_chars and word < max_word:\n            max_word = word\n\n    return max_word", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/149": [{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    \"\"\"\n    This function accepts a list of strings as a parameter, deletes the strings that have odd lengths from it,\n    and returns the resulted list with a sorted order. The list is always a list of strings and never an array of numbers,\n    and it may contain duplicates. The order of the list should be ascending by length of each word, and you should\n    return the list sorted by that rule. If two words have the same length, sort the list alphabetically.\n    The function should return a list of strings in sorted order.\n\n    Args:\n        lst (list): A list of strings.\n\n    Returns:\n        list: A list of strings sorted by length and alphabetically.\n\n    Examples:\n        >>> sorted_list_sum([\"aa\", \"a\", \"aaa\"])\n        ['aa']\n        >>> sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"])\n        ['ab', 'cd']\n    \"\"\"\n\n    # Filter out strings with odd lengths\n    filtered_lst = [word for word in lst if len(word) % 2 == 0]\n\n    # Sort the list by length and alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/163": [{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a and b are positive integers\n    if a < 0 or b < 0:\n        raise ValueError(\"Both a and b must be positive integers.\")\n\n    # Ensure a is smaller than or equal to b\n    if a > b:\n        a, b = b, a\n\n    # Generate even digits between a and b\n    even_digits = [num for num in range(a, b+1) if num % 2 == 0]\n\n    return even_digits", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 10]], "plus_fail_tests": [[6, 12]]}], "HumanEval/162": [{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/154": [{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    Check if the second word or any of its rotations is a substring in the first word.\n\n    Args:\n        a (str): The first word.\n        b (str): The second word.\n\n    Returns:\n        bool: True if the second word or any of its rotations is a substring in the first word, False otherwise.\n    \"\"\"\n    # Check if the second word is a substring of the first word\n    if b in a:\n        return True\n\n    # Check if any rotation of the second word is a substring of the first word\n    for i in range(1, len(b)):\n        rotated_b = b[i:] + b[:i]\n        if rotated_b in a:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/24": [{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> largest_divisor(15)\n        5\n        >>> largest_divisor(24)\n        12\n        >>> largest_divisor(1)\n        1\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    for i in range(n - 1, 0, -1):\n        if n % i == 0:\n            return i\n\n    return 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/130": [{"task_id": "HumanEval/130", "solution": "def tri(n):\n    \"\"\"\n    Generates a list of the first n+1 numbers of the Tribonacci sequence.\n\n    Parameters:\n    n (int): The number of elements in the Tribonacci sequence to generate.\n\n    Returns:\n    list: A list of the first n+1 numbers of the Tribonacci sequence.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    tribonacci_sequence = [1, 3, 2]\n\n    if n == 0:\n        return []\n    elif n == 1:\n        return [1]\n    elif n == 2:\n        return [1, 3]\n    elif n == 3:\n        return [1, 3, 2]\n\n    while len(tribonacci_sequence) < n + 1:\n        next_number = tribonacci_sequence[-1] + tribonacci_sequence[-2] + tribonacci_sequence[-3]\n        tribonacci_sequence.append(next_number)\n\n    return tribonacci_sequence[:n+1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[2]]}], "HumanEval/36": [{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        int: The number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> fizz_buzz(50)\n        0\n        >>> fizz_buzz(78)\n        2\n        >>> fizz_buzz(79)\n        3\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/147": [{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    \"\"\"\n    You are given a positive integer n. You have to create an integer array a of length n.\n    For each i (1 \u2264 i \u2264 n), the value of a[i] = i * i - i + 1.\n    Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n    and a[i] + a[j] + a[k] is a multiple of 3.\n\n    Example :\n        Input: n = 5\n        Output: 1\n        Explanation: \n        a = [1, 3, 7, 13, 21]\n        The only valid triple is (1, 7, 13).\n    \"\"\"\n\n    # Create the array a\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n\n    # Initialize the count of triples\n    count = 0\n\n    # Iterate through the array a\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                # Check if the triple satisfies the condition\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "HumanEval/15": [{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    Args:\n        n (int): The upper limit of the sequence.\n\n    Returns:\n        str: A string containing space-delimited numbers from 0 to n.\n\n    Examples:\n        >>> string_sequence(0)\n        '0'\n        >>> string_sequence(5)\n        '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}