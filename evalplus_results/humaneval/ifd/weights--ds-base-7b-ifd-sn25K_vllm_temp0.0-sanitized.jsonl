{"task_id": "HumanEval/0", "solution": "from typing import List\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    \"\"\" Check if in given list of numbers, are any two numbers closer to each other than\n    given threshold.\n\n    Args:\n        numbers (List[float]): List of numbers to check.\n        threshold (float): Maximum distance between two numbers to consider them as close.\n\n    Returns:\n        bool: True if any two numbers in the list are closer than the given threshold, False otherwise.\n\n    Examples:\n        >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n        False\n        >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n        True\n    \"\"\"\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if abs(numbers[i] - numbers[j]) <= threshold:\n                return True\n    return False"}
{"task_id": "HumanEval/1", "solution": "from typing import List\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\"\n    Input to this function is a string containing multiple groups of nested parentheses.\n    Your goal is to separate those groups into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other.\n    Ignore any spaces in the input string.\n\n    Args:\n        paren_string (str): The input string containing groups of nested parentheses.\n\n    Returns:\n        List[str]: A list of separate parentheses groups.\n\n    Examples:\n        >>> separate_paren_groups('( ) (( )) (( )( ))')\n        ['()', '(())', '(()())']\n    \"\"\"\n\n    groups = []\n    current_group = ''\n    open_count = 0\n\n    for char in paren_string:\n        if char == '(':\n            open_count += 1\n        elif char == ')':\n            open_count -= 1\n\n        current_group += char\n\n        if open_count == 0 and current_group.strip() != '':\n            groups.append(current_group.strip())\n            current_group = ''\n\n    return groups"}
{"task_id": "HumanEval/2", "solution": "def truncate_number(number: float) -> float:\n    \"\"\"\n    Given a positive floating point number, it can be decomposed into\n    an integer part (largest integer smaller than given number) and decimals\n    (leftover part always smaller than 1).\n\n    Return the decimal part of the number.\n\n    Parameters:\n    number (float): The positive floating point number to truncate.\n\n    Returns:\n    float: The decimal part of the number.\n\n    Examples:\n    >>> truncate_number(3.5)\n    0.5\n    >>> truncate_number(10.25)\n    0.25\n    >>> truncate_number(0.7)\n    0.7\n    \"\"\"\n    return number % 1"}
{"task_id": "HumanEval/3", "solution": "from typing import List\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\"\n    This function takes a list of deposit and withdrawal operations on a bank account and checks if at any point the balance falls below zero.\n\n    Args:\n        operations (List[int]): A list of integers representing the deposit and withdrawal operations on the bank account.\n\n    Returns:\n        bool: True if the balance falls below zero at any point, False otherwise.\n\n    Examples:\n        >>> below_zero([1, 2, 3])\n        False\n        >>> below_zero([1, 2, -4, 5])\n        True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False"}
{"task_id": "HumanEval/4", "solution": "from typing import List\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n    mean = sum(numbers) / len(numbers)\n    mad = sum(abs(x - mean) for x in numbers) / len(numbers)\n    return mad"}
{"task_id": "HumanEval/5", "solution": "from typing import List\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    \"\"\"\n    Insert a number 'delimeter' between every two consecutive elements of input list `numbers'.\n\n    Args:\n        numbers (List[int]): The input list of integers.\n        delimeter (int): The number to be inserted between consecutive elements.\n\n    Returns:\n        List[int]: The modified list with 'delimeter' inserted between consecutive elements.\n\n    Examples:\n        >>> intersperse([], 4)\n        []\n        >>> intersperse([1, 2, 3], 4)\n        [1, 4, 2, 4, 3]\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i])\n        result.append(delimeter)\n    result.append(numbers[-1])\n    return result"}
{"task_id": "HumanEval/6", "solution": "from typing import List\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    \"\"\" Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n    For each of the group, output the deepest level of nesting of parentheses.\n    E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n    >>> parse_nested_parens('(()()) ((())) () ((())()())')\n    [2, 3, 1, 3]\n    \"\"\"\n\n    def find_deepest_level(group: str) -> int:\n        \"\"\" Helper function to find the deepest level of nesting for a single group of parentheses.\n\n        >>> find_deepest_level('(()())')\n        2\n        >>> find_deepest_level('((()))')\n        3\n        >>> find_deepest_level('()')\n        1\n        >>> find_deepest_level('((())()())')\n        3\n        \"\"\"\n        level = 0\n        max_level = 0\n        for char in group:\n            if char == '(':\n                level += 1\n                max_level = max(max_level, level)\n            elif char == ')':\n                level -= 1\n        return max_level\n\n    groups = paren_string.split()\n    return [find_deepest_level(group) for group in groups]"}
{"task_id": "HumanEval/7", "solution": "from typing import List\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    \n    Args:\n        strings (List[str]): The list of strings to filter.\n        substring (str): The substring to check for in the strings.\n    \n    Returns:\n        List[str]: The filtered list of strings that contain the given substring.\n    \"\"\"\n    return [s for s in strings if substring in s]"}
{"task_id": "HumanEval/8", "solution": "from typing import List, Tuple\ndef sum_product(numbers: List[int]) -> Tuple[int, int]:\n    \"\"\"\n    For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n    Empty sum should be equal to 0 and empty product should be equal to 1.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        Tuple[int, int]: A tuple containing the sum and product of the integers in the list.\n\n    Examples:\n        >>> sum_product([])\n        (0, 1)\n        >>> sum_product([1, 2, 3, 4])\n        (10, 24)\n    \"\"\"\n    if not numbers:\n        return (0, 1)\n\n    sum_result = 0\n    product_result = 1\n\n    for num in numbers:\n        sum_result += num\n        product_result *= num\n\n    return (sum_result, product_result)"}
{"task_id": "HumanEval/9", "solution": "from typing import List, Tuple\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n\n    Args:\n        numbers (List[int]): The input list of integers.\n\n    Returns:\n        List[int]: The list of rolling maximum elements.\n\n    Examples:\n        >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n        [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    rolling_max_list = []\n    current_max = float('-inf')\n\n    for num in numbers:\n        current_max = max(current_max, num)\n        rolling_max_list.append(current_max)\n\n    return rolling_max_list"}
{"task_id": "HumanEval/10", "solution": "def is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\ndef make_palindrome(string: str) -> str:\n    \"\"\" Find the shortest palindrome that begins with a supplied string.\n    Algorithm idea is simple:\n    - Find the longest postfix of supplied string that is a palindrome.\n    - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n    >>> make_palindrome('')\n    ''\n    >>> make_palindrome('cat')\n    'catac'\n    >>> make_palindrome('cata')\n    'catac'\n    \"\"\"\n    if not string:\n        return ''\n\n    # Find the longest postfix that is a palindrome\n    for i in range(len(string) - 1, -1, -1):\n        if is_palindrome(string[i:]):\n            break\n\n    # Append the reverse of a string prefix before the palindromic suffix\n    return string + string[:i][::-1]"}
{"task_id": "HumanEval/11", "solution": "from typing import List\ndef string_xor(a: str, b: str) -> str:\n    \"\"\"\n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform binary XOR on these inputs and return result also as a string.\n\n    Args:\n        a (str): The first input string.\n        b (str): The second input string.\n\n    Returns:\n        str: The XOR result as a string.\n\n    Raises:\n        ValueError: If the input strings have different lengths.\n\n    Examples:\n        >>> string_xor('010', '110')\n        '100'\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input strings must have the same length\")\n\n    result = \"\"\n    for i in range(len(a)):\n        result += str(int(a[i]) ^ int(b[i]))\n\n    return result"}
{"task_id": "HumanEval/12", "solution": "from typing import List, Optional\ndef longest(strings: List[str]) -> Optional[str]:\n    \"\"\"\n    Out of list of strings, return the longest one. Return the first one in case of multiple\n    strings of the same length. Return None in case the input list is empty.\n\n    Args:\n        strings (List[str]): A list of strings.\n\n    Returns:\n        Optional[str]: The longest string in the list, or None if the list is empty.\n\n    Examples:\n        >>> longest([])\n        None\n\n        >>> longest(['a', 'b', 'c'])\n        'a'\n\n        >>> longest(['a', 'bb', 'ccc'])\n        'ccc'\n    \"\"\"\n    if not strings:\n        return None\n\n    longest_string = strings[0]\n    for string in strings:\n        if len(string) > len(longest_string):\n            longest_string = string\n\n    return longest_string"}
{"task_id": "HumanEval/13", "solution": "def greatest_common_divisor(a: int, b: int) -> int:\n    \"\"\"\n    Return the greatest common divisor (GCD) of two integers a and b.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The greatest common divisor of a and b.\n\n    Examples:\n    >>> greatest_common_divisor(3, 5)\n    1\n    >>> greatest_common_divisor(25, 15)\n    5\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a"}
{"task_id": "HumanEval/14", "solution": "from typing import List\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\"\n    Return list of all prefixes from shortest to longest of the input string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        List[str]: A list of all prefixes of the input string.\n\n    Examples:\n        >>> all_prefixes('abc')\n        ['a', 'ab', 'abc']\n    \"\"\"\n    prefixes = []\n    for i in range(1, len(string) + 1):\n        prefixes.append(string[:i])\n    return prefixes"}
{"task_id": "HumanEval/15", "solution": "def string_sequence(n: int) -> str:\n    \"\"\"\n    Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n\n    Parameters:\n    n (int): The maximum number in the sequence.\n\n    Returns:\n    str: A string containing space-delimited numbers from 0 to n.\n\n    Examples:\n    >>> string_sequence(0)\n    '0'\n    >>> string_sequence(5)\n    '0 1 2 3 4 5'\n    \"\"\"\n    return ' '.join(str(i) for i in range(n+1))"}
{"task_id": "HumanEval/16", "solution": "def count_distinct_characters(string: str) -> int:\n    \"\"\"\n    Given a string, find out how many distinct characters (regardless of case) does it consist of.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of distinct characters in the string.\n\n    Examples:\n        >>> count_distinct_characters('xyzXYZ')\n        3\n        >>> count_distinct_characters('Jerry')\n        4\n    \"\"\"\n    # Convert the string to lowercase to ignore case sensitivity\n    string = string.lower()\n\n    # Create a set to store distinct characters\n    distinct_chars = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # Add the character to the set\n        distinct_chars.add(char)\n\n    # Return the count of distinct characters\n    return len(distinct_chars)"}
{"task_id": "HumanEval/17", "solution": "from typing import List\ndef parse_music(music_string: str) -> List[int]:\n    \"\"\" Input to this function is a string representing musical notes in a special ASCII format.\n    Your task is to parse this string and return list of integers corresponding to how many beats does each\n    not last.\n\n    Here is a legend:\n    'o' - whole note, lasts four beats\n    'o|' - half note, lasts two beats\n    '.|' - quater note, lasts one beat\n\n    >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n    [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n    \"\"\"\n\n    # Initialize an empty list to store the durations\n    durations = []\n\n    # Split the music string into individual notes\n    notes = music_string.split()\n\n    # Iterate over each note\n    for note in notes:\n        # Determine the duration based on the note\n        if note == 'o':\n            duration = 4\n        elif note == 'o|':\n            duration = 2\n        elif note == '.|':\n            duration = 1\n\n        # Append the duration to the durations list\n        durations.append(duration)\n\n    return durations"}
{"task_id": "HumanEval/18", "solution": "def how_many_times(string: str, substring: str) -> int:\n    \"\"\" Find how many times a given substring can be found in the original string. Count overlaping cases.\n    \n    Args:\n        string (str): The original string to search in.\n        substring (str): The substring to search for.\n    \n    Returns:\n        int: The number of times the substring is found in the string.\n    \"\"\"\n    count = 0\n    start = 0\n    while True:\n        index = string.find(substring, start)\n        if index == -1:\n            break\n        count += 1\n        start = index + 1\n    return count"}
{"task_id": "HumanEval/19", "solution": "from typing import List\ndef sort_numbers(numbers: str) -> str:\n    \"\"\"\n    Input is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest to largest.\n\n    Args:\n        numbers (str): A space-delimited string of numberals.\n\n    Returns:\n        str: The string with numbers sorted from smallest to largest.\n\n    Examples:\n        >>> sort_numbers('three one five')\n        'one three five'\n    \"\"\"\n    # Create a dictionary to map numberals to their corresponding numerical values\n    number_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n\n    # Split the input string into a list of numberals\n    numberals = numbers.split()\n\n    # Convert the numberals to their corresponding numerical values\n    numerical_values = [number_map[number] for number in numberals]\n\n    # Sort the numerical values in ascending order\n    sorted_values = sorted(numerical_values)\n\n    # Convert the sorted numerical values back to numberals\n    sorted_numberals = [next(key for key, value in number_map.items() if value == value) for value in sorted_values]\n\n    # Join the sorted numberals into a space-delimited string\n    sorted_string = ' '.join(sorted_numberals)\n\n    return sorted_string"}
{"task_id": "HumanEval/20", "solution": "from typing import List, Tuple\ndef find_closest_elements(numbers: List[float]) -> Tuple[float, float]:\n    \"\"\"\n    From a supplied list of numbers (of length at least two) select and return two that are the closest to each other\n    and return them in order (smaller number, larger number).\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        Tuple[float, float]: A tuple containing the two closest numbers.\n\n    Raises:\n        ValueError: If the input list has less than two numbers.\n\n    Examples:\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n        (2.0, 2.2)\n        >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n        (2.0, 2.0)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least two numbers.\")\n\n    closest_diff = float('inf')\n    closest_pair = None\n\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            diff = abs(numbers[i] - numbers[j])\n            if diff < closest_diff:\n                closest_diff = diff\n                closest_pair = (numbers[i], numbers[j])\n\n    return closest_pair"}
{"task_id": "HumanEval/21", "solution": "from typing import List\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    \"\"\"\n    Given a list of numbers, rescales the values to be between 0 and 1.\n\n    Args:\n        numbers (List[float]): A list of numbers.\n\n    Returns:\n        List[float]: A new list of numbers, rescaled to be between 0 and 1.\n\n    Raises:\n        ValueError: If the input list has less than 2 elements.\n\n    Examples:\n        >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n        [0.0, 0.25, 0.5, 0.75, 1.0]\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input list must have at least 2 elements.\")\n\n    min_val = min(numbers)\n    max_val = max(numbers)\n    rescaled_numbers = [(num - min_val) / (max_val - min_val) for num in numbers]\n\n    return rescaled_numbers"}
{"task_id": "HumanEval/22", "solution": "from typing import List, Any\ndef filter_integers(values: List[Any]) -> List[int]:\n    \"\"\" Filter given list of any python values only for integers\n\n    Args:\n        values (List[Any]): List of any python values\n\n    Returns:\n        List[int]: List of integers only\n\n    Examples:\n        >>> filter_integers(['a', 3.14, 5])\n        [5]\n        >>> filter_integers([1, 2, 3, 'abc', {}, []])\n        [1, 2, 3]\n    \"\"\"\n    return [value for value in values if isinstance(value, int)]"}
{"task_id": "HumanEval/23", "solution": "def strlen(string: str) -> int:\n    \"\"\"\n    Return length of given string\n\n    Parameters:\n    string (str): The input string\n\n    Returns:\n    int: The length of the input string\n\n    Examples:\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    return len(string)"}
{"task_id": "HumanEval/24", "solution": "def largest_divisor(n: int) -> int:\n    \"\"\"\n    For a given number n, find the largest number that divides n evenly, smaller than n.\n\n    Args:\n        n (int): The number to find the largest divisor for.\n\n    Returns:\n        int: The largest divisor of n that is smaller than n.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> largest_divisor(15)\n        5\n        >>> largest_divisor(10)\n        5\n        >>> largest_divisor(1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be a positive integer.\n\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    for i in range(n-1, 0, -1):\n        if n % i == 0:\n            return i\n\n    return 1"}
{"task_id": "HumanEval/25", "solution": "from typing import List\ndef factorize(n: int) -> List[int]:\n    \"\"\"\n    Return list of prime factors of given integer in the order from smallest to largest.\n    Each of the factors should be listed number of times corresponding to how many times it appears in factorization.\n    Input number should be equal to the product of all factors.\n\n    Args:\n        n (int): The integer to factorize.\n\n    Returns:\n        List[int]: List of prime factors of the input integer.\n\n    Raises:\n        ValueError: If the input integer is not positive.\n\n    Examples:\n        >>> factorize(8)\n        [2, 2, 2]\n        >>> factorize(25)\n        [5, 5]\n        >>> factorize(70)\n        [2, 5, 7]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input integer must be positive.\")\n\n    factors = []\n    divisor = 2\n\n    while divisor <= n:\n        if n % divisor == 0:\n            factors.append(divisor)\n            n = n // divisor\n        else:\n            divisor += 1\n\n    return factors"}
{"task_id": "HumanEval/26", "solution": "from typing import List\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    \"\"\"\n    From a list of integers, remove all elements that occur more than once.\n    Keep order of elements left the same as in the input.\n\n    Args:\n        numbers (List[int]): A list of integers.\n\n    Returns:\n        List[int]: A new list with duplicate elements removed.\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 2, 4])\n        [1, 3, 4]\n    \"\"\"\n    unique_numbers = []\n    for number in numbers:\n        if number not in unique_numbers:\n            unique_numbers.append(number)\n    return unique_numbers"}
{"task_id": "HumanEval/27", "solution": "def flip_case(string: str) -> str:\n    \"\"\"\n    For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n\n    Args:\n        string (str): The input string to be flipped.\n\n    Returns:\n        str: The flipped string.\n\n    Examples:\n        >>> flip_case('Hello')\n        'hELLO'\n    \"\"\"\n    flipped_string = ''\n    for char in string:\n        if char.islower():\n            flipped_string += char.upper()\n        else:\n            flipped_string += char.lower()\n    return flipped_string"}
{"task_id": "HumanEval/28", "solution": "from typing import List\ndef concatenate(strings: List[str]) -> str:\n    \"\"\" Concatenate list of strings into a single string\n\n    Args:\n        strings (List[str]): List of strings to be concatenated.\n\n    Returns:\n        str: Concatenated string.\n\n    Examples:\n        >>> concatenate([])\n        ''\n        >>> concatenate(['a', 'b', 'c'])\n        'abc'\n    \"\"\"\n    return ''.join(strings)"}
{"task_id": "HumanEval/29", "solution": "from typing import List\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that start with a given prefix.\n\n    Args:\n        strings (List[str]): The list of strings to filter.\n        prefix (str): The prefix to filter the strings with.\n\n    Returns:\n        List[str]: The filtered list of strings.\n\n    Examples:\n        >>> filter_by_prefix([], 'a')\n        []\n        >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n        ['abc', 'array']\n    \"\"\"\n    return [s for s in strings if s.startswith(prefix)]"}
{"task_id": "HumanEval/30", "solution": "def get_positive(l: list):\n    \"\"\"Return only positive numbers in the list.\n\n    Args:\n        l (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the positive numbers from the input list.\n\n    Examples:\n        >>> get_positive([-1, 2, -4, 5, 6])\n        [2, 5, 6]\n        >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        [5, 3, 2, 3, 9, 123, 1]\n    \"\"\"\n    return [num for num in l if num > 0]"}
{"task_id": "HumanEval/31", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a given number is prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    \"\"\"\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True"}
{"task_id": "HumanEval/32", "solution": "import math\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\ndef find_zero(xs: list):\n    \"\"\"\n    xs are coefficients of a polynomial.\n    find_zero find x such that poly(x) = 0.\n    find_zero returns only only zero point, even if there are many.\n    Moreover, find_zero only takes list xs having even number of coefficients\n    and largest non zero coefficient as it guarantees\n    a solution.\n    >>> round(find_zero([1, 2]), 2) # f(x) = 1 + 2x\n    -0.5\n    >>> round(find_zero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n    1.0\n    \"\"\"\n    if len(xs) % 2 != 0:\n        raise ValueError(\"Number of coefficients must be even.\")\n\n    largest_coeff = max(xs)\n    if largest_coeff == 0:\n        raise ValueError(\"Largest coefficient cannot be zero.\")\n\n    # Use Newton's method to find a zero point\n    x = 0\n    while True:\n        fx = poly(xs, x)\n        if abs(fx) < 1e-6:\n            return x\n        fpx = sum([i * math.pow(x, i - 1) for i, coeff in enumerate(xs) if i != 0])\n        x -= fx / fpx"}
{"task_id": "HumanEval/33", "solution": "def sort_third(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that l' is identical to l in the indicies that are not divisible by three,\n    while its values at the indicies that are divisible by three are equal to the values of the corresponding indicies of l, but sorted.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The modified list l'.\n\n    Examples:\n        >>> sort_third([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n        [2, 6, 3, 4, 8, 9, 5]\n    \"\"\"\n    l_prime = l.copy()  # Create a copy of the input list\n\n    # Sort the values at the indicies divisible by three\n    l_prime[2::3] = sorted(l_prime[2::3])\n\n    return l_prime"}
{"task_id": "HumanEval/34", "solution": "def unique(l: list):\n    \"\"\"Return sorted unique elements in a list\n    \n    Args:\n        l (list): The input list\n        \n    Returns:\n        list: A sorted list of unique elements\n    \"\"\"\n    return sorted(set(l))"}
{"task_id": "HumanEval/35", "solution": "def max_element(l: list):\n    \"\"\"Return maximum element in the list.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        int: The maximum element in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_element([1, 2, 3])\n        3\n        >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n        123\n    \"\"\"\n    if not l:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_val = l[0]\n    for num in l:\n        if num > max_val:\n            max_val = num\n\n    return max_val"}
{"task_id": "HumanEval/36", "solution": "def fizz_buzz(n: int) -> int:\n    \"\"\"\n    Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n\n    Parameters:\n    n (int): The upper limit for the range of numbers to check.\n\n    Returns:\n    int: The number of times the digit 7 appears in the range.\n\n    Examples:\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n\n    count = 0\n    for i in range(1, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count"}
{"task_id": "HumanEval/37", "solution": "def sort_even(l: list):\n    \"\"\"\n    This function takes a list l and returns a list l' such that l' is identical to l in the odd indicies,\n    while its values at the even indicies are equal to the values of the even indicies of l, but sorted.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The modified list with sorted even indicies.\n\n    Examples:\n        >>> sort_even([1, 2, 3])\n        [1, 2, 3]\n        >>> sort_even([5, 6, 3, 4])\n        [3, 6, 5, 4]\n    \"\"\"\n    # Create a copy of the input list\n    l_prime = l.copy()\n\n    # Get the even indicies of the input list\n    even_indices = [i for i in range(len(l)) if i % 2 == 0]\n\n    # Sort the values at the even indicies\n    sorted_even_values = sorted([l[i] for i in even_indices])\n\n    # Update the values at the even indicies in the modified list\n    for i, value in zip(even_indices, sorted_even_values):\n        l_prime[i] = value\n\n    return l_prime"}
{"task_id": "HumanEval/38", "solution": "def decode_cyclic(s: str):\n    \"\"\"\n    takes as input string encoded with encode_cyclic function. Returns decoded string.\n    \"\"\"\n    # split string to groups. Each of length 3.\n    groups = [s[(3 * i):min((3 * i + 3), len(s))] for i in range((len(s) + 2) // 3)]\n    # un-cycle elements in each group. Unless group has fewer elements than 3.\n    groups = [(group[-1] + group[:-1]) if len(group) == 3 else group for group in groups]\n    return \"\".join(groups)"}
{"task_id": "HumanEval/39", "solution": "def is_prime(n: int) -> bool:\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_fib(n: int) -> int:\n    \"\"\"\n    Find the n-th Fibonacci number that is also prime.\n\n    Args:\n        n (int): The position of the Fibonacci number to find.\n\n    Returns:\n        int: The n-th Fibonacci number that is prime.\n\n    Raises:\n        ValueError: If n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    count = 0\n    fib_num = 0\n    i = 1\n\n    while count < n:\n        fib_num = fib(i)\n        if is_prime(fib_num):\n            count += 1\n        i += 1\n\n    return fib_num\ndef fib(n: int) -> int:\n    \"\"\"\n    Calculate the n-th Fibonacci number.\n\n    Args:\n        n (int): The position of the Fibonacci number to calculate.\n\n    Returns:\n        int: The n-th Fibonacci number.\n\n    Raises:\n        ValueError: If n is less than 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return fib(n - 1) + fib(n - 2)"}
{"task_id": "HumanEval/40", "solution": "def triples_sum_to_zero(l: list):\n    \"\"\"\n    triples_sum_to_zero takes a list of integers as an input.\n    it returns True if there are three distinct elements in the list that\n    sum to zero, and False otherwise.\n\n    >>> triples_sum_to_zero([1, 3, 5, 0])\n    False\n    >>> triples_sum_to_zero([1, 3, -2, 1])\n    True\n    >>> triples_sum_to_zero([1, 2, 3, 7])\n    False\n    >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n    True\n    >>> triples_sum_to_zero([1])\n    False\n    \"\"\"\n\n    # Check if the list has at least 3 elements\n    if len(l) < 3:\n        return False\n\n    # Sort the list in ascending order\n    l.sort()\n\n    # Iterate through the list\n    for i in range(len(l) - 2):\n        # Initialize two pointers, one at the next element and one at the end of the list\n        left = i + 1\n        right = len(l) - 1\n\n        while left < right:\n            # Calculate the sum of the three elements\n            sum_ = l[i] + l[left] + l[right]\n\n            if sum_ == 0:\n                # If the sum is zero, return True\n                return True\n            elif sum_ < 0:\n                # If the sum is less than zero, move the left pointer to the right\n                left += 1\n            else:\n                # If the sum is greater than zero, move the right pointer to the left\n                right -= 1\n\n    # If no triplet is found, return False\n    return False"}
{"task_id": "HumanEval/41", "solution": "def car_race_collision(n: int) -> int:\n    \"\"\"\n    Imagine a road that's a perfectly straight infinitely long line.\n    n cars are driving left to right; simultaneously, a different set of n cars\n    are driving right to left. The two sets of cars start out being very far from\n    each other. All cars move in the same speed. Two cars are said to collide\n    when a car that's moving left to right hits a car that's moving right to left.\n    However, the cars are infinitely sturdy and strong; as a result, they continue moving\n    in their trajectory as if they did not collide.\n\n    This function outputs the number of such collisions.\n\n    Args:\n        n (int): The number of cars on each side of the road.\n\n    Returns:\n        int: The number of collisions.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> car_race_collision(3)\n        2\n        >>> car_race_collision(5)\n        4\n        >>> car_race_collision(10)\n        9\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the number of collisions\n    collisions = n * (n - 1) // 2\n\n    return collisions"}
{"task_id": "HumanEval/42", "solution": "def incr_list(l: list):\n    \"\"\"Return list with elements incremented by 1.\n\n    Args:\n        l (list): The input list.\n\n    Returns:\n        list: The list with elements incremented by 1.\n\n    Examples:\n        >>> incr_list([1, 2, 3])\n        [2, 3, 4]\n        >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n        [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\n    return [x + 1 for x in l]"}
{"task_id": "HumanEval/43", "solution": "def pairs_sum_to_zero(l):\n    \"\"\"\n    pairs_sum_to_zero takes a list of integers as an input.\n    it returns True if there are two distinct elements in the list that\n    sum to zero, and False otherwise.\n    \n    Args:\n        l (list): A list of integers.\n        \n    Returns:\n        bool: True if there are two distinct elements in the list that sum to zero, False otherwise.\n    \"\"\"\n    # Create an empty set to store the complements of the elements\n    complements = set()\n    \n    # Iterate through each element in the list\n    for num in l:\n        # Check if the complement of the current element is in the set\n        if -num in complements:\n            return True\n        # Add the current element to the set\n        complements.add(num)\n    \n    # If no pair of elements sum to zero, return False\n    return False"}
{"task_id": "HumanEval/44", "solution": "def change_base(x: int, base: int) -> str:\n    \"\"\"Change numerical base of input number x to base.\n\n    Args:\n        x (int): The input number to be converted.\n        base (int): The base to which the number should be converted.\n\n    Returns:\n        str: The string representation of the converted number.\n\n    Raises:\n        ValueError: If the input number is negative or the base is not in the range 2-10.\n\n    Examples:\n        >>> change_base(8, 3)\n        '22'\n        >>> change_base(8, 2)\n        '1000'\n        >>> change_base(7, 2)\n        '111'\n    \"\"\"\n    if x < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n    if base < 2 or base > 10:\n        raise ValueError(\"Base must be in the range 2-10.\")\n\n    digits = \"0123456789\"\n    result = \"\"\n\n    while x > 0:\n        remainder = x % base\n        result = digits[remainder] + result\n        x = x // base\n\n    return result"}
{"task_id": "HumanEval/45", "solution": "def triangle_area(a, h):\n    \"\"\"\n    Calculate the area of a triangle given the length of a side and the height.\n\n    Parameters:\n    a (float): Length of a side of the triangle.\n    h (float): Height of the triangle.\n\n    Returns:\n    float: The area of the triangle.\n\n    Raises:\n    ValueError: If either a or h is negative.\n\n    Examples:\n    >>> triangle_area(5, 3)\n    7.5\n    >>> triangle_area(0, 10)\n    0.0\n    >>> triangle_area(10, -5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n\n    if a < 0 or h < 0:\n        raise ValueError(\"Length and height must be non-negative.\")\n\n    area = 0.5 * a * h\n    return area"}
{"task_id": "HumanEval/46", "solution": "def fib4(n: int) -> int:\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 0\n    else:\n        fib_list = [0, 0, 2, 0]\n        for i in range(4, n+1):\n            fib_list.append(fib_list[i-1] + fib_list[i-2] + fib_list[i-3] + fib_list[i-4])\n        return fib_list[n]"}
{"task_id": "HumanEval/47", "solution": "def median(l: list):\n    \"\"\"Return median of elements in the list l.\n\n    Args:\n        l (list): A list of numeric elements.\n\n    Returns:\n        float: The median value of the elements in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> median([3, 1, 2, 4, 5])\n        3\n        >>> median([-10, 4, 6, 1000, 10, 20])\n        15.0\n    \"\"\"\n    if not l:\n        raise ValueError(\"List cannot be empty.\")\n\n    sorted_l = sorted(l)\n    n = len(sorted_l)\n\n    if n % 2 == 0:\n        mid1 = sorted_l[n // 2 - 1]\n        mid2 = sorted_l[n // 2]\n        return (mid1 + mid2) / 2\n    else:\n        return sorted_l[n // 2]"}
{"task_id": "HumanEval/48", "solution": "def is_palindrome(text: str):\n    \"\"\"\n    Checks if given string is a palindrome\n    \n    Parameters:\n    text (str): The string to be checked\n    \n    Returns:\n    bool: True if the string is a palindrome, False otherwise\n    \"\"\"\n    # Convert the string to lowercase and remove any non-alphanumeric characters\n    text = ''.join(filter(str.isalnum, text.lower()))\n    \n    # Check if the reversed string is equal to the original string\n    return text == text[::-1]"}
{"task_id": "HumanEval/49", "solution": "def modp(n: int, p: int) -> int:\n    \"\"\"\n    Return 2^n modulo p (be aware of numerics).\n\n    Parameters:\n    n (int): The exponent.\n    p (int): The modulus.\n\n    Returns:\n    int: The result of 2^n mod p.\n\n    Raises:\n    ValueError: If p is not a positive integer.\n\n    Examples:\n    >>> modp(3, 5)\n    3\n    >>> modp(1101, 101)\n    2\n    >>> modp(0, 101)\n    1\n    >>> modp(3, 11)\n    8\n    >>> modp(100, 101)\n    1\n    \"\"\"\n\n    if p <= 0:\n        raise ValueError(\"Modulus p must be a positive integer.\")\n\n    result = 1\n    base = 2\n\n    while n > 0:\n        if n % 2 == 1:\n            result = (result * base) % p\n        base = (base * base) % p\n        n //= 2\n\n    return result"}
{"task_id": "HumanEval/50", "solution": "def encode_shift(s: str):\n    \"\"\"\n    returns encoded string by shifting every character by 5 in the alphabet.\n    \"\"\"\n    encoded_string = \"\"\n    for ch in s:\n        if ch.isalpha():\n            encoded_char = chr(((ord(ch) + 5 - ord(\"a\")) % 26) + ord(\"a\"))\n            encoded_string += encoded_char\n        else:\n            encoded_string += ch\n    return encoded_string\ndef decode_shift(s: str):\n    \"\"\"\n    takes as input string encoded with encode_shift function. Returns decoded string.\n    \"\"\"\n    decoded_string = \"\"\n    for ch in s:\n        if ch.isalpha():\n            decoded_char = chr(((ord(ch) - 5 - ord(\"a\")) % 26) + ord(\"a\"))\n            decoded_string += decoded_char\n        else:\n            decoded_string += ch\n    return decoded_string\noriginal_string = \"Hello, World!\"\nencoded_string = encode_shift(original_string)\ndecoded_string = decode_shift(encoded_string)"}
{"task_id": "HumanEval/51", "solution": "def remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    \n    Parameters:\n    text (str): The input string from which vowels need to be removed.\n    \n    Returns:\n    str: The input string without vowels.\n    \"\"\"\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    result = \"\"\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result"}
{"task_id": "HumanEval/52", "solution": "def below_threshold(l: list, t: int) -> bool:\n    \"\"\"\n    Return True if all numbers in the list l are below threshold t.\n\n    Parameters:\n    l (list): A list of numbers.\n    t (int): The threshold value.\n\n    Returns:\n    bool: True if all numbers in the list l are below threshold t, False otherwise.\n\n    Examples:\n    >>> below_threshold([1, 2, 4, 10], 100)\n    True\n    >>> below_threshold([1, 20, 4, 10], 5)\n    False\n    \"\"\"\n    for num in l:\n        if num >= t:\n            return False\n    return True"}
{"task_id": "HumanEval/53", "solution": "def add(x: int, y: int) -> int:\n    \"\"\"Add two numbers x and y\n\n    Args:\n        x (int): The first number to be added.\n        y (int): The second number to be added.\n\n    Returns:\n        int: The sum of x and y.\n\n    Examples:\n        >>> add(2, 3)\n        5\n        >>> add(5, 7)\n        12\n    \"\"\"\n    return x + y"}
{"task_id": "HumanEval/54", "solution": "def same_chars(s0: str, s1: str):\n    \"\"\"\n    Check if two words have the same characters.\n    \n    Args:\n        s0 (str): The first word.\n        s1 (str): The second word.\n    \n    Returns:\n        bool: True if the words have the same characters, False otherwise.\n    \"\"\"\n    # Convert the words to sets and compare them\n    return set(s0) == set(s1)"}
{"task_id": "HumanEval/55", "solution": "def fib(n: int) -> int:\n    \"\"\"\n    Return the n-th Fibonacci number.\n\n    Parameters:\n    n (int): The index of the Fibonacci number to be calculated.\n\n    Returns:\n    int: The n-th Fibonacci number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> fib(10)\n    55\n    >>> fib(1)\n    1\n    >>> fib(8)\n    21\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 1\n\n    fib_sequence = [0, 1]\n    for i in range(2, n + 1):\n        fib_sequence.append(fib_sequence[i - 1] + fib_sequence[i - 2])\n\n    return fib_sequence[n]"}
{"task_id": "HumanEval/56", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Check if a given string of brackets is correctly bracketed.\n\n    Args:\n        brackets (str): A string of brackets, consisting of \"<\" and \">\".\n\n    Returns:\n        bool: True if the brackets are correctly bracketed, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"<\")\n        False\n        >>> correct_bracketing(\"<>\")\n        True\n        >>> correct_bracketing(\"<<><>>\")\n        True\n        >>> correct_bracketing(\"><<>\")\n        False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"<\":\n            stack.append(bracket)\n        elif bracket == \">\":\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/57", "solution": "def monotonic(l: list):\n    \"\"\"\n    Return True if the list elements are monotonically increasing or decreasing.\n\n    Parameters:\n    l (list): A list of numeric elements.\n\n    Returns:\n    bool: True if the list elements are monotonically increasing or decreasing, False otherwise.\n\n    Examples:\n    >>> monotonic([1, 2, 4, 20])\n    True\n    >>> monotonic([1, 20, 4, 10])\n    False\n    >>> monotonic([4, 1, 0, -10])\n    True\n    \"\"\"\n\n    if len(l) <= 1:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(l)):\n        if l[i] < l[i-1]:\n            increasing = False\n        elif l[i] > l[i-1]:\n            decreasing = False\n\n    return increasing or decreasing"}
{"task_id": "HumanEval/58", "solution": "def common(l1: list, l2: list):\n    \"\"\"Return sorted unique common elements for two lists.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n\n    Returns:\n        list: A sorted list of unique common elements between l1 and l2.\n\n    Examples:\n        >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n        [1, 5, 653]\n        >>> common([5, 3, 2, 8], [3, 2])\n        [2, 3]\n\n    \"\"\"\n    return sorted(list(set(l1) & set(l2)))"}
{"task_id": "HumanEval/59", "solution": "def largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    \n    Args:\n        n (int): The number to find the largest prime factor of.\n        \n    Returns:\n        int: The largest prime factor of n.\n    \"\"\"\n    # Start with the smallest prime factor, 2\n    factor = 2\n    \n    # Keep dividing n by the factor until it is no longer divisible\n    while n % factor == 0:\n        n = n // factor\n    \n    # Now, factor is the largest prime factor of n\n    # Check if the remaining n is itself a prime\n    if n > 1:\n        return n\n    \n    # If n is not a prime, return the last factor found\n    return factor"}
{"task_id": "HumanEval/60", "solution": "def sum_to_n(n: int) -> int:\n    \"\"\"\n    sum_to_n is a function that sums numbers from 1 to n.\n\n    Parameters:\n    n (int): The upper limit of the sum.\n\n    Returns:\n    int: The sum of numbers from 1 to n.\n\n    Examples:\n    >>> sum_to_n(30)\n    465\n    >>> sum_to_n(100)\n    5050\n    >>> sum_to_n(5)\n    15\n    >>> sum_to_n(10)\n    55\n    >>> sum_to_n(1)\n    1\n    \"\"\"\n    return n * (n + 1) // 2"}
{"task_id": "HumanEval/61", "solution": "def correct_bracketing(brackets: str):\n    \"\"\"\n    Check if a string of brackets is correctly bracketed.\n\n    Args:\n        brackets (str): A string of brackets.\n\n    Returns:\n        bool: True if the brackets are correctly bracketed, False otherwise.\n\n    Examples:\n        >>> correct_bracketing(\"(\")\n        False\n        >>> correct_bracketing(\"()\")\n        True\n        >>> correct_bracketing(\"(()())\")\n        True\n        >>> correct_bracketing(\")(()\")\n        False\n    \"\"\"\n    stack = []\n    for bracket in brackets:\n        if bracket == \"(\":\n            stack.append(bracket)\n        elif bracket == \")\":\n            if not stack:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/62", "solution": "def derivative(xs):\n    \"\"\"\n    Calculates the derivative of a polynomial represented by a list of coefficients.\n\n    Parameters:\n    xs (list): A list of coefficients representing a polynomial.\n\n    Returns:\n    list: A list of coefficients representing the derivative of the polynomial.\n\n    Example:\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1, 2, 3])\n    [2, 6]\n    \"\"\"\n\n    # Check if the input list is empty or has only one element\n    if len(xs) < 2:\n        return []\n\n    # Calculate the derivative of the polynomial\n    derivative_coeffs = []\n    for i in range(1, len(xs)):\n        derivative_coeffs.append(i * xs[i])\n\n    return derivative_coeffs"}
{"task_id": "HumanEval/63", "solution": "def fibfib(n: int) -> int:\n    \"\"\"\n    The FibFib number sequence is a sequence similar to the Fibbonacci sequence that's defined as follows:\n    fibfib(0) == 0\n    fibfib(1) == 0\n    fibfib(2) == 1\n    fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n\n    This function efficiently computes the n-th element of the FibFib number sequence.\n\n    Args:\n        n (int): The index of the FibFib number to compute.\n\n    Returns:\n        int: The n-th FibFib number.\n\n    Raises:\n        ValueError: If n is less than 0.\n\n    Examples:\n        >>> fibfib(1)\n        0\n        >>> fibfib(5)\n        4\n        >>> fibfib(8)\n        24\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    # Base cases\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 0\n    elif n == 2:\n        return 1\n\n    # Initialize the FibFib sequence\n    fibfib_sequence = [0, 0, 1]\n\n    # Compute the FibFib sequence up to the n-th element\n    for i in range(3, n + 1):\n        fibfib_sequence.append(fibfib_sequence[i - 1] + fibfib_sequence[i - 2] + fibfib_sequence[i - 3])\n\n    return fibfib_sequence[n]"}
{"task_id": "HumanEval/64", "solution": "def vowels_count(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for char in s:\n        if char.lower() in vowels:\n            count += 1\n    return count"}
{"task_id": "HumanEval/65", "solution": "def circular_shift(x, shift):\n    \"\"\"Circular shift the digits of the integer x, shift the digits right by shift\n    and return the result as a string.\n    If shift > number of digits, return digits reversed.\n    \n    Args:\n        x (int): The integer to shift.\n        shift (int): The number of digits to shift.\n    \n    Returns:\n        str: The shifted digits as a string.\n    \"\"\"\n    # Convert the integer to a string\n    digits = str(x)\n    \n    # Calculate the number of digits in the integer\n    num_digits = len(digits)\n    \n    # If shift is greater than the number of digits, return the digits reversed\n    if shift > num_digits:\n        return digits[::-1]\n    \n    # Perform the circular shift\n    shifted_digits = digits[-shift:] + digits[:-shift]\n    \n    # Return the shifted digits as a string\n    return shifted_digits"}
{"task_id": "HumanEval/66", "solution": "def digitSum(s):\n    \"\"\"\n    Calculates the sum of the ASCII codes of uppercase characters in a given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The sum of the ASCII codes of uppercase characters in the input string.\n\n    Examples:\n    >>> digitSum(\"\")\n    0\n    >>> digitSum(\"abAB\")\n    131\n    >>> digitSum(\"abcCd\")\n    67\n    >>> digitSum(\"helloE\")\n    69\n    >>> digitSum(\"woArBld\")\n    131\n    >>> digitSum(\"aAaaaXa\")\n    153\n    \"\"\"\n    return sum(ord(c) for c in s if c.isupper())"}
{"task_id": "HumanEval/67", "solution": "def fruit_distribution(s, n):\n    \"\"\"\n    In this task, you will be given a string that represents a number of apples and oranges \n    that are distributed in a basket of fruit this basket contains \n    apples, oranges, and mango fruits. Given the string that represents the total number of \n    the oranges and apples and an integer that represent the total number of the fruits \n    in the basket return the number of the mango fruits in the basket.\n    for examble:\n    fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n    fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n    fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n    fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n    \"\"\"\n    # Extract the number of apples and oranges from the string\n    apples, oranges = map(int, s.split()[::2])\n    \n    # Calculate the number of mangoes in the basket\n    mangoes = n - apples - oranges\n    \n    return mangoes"}
{"task_id": "HumanEval/68", "solution": "def pluck(arr):\n    even_values = [value for value in arr if value % 2 == 0]\n    if not even_values:\n        return []\n    smallest_even_value = min(even_values)\n    smallest_index = arr.index(smallest_even_value)\n    return [smallest_even_value, smallest_index]"}
{"task_id": "HumanEval/69", "solution": "def search(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    \n    for num in sorted(freq_dict.keys(), reverse=True):\n        if freq_dict[num] >= num:\n            return num\n    \n    return -1"}
{"task_id": "HumanEval/70", "solution": "def strange_sort_list(lst):\n    '''\n    Given list of integers, return list in strange order.\n    Strange sorting, is when you start with the minimum value,\n    then maximum of the remaining integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n    strange_sort_list([]) == []\n    '''\n\n    # Check if the list is empty\n    if not lst:\n        return lst\n\n    # Sort the list in ascending order\n    sorted_lst = sorted(lst)\n\n    # Initialize an empty list to store the strange sorted list\n    strange_sorted_lst = []\n\n    # Iterate through the sorted list in reverse order\n    for i in range(len(sorted_lst) - 1, -1, -1):\n        # Append the maximum value to the strange sorted list\n        strange_sorted_lst.append(sorted_lst[i])\n\n        # If there are more elements in the sorted list,\n        # append the minimum value to the strange sorted list\n        if i > 0:\n            strange_sorted_lst.append(sorted_lst[i - 1])\n            i -= 1\n\n    return strange_sorted_lst"}
{"task_id": "HumanEval/71", "solution": "def triangle_area(a, b, c):\n    if a + b > c and b + c > a and a + c > b:\n        s = (a + b + c) / 2\n        area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n        return round(area, 2)\n    else:\n        return -1"}
{"task_id": "HumanEval/72", "solution": "def will_it_fly(q, w):\n    \"\"\"\n    Write a function that returns True if the object q will fly, and False otherwise.\n    The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n    Example:\n    will_it_fly([1, 2], 5) \u279e False \n    # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n    will_it_fly([3, 2, 3], 1) \u279e False\n    # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n    will_it_fly([3, 2, 3], 9) \u279e True\n    # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n    will_it_fly([3], 5) \u279e True\n    # 3 is less than the maximum possible weight, and it's balanced.\n    \"\"\"\n\n    # Check if the list is palindromic\n    if q == q[::-1]:\n        # Check if the sum of elements is less than or equal to the maximum possible weight\n        if sum(q) <= w:\n            return True\n    return False"}
{"task_id": "HumanEval/73", "solution": "def smallest_change(arr):\n    \"\"\"\n    Given an array arr of integers, find the minimum number of elements that\n    need to be changed to make the array palindromic. A palindromic array is an array that\n    is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6]) == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1, 2, 3, 2, 1]) == 0\n    \"\"\"\n\n    # Initialize variables\n    count = 0\n    left = 0\n    right = len(arr) - 1\n\n    # Iterate through the array from both ends\n    while left < right:\n        # If the elements at the left and right indices are not equal\n        if arr[left] != arr[right]:\n            # Increment the count and change the element at the left index to the element at the right index\n            count += 1\n            arr[left] = arr[right]\n\n        # Move the left index to the right\n        left += 1\n        # Move the right index to the left\n        right -= 1\n\n    return count"}
{"task_id": "HumanEval/74", "solution": "def total_match(lst1, lst2):\n    total1 = sum(len(s) for s in lst1)\n    total2 = sum(len(s) for s in lst2)\n    if total1 < total2:\n        return lst1\n    elif total2 < total1:\n        return lst2\n    else:\n        return lst1"}
{"task_id": "HumanEval/75", "solution": "def is_multiply_prime(a):\n    \"\"\"\n    Check if a given number is the multiplication of 3 prime numbers.\n\n    Parameters:\n    a (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is the multiplication of 3 prime numbers, False otherwise.\n    \"\"\"\n\n    def is_prime(n):\n        \"\"\"\n        Check if a given number is prime.\n\n        Parameters:\n        n (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    if a < 2:\n        return False\n\n    prime_factors = []\n    for i in range(2, int(a**0.5) + 1):\n        if a % i == 0 and is_prime(i):\n            prime_factors.append(i)\n\n    if len(prime_factors) == 3:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/76", "solution": "def is_simple_power(x, n):\n    \"\"\"\n    Check if a number x is a simple power of n.\n\n    Parameters:\n    x (int): The number to check.\n    n (int): The base number.\n\n    Returns:\n    bool: True if x is a simple power of n, False otherwise.\n    \"\"\"\n    if x == 1:\n        return True\n    elif n == 1:\n        return False\n    else:\n        power = 0\n        while n ** power <= x:\n            if n ** power == x:\n                return True\n            power += 1\n        return False"}
{"task_id": "HumanEval/77", "solution": "def iscube(a):\n    '''\n    Write a function that takes an integer a and returns True \n    if this ingeger is a cube of some integer number.\n    Note: you may assume the input is always valid.\n    Examples:\n    iscube(1) ==> True\n    iscube(2) ==> False\n    iscube(-1) ==> True\n    iscube(64) ==> True\n    iscube(0) ==> True\n    iscube(180) ==> False\n    '''\n    if a == 0:\n        return True\n    elif a < 0:\n        a = abs(a)\n    return a ** (1 / 3) % 1 == 0"}
{"task_id": "HumanEval/78", "solution": "def hex_key(num):\n    primes = ['2', '3', '5', '7', 'B', 'D']\n    count = 0\n    for digit in num:\n        if digit.upper() in primes:\n            count += 1\n    return count"}
{"task_id": "HumanEval/79", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary string\n    return 'db' + binary + 'db'  # Add extra characters and return the result"}
{"task_id": "HumanEval/80", "solution": "def is_happy(s):\n    \"\"\"\n    Check if a string is happy or not.\n\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct.\n\n    Args:\n        s (str): The input string to check.\n\n    Returns:\n        bool: True if the string is happy, False otherwise.\n    \"\"\"\n    if len(s) < 3:\n        return False\n\n    for i in range(len(s) - 2):\n        if s[i] == s[i+1] or s[i] == s[i+2] or s[i+1] == s[i+2]:\n            return False\n\n    return True"}
{"task_id": "HumanEval/81", "solution": "def numerical_letter_grade(grades):\n    \"\"\"\n    This function takes a list of GPAs and returns a list of letter grades based on the provided grading criteria.\n\n    Parameters:\n    grades (list): A list of GPA values.\n\n    Returns:\n    list: A list of letter grades corresponding to the input GPAs.\n\n    \"\"\"\n\n    # Define the grading criteria\n    grading_criteria = {\n        4.0: 'A+',\n        3.7: 'A',\n        3.3: 'A-',\n        3.0: 'B+',\n        2.7: 'B',\n        2.3: 'B-',\n        2.0: 'C+',\n        1.7: 'C',\n        1.3: 'C-',\n        1.0: 'D+',\n        0.7: 'D',\n        0.0: 'D-',\n        0.0: 'E'\n    }\n\n    # Initialize an empty list to store the letter grades\n    letter_grades = []\n\n    # Iterate over the GPAs and find the corresponding letter grade\n    for gpa in grades:\n        for gpa_threshold, letter_grade in grading_criteria.items():\n            if gpa >= gpa_threshold:\n                letter_grades.append(letter_grade)\n                break\n\n    return letter_grades\ngrades = [4.0, 3, 1.7, 2, 3.5]"}
{"task_id": "HumanEval/82", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef prime_length(string):\n    \"\"\"Check if the length of a string is prime.\n\n    Args:\n        string (str): The string to check.\n\n    Returns:\n        bool: True if the length of the string is prime, False otherwise.\n    \"\"\"\n    return is_prime(len(string))"}
{"task_id": "HumanEval/83", "solution": "def starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n\n    Parameters:\n    n (int): The number of digits in the positive integers.\n\n    Returns:\n    int: The count of n-digit positive integers that start or end with 1.\n\n    Examples:\n    >>> starts_one_ends(1)\n    2\n    >>> starts_one_ends(2)\n    18\n    >>> starts_one_ends(3)\n    90\n    \"\"\"\n\n    # Base case: if n is 1, there are only two possible numbers: 1 and 10\n    if n == 1:\n        return 2\n\n    # Recursive case: for n > 1, we can start or end with 1, so we multiply the count of (n-1)-digit numbers by 10\n    return 10 * starts_one_ends(n - 1)"}
{"task_id": "HumanEval/84", "solution": "def solve(N):\n    binary_sum = sum(int(digit) for digit in bin(N)[2:])\n    return bin(binary_sum)[2:]"}
{"task_id": "HumanEval/85", "solution": "def add(lst):\n    \"\"\"\n    Given a non-empty list of integers lst, add the even elements that are at odd indices.\n\n    Args:\n        lst (list): A non-empty list of integers.\n\n    Returns:\n        int: The sum of the even elements at odd indices.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> add([4, 2, 6, 7])\n        2\n        >>> add([1, 2, 3, 4, 5])\n        9\n        >>> add([10, 20, 30, 40, 50])\n        60\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    return sum(lst[1::2])"}
{"task_id": "HumanEval/86", "solution": "def anti_shuffle(s):\n    words = s.split()\n    ordered_words = [''.join(sorted(word)) for word in words]\n    return ' '.join(ordered_words)"}
{"task_id": "HumanEval/87", "solution": "def get_row(lst, x):\n    result = []\n    for i, row in enumerate(lst):\n        for j, num in enumerate(row):\n            if num == x:\n                result.append((i, len(row) - j - 1))\n    result.sort(key=lambda x: (x[0], -x[1]))\n    return result"}
{"task_id": "HumanEval/88", "solution": "def sort_array(array):\n    \"\"\"\n    Given an array of non-negative integers, return a copy of the given array after sorting,\n    you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n    or sort it in descending order if the sum( first index value, last index value) is even.\n\n    Note:\n    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n\n    # Check if the array is empty or has only one element\n    if len(array) <= 1:\n        return array\n\n    # Calculate the sum of the first and last elements\n    sum_of_first_and_last = array[0] + array[-1]\n\n    # Check if the sum is odd or even\n    if sum_of_first_and_last % 2 == 1:\n        # Sort the array in ascending order\n        sorted_array = sorted(array)\n    else:\n        # Sort the array in descending order\n        sorted_array = sorted(array, reverse=True)\n\n    return sorted_array"}
{"task_id": "HumanEval/89", "solution": "def encrypt(s):\n    encrypted_string = \"\"\n    for char in s:\n        if char.isalpha():\n            if char.islower():\n                encrypted_char = chr((ord(char) - 97 + 2) % 26 + 97)\n            else:\n                encrypted_char = chr((ord(char) - 65 + 2) % 26 + 65)\n            encrypted_string += encrypted_char\n        else:\n            encrypted_string += char\n    return encrypted_string"}
{"task_id": "HumanEval/90", "solution": "def next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    \n    smallest = min(lst)\n    second_smallest = float('inf')\n    \n    for num in lst:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n    \n    if second_smallest == float('inf'):\n        return None\n    \n    return second_smallest"}
{"task_id": "HumanEval/91", "solution": "def is_bored(S):\n    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n    of boredoms. A boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or 'unciarulete' or 'unciarulete'.\n\n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"\n\n    # Split the string into sentences\n    sentences = S.split('.') + S.split('?') + S.split('unciarulete') + S.split('unciarulete')\n\n    # Initialize a counter for boredoms\n    boredom_count = 0\n\n    # Iterate over each sentence\n    for sentence in sentences:\n        # Check if the sentence starts with \"I\"\n        if sentence.startswith('I'):\n            # Increment the boredom count\n            boredom_count += 1\n\n    # Return the boredom count\n    return boredom_count"}
{"task_id": "HumanEval/92", "solution": "def any_int(x, y, z):\n    if isinstance(x, int) and isinstance(y, int) and isinstance(z, int):\n        if x == y + z or y == x + z or z == x + y:\n            return True\n    return False"}
{"task_id": "HumanEval/93", "solution": "def encode(message):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    encoded_message = ''\n    for char in message:\n        if char.isalpha():\n            if char.islower():\n                encoded_message += char.upper()\n            else:\n                encoded_message += char.lower()\n        else:\n            encoded_message += char\n\n    for vowel in vowels:\n        encoded_message = encoded_message.replace(vowel, chr(ord(vowel) + 2))\n\n    return encoded_message"}
{"task_id": "HumanEval/94", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef sum_of_digits(n):\n    return sum(int(digit) for digit in str(n))\n\ndef largest_prime_sum_of_digits(lst):\n    primes = [n for n in lst if is_prime(n)]\n    if not primes:\n        return 0\n    return sum_of_digits(max(primes))\n\n# Test cases"}
{"task_id": "HumanEval/95", "solution": "def check_dict_case(dict):\n    if not dict:\n        return False\n\n    keys = list(dict.keys())\n    first_key = keys[0]\n\n    if isinstance(first_key, str):\n        if all(isinstance(key, str) for key in keys):\n            if all(key.islower() or key.isupper() for key in keys):\n                return True\n\n    return False"}
{"task_id": "HumanEval/96", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        if is_prime(i):\n            primes.append(i)\n    return primes"}
{"task_id": "HumanEval/97", "solution": "def multiply(a, b):\n    \"\"\"\n    Complete the function that takes two integers and returns \n    the product of their unit digits.\n    \n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    \n    Returns:\n    int: The product of the unit digits of a and b.\n    \"\"\"\n    # Extract the unit digits of a and b\n    unit_digit_a = abs(a) % 10\n    unit_digit_b = abs(b) % 10\n    \n    # Calculate the product of the unit digits\n    product = unit_digit_a * unit_digit_b\n    \n    # Return the product\n    return product"}
{"task_id": "HumanEval/98", "solution": "def count_upper(s):\n    \"\"\"\n    Given a string s, count the number of uppercase vowels in even indices.\n    \n    For example:\n    count_upper('aBCdEf') returns 1\n    count_upper('abcdefg') returns 0\n    count_upper('dBBE') returns 0\n    \"\"\"\n    vowels = ['A', 'E', 'I', 'O', 'U']\n    count = 0\n    for i in range(0, len(s), 2):\n        if s[i] in vowels and s[i].isupper():\n            count += 1\n    return count"}
{"task_id": "HumanEval/99", "solution": "def closest_integer(value):\n    \"\"\"\n    Create a function that takes a value (string) representing a number\n    and returns the closest integer to it. If the number is equidistant\n    from two integers, round it away from zero.\n\n    Examples:\n    >>> closest_integer(\"10\")\n    10\n    >>> closest_integer(\"15.3\")\n    15\n\n    Note:\n    Rounding away from zero means that if the given number is equidistant\n    from two integers, the one you should return is the one that is the\n    farthest from zero. For example closest_integer(\"14.5\") should\n    return 15 and closest_integer(\"-14.5\") should return -15.\n    \"\"\"\n\n    # Convert the string value to a float\n    num = float(value)\n\n    # Get the absolute value of the float\n    abs_num = abs(num)\n\n    # Get the integer part of the absolute value\n    int_part = int(abs_num)\n\n    # Get the decimal part of the absolute value\n    dec_part = abs_num - int_part\n\n    # Check if the decimal part is greater than or equal to 0.5\n    if dec_part >= 0.5:\n        # Round up the integer part\n        int_part += 1\n\n    # Check if the original number was negative\n    if num < 0:\n        # Return the negative of the rounded integer part\n        return -int_part\n    else:\n        # Return the rounded integer part\n        return int_part"}
{"task_id": "HumanEval/100", "solution": "def make_a_pile(n):\n    \"\"\"\n    Given a positive integer n, you have to make a pile of n levels of stones.\n    The first level has n stones.\n    The number of stones in the next level is:\n        - the next odd number if n is odd.\n        - the next even number if n is even.\n    Return the number of stones in each level in a list, where element at index\n    i represents the number of stones in the level (i+1).\n\n    Examples:\n    >>> make_a_pile(3)\n    [3, 5, 7]\n    \"\"\"\n    levels = []\n    stones = n\n    for i in range(n):\n        levels.append(stones)\n        if stones % 2 == 0:\n            stones += 2\n        else:\n            stones += 1\n    return levels"}
{"task_id": "HumanEval/101", "solution": "def words_string(s):\n    \"\"\"\n    Splits a string of words separated by commas or spaces into an array of words.\n\n    Args:\n        s (str): The input string of words.\n\n    Returns:\n        list: A list of words extracted from the input string.\n\n    Examples:\n        >>> words_string(\"Hi, my name is John\")\n        ['Hi', 'my', 'name', 'is', 'John']\n        >>> words_string(\"One, two, three, four, five, six\")\n        ['One', 'two', 'three', 'four', 'five', 'six']\n    \"\"\"\n    words = s.split(', ')  # Split the string by comma followed by space\n    words = [word for word in words if word]  # Remove empty strings\n    return words"}
{"task_id": "HumanEval/102", "solution": "def choose_num(x, y):\n    \"\"\"\n    This function takes two positive numbers x and y and returns the\n    biggest even integer number that is in the range [x, y] inclusive. If \n    there's no such number, then the function should return -1.\n\n    Args:\n        x (int): The lower bound of the range (inclusive).\n        y (int): The upper bound of the range (inclusive).\n\n    Returns:\n        int: The biggest even integer number in the range [x, y], or -1 if no such number exists.\n\n    Raises:\n        ValueError: If x or y is not a positive integer.\n\n    Examples:\n        >>> choose_num(12, 15)\n        14\n        >>> choose_num(13, 12)\n        -1\n    \"\"\"\n    if not isinstance(x, int) or not isinstance(y, int) or x <= 0 or y <= 0:\n        raise ValueError(\"x and y must be positive integers\")\n\n    if x > y:\n        return -1\n\n    for num in range(y, x-1, -1):\n        if num % 2 == 0:\n            return num\n\n    return -1"}
{"task_id": "HumanEval/103", "solution": "def rounded_avg(n, m):\n    if n > m:\n        return -1\n    else:\n        avg = (n + m) / 2\n        rounded_avg = round(avg)\n        binary_avg = bin(rounded_avg)[2:]\n        return \"0b\" + binary_avg"}
{"task_id": "HumanEval/104", "solution": "def unique_digits(x):\n    \"\"\"\n    Given a list of positive integers x, return a sorted list of all elements that has no even digits.\n\n    Note: Returned list should be sorted in increasing order.\n\n    Args:\n        x (list): A list of positive integers.\n\n    Returns:\n        list: A sorted list of elements from x that have no even digits.\n\n    Examples:\n        >>> unique_digits([15, 33, 1422, 1])\n        [1, 15, 33]\n        >>> unique_digits([152, 323, 1422, 10])\n        []\n    \"\"\"\n    def has_no_even_digits(num):\n        \"\"\"\n        Check if a number has no even digits.\n\n        Args:\n            num (int): A positive integer.\n\n        Returns:\n            bool: True if the number has no even digits, False otherwise.\n        \"\"\"\n        while num > 0:\n            digit = num % 10\n            if digit % 2 == 0:\n                return False\n            num //= 10\n        return True\n\n    return sorted([num for num in x if has_no_even_digits(num)])"}
{"task_id": "HumanEval/105", "solution": "def by_length(arr):\n    # Filter out strange numbers and sort the valid numbers\n    valid_numbers = sorted([num for num in arr if 1 <= num <= 9])\n    \n    # Reverse the sorted numbers\n    reversed_numbers = valid_numbers[::-1]\n    \n    # Map the numbers to their corresponding names\n    names = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\"\n    }\n    result = [names[num] for num in reversed_numbers]\n    \n    return result"}
{"task_id": "HumanEval/106", "solution": "def factorial(n):\n    \"\"\"\n    Calculate the factorial of a number.\n\n    Parameters:\n    n (int): The number to calculate the factorial of.\n\n    Returns:\n    int: The factorial of the given number.\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n    else:\n        return n * factorial(n - 1)\ndef f(n):\n    \"\"\"\n    Implement the function f that takes n as a parameter,\n    and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n    or the sum of numbers from 1 to i otherwise.\n\n    Parameters:\n    n (int): The size of the list to be generated.\n\n    Returns:\n    list: The generated list.\n    \"\"\"\n    result = []\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            result.append(factorial(i))\n        else:\n            result.append(sum(range(1, i+1)))\n    return result"}
{"task_id": "HumanEval/107", "solution": "def is_palindrome(num):\n    \"\"\"\n    Helper function to check if a number is a palindrome.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(num) == str(num)[::-1]\ndef even_odd_palindrome(n):\n    \"\"\"\n    Given a positive integer n, return a tuple that has the number of even and odd\n    integer palindromes that fall within the range(1, n), inclusive.\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        tuple: A tuple with the number of even and odd palindromes.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> even_odd_palindrome(3)\n        (1, 2)\n        >>> even_odd_palindrome(12)\n        (4, 6)\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    even_count = 0\n    odd_count = 0\n\n    for num in range(1, n + 1):\n        if is_palindrome(num):\n            if num % 2 == 0:\n                even_count += 1\n            else:\n                odd_count += 1\n\n    return even_count, odd_count"}
{"task_id": "HumanEval/108", "solution": "def count_nums(arr):\n    \"\"\"\n    Write a function count_nums which takes an array of integers and returns\n    the number of elements which has a sum of digits > 0.\n    If a number is negative, then its first signed digit will be negative:\n    e.g. -123 has signed digits -1, 2, and 3.\n    \n    Args:\n        arr (list): List of integers.\n        \n    Returns:\n        int: Number of elements in the list with a sum of digits > 0.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num < 0:\n            num = abs(num)\n        digit_sum = sum(int(digit) for digit in str(num))\n        if digit_sum > 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/109", "solution": "def move_one_ball(arr):\n    \"\"\"\n    Determines if it is possible to get a sorted array by performing a right shift operation on the given array.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    bool: True if it is possible to get a sorted array, False otherwise.\n    \"\"\"\n\n    # Check if the given array is empty\n    if not arr:\n        return True\n\n    # Find the index of the first element that is greater than the next element\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            break\n    else:\n        # If no such element is found, the array is already sorted\n        return True\n\n    # Check if performing a right shift operation can sort the array\n    for j in range(i + 1, len(arr)):\n        if arr[j] < arr[j - 1]:\n            return False\n\n    # Check if the last element is less than the first element after performing a right shift operation\n    if arr[-1] < arr[0]:\n        return False\n\n    return True"}
{"task_id": "HumanEval/110", "solution": "def exchange(lst1, lst2):\n    \"\"\"\n    Determines whether it is possible to perform an exchange of elements between two lists to make lst1 a list of only even numbers.\n\n    Args:\n        lst1 (list): The first list of numbers.\n        lst2 (list): The second list of numbers.\n\n    Returns:\n        str: \"YES\" if it is possible to exchange elements between lst1 and lst2 to make all elements of lst1 even, \"NO\" otherwise.\n\n    Raises:\n        ValueError: If either lst1 or lst2 is empty.\n\n    Examples:\n        >>> exchange([1, 2, 3, 4], [1, 2, 3, 4])\n        'YES'\n        >>> exchange([1, 2, 3, 4], [1, 5, 3, 4])\n        'NO'\n    \"\"\"\n    if not lst1 or not lst2:\n        raise ValueError(\"Both lists must be non-empty.\")\n\n    # Count the number of odd elements in lst1\n    odd_count = sum(num % 2 != 0 for num in lst1)\n\n    # Count the number of odd elements in lst2\n    odd_count_2 = sum(num % 2 != 0 for num in lst2)\n\n    # If there are more odd elements in lst1 than in lst2, it is not possible to exchange elements\n    if odd_count > odd_count_2:\n        return \"NO\"\n\n    # If there are more odd elements in lst2 than in lst1, we can exchange elements to make lst1 even\n    if odd_count < odd_count_2:\n        return \"YES\"\n\n    # If there are an equal number of odd elements in both lists, we can exchange elements if there is at least one odd element in lst1\n    if odd_count > 0:\n        return \"YES\"\n\n    # If there are no odd elements in lst1 and lst2, it is not possible to exchange elements\n    return \"NO\""}
{"task_id": "HumanEval/111", "solution": "def histogram(test):\n    # Create an empty dictionary to store the letter counts\n    letter_counts = {}\n\n    # Split the input string into a list of lowercase letters\n    letters = test.lower().split()\n\n    # Iterate over each letter in the list\n    for letter in letters:\n        # Check if the letter is already in the dictionary\n        if letter in letter_counts:\n            # If it is, increment its count by 1\n            letter_counts[letter] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            letter_counts[letter] = 1\n\n    # Find the maximum count in the dictionary\n    max_count = max(letter_counts.values())\n\n    # Create a list to store the letters with the maximum count\n    max_letters = []\n\n    # Iterate over the items in the dictionary\n    for letter, count in letter_counts.items():\n        # Check if the count is equal to the maximum count\n        if count == max_count:\n            # If it is, add the letter to the list\n            max_letters.append(letter)\n\n    # Create a dictionary to store the result\n    result = {}\n\n    # Iterate over the letters with the maximum count\n    for letter in max_letters:\n        # Add the letter to the result dictionary with its count\n        result[letter] = max_count\n\n    return result"}
{"task_id": "HumanEval/112", "solution": "def reverse_delete(s, c):\n    # Delete all characters in s that are equal to any character in c\n    result = ''.join(char for char in s if char not in c)\n\n    # Check if the result string is a palindrome\n    is_palindrome = result == result[::-1]\n\n    return result, is_palindrome"}
{"task_id": "HumanEval/113", "solution": "def odd_count(lst):\n    \"\"\"\n    Given a list of strings, where each string consists of only digits, return a list.\n    Each element i of the output should be \"the number of odd elements in the\n    string i of the input.\" where all the i's should be replaced by the number\n    of odd digits in the i'th string of the input.\n\n    Args:\n        lst (list): A list of strings, where each string consists of only digits.\n\n    Returns:\n        list: A list of strings representing the number of odd digits in each input string.\n\n    Examples:\n        >>> odd_count(['1234567'])\n        [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n        >>> odd_count(['3', '11111111'])\n        [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n         \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n    \"\"\"\n    result = []\n    for string in lst:\n        odd_count = sum(int(digit) % 2 != 0 for digit in string)\n        result.append(f\"the number of odd elements {odd_count}n the str{odd_count}ng {odd_count} of the {odd_count}nput.\")\n    return result"}
{"task_id": "HumanEval/114", "solution": "def minSubArraySum(nums):\n    \"\"\"\n    Given an array of integers nums, find the minimum sum of any non-empty sub-array\n    of nums.\n\n    Example\n    minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n    minSubArraySum([-1, -2, -3]) == -6\n    \"\"\"\n\n    # Initialize variables\n    min_sum = float('inf')\n    current_sum = 0\n\n    # Iterate through the array\n    for num in nums:\n        # Add the current number to the current sum\n        current_sum += num\n\n        # If the current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n        # Update the minimum sum if the current sum is smaller\n        if current_sum < min_sum:\n            min_sum = current_sum\n\n    # Return the minimum sum\n    return min_sum"}
{"task_id": "HumanEval/115", "solution": "import math\ndef max_fill(grid, capacity):\n    rows = len(grid)\n    cols = len(grid[0])\n    total_wells = 0\n    total_buckets = 0\n\n    # Count the total number of wells and buckets\n    for i in range(rows):\n        for j in range(cols):\n            if grid[i][j] == 1:\n                total_wells += 1\n                total_buckets += capacity\n\n    # Calculate the number of times the buckets need to be lowered\n    return math.ceil(total_wells / total_buckets)"}
{"task_id": "HumanEval/116", "solution": "def sort_array(arr):\n    \"\"\"\n    In this Kata, you have to sort an array of non-negative integers according to\n    number of ones in their binary representation in ascending order.\n    For similar number of ones, sort based on decimal value.\n\n    It must be implemented like this:\n    >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n    >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n    >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n    \"\"\"\n\n    def count_ones(n):\n        \"\"\"\n        Helper function to count the number of ones in the binary representation of a non-negative integer.\n        \"\"\"\n        count = 0\n        while n > 0:\n            count += n % 2\n            n //= 2\n        return count\n\n    return sorted(arr, key=lambda x: (count_ones(x), x))"}
{"task_id": "HumanEval/117", "solution": "def select_words(s, n):\n    words = s.split()\n    result = []\n    for word in words:\n        consonants = 0\n        for char in word:\n            if char.isalpha() and char.lower() not in 'aeiou':\n                consonants += 1\n        if consonants == n:\n            result.append(word)\n    return result"}
{"task_id": "HumanEval/118", "solution": "def get_closest_vowel(word):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    closest_vowel = ''\n    distance = float('inf')\n\n    for i in range(len(word)-1, -1, -1):\n        if word[i].lower() in vowels:\n            if i < distance:\n                closest_vowel = word[i]\n                distance = i\n\n    return closest_vowel.upper() if closest_vowel.islower() else closest_vowel"}
{"task_id": "HumanEval/119", "solution": "def match_parens(lst):\n    '''\n    You are given a list of two strings, both strings consist of open\n    parentheses '(' or close parentheses ')' only.\n    Your job is to check if it is possible to concatenate the two strings in\n    some order, that the resulting string will be good.\n    A string S is considered to be good if and only if all parentheses in S\n    are balanced. For example: the string '(())()' is good, while the string\n    '())' is not.\n    Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n\n    Examples:\n    match_parens(['()(', ')']) == 'Yes'\n    match_parens([')', ')']) == 'No'\n    '''\n\n    # Initialize a counter to keep track of the number of open parentheses\n    count = 0\n\n    # Iterate through each character in the first string\n    for char in lst[0]:\n        # If an open parenthesis is encountered, increment the counter\n        if char == '(':\n            count += 1\n        # If a close parenthesis is encountered, decrement the counter\n        elif char == ')':\n            count -= 1\n\n        # If the counter becomes negative, it means there are more close\n        # parentheses than open parentheses, so the string is not good\n        if count < 0:\n            return 'No'\n\n    # If the counter is not zero at the end, it means there are more open\n    # parentheses than close parentheses, so the string is not good\n    if count != 0:\n        return 'No'\n\n    # Initialize a counter to keep track of the number of open parentheses\n    count = 0\n\n    # Iterate through each character in the second string\n    for char in lst[1]:\n        # If an open parenthesis is encountered, increment the counter\n        if char == '(':\n            count += 1\n        # If a close parenthesis is encountered, decrement the counter\n        elif char == ')':\n            count -= 1\n\n        # If the counter becomes negative, it means there are more close\n        # parentheses than open parentheses, so the string is not good\n        if count < 0:\n            return 'No'\n\n    # If the counter is not zero at the end, it means there are more open\n    # parentheses than close parentheses, so the string is not good\n    if count != 0:\n        return 'No'\n\n    # If the code reaches this point, it means the string is good\n    return 'Yes'"}
{"task_id": "HumanEval/120", "solution": "def maximum(arr, k):\n    \"\"\"\n    Given an array arr of integers and a positive integer k, return a sorted list \n    of length k with the maximum k numbers in arr.\n\n    Example 1:\n\n        Input: arr = [-3, -4, 5], k = 3\n        Output: [-4, -3, 5]\n\n    Example 2:\n\n        Input: arr = [4, -4, 4], k = 2\n        Output: [4, 4]\n\n    Example 3:\n\n        Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n        Output: [2]\n\n    Note:\n        1. The length of the array will be in the range of [1, 1000].\n        2. The elements in the array will be in the range of [-1000, 1000].\n        3. 0 <= k <= len(arr)\n    \"\"\"\n\n    # Sort the array in descending order\n    arr.sort(reverse=True)\n\n    # Return the first k elements of the sorted array\n    return arr[:k]"}
{"task_id": "HumanEval/121", "solution": "def solution(lst):\n    \"\"\"\n    Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n\n    Parameters:\n    lst (list): A non-empty list of integers.\n\n    Returns:\n    int: The sum of all odd elements in even positions.\n\n    Examples:\n    >>> solution([5, 8, 7, 1])\n    12\n    >>> solution([3, 3, 3, 3, 3])\n    9\n    >>> solution([30, 13, 24, 321])\n    0\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum_odd_even = 0\n\n    # Iterate over the list starting from index 1 (even positions)\n    for i in range(1, len(lst), 2):\n        # Check if the element is odd\n        if lst[i] % 2 != 0:\n            # Add the odd element to the sum\n            sum_odd_even += lst[i]\n\n    return sum_odd_even"}
{"task_id": "HumanEval/122", "solution": "def add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the first k elements of the array\n    for i in range(k):\n        # Check if the element has at most two digits\n        if len(str(arr[i])) <= 2:\n            # Add the element to the sum\n            total_sum += arr[i]\n\n    # Return the sum\n    return total_sum\narr = [111, 21, 3, 4000, 5, 6, 7, 8, 9]\nk = 4"}
{"task_id": "HumanEval/123", "solution": "def get_odd_collatz(n):\n    \"\"\"\n    Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n    The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n    as follows: start with any positive integer n. Then each term is obtained from the \n    previous term as follows: if the previous term is even, the next term is one half of \n    the previous term. If the previous term is odd, the next term is 3 times the previous\n    term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n    Note: \n        1. Collatz(1) is [1].\n        2. returned list sorted in increasing order.\n\n    For example:\n    get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n    \"\"\"\n\n    # Initialize an empty list to store the odd numbers in the Collatz sequence\n    odd_collatz = []\n\n    # Iterate through the Collatz sequence until reaching 1\n    while n != 1:\n        # If the current number is odd, add it to the list\n        if n % 2 != 0:\n            odd_collatz.append(n)\n\n        # Update the current number based on the Collatz rule\n        if n % 2 == 0:\n            n = n // 2\n        else:\n            n = 3 * n + 1\n\n    # Add 1 to the list since it is the last number in the Collatz sequence\n    odd_collatz.append(1)\n\n    # Sort the list in increasing order\n    odd_collatz.sort()\n\n    return odd_collatz"}
{"task_id": "HumanEval/124", "solution": "def valid_date(date):\n    # Check if the date string is empty\n    if not date:\n        return False\n\n    # Split the date string into month, day, and year\n    try:\n        month, day, year = map(int, date.split('-'))\n    except ValueError:\n        return False\n\n    # Check if the month is valid\n    if month < 1 or month > 12:\n        return False\n\n    # Check if the day is valid for each month\n    if month in [1, 3, 5, 7, 8, 10, 12]:\n        if day < 1 or day > 31:\n            return False\n    elif month == 2:\n        if day < 1 or day > 29:\n            return False\n    else:\n        if day < 1 or day > 30:\n            return False\n\n    # Check if the year is valid\n    if year < 0:\n        return False\n\n    return True"}
{"task_id": "HumanEval/125", "solution": "def split_words(txt):\n    if ' ' in txt:\n        return txt.split()\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        count = 0\n        for char in txt:\n            if char.islower() and ord(char) % 2 != 0:\n                count += 1\n        return count"}
{"task_id": "HumanEval/126", "solution": "def is_sorted(lst):\n    '''\n    Given a list of numbers, return whether or not they are sorted\n    in ascending order. If list has more than 1 duplicate of the same\n    number, return False. Assume no negative numbers and only integers.\n\n    Examples\n    is_sorted([5]) \u279e True\n    is_sorted([1, 2, 3, 4, 5]) \u279e True\n    is_sorted([1, 3, 2, 4, 5]) \u279e False\n    is_sorted([1, 2, 3, 4, 5, 6]) \u279e True\n    is_sorted([1, 2, 3, 4, 5, 6, 7]) \u279e True\n    is_sorted([1, 3, 2, 4, 5, 6, 7]) \u279e False\n    is_sorted([1, 2, 2, 3, 3, 4]) \u279e True\n    is_sorted([1, 2, 2, 2, 3, 4]) \u279e False\n    '''\n\n    # Check if the list is empty or has only one element\n    if len(lst) <= 1:\n        return True\n\n    # Check if the list is sorted in ascending order\n    for i in range(1, len(lst)):\n        if lst[i] < lst[i-1]:\n            return False\n\n    # Check if the list has more than 1 duplicate of the same number\n    for i in range(len(lst)):\n        if lst.count(lst[i]) > 1:\n            return False\n\n    return True"}
{"task_id": "HumanEval/127", "solution": "def intersection(interval1, interval2):\n    start1, end1 = interval1\n    start2, end2 = interval2\n\n    # Check if the intervals don't intersect\n    if end1 < start2 or end2 < start1:\n        return \"NO\"\n\n    # Calculate the intersection interval\n    intersection_start = max(start1, start2)\n    intersection_end = min(end1, end2)\n\n    # Calculate the length of the intersection\n    intersection_length = intersection_end - intersection_start + 1\n\n    # Check if the length of the intersection is a prime number\n    if is_prime(intersection_length):\n        return \"YES\"\n    else:\n        return \"NO\"\ndef is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "HumanEval/128", "solution": "def prod_signs(arr):\n    if not arr:\n        return None\n\n    sign_product = 1\n    magnitude_sum = 0\n\n    for num in arr:\n        if num < 0:\n            sign_product *= -1\n        elif num > 0:\n            sign_product *= 1\n        magnitude_sum += abs(num)\n\n    return sign_product * magnitude_sum"}
{"task_id": "HumanEval/129", "solution": "def minPath(grid, k):\n    def dfs(row, col, path, visited):\n        if len(path) == k:\n            return path\n        visited[row][col] = True\n        neighbors = [(row - 1, col), (row + 1, col), (row, col - 1), (row, col + 1)]\n        min_path = None\n        for neighbor in neighbors:\n            r, c = neighbor\n            if 0 <= r < n and 0 <= c < n and not visited[r][c]:\n                path.append(grid[r][c])\n                min_path = dfs(r, c, path, visited)\n                path.pop()\n        visited[row][col] = False\n        return min_path\n\n    n = len(grid)\n    visited = [[False] * n for _ in range(n)]\n    min_path = None\n    for i in range(n):\n        for j in range(n):\n            path = [grid[i][j]]\n            min_path = dfs(i, j, path, visited)\n            if min_path:\n                break\n        if min_path:\n            break\n    return min_path"}
{"task_id": "HumanEval/130", "solution": "def tri(n):\n    tribonacci_sequence = [1, 3, 2]  # Initial values of the Tribonacci sequence\n\n    if n < 3:\n        return tribonacci_sequence[:n+1]\n\n    for i in range(3, n+1):\n        if i % 2 == 0:\n            tribonacci_sequence.append(1 + (i // 2))\n        else:\n            tribonacci_sequence.append(tribonacci_sequence[i-1] + tribonacci_sequence[i-2] + tribonacci_sequence[i-3])\n\n    return tribonacci_sequence"}
{"task_id": "HumanEval/131", "solution": "def digits(n):\n    \"\"\"\n    Given a positive integer n, return the product of the odd digits.\n    Return 0 if all digits are even.\n\n    Parameters:\n    n (int): The positive integer to process.\n\n    Returns:\n    int: The product of the odd digits in the given integer, or 0 if all digits are even.\n\n    Examples:\n    >>> digits(1)\n    1\n    >>> digits(4)\n    0\n    >>> digits(235)\n    15\n    \"\"\"\n\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n\n    # Initialize the product to 1\n    product = 1\n\n    # Iterate over each digit in the string\n    for digit in digits:\n        # Convert the digit back to an integer\n        digit = int(digit)\n\n        # Check if the digit is odd\n        if digit % 2 != 0:\n            # Multiply the product by the odd digit\n            product *= digit\n\n    # If the product is still 1, all digits are even\n    if product == 1:\n        return 0\n\n    return product"}
{"task_id": "HumanEval/132", "solution": "def is_nested(string):\n    stack = []\n    for char in string:\n        if char == '[':\n            stack.append(char)\n        elif char == ']':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0"}
{"task_id": "HumanEval/133", "solution": "import math\ndef sum_squares(lst):\n    \"\"\"\n    Calculates the sum of squared numbers in a given list,\n    rounding each element to the upper integer (ceiling) first.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of squared numbers, rounded to the upper integer.\n\n    Examples:\n        >>> sum_squares([1, 2, 3])\n        14\n        >>> sum_squares([1, 4, 9])\n        98\n        >>> sum_squares([1, 3, 5, 7])\n        84\n        >>> sum_squares([1.4, 4.2, 0])\n        29\n        >>> sum_squares([-2.4, 1, 1])\n        6\n    \"\"\"\n    squared_sum = 0\n    for num in lst:\n        squared_sum += math.ceil(num) ** 2\n    return squared_sum"}
{"task_id": "HumanEval/134", "solution": "def check_if_last_char_is_a_letter(txt):\n    if not txt:\n        return False\n    last_char = txt[-1]\n    if last_char.isalpha() and txt.rfind(' ' + last_char) == -1:\n        return True\n    return False"}
{"task_id": "HumanEval/135", "solution": "def can_arrange(arr):\n    \"\"\"\n    Create a function which returns the largest index of an element which\n    is not greater than or equal to the element immediately preceding it. If\n    no such element exists then return -1. The given array will not contain\n    duplicate values.\n\n    Examples:\n    can_arrange([1,2,4,3,5]) = 3\n    can_arrange([1,2,3]) = -1\n    \"\"\"\n\n    # Initialize the largest index to -1\n    largest_index = -1\n\n    # Iterate through the array from the second element to the end\n    for i in range(1, len(arr)):\n        # Check if the current element is not greater than the previous element\n        if arr[i] < arr[i-1]:\n            # Update the largest index if the current element is smaller\n            largest_index = i\n\n    return largest_index"}
{"task_id": "HumanEval/136", "solution": "def largest_smallest_integers(lst):\n    \"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n    the largest of negative integers, and 'b' is the smallest\n    of positive integers in a list.\n    If there is no negative or positive integers, return them as None.\n\n    Examples:\n    >>> largest_smallest_integers([2, 4, 1, 3, 5, 7])\n    (None, 1)\n    >>> largest_smallest_integers([])\n    (None, None)\n    >>> largest_smallest_integers([0])\n    (None, None)\n    \"\"\"\n\n    # Initialize variables to keep track of the largest and smallest negative and positive integers\n    largest_negative = None\n    smallest_positive = None\n\n    # Iterate through the list\n    for num in lst:\n        # Check if the number is negative\n        if num < 0:\n            # If the current negative number is larger than the previous largest negative number, update largest_negative\n            if largest_negative is None or num > largest_negative:\n                largest_negative = num\n        # Check if the number is positive\n        elif num > 0:\n            # If the current positive number is smaller than the previous smallest positive number, update smallest_positive\n            if smallest_positive is None or num < smallest_positive:\n                smallest_positive = num\n\n    # Return the largest negative and smallest positive integers as a tuple\n    return largest_negative, smallest_positive"}
{"task_id": "HumanEval/137", "solution": "def compare_one(a, b):\n    if isinstance(a, (int, float)) and isinstance(b, (int, float)):\n        if a == b:\n            return None\n        elif a > b:\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, str):\n        a = a.replace(',', '.')\n        b = b.replace(',', '.')\n        if a == b:\n            return None\n        elif float(a) > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, (int, float)) and isinstance(b, str):\n        b = b.replace(',', '.')\n        if a == float(b):\n            return None\n        elif a > float(b):\n            return a\n        else:\n            return b\n    elif isinstance(a, str) and isinstance(b, (int, float)):\n        a = a.replace(',', '.')\n        if float(a) == b:\n            return None\n        elif float(a) > b:\n            return a\n        else:\n            return b"}
{"task_id": "HumanEval/138", "solution": "def is_equal_to_sum_even(n):\n    \"\"\"\n    Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers.\n\n    Parameters:\n    n (int): The number to be evaluated.\n\n    Returns:\n    bool: True if n can be written as the sum of exactly 4 positive even numbers, False otherwise.\n\n    Examples:\n    >>> is_equal_to_sum_even(4)\n    False\n    >>> is_equal_to_sum_even(6)\n    False\n    >>> is_equal_to_sum_even(8)\n    True\n    \"\"\"\n\n    # Check if n is divisible by 4\n    if n % 4 == 0:\n        return True\n\n    # Check if n is divisible by 2\n    if n % 2 == 0:\n        return True\n\n    # Check if n can be written as the sum of 4 positive even numbers\n    for i in range(2, n // 2 + 1, 2):\n        for j in range(2, n // 2 + 1, 2):\n            for k in range(2, n // 2 + 1, 2):\n                for l in range(2, n // 2 + 1, 2):\n                    if i + j + k + l == n:\n                        return True\n\n    return False"}
{"task_id": "HumanEval/139", "solution": "def special_factorial(n):\n    \"\"\"The Brazilian factorial is defined as:\n    brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n    where n > 0\n\n    For example:\n    >>> special_factorial(4)\n    288\n\n    The function will receive an integer as input and should return the special\n    factorial of this integer.\n    \"\"\"\n\n    def factorial(num):\n        \"\"\"Helper function to calculate the factorial of a number.\"\"\"\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = 1\n    for i in range(n, 0, -1):\n        result *= factorial(i)\n\n    return result"}
{"task_id": "HumanEval/140", "solution": "def fix_spaces(text):\n    # Replace all spaces with underscores\n    text = text.replace(\" \", \"_\")\n\n    # Replace all consecutive spaces with -\n    while \"__\" in text:\n        text = text.replace(\"__\", \"_\")\n\n    return text"}
{"task_id": "HumanEval/141", "solution": "def file_name_check(file_name):\n    # Check if the file name contains more than three digits\n    if len([c for c in file_name if c.isdigit()]) > 3:\n        return 'No'\n\n    # Check if the file name contains exactly one dot\n    if file_name.count('.') != 1:\n        return 'No'\n\n    # Split the file name into substring before dot and substring after dot\n    substring_before_dot, substring_after_dot = file_name.split('.')\n\n    # Check if the substring before dot is not empty and starts with a letter\n    if not substring_before_dot or not substring_before_dot[0].isalpha():\n        return 'No'\n\n    # Check if the substring after dot is one of the allowed extensions\n    allowed_extensions = ['txt', 'exe', 'dll']\n    if substring_after_dot not in allowed_extensions:\n        return 'No'\n\n    return 'Yes'"}
{"task_id": "HumanEval/142", "solution": "def sum_squares(lst):\n    \"\"\"\n    This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n    multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n    change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n    \n    Examples:\n    For lst = [1,2,3] the output should be 6\n    For lst = []  the output should be 0\n    For lst = [-1,-5,2,-1,-5]  the output should be -126\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        if i % 3 == 0 and i % 4 != 0:\n            result += lst[i] ** 2\n        elif i % 4 == 0 and i % 3 != 0:\n            result += lst[i] ** 3\n        else:\n            result += lst[i]\n    return result"}
{"task_id": "HumanEval/143", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef words_in_sentence(sentence):\n    words = sentence.split()\n    prime_words = [word for word in words if is_prime(len(word))]\n    return ' '.join(prime_words)"}
{"task_id": "HumanEval/144", "solution": "def simplify(x, n):\n    x_num, x_den = map(int, x.split('/'))\n    n_num, n_den = map(int, n.split('/'))\n\n    simplified_num = x_num * n_num\n    simplified_den = x_den * n_den\n\n    if simplified_num % simplified_den == 0:\n        return True\n    else:\n        return False"}
{"task_id": "HumanEval/145", "solution": "def order_by_points(nums):\n    \"\"\"\n    Write a function which sorts the given list of integers\n    in ascending order according to the sum of their digits.\n    Note: if there are several items with similar sum of their digits,\n    order them based on their index in original list.\n\n    For example:\n    >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n    >>> order_by_points([]) == []\n    \"\"\"\n\n    def sum_of_digits(num):\n        \"\"\"\n        Helper function to calculate the sum of digits of a given number.\n        \"\"\"\n        return sum(int(digit) for digit in str(abs(num)))\n\n    return sorted(nums, key=lambda num: (sum_of_digits(num), nums.index(num)))"}
{"task_id": "HumanEval/146", "solution": "def specialFilter(nums):\n    \"\"\"\n    This function takes an array of numbers as input and returns the number of elements in the array that are greater than 10 \n    and both the first and last digits of a number are odd (1, 3, 5, 7, 9).\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The number of elements in the array that satisfy the given conditions.\n\n    Examples:\n        >>> specialFilter([15, -73, 14, -15])\n        1\n        >>> specialFilter([33, -2, -3, 45, 21, 109])\n        2\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 10 and (abs(num) % 10) % 2 != 0 and (abs(num) // 10**(len(str(abs(num))) - 1)) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "HumanEval/147", "solution": "def get_max_triples(n):\n    a = [i * i - i + 1 for i in range(1, n + 1)]\n    count = 0\n    for i in range(n - 2):\n        for j in range(i + 1, n - 1):\n            for k in range(j + 1, n):\n                if (a[i] + a[j] + a[k]) % 3 == 0:\n                    count += 1\n    return count"}
{"task_id": "HumanEval/148", "solution": "def bf(planet1, planet2):\n    planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n    if planet1 not in planets or planet2 not in planets:\n        return ()\n    else:\n        start_index = planets.index(planet1)\n        end_index = planets.index(planet2)\n        if start_index > end_index:\n            start_index, end_index = end_index, start_index\n        return tuple(planets[start_index+1:end_index])"}
{"task_id": "HumanEval/149", "solution": "def sorted_list_sum(lst):\n    # Filter out strings with odd lengths\n    filtered_lst = [s for s in lst if len(s) % 2 == 0]\n\n    # Sort the list by length and then alphabetically\n    sorted_lst = sorted(filtered_lst, key=lambda x: (len(x), x))\n\n    return sorted_lst"}
{"task_id": "HumanEval/150", "solution": "def is_prime(n):\n    \"\"\"Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef x_or_y(n, x, y):\n    \"\"\"A simple program which should return the value of x if n is \n    a prime number and should return the value of y otherwise.\n\n    Args:\n        n (int): The number to check.\n        x (int): The value to return if n is prime.\n        y (int): The value to return if n is not prime.\n\n    Returns:\n        int: The value of x if n is prime, otherwise the value of y.\n    \"\"\"\n    if is_prime(n):\n        return x\n    else:\n        return y"}
{"task_id": "HumanEval/151", "solution": "def double_the_difference(lst):\n    \"\"\"\n    Given a list of numbers, return the sum of squares of the numbers\n    in the list that are odd. Ignore numbers that are negative or not integers.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of squares of the odd numbers in the list.\n\n    Examples:\n        >>> double_the_difference([1, 3, 2, 0])\n        10\n        >>> double_the_difference([-1, -2, 0])\n        0\n        >>> double_the_difference([9, -2])\n        81\n        >>> double_the_difference([0])\n        0\n    \"\"\"\n    sum_of_squares = 0\n    for num in lst:\n        if isinstance(num, int) and num > 0 and num % 2 != 0:\n            sum_of_squares += num ** 2\n    return sum_of_squares"}
{"task_id": "HumanEval/152", "solution": "def compare(game, guess):\n    result = []\n    for i in range(len(game)):\n        difference = abs(game[i] - guess[i])\n        result.append(difference)\n    return result"}
{"task_id": "HumanEval/153", "solution": "def Strongest_Extension(class_name, extensions):\n    \"\"\"\n    Finds the strongest extension in a list of extensions and returns a string in the format 'ClassName.StrongestExtensionName'.\n\n    Parameters:\n    class_name (str): The name of the class.\n    extensions (list): A list of extension names.\n\n    Returns:\n    str: The strongest extension name in the format 'ClassName.StrongestExtensionName'.\n\n    Example:\n    >>> Strongest_Extension('Slices', ['SErviNGSliCes', 'Cheese', 'StuFfed'])\n    'Slices.SErviNGSliCes'\n    \"\"\"\n\n    strongest_extension = None\n    strongest_strength = float('-inf')\n\n    for extension in extensions:\n        cap_count = sum(1 for c in extension if c.isupper())\n        sm_count = sum(1 for c in extension if c.islower())\n        strength = cap_count - sm_count\n\n        if strength > strongest_strength:\n            strongest_extension = extension\n            strongest_strength = strength\n\n    return f\"{class_name}.{strongest_extension}\""}
{"task_id": "HumanEval/154", "solution": "def cycpattern_check(a, b):\n    \"\"\"\n    This function checks if the second word or any of its rotations is a substring in the first word.\n\n    Parameters:\n    a (str): The first word.\n    b (str): The second word.\n\n    Returns:\n    bool: True if the second word or any of its rotations is a substring in the first word, False otherwise.\n    \"\"\"\n\n    # Check if the second word is a substring in the first word\n    if b in a:\n        return True\n\n    # Check if any rotation of the second word is a substring in the first word\n    for i in range(1, len(b)):\n        b_rotated = b[i:] + b[:i]\n        if b_rotated in a:\n            return True\n\n    return False"}
{"task_id": "HumanEval/155", "solution": "def even_odd_count(num):\n    \"\"\"\n    Given an integer, return a tuple that has the number of even and odd digits respectively.\n\n    Parameters:\n    num (int): The integer to count the even and odd digits in.\n\n    Returns:\n    tuple: A tuple containing the count of even digits and odd digits respectively.\n\n    Examples:\n    >>> even_odd_count(-12)\n    (1, 1)\n    >>> even_odd_count(123)\n    (1, 2)\n    \"\"\"\n\n    # Convert the number to a string to iterate over its digits\n    digits = str(abs(num))\n\n    # Initialize counters for even and odd digits\n    even_count = 0\n    odd_count = 0\n\n    # Iterate over each digit in the string\n    for digit in digits:\n        # Convert the digit back to an integer\n        digit = int(digit)\n\n        # Check if the digit is even or odd\n        if digit % 2 == 0:\n            even_count += 1\n        else:\n            odd_count += 1\n\n    # Return the count of even and odd digits as a tuple\n    return (even_count, odd_count)"}
{"task_id": "HumanEval/156", "solution": "def int_to_mini_roman(number):\n    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152) == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\n\n    # Define the mapping of integer values to roman numerals\n    roman_mapping = {\n        1: 'i',\n        4: 'iv',\n        5: 'v',\n        9: 'ix',\n        10: 'x',\n        40: 'xl',\n        50: 'l',\n        90: 'xc',\n        100: 'c',\n        400: 'cd',\n        500: 'd',\n        900: 'cm',\n        1000: 'm'\n    }\n\n    # Initialize an empty string to store the roman numeral representation\n    roman_numeral = ''\n\n    # Iterate through the roman_mapping in descending order of values\n    for value, numeral in sorted(roman_mapping.items(), reverse=True):\n        # Repeat the corresponding numeral as many times as possible\n        while number >= value:\n            roman_numeral += numeral\n            number -= value\n\n    return roman_numeral.lower()"}
{"task_id": "HumanEval/157", "solution": "def right_angle_triangle(a, b, c):\n    '''\n    Given the lengths of the three sides of a triangle. Return True if the three\n    sides form a right-angled triangle, False otherwise.\n    A right-angled triangle is a triangle in which one angle is right angle or \n    90 degree.\n    Example:\n    right_angle_triangle(3, 4, 5) == True\n    right_angle_triangle(1, 2, 3) == False\n    '''\n    sides = [a, b, c]\n    sides.sort()\n    return sides[0]**2 + sides[1]**2 == sides[2]**2"}
{"task_id": "HumanEval/158", "solution": "def find_max(words):\n    max_word = \"\"\n    max_unique_chars = 0\n\n    for word in words:\n        unique_chars = set(word)\n        if len(unique_chars) > max_unique_chars:\n            max_word = word\n            max_unique_chars = len(unique_chars)\n        elif len(unique_chars) == max_unique_chars:\n            if word < max_word:\n                max_word = word\n\n    return max_word"}
{"task_id": "HumanEval/159", "solution": "def eat(number, need, remaining):\n    total_eaten = number + min(need, remaining)\n    carrots_left = remaining - min(need, remaining)\n    return [total_eaten, carrots_left]"}
{"task_id": "HumanEval/160", "solution": "def do_algebra(operator, operand):\n    if len(operator) != len(operand) - 1:\n        raise ValueError(\"Invalid input: operator and operand lists have incompatible lengths.\")\n\n    if len(operand) < 2:\n        raise ValueError(\"Invalid input: operand list must have at least two elements.\")\n\n    result = operand[0]\n    for i in range(len(operator)):\n        if operator[i] == '+':\n            result += operand[i + 1]\n        elif operator[i] == '-':\n            result -= operand[i + 1]\n        elif operator[i] == '*':\n            result *= operand[i + 1]\n        elif operator[i] == '//':\n            result //= operand[i + 1]\n        elif operator[i] == '**':\n            result **= operand[i + 1]\n        else:\n            raise ValueError(\"Invalid operator: \" + operator[i])\n\n    return result"}
{"task_id": "HumanEval/161", "solution": "def solve(s):\n    # Check if the string contains any letters\n    if any(c.isalpha() for c in s):\n        # Reverse the case of each letter in the string\n        return ''.join(c.swapcase() if c.isalpha() else c for c in s)\n    else:\n        # Reverse the entire string if it contains no letters\n        return s[::-1]"}
{"task_id": "HumanEval/162", "solution": "import hashlib\ndef string_to_md5(text):\n    \"\"\"\n    Given a string 'text', return its md5 hash equivalent string.\n    If 'text' is an empty string, return None.\n\n    >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n    True\n    >>> string_to_md5('') is None\n    True\n    \"\"\"\n    if not text:\n        return None\n    else:\n        return hashlib.md5(text.encode()).hexdigest()"}
{"task_id": "HumanEval/163", "solution": "def generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n\n    # Ensure a and b are positive integers\n    a = abs(int(a))\n    b = abs(int(b))\n\n    # Swap a and b if a > b\n    if a > b:\n        a, b = b, a\n\n    # Generate even digits between a and b\n    even_digits = [i for i in range(a, b+1) if i % 2 == 0]\n\n    return even_digits"}
