{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list of shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of nums.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n > len(nums):\n        raise ValueError(\"n should be less than or equal to the length of nums.\")\n\n    return heapq.nlargest(n, nums)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the two numbers to get a number with only the bits that differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is exactly 1, then the numbers differ at one bit position only\n    return count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string to search for words.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of the individual elements.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the squares of the individual elements.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([-1, -2, -3, -4, -5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required to get the same string.\n\n    Examples:\n        >>> find_rotations(\"aaaa\")\n        1\n        >>> find_rotations(\"abcde\")\n        5\n        >>> find_rotations(\"xyz\")\n        3\n    \"\"\"\n    n = len(string)\n    rotations = []\n\n    for i in range(n):\n        rotated_string = string[i:] + string[:i]\n        rotations.append(rotated_string)\n\n    min_rotations = min(rotations, key=lambda x: (x[0], x))\n    return rotations.index(min_rotations)\n\n# Test cases\nassert find_rotations(\"aaaa\") == 1\nassert find_rotations(\"abcde\") == 5\nassert find_rotations(\"xyz\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    if char in string:\n        first_index = string.find(char)\n        last_index = string.rfind(char)\n        modified_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n        return modified_string\n    else:\n        return string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The input matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The string to be checked.\n\n    Returns:\n        bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into words using underscore as the delimiter\n    words = input_string.split('_')\n\n    # Check if each word is lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    clean_chars = set(string2)\n    return ''.join(char for char in string1 if char not in clean_chars)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    if num < 10:\n        return False\n\n    digits = [int(digit) for digit in str(num)]\n    product = 1\n    for digit in digits:\n        if digit != 0:\n            product *= digit\n\n    return product == num"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse_num = int(str(num)[::-1])  # Reverse the number\n    return num == reverse_num * 2 - 1  # Check if the number is one less than twice its reverse"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and join them to form the largest number\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a < 0 and b > 0) or (a > 0 and b < 0)"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    This function calculates the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n    int: The nth octagonal number.\n\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(nums):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = nums[0]\n    for num in nums:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the tuple_list is empty.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    if not tuple_list:\n        raise ValueError(\"tuple_list cannot be empty\")\n\n    max_diff = float('-inf')\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        lst (list): A list of tuples containing subject names and their corresponding marks.\n\n    Returns:\n        list: A new list of tuples sorted by the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list to be flattened and summed.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    if not lst:\n        return 0\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n    return lst[0] + recursive_list_sum(lst[1:])"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Examples:\n        >>> pos_count([1,-2,3,-4])\n        2\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    This function calculates the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The index of the Bell number to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell number at index n.\n\n    \"\"\"\n    bell = [1]  # Initialize the list with the first Bell number\n\n    for i in range(1, n):\n        new_bell = [0] * (i + 1)  # Create a new list for the next Bell number\n        new_bell[0] = bell[-1]  # The first element of the new Bell number is the last element of the previous Bell number\n\n        for j in range(1, i + 1):\n            new_bell[j] = new_bell[j - 1] + bell[j - 1]  # Calculate the next element of the new Bell number\n\n        bell = new_bell  # Update the list of Bell numbers\n\n    return bell[-1]  # Return the last element of the list, which represents the number of ways to partition the Bell number at index n"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        elif not increasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        lst (list): The main list to be checked.\n        sublst (list): The sublist to be checked for.\n\n    Returns:\n        bool: True if the sublist is present in the main list, False otherwise.\n    \"\"\"\n    return sublst in lst"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all the given tuples have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i ** 2 - j ** 2 == num:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the given sequence follows the patterns array.\n\n    Args:\n        patterns (list): A list of patterns to compare against the sequence.\n        sequence (list): A list of elements to check against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Args:\n        lst (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    return [t for t in lst if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string for easier manipulation\n    num_str = str(num)\n\n    # Calculate the sum of the digits at odd positions and the sum of the digits at even positions\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n\n    # Check if the difference between the sums is divisible by 11\n    return abs(odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n        word (str): The word to check the length of.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 == 1"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is defined as the sum of the first n positive integers,\n    i.e., 1 + 2 + 3 + ... + n.\n\n    Args:\n        n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> tetrahedral_number(5)\n        35\n        >>> tetrahedral_number(10)\n        120\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (n + 1) // 2"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is a sequence of integers defined by the following rules:\n    - The first two terms of the sequence are both equal to 1.\n    - Each subsequent term is obtained by adding the previous two terms together.\n\n    Args:\n        n (int): The position of the desired number in the sequence.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> newman_conway(10)\n        6\n        >>> newman_conway(1)\n        1\n        >>> newman_conway(2)\n        1\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two terms\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    \"\"\"\n    return 4 * math.pi * radius**2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function calculates the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    \"\"\"\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Examples:\n        >>> closest_num(11)\n        10\n    \"\"\"\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    int: The length of the longest word.\n\n    Example:\n    >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n    7\n    \"\"\"\n    longest_len = 0\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n    return longest_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number in which the digits are repeating in a pattern of alternating zeros and ones.\n    For example, 1212121 is an undulating number as the digits 1, 0, 1, 0, 1, 0, 1 repeat in the pattern 1, 0, 1.\n\n    Args:\n        num (int): The number to check for undulating property.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    pattern = '10' * (len(num_str) // 2)\n    return num_str == pattern + num_str[:len(num_str) // 2]"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int: The result of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, this function returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Example:\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    \"\"\"\n    min_length = float('inf')  # Initialize min_length with infinity\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n\n    Parameters:\n    n (int): The integer for which the number of divisors is to be calculated.\n\n    Returns:\n    int: The number of divisors of n.\n\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for sublist in flattened_list:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(nums):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([1, 2, 3, 4, 5])\n        12.0\n    \"\"\"\n    if not isinstance(nums, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(nums) == 0:\n        raise ValueError(\"List cannot be empty.\")\n\n    result = 1\n    for num in nums:\n        result *= num\n\n    return result / len(nums)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    binary = ''\n    while num > 0:\n        binary = str(num % 2) + binary\n        num //= 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n        int: The next smallest palindrome of the specified integer.\n\n    Examples:\n        >>> next_smallest_palindrome(99)\n        101\n    \"\"\"\n    # Convert the integer to a string for easier manipulation\n    num_str = str(n)\n    length = len(num_str)\n\n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment it by 1 and return\n        return int(str(n + 1))\n\n    # Find the middle index of the number\n    mid = length // 2\n\n    # Split the number into two halves\n    left_half = num_str[:mid]\n    right_half = num_str[mid + length % 2:]\n\n    # Check if the left half is greater than the right half\n    if int(left_half) > int(right_half[::-1]):\n        # If it is, increment the left half by 1 and append it to the right half\n        left_half = str(int(left_half) + 1)\n        return int(left_half + left_half[:length % 2][::-1])\n\n    # If the left half is smaller or equal to the right half, increment the left half by 1 and append it to the right half\n    left_half = str(int(left_half) + 1)\n    return int(left_half + left_half[:length % 2][::-1])"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        IndexError: If the k is out of range.\n\n    Examples:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of range\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to be converted.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() for word in words)\n    return camel_str[0].lower() + camel_str[1:]"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of n objects taken m at a time\n    without repetition.\n\n    Args:\n        n (int): The total number of objects.\n        m (int): The number of objects to be chosen.\n\n    Returns:\n        int: The Eulerian number a(n, m).\n\n    Raises:\n        ValueError: If n or m is negative.\n\n    Examples:\n        >>> eulerian_num(3, 1)\n        4\n        >>> eulerian_num(5, 3)\n        60\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in alphabetical order.\n\n    Example:\n        >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n\n    Args:\n        lst (list): A list of boolean values.\n\n    Returns:\n        int: The count of True values in the list.\n\n    Examples:\n        >>> count([True, False, True])\n        2\n        >>> count([False, False, False])\n        0\n        >>> count([True, True, True])\n        3\n    \"\"\"\n    return sum(1 for value in lst if value)"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    def rotate_binary_string(string):\n        return string[-1] + string[:-1]\n\n    def count_odd_values(string):\n        return sum(int(digit) % 2 == 1 for digit in string)\n\n    rotated_string = binary_string\n    count = 0\n\n    for _ in range(num_rotations):\n        rotated_string = rotate_binary_string(rotated_string)\n        count += count_odd_values(rotated_string)\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        list: A list of common elements found in all the nested lists.\n\n    \"\"\"\n    common_elements = set(nested_lists[0])  # Initialize with the first list\n\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(nums):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n\n    Args:\n        nums (tuple): A tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the input tuple.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or not sorted.\n\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    if arr[0] != arr[1]:\n        return arr[0]\n\n    if arr[-1] != arr[-2]:\n        return arr[-1]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] != arr[mid-1] and arr[mid] != arr[mid+1]:\n            return arr[mid]\n\n        if (mid % 2 == 0 and arr[mid] == arr[mid-1]) or (mid % 2 == 1 and arr[mid] == arr[mid+1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    raise ValueError(\"No element appears only once in the array.\")"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n    \"\"\"\n    max_product = 0\n    for tup1 in lst:\n        for tup2 in lst:\n            product = abs(tup1[0] * tup2[1])\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def divisors_sum(num):\n        divisors = [1]\n        for i in range(2, int(num/2)+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    amicable_nums = set()\n    for num in range(2, n+1):\n        div_sum = divisors_sum(num)\n        if div_sum != num and divisors_sum(div_sum) == num:\n            amicable_nums.add(num)\n            amicable_nums.add(div_sum)\n\n    return sum(amicable_nums)"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    \"\"\"\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        diff = count_zeroes - count_ones\n        if diff < 0:\n            diff = -diff\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n\n    Returns:\n        int: The sum of common divisors.\n\n    Examples:\n        >>> sum_common_divisors(10, 15)\n        6\n    \"\"\"\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    This function multiplies two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        words (str): The input string containing words separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    word_list = words.split()\n    return [word for word in word_list if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Args:\n        matrix (list): A square matrix of integers.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)  # Get the size of the matrix\n    expected_sum = n * (n ** 2 + 1) // 2  # Calculate the expected sum of a magic square\n\n    # Check row sums\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    # Check column sums\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != expected_sum:\n            return False\n\n    # Check diagonal sums\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n - i - 1] for i in range(n))\n    if diag_sum1 != expected_sum or diag_sum2 != expected_sum:\n        return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    item_count = {}\n    max_item = lst[0]\n    max_count = 1\n\n    for item in lst:\n        if item in item_count:\n            item_count[item] += 1\n        else:\n            item_count[item] = 1\n\n        if item_count[item] > max_count:\n            max_item = item\n            max_count = item_count[item]\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string_list = list(string)\n    vowel_list = [char for char in string_list if char.lower() in vowels]\n    vowel_list.reverse()\n    for i in range(len(string_list)):\n        if string_list[i].lower() in vowels:\n            string_list[i] = vowel_list.pop(0)\n    return ''.join(string_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Converts a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple to be converted.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    This function calculates the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    \"\"\"\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    This function takes an array of integers as input and returns the ratio of zeroes to non-zeroes in the array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(num):\n    \"\"\"\n    Check whether the given number can be represented as the sum of non-zero powers of 2.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if num == 0:\n        return False\n\n    while num > 0:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n\n    return True"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        set: A set containing all the numbers from the input list.\n\n    Example:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {3, 4, 5, 7, 1}\n    \"\"\"\n    return set(num for sublist in lst for num in sublist)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Args:\n        lst (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n\n    Examples:\n        >>> pancake_sort([15, 79, 25, 38, 69])\n        [15, 25, 38, 69, 79]\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        Flips the first k elements of the given list.\n\n        Args:\n            arr (list): The list to be flipped.\n            k (int): The number of elements to be flipped.\n\n        Returns:\n            list: The flipped list.\n        \"\"\"\n        return arr[:k][::-1] + arr[k:]\n\n    def find_max_index(arr, k):\n        \"\"\"\n        Finds the index of the maximum element in the first k elements of the given list.\n\n        Args:\n            arr (list): The list to search in.\n            k (int): The number of elements to search in.\n\n        Returns:\n            int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(1, k):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n, 0, -1):\n        max_index = find_max_index(lst, i)\n        if max_index != i - 1:\n            lst = flip(lst, max_index + 1)\n            lst = flip(lst, i)\n\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of numbers.\n\n    Returns:\n        int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_Abs_Diff((2, 1, 5, 3))\n        4\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    min_val = max_val = arr[0]\n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    n (int): The target value.\n\n    Returns:\n    tuple or None: A tuple containing x and y, or None if no solution exists.\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return x, y\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return x, y\n    else:\n        return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from lst1 that are present in lst2.\n\n    Args:\n        lst1 (list): The first list.\n        lst2 (list): The second list.\n\n    Returns:\n        list: A new list with elements from lst1 that are not present in lst2.\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2):\n        total += n - 2 * i\n    return total"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    seen = set()\n    for num in nums:\n        for seen_num in seen:\n            if num ^ seen_num % 2 == 0:\n                count += 1\n        seen.add(num)\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n        >>> next_power_of_2(0)\n        1\n        >>> next_power_of_2(1)\n        1\n        >>> next_power_of_2(2)\n        2\n        >>> next_power_of_2(3)\n        4\n        >>> next_power_of_2(4)\n        4\n        >>> next_power_of_2(5)\n        8\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Finds the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        IndexError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise IndexError(\"Start or end index is out of range\")\n\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25.0\n    >>> perimeter_pentagon(3.5)\n    17.5\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n        index += 1\n    return count\n\n# Test the function\nassert count_occurrence(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if not t:\n        return True  # Empty tuple has same data type for all elements\n\n    first_type = type(t[0])\n    for element in t[1:]:\n        if type(element) != first_type:\n            return False\n\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if the given element is the majority element in the sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        n (int): The length of the array.\n        element: The element to check for majority.\n\n    Returns:\n        bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == element:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        num (int): The number to count set bits in.\n\n    Returns:\n        int: The number of set bits in the given number.\n\n    Examples:\n        >>> count_set_bits(2)\n        1\n        >>> count_set_bits(7)\n        3\n        >>> count_set_bits(0)\n        0\n    \"\"\"\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string from which characters with odd index values are to be removed.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Args:\n        a (int): The first number.\n        b (int): The second number.\n        c (int): The third number.\n\n    Returns:\n        int: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character and returns the modified string.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the given character.\n    \"\"\"\n    return string.replace(\" \", character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to be returned.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    num (int): The number for which even bits need to be set.\n\n    Returns:\n    int: The number with even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    \"\"\"\n    mask = 0xAAAAAAAA  # 10101010101010101010101010101010 in binary\n    return num | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    \"\"\"\n    count = 0\n    length = len(string)\n\n    for i in range(length):\n        for j in range(i + 1, length + 1):\n            if string[i:j]:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The maximum value allowed in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n\n    Examples:\n        >>> get_total_number_of_sequences(10, 4)\n        4\n    \"\"\"\n    # Initialize a 2D list to store the number of sequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # There is only one sequence of length 1, with any positive integer\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Iterate over the remaining lengths and values\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # Calculate the number of sequences with the current value\n            dp[i][j] = dp[i - 1][j // 2]\n\n    # Return the total number of sequences\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list with the last element replaced by the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string to count the characters from.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the input number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the input number.\n    \"\"\"\n    # Find the square root of the input number\n    sqrt = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt * sqrt == num:\n        # If the input number is already a perfect square, return the next perfect square\n        return (sqrt + 1) ** 2\n    else:\n        # If the input number is not a perfect square, return the next perfect square\n        return (sqrt + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    n = len(arr)\n    inc = [0] * n  # stores the maximum sum increasing subsequence ending at each index\n    dec = [0] * n  # stores the maximum sum decreasing subsequence starting from each index\n\n    # Calculate the maximum sum increasing subsequence\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[j] < arr[i]:\n                inc[i] = max(inc[i], inc[j] + arr[i])\n\n    # Calculate the maximum sum decreasing subsequence\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[j] < arr[i]:\n                dec[i] = max(dec[i], dec[j] + arr[i])\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The length of the longest palindromic subsequence.\n\n    Examples:\n        >>> lps(\"TENS FOR TENS\")\n        5\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(t, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Args:\n        t (tuple): The input tuple.\n        element: The element to count in the tuple.\n\n    Returns:\n        int: The count of the element in the tuple.\n    \"\"\"\n    return t.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n    \"\"\"\n    return [element] + [element + x for x in lst]"}
{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates of the given complex number.\n    \"\"\"\n    return cmath.polar(num)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    result = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n-1)\n        for combination in sub_combinations:\n            result.append((lst[i],) + combination)\n    return result"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number to check for prime numbers.\n\n    Returns:\n    int: The number of prime numbers less than the given non-negative number.\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    tuple: A tuple containing the second number (b) and then the first number (a).\n    \"\"\"\n    return b, a"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the maximum elements from the input tuples.\n\n    Example:\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the desired prime number.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    primes = [2, 3]  # Start with the first two newman\u2013shanks\u2013williams primes\n    while len(primes) < n:\n        next_prime = primes[-1] + 2  # Increment by 2 to skip even numbers\n        is_prime = True\n        for p in primes:\n            if next_prime % p == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(next_prime)\n\n    return primes[n-1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of the division operation element-wise.\n\n    Raises:\n        ZeroDivisionError: If any element in tuple2 is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n    \"\"\"\n    if any(x == 0 for x in tuple2):\n        raise ZeroDivisionError(\"Cannot divide by zero\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    \"\"\"\n    if human_age <= 2:\n        return human_age * 10\n    else:\n        return 20 + (human_age - 2) * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements to skip between each resulting list.\n\n    Returns:\n        list: A list of lists, where each sublist contains the elements from the input list at every nth position.\n\n    Example:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    return [lst[i::n] for i in range(n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    \"\"\"\n    return 4 * side_length * side_length"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\n# Test the function\nassert square_sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is defined as the sum of all positive integers up to and including n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The n'th star number.\n\n    Examples:\n        >>> find_star_num(3)\n        37\n    \"\"\"\n    return sum(range(1, n + 1))"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character whose ASCII value needs to be determined.\n\n    Returns:\n    int: The ASCII value of the input character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of even numbers at even positions in the list.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(lst[::2])"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    \"\"\"\n    Extracts the rear element from each tuple in the given list and returns a new list containing these rear elements.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: A new list containing the rear elements of the input tuples.\n\n    Example:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    return [t[-1] for t in lst]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n# Test the function\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Example:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through the even index binomial coefficients\n    for i in range(0, n+1, 2):\n        # Calculate the binomial coefficient using the formula C(n, k) = n \ufffd k\n        coefficient = factorial(n) // (factorial(i) * factorial(n - i))\n\n        # Add the coefficient to the sum\n        sum += coefficient\n\n    return sum\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a number.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The factorial of the input number.\n\n    Example:\n    >>> factorial(5)\n    120\n    \"\"\"\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n\n    # Recursive case: factorial of n is n * factorial(n-1)\n    return n * factorial(n-1)"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(5)\n    125\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result as a new list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise difference between list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([10, 20, 30], [5, 10, 15])\n        [5, 10, 15]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if int(digit) > num_str.count(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to be checked.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    This function checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r\"ab{2,3}\"\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array formed by repeating the given array k times.\n\n    Args:\n        arr (list): The original array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the original array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    \"\"\"\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr, n)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum + (k - 2) * original_sum\n\n    return modified_sum\ndef max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray in the given array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n\n    Returns:\n        int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Example:\n    >>> square_sum(2)\n    20\n    \"\"\"\n    return sum(i**2 for i in range(2, 2*n, 2))\n\n# Test the function\nassert square_sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with the maximum length.\n\n    Example:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_list[0]"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the first number divided by the second number, rounded down to the nearest integer.\n\n    Parameters:\n    a (int): The dividend.\n    b (int): The divisor.\n\n    Returns:\n    int: The quotient of a divided by b, rounded down to the nearest integer.\n    \"\"\"\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(base, height):\n    \"\"\"\n    This function calculates the length of the third side of a right angled triangle.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The length of the perpendicular height of the triangle.\n\n    Returns:\n    float: The length of the third side of the right angled triangle.\n\n    \"\"\"\n    return math.sqrt(base**2 + height**2)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n\n    return max_val"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Write a python function to count inversions in an array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        nested_list (list): A nested list structure.\n\n    Returns:\n        list: A flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        lst (list): A list of tuples containing names and corresponding scores.\n\n    Returns:\n        tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    Example:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    aggregates = {}\n    for name, score in lst:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n\n    max_name = max(aggregates, key=aggregates.get)\n    max_aggregate = aggregates[max_name]\n\n    return (max_name, max_aggregate)"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    This function calculates the count of all binary sequences of length 2n such that the sum of the first n bits is equal to the sum of the last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence.\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    \"\"\"\n    def count_helper(n, diff):\n        if n == 0:\n            return 1 if diff == 0 else 0\n        if diff < -n or diff > n:\n            return 0\n        return count_helper(n - 1, diff - 1) + count_helper(n - 1, diff + 1)\n\n    return count_helper(2 * n, 0)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Recursively finds the depth of a dictionary.\n\n    Args:\n        d (dict): The dictionary to find the depth of.\n\n    Returns:\n        int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n\n    depths = []\n    for value in d.values():\n        if isinstance(value, dict):\n            depths.append(dict_depth(value))\n\n    if depths:\n        return max(depths) + 1\n    else:\n        return 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list that start with the letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words from the list that start with the letter 'p'.\n\n    Raises:\n        ValueError: If there are no words in the list that start with the letter 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"There are no two words in the list that start with the letter 'p'.\")\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    dp[i] = arr[i]\n\n    for j in range(i + 1, n):\n        if arr[j] > arr[i]:\n            dp[j] = max(dp[j], dp[i] + arr[j])\n\n    for j in range(i - 1, k - 1, -1):\n        if arr[j] < arr[i]:\n            dp[j] = max(dp[j], dp[i] + arr[j])\n\n    return max(dp)"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If num is greater than the length of either list1 or list2.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num > len(list1) or num > len(list2):\n        raise ValueError(\"num is greater than the length of either list1 or list2.\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[i] * list2[0], list1[0] * list2[i])\n        max_index1 = 0\n        max_index2 = 0\n        for j in range(len(list1)):\n            for k in range(len(list2)):\n                if list1[j] * list2[k] > max_product:\n                    max_product = list1[j] * list2[k]\n                    max_index1 = j\n                    max_index2 = k\n        products.append(max_product)\n        list1.pop(max_index1)\n        list2.pop(max_index2)\n\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two input numbers.\n    \"\"\"\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        tuple: A tuple containing the characters of the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns the number with the left most unset bit set to 1.\n\n    Args:\n        num (int): The input integer.\n\n    Returns:\n        int: The number with the left most unset bit set to 1.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        14\n        >>> set_left_most_unset_bit(0)\n        1\n        >>> set_left_most_unset_bit(15)\n        15\n    \"\"\"\n    if num == 0:\n        return 1\n\n    mask = 1\n    while num & mask:\n        mask = mask << 1\n\n    return num | mask"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = (1/3) * base_area * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n        >>> highest_power_of_2(10)\n        8\n        >>> highest_power_of_2(16)\n        16\n        >>> highest_power_of_2(0)\n        0\n    \"\"\"\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n    return 2 ** (power - 1)\n\n# Test the function\nassert highest_power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers in which each number is the sum of the two previous numbers.\n    The first two Lucas numbers are 2 and 1.\n\n    Args:\n        n (int): The index of the Lucas number to find.\n\n    Returns:\n        int: The n'th Lucas number.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> find_lucas(1)\n        1\n        >>> find_lucas(2)\n        2\n        >>> find_lucas(9)\n        76\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n\n    a, b = 2, 1\n    for _ in range(3, n + 1):\n        a, b = b, a + b\n\n    return b"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to the elements.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert multiple lists to a nested dictionary.\n\n    Args:\n        *lists: Variable number of lists.\n\n    Returns:\n        A list of nested dictionaries.\n\n    Raises:\n        ValueError: If the number of lists is less than 2 or if the lengths of the lists are not equal.\n\n    Example:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(lists) < 2:\n        raise ValueError(\"At least two lists are required.\")\n\n    keys, values, result = lists[0], lists[1:], []\n\n    if any(len(lst) != len(keys) for lst in lists[1:]):\n        raise ValueError(\"All lists must have the same length.\")\n\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values[j][i]: lists[j+1][i] for j in range(len(values))}}\n        result.append(nested_dict)\n\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(set(t)) == len(t)"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character found in the string.\n        None: If no non-repeated character is found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Args:\n        a (float): The first number.\n        b (float): The second number.\n        c (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    return numbers[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number in the input list.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    result = []\n    for number in numbers:\n        digit_sum = sum(int(digit) for digit in str(number))\n        result.append(digit_sum)\n    return result"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The minimum of the two input numbers.\n    \"\"\"\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to search within.\n        element: The element to check for.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number for which parity needs to be checked.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 == 1"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the even numbers from the input list.\n\n    Parameters:\n    lst (list): The input list containing numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [t[n] for t in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing two integers with the highest product.\n\n    Raises:\n        ValueError: If the input list is empty or contains less than two elements.\n\n    Examples:\n        >>> max_Product([1,2,3,4,7,0,8,4])\n        (7, 8)\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input list must contain at least two elements.\")\n\n    max_num1 = max(arr)\n    arr.remove(max_num1)\n    max_num2 = max(arr)\n\n    return (max_num1, max_num2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the list with the maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list with the maximum length.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n    \"\"\"\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i**3 for i in range(2, 2*n, 2))\n\n# Test the function\nassert cube_sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple using a delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to use for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in t)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of the cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): The input tuple of strings.\n\n    Returns:\n        list: A list containing the rear index elements of the strings in the input tuple.\n\n    Example:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Converts a date in yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Incorrect date format. Please provide a date in yyyy-mm-dd format.\")"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Extracts the elementwise and of the given two tuples.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a & b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its coefficients a, b, and c.\n\n    Parameters:\n    a (float): The coefficient of the x^2 term.\n    b (float): The coefficient of the x term.\n    c (float): The constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): The length of the top base of the trapezium.\n    b (float): The length of the bottom base of the trapezium.\n    c (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    \"\"\"\n    median = (a + b) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The array of numbers.\n        num (int): The number to compare against the array elements.\n\n    Returns:\n        bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    return all(element < num for element in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The number from which the last digit needs to be extracted.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return int(str(number)[-1])\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the even-indexed characters.\n\n    Parameters:\n    string (str): The input string from which odd characters will be removed.\n\n    Returns:\n    str: The new string with only the even-indexed characters.\n    \"\"\"\n    return string[::2]"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(nums):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: A single integer formed by joining the input list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    return int(''.join(map(str, nums)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    This function takes a sentence as input and returns the first adverb and their positions in the sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n    \"\"\"\n    adverbs = ['clearly', 'easily', 'often', 'quickly', 'slowly', 'today', 'always', 'never', 'here', 'there']\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:\n            return i, i + len(word) - 1, word\n    return None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculates the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    \"\"\"\n    return 6 * size * size"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(t1, t2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the index wise multiplication of the elements from t1 and t2.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(map(lambda x, y: tuple(map(lambda a, b: a * b, x, y)), t1, t2))\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, elements):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Args:\n        lst (tuple): The input tuple.\n        elements (list): The list of elements to count.\n\n    Returns:\n        int: The total count of occurrences of elements in the tuple.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n        3\n    \"\"\"\n    count = 0\n    for element in elements:\n        count += lst.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of the individual elements.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the cubes of the individual elements.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to calculate the sum for.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        a, b, c = 3, 5, 8\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b\n        return c"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    \"\"\"\n    Extracts strings of specified size from a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        size (int): The desired size of the extracted strings.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [s for s in lst if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return ''.join(string.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function takes a number n as input and returns the sum of all the even factors of n.\n\n    Parameters:\n    n (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of even factors of n.\n\n    Example:\n    >>> sumofFactors(18)\n    26\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if a given text contains the word 'z'.\n\n    Args:\n        text (str): The text to be checked.\n\n    Returns:\n        bool: True if the text contains the word 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_month_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    return [string[::-1] for string in string_list]"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in the given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float or int): The length of the rectangle.\n    width (float or int): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n    \"\"\"\n    result = ''\n    for char in string:\n        if not char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element of each sublist.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Example:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n\n    Examples:\n        >>> combinations_list(['orange', 'red', 'green', 'blue'])\n        [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    def helper(lst, index, current_combination, result):\n        # Add the current combination to the result list\n        result.append(current_combination[:])\n\n        # Recursively generate combinations for the remaining elements\n        for i in range(index, len(lst)):\n            # Add the current element to the combination\n            current_combination.append(lst[i])\n            # Recursively generate combinations for the remaining elements\n            helper(lst, i + 1, current_combination, result)\n            # Remove the current element from the combination to backtrack\n            current_combination.pop()\n\n    result = []\n    helper(lst, 0, [], result)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product of any contiguous subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns a new dictionary with all empty items removed.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: A new dictionary with empty items removed.\n\n    Example:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Args:\n        arr (list): The input list of numbers.\n\n    Returns:\n        int: The maximum product of an increasing subsequence.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_prod = arr[0]\n    curr_prod = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            curr_prod *= arr[i]\n        else:\n            curr_prod = arr[i]\n\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple where each element is the sum of its neighboring elements.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple with the pairwise addition of the neighboring elements.\n\n    Example:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    return tuple(a + b for a, b in zip(t, t[1:]))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a modulo value n, and returns the product of the array elements modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array elements modulo n.\n\n    Example:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first list of tuples.\n        tuple_list2 (list): The second list of tuples.\n\n    Returns:\n        set: A set containing the common tuples from both lists.\n\n    \"\"\"\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with another character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old_char.\n\n    Returns:\n        str: The modified string with the characters replaced.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        'pollgon'\n    \"\"\"\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in descending order.\n\n    \"\"\"\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    smallest = arr[0]\n    largest = arr[0]\n\n    for num in arr:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Args:\n        string (str): The string to be converted.\n\n    Returns:\n        str: The converted string in lower case.\n    \"\"\"\n    return string.lower()\n\n# Test the function\ndef test_convert_to_lower():\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n\n# Run the tests\ntest_convert_to_lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    number (int): The number from which the first digit needs to be extracted.\n\n    Returns:\n    int: The first digit of the given number.\n\n    \"\"\"\n    return int(str(number)[0])\n\n# Test the function\nassert first_digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the input list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Example:\n        >>> split_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert split_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Examples:\n        >>> difference(3)\n        30\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2 == 1:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with toggled case.\n\n    Examples:\n        >>> toggle_string(\"Python\")\n        'pYTHON'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n    >>> digit_distance_nums(1, 2)\n    1\n    >>> digit_distance_nums(123, 456)\n    12\n    >>> digit_distance_nums(1234, 5678)\n    20\n    \"\"\"\n    # Convert the integers to strings for easy manipulation\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Calculate the per-digit difference between the two integers\n    distance = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance += abs(int(digit1) - int(digit2))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        arr (list): The input list.\n        n (int): The length of the input list.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements from t1 and t2, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n    \"\"\"\n    return tuple(sorted(set(t1) | set(t2)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of sublists and returns the length of the longest sublist.\n\n    Parameters:\n    lst (list): A list of sublists.\n\n    Returns:\n    int: The length of the longest sublist.\n\n    Example:\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, string)\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The number of possible unordered pairs where both elements are unequal.\n\n    Examples:\n        >>> count_Pairs([1, 2, 1], 3)\n        2\n        >>> count_Pairs([1, 2, 3, 4, 5], 5)\n        10\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Args:\n        string (str): The string to be split into characters.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    This function takes a non-negative integer as input and returns the sum of its digits.\n\n    Parameters:\n    num (int): The non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    digit_sum = 0\n    while num > 0:\n        digit_sum += num % 10\n        num //= 10\n    return digit_sum"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    \"\"\"\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in alphabetical order.\n\n    Example:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of numbers with duplicates removed.\n\n    Examples:\n        >>> two_unique_nums([1,2,3,2,3,4,5])\n        [1, 4, 5]\n    \"\"\"\n    unique_nums = set(nums)\n    return list(unique_nums)"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr1, arr2):\n    \"\"\"\n    Check if arr2 is a subarray of arr1.\n\n    Args:\n        arr1 (list): The main list.\n        arr2 (list): The sublist to check.\n\n    Returns:\n        bool: True if arr2 is a subarray of arr1, False otherwise.\n    \"\"\"\n    if len(arr2) == 0:\n        return True\n    if len(arr2) > len(arr1):\n        return False\n\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n\n    return False\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit of the factorial needs to be calculated.\n\n    Returns:\n    int: The last digit of the factorial of the given number.\n\n    \"\"\"\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test the function\nassert last_digit_factorial(4) == 4"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the dissimilar elements from both input tuples.\n\n    Example:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only the even elements.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge * (height / 2))\n    total_area = base_area + lateral_area\n    return total_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    \"\"\"\n    if n <= 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries containing items with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is greater than the length of the dataset.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty.\")\n    if n > len(dataset):\n        raise ValueError(\"n cannot be greater than the length of the dataset.\")\n\n    sorted_dataset = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which the list should be split.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        IndexError: If the index n is out of range.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5,6,52,36,12,10]\n    \"\"\"\n    if n < 0 or n >= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        lst (list): The input list to be converted.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 2, 5, 1])\n        8\n        >>> big_diff([10, 2, 5, 1, 100])\n        98\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_num = min(nums)\n    max_num = max(nums)\n\n    return max_num - min_num"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the start and end numbers.\n\n    \"\"\"\n    squares = []\n    for num in range(start, end + 1):\n        if int(num ** 0.5) ** 2 == num:\n            squares.append(num)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return lst[-1:] + lst[1:-1] + lst[:1]\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Example:\n    >>> sum_of_product(3)\n    15\n    \"\"\"\n\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculate the binomial coefficient (n choose k).\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial coefficient (n choose k).\n\n        Example:\n        >>> binomial_coefficient(5, 3)\n        10\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        elif k == 1 or k == n - 1:\n            return n\n        else:\n            return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n\n    return total_sum\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    This function removes leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference between the first even and first odd number in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If no even or odd number is found in the list.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n        >>> diff_even_odd([1,3,5,7])\n        -1\n        >>> diff_even_odd([1,3,5,7,9])\n        -1\n    \"\"\"\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    odd_num = next((num for num in lst if num % 2 != 0), None)\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"No even or odd number found in the list.\")\n\n    return even_num - odd_num"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The kth element to find.\n\n    Returns:\n        int: The kth element from the merged sorted array.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    merged_arr = sorted(arr1 + arr2)\n    if k < 1 or k > len(merged_arr):\n        raise ValueError(\"k is out of range\")\n    return merged_arr[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    total_sum = (n * (n + 1)) / 2\n\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n\n    return (total_sum, average)"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test cases\nassert is_even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        string (str): The input string to search for repeated characters.\n\n    Returns:\n        str: The first repeated character found in the string, or an empty string if no repeated characters are found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return \"\""}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if all(num % i != 0 for i in range(2, int(num**0.5) + 1)):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Args:\n        string (str): The input string containing words seperated by spaces.\n\n    Returns:\n        str: The input string with words reversed.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Converts degrees to radians.\n\n    Parameters:\n    degrees (float): The value in degrees to be converted to radians.\n\n    Returns:\n    float: The converted value in radians.\n    \"\"\"\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Search a string for a regex pattern and return the matching substring, start index, and end index.\n\n    Args:\n        string (str): The input string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not found in the string.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(f\"Pattern '{pattern}' not found in string.\")"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n\n    Parameters:\n    n (int): The position of the Bell number to be calculated.\n\n    Returns:\n    int: The nth Bell number.\n\n    \"\"\"\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The modified list with the k'th element removed.\n\n    Raises:\n        IndexError: If the index k is out of range.\n\n    Examples:\n        >>> remove_kth_element([1,1,2,3,4,4,5,1],3)\n        [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Invalid index k\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix represented as a list of lists.\n\n    Args:\n        matrix (list): A matrix represented as a list of lists.\n        n (int): The index of the column to find the maximum value in.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the n is out of range for the number of columns in the matrix.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n    \"\"\"\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column index is out of range\")\n\n    return max(row[n] for row in matrix)"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists, where the first list contains the first element of each sublist,\n              and the second list contains the second element of each sublist.\n\n    Example:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Example:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n    \"\"\"\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average value for each tuple in a tuple of tuples and return as a list.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Example:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise and returns the result as a new list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    nums = ''\n    letters = ''\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset where every pair is divisible.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def backtrack(index, subset):\n        if index == len(nums):\n            return len(subset)\n\n        # Include the current number in the subset\n        include_subset = []\n        for num in subset:\n            if is_divisible(num, nums[index]):\n                include_subset.append(num)\n        include_subset.append(nums[index])\n        include_size = backtrack(index + 1, include_subset)\n\n        # Exclude the current number from the subset\n        exclude_size = backtrack(index + 1, subset)\n\n        return max(include_size, exclude_size)\n\n    return backtrack(0, [])"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two sorted lists.\n\n    Raises:\n        ValueError: If the size of the lists is not the same.\n\n    \"\"\"\n    if n != len(list1) or n != len(list2):\n        raise ValueError(\"The size of the lists is not the same.\")\n\n    i = 0\n    j = 0\n    count = 0\n    m1 = -1\n    m2 = -1\n\n    while count < n + 1:\n        if i == n:\n            m1 = m2\n            m2 = list2[0]\n            break\n        if j == n:\n            m1 = m2\n            m2 = list1[0]\n            break\n\n        if list1[i] <= list2[j]:\n            m1 = m2\n            m2 = list1[i]\n            i += 1\n        else:\n            m1 = m2\n            m2 = list2[j]\n            j += 1\n\n        count += 1\n\n    return (m1 + m2) / 2.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The exponent to raise each number to.\n\n    Returns:\n        list: A new list with each number raised to the n-th power.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\ndef test_convert_to_uppercase():\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n\n# Run the tests\ntest_convert_to_uppercase()"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = 0.5 * radius * height\n        return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Finds even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by underscores and vice versa.\n    \"\"\"\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1,2,3,4,0,0]\n    \"\"\"\n    return [x for x in lst if x != 0] + [x for x in lst if x == 0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    This function takes a list of numbers and its length as input and returns the sum of XOR of all pairs of numbers in the list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the list.\n\n    Example:\n    >>> pair_xor_Sum([5,9,7,6],4)\n    47\n    \"\"\"\n\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Args:\n        arr (list): The list to be sorted.\n\n    Returns:\n        list: The sorted list.\n\n    Examples:\n        >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    def heapify(arr, n, i):\n        \"\"\"\n        Heapify the subtree rooted at index i.\n\n        Args:\n            arr (list): The list to be heapified.\n            n (int): The size of the heap.\n            i (int): The index of the root of the subtree.\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The actual amount.\n        expected_amount (float): The expected amount.\n\n    Returns:\n        bool: True if the amount is equal to the expected amount, False otherwise.\n    \"\"\"\n    return amount == expected_amount"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If wind velocity is greater than 120 km/h or temperature is less than -273.15 celsius.\n\n    \"\"\"\n    if wind_velocity > 120 or temperature < -273.15:\n        raise ValueError(\"Invalid input. Wind velocity should be less than or equal to 120 km/h and temperature should be greater than or equal to -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (wind_velocity ** 0.16)) + (0.3965 * temperature * (wind_velocity ** 0.16))\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    return sum(len(name) for name in names if name[0].isupper())\n\ndef test_sum_name_lengths():\n    assert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n\ntest_sum_name_lengths()"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    This function calculates the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to be calculated.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    21\n    >>> is_nonagonal(4)\n    32\n    >>> is_nonagonal(5)\n    45\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n    return n * (7 * n - 5) // 2"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position up to which the array should be reversed.\n\n    Returns:\n        list: The modified array with elements reversed up to the given position.\n\n    Raises:\n        ValueError: If the given position is out of range.\n\n    Examples:\n        >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n        [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"Invalid position\")\n\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    \"\"\"\n    Adds a dictionary to the tuple and returns the modified tuple.\n\n    Args:\n        t (tuple): The original tuple.\n        d (dict): The dictionary to be added to the tuple.\n\n    Returns:\n        tuple: The modified tuple with the dictionary added.\n\n    Example:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return t + (d,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[N-1][N-1] / (N * N)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"(.*?)\"', string)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    \"\"\"\n    This function takes a tuple of numbers and returns a new tuple where each element is the product of the current element and the next element.\n\n    Args:\n        numbers (tuple): A tuple of numbers.\n\n    Returns:\n        tuple: A new tuple with the multiplied elements.\n\n    Example:\n        >>> multiply_elements((1, 5, 7, 8, 10))\n        (5, 35, 56, 80)\n    \"\"\"\n    return tuple(numbers[i] * numbers[i+1] for i in range(len(numbers)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced by colons.\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':')\n    return string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted array of integers.\n        target (int): The target number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Write a python function to find sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n    \"\"\"\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number whose middle bits need to be toggled.\n\n    Returns:\n        int: The number with toggled middle bits.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n    \"\"\"\n    mask = ~(~0 << 2)  # Create a mask to extract the first and last bit\n    return num ^ mask  # Toggle the middle bits by XORing with the mask"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): A sorted list of integers.\n        value (int): The value to find the left insertion point for.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Examples:\n        >>> left_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiou]'\n    return bool(re.match(pattern, string, re.IGNORECASE))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits for the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n    index = 1\n    triangular_number = 1\n\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert a tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: A dictionary with adjacent elements as key-value pairs.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length.\")\n\n    return dict(zip(t[::2], t[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of the side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    \"\"\"\n    # Calculate the area of a square face\n    square_face_area = side_length ** 2\n\n    # Calculate the height of the equilateral triangle\n    height = math.sqrt(2) / 2 * side_length\n\n    # Calculate the area of the equilateral triangle face\n    triangle_face_area = (math.sqrt(3) / 4) * (side_length ** 2)\n\n    # Calculate the total area of the tetrahedron\n    total_area = square_face_area + triangle_face_area * 4\n\n    return total_area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    return lst[-num_items:] + lst[:-num_items]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        t (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(x is None for x in t)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonIsAwesome\")\n        'Python Is Awesome'\n        >>> capital_words_spaces(\"helloWorld\")\n        'hello World'\n    \"\"\"\n    words = string.split()\n    modified_words = [word if word[0].islower() else ' ' + word for word in words]\n    return ' '.join(modified_words)"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings of numbers.\n\n    Returns:\n        list: A new list with the strings sorted numerically.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tpl (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    return lst + list(tpl)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array to be checked.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples containing elements and their corresponding values.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the values\n    return sorted_records[:k]  # Return the first k records"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in nums:\n        if num <= smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return string.count('.') == 1 and len(string.split('.')[1]) == 2\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of integers.\n        n (int): The size of the input array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the input array is empty or has less than two elements.\n\n    Examples:\n        >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n        1\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Input array must have at least two elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string to count the number of digits.\n\n    Returns:\n    int: The number of digits in the input string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    This function finds the nth polite number.\n\n    A polite number is a positive integer that is not divisible by the sum of its digits.\n\n    Args:\n        n (int): The position of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> is_polite(7)\n        11\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    count = 0\n    num = 0\n\n    while count < n:\n        num += 1\n        if not any(num % int(digit) == 0 for digit in str(num)):\n            count += 1\n\n    return num"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of pairs of consecutive items.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    This function counts the number of pairs in a list of numbers whose sum is equal to the target_sum.\n\n    Args:\n        nums (list): A list of numbers.\n        target_sum (int): The target sum.\n\n    Returns:\n        int: The number of pairs whose sum is equal to the target_sum.\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The main string to search within.\n        substring (str): The substring to find within the main string.\n\n    Returns:\n        tuple: A tuple containing the substring, the starting position, and the ending position of the substring within the main string.\n        None: If there is no match found.\n\n    Examples:\n        >>> occurance_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurance_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        start_pos = string.find(substring)\n        end_pos = start_pos + len(substring)\n        return substring, start_pos, end_pos\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        lst (list): The input list to check.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of non-repeated elements in the list.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    unique_elements = set(lst)\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Example:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuples)):\n        for j in range(i + 1, len(tuples)):\n            combinations.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of a number is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in a given list.\n\n    Args:\n        arr (list): The input list of integers.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers in the list.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> mul_even_odd([1,3,5,7,4,1,6,8])\n        4\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0 and even_num is None:\n            even_num = num\n        elif num % 2 != 0 and odd_num is None:\n            odd_num = num\n        if even_num is not None and odd_num is not None:\n            break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(10, 20, 30, 40, 50)\")\n        (10, 20, 30, 40, 50)\n    \"\"\"\n    try:\n        # Remove the leading and trailing parentheses\n        tuple_str = tuple_str.strip(\"()\")\n        # Split the string by commas and convert each element to an integer\n        int_tuple = tuple(int(num) for num in tuple_str.split(\",\"))\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation\")"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): A sorted list of integers.\n        value (int): The value to find the right insertion point for.\n\n    Returns:\n        int: The index of the right insertion point.\n\n    Examples:\n        >>> right_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] <= value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    This function checks if a string has an 'a' followed by three 'b's.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): A list of strings.\n        string (str): A string.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Example:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n        lst (list): The input list to check.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with nested tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    return tuple(x for x in t if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n    \"\"\"\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): A sorted list of elements.\n        target: The target element to search for.\n\n    Returns:\n        int: The index of the last occurrence of the target element in the array, or -1 if it is not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] <= target:\n            left = mid + 1\n        else:\n            right = mid - 1\n    if left > 0 and arr[left-1] == target:\n        return left - 1\n    else:\n        return -1"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function checks if a given text starts with 'a' and ends with 'b'.\n\n    Args:\n        text (str): The text to be checked.\n\n    Returns:\n        bool: True if the text starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    pattern = r\"^a.*b$\"\n    return re.match(pattern, text) is not None"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the given range.\n\n    Args:\n        l (int): The lower limit of the range.\n        r (int): The upper limit of the range.\n\n    Returns:\n        int: The sum of all odd natural numbers within the range.\n\n    Raises:\n        ValueError: If l is greater than r.\n\n    Examples:\n        >>> sum_in_range(2, 5)\n        8\n        >>> sum_in_range(1, 10)\n        25\n    \"\"\"\n    if l > r:\n        raise ValueError(\"l should be less than or equal to r.\")\n\n    sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            sum += num\n\n    return sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to rotate.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(0b1010, 2)\n        40\n    \"\"\"\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    d %= 32  # Handle cases where d is greater than 32\n\n    return (num << d) | (num >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    This function removes all whitespaces from a given string.\n\n    Parameters:\n    string (str): The input string from which whitespaces are to be removed.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    return ''.join(string.split())"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n\n    left, right = 0, num\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in the list with the highest sum of elements.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list in the list with the highest sum of elements.\n\n    Example:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sub_list in lst:\n        sub_list_sum = sum(sub_list)\n        if sub_list_sum > max_sum:\n            max_sum = sub_list_sum\n            max_list = sub_list\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string to search for uppercase characters.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple to check.\n        k: The value to check for in the tuple.\n\n    Returns:\n        bool: True if the k is present in the tuple, False otherwise.\n    \"\"\"\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True"}
