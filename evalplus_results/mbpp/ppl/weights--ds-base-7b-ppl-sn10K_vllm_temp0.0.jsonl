{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list containing the shared elements.\n\n    Example:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(2) == False\nassert is_not_prime(4) == True\nassert is_not_prime(17) == False\nassert is_not_prime(25) == True"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is less than 1 or greater than the length of the numbers list.\n\n    \"\"\"\n    if n < 1 or n > len(numbers):\n        raise ValueError(\"Invalid value for n\")\n\n    return heapq.nlargest(n, numbers)\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the two numbers to find the positions where they differ\n    diff = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while diff:\n        count += diff & 1\n        diff >>= 1\n\n    # Return True if there is exactly one set bit, indicating a difference at one bit position\n    return count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    return [word for word in words if len(word) >= 4]\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required to get the same string.\n\n    Examples:\n        >>> find_Rotations(\"aaaa\")\n        1\n        >>> find_Rotations(\"abcde\")\n        5\n        >>> find_Rotations(\"ababab\")\n        3\n    \"\"\"\n    n = len(s)\n    if n <= 1:\n        return 0\n\n    # Find the index of the first character in the original string\n    index = s.index(s[0])\n\n    # If the index is 0, it means the string is already in the correct order\n    if index == 0:\n        return 0\n\n    # Calculate the minimum number of rotations required\n    return n - index\n\n# Test the function\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abcde\") == 5\nassert find_Rotations(\"ababab\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Remove first occurrence of the character\n    string = string.replace(char, '', 1)\n\n    # Remove last occurrence of the character\n    string = string.rsplit(char, 1)[0]\n\n    return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list of lists): The input matrix.\n\n    Returns:\n        list of lists: The sorted matrix.\n\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the input string contains lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string contains lowercase letters joined with an underscore\n    if any(char.islower() and char.isalpha() and char != '_' for char in input_string):\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(0)\n    0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    return ''.join(char for char in string1 if char not in string2)\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 1]) == True\nassert test_duplicate([1, 1, 1, 1, 1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Check if the number is divisible by 3\n    if n % 3 != 0:\n        return False\n\n    # Check if the number is divisible by 9\n    if n % 9 != 0:\n        return False\n\n    # Check if the number is divisible by 27\n    if n % 27 != 0:\n        return False\n\n    return True\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n\n    # Reverse the string representation of the number\n    reversed_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n\n    # Check if the number is one less than twice its reverse\n    return num - 2 * reversed_num == 1\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n    \"\"\"\n    sorted_digits = sorted(digits, reverse=True)\n    max_num = int(''.join(map(str, sorted_digits)))\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the integers have opposite sign, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, 2) == False\nassert opposite_Signs(-1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Find the smallest number in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the tuple_list is empty or contains tuples with less than 2 elements.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    if not tuple_list:\n        raise ValueError(\"tuple_list cannot be empty\")\n\n    max_diff = float('-inf')\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) < 2:\n            raise ValueError(\"tuple_list cannot contain tuples with less than 2 elements\")\n\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n        >>> recursive_list_sum([1, 2, [3,4],[5,6], 7])\n        28\n        >>> recursive_list_sum([1, 2, [3,4],[5,6], 7, []])\n        28\n        >>> recursive_list_sum([1, 2, [3,4],[5,6], 7, [8]])\n        35\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The index of the Bell number.\n\n    Returns:\n    int: The number of ways to partition the Bell number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Initialize the Bell number array\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    # Fill the Bell number array\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        elif not increasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4, 5]) == True\nassert is_monotonic([5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 2, 1]) == False\nassert is_monotonic([1, 2, 3, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n        lst (list): The main list to be checked.\n        sublst (list): The sublist to be searched for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    return sublst in lst\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i**2 - j**2 == n:\n                return True\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(17) == True\nassert dif_Square(25) == True\nassert dif_Square(32) == False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the sequence follows the patterns given in the array.\n\n    Args:\n        patterns (list): List of patterns to compare against.\n        sequence (list): List of elements to check against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\"])==False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    return [t for t in tuples if all(x % k == 0 for x in t)]\n\n# Test cases\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return number % 11 == 0\n\n# Test cases\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n        word (str): The input word to check.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * radius**3\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The index of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 1.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 1.\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1.\")\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n        >>> len_log(\"not a list\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Input is not a list.\n    \"\"\"\n    if not isinstance(words, list):\n        raise ValueError(\"Input is not a list.\")\n\n    if not words:\n        raise ValueError(\"Input list is empty.\")\n\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any string in the list, False otherwise.\n    \"\"\"\n    for item in lst:\n        if substring in item:\n            return True\n    return False\n\n# Test cases\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    digit_count = len(num_str)\n\n    if digit_count < 3:\n        return False\n\n    for i in range(2, digit_count):\n        if num_str[i] != num_str[i-2]:\n            return False\n\n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1212122) == False\nassert is_undulating(12121) == False\nassert is_undulating(121212) == True\nassert is_undulating(1212123) == False\nassert is_undulating(12121234) == False\nassert is_undulating(121212345) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> Find_Min_Length([[1],[1,2]])\n        1\n        >>> Find_Min_Length([[1,2,3],[1,2],[1]])\n        1\n        >>> Find_Min_Length([])\n        0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"Input must be a list of lists\")\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n\n    Parameters:\n    n (int): The integer for which we want to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for sublist in flattened_list:\n        for element in sublist:\n            frequency_dict[element] = frequency_dict.get(element, 0) + 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n    \"\"\"\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary\n\n# Test cases\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the integer to a string\n    n_str = str(n)\n\n    # Find the length of the string\n    length = len(n_str)\n\n    # Check if the number is already a palindrome\n    if n_str == n_str[::-1]:\n        # If it is, increment the number by 1 and return it\n        return int(n_str) + 1\n\n    # Find the middle index of the string\n    mid = length // 2\n\n    # Check if the number is a palindrome with an odd number of digits\n    if length % 2 == 1:\n        # If it is, increment the middle digit by 1 and return the modified string\n        return int(n_str[:mid] + str(int(n_str[mid]) + 1) + n_str[mid+1:])\n\n    # Check if the number is a palindrome with an even number of digits\n    if length % 2 == 0:\n        # If it is, increment the last digit by 1 and return the modified string\n        return int(n_str[:mid] + str(int(n_str[mid]) + 1) + n_str[mid:])\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        IndexError: If the k is out of range.\n\n    Examples:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n        >>> kth_element([12,3,5,7,19], 5)\n        19\n        >>> kth_element([12,3,5,7,19], 6)\n        Traceback (most recent call last):\n            ...\n        IndexError: k is out of range\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"k is out of range\")\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to be converted.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    return ''.join(word.capitalize() for word in words)\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in alphabetical order.\n\n    Example:\n        >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Count the number of True values in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of True values in the list.\n    \"\"\"\n    return sum(1 for value in lst if value)\n\n# Test the function\nassert count([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    count = 0\n    for i in range(rotations):\n        binary_string = binary_string[1:] + binary_string[0]\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n    return count\n\n# Test cases\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        list: A list containing the common elements among all the nested lists.\n\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): The tuple of positive integers to be converted.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the tuple.\n\n    Raises:\n        ValueError: If the input tuple contains non-positive integers.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in t):\n        raise ValueError(\"Input tuple must contain only positive integers.\")\n\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted array of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if mid == 0 or mid == len(arr) - 1:\n            return arr[mid]\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n\n        if (mid % 2 == 0 and arr[mid] == arr[mid - 1]) or (mid % 2 == 1 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    raise ValueError(\"More than one element appears only once in the array\")\n\n# Test cases\nassert search([1,1,2,2,3]) == 3"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_product = float('-inf')\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def divisor_sum(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for i in range(1, n+1):\n        divisor_sum_i = divisor_sum(i)\n        if divisor_sum(divisor_sum_i) == i and divisor_sum_i != i:\n            amicable_sum += i\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeroes\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test cases\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors.\n    \"\"\"\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    This function multiplies two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        words (str): A string containing the list of words separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Example:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    return [word for word in words.split() if len(word) > n]\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = n * (n**2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sums = [sum(matrix[i][i] for i in range(n)), sum(matrix[i][n-i-1] for i in range(n))]\n\n    return all(sums == expected_sum for sums in row_sums + col_sums + diag_sums)\n\n# Test cases\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n    for item in lst:\n        freq_dict[item] = freq_dict.get(item, 0) + 1\n\n    # Find the item with maximum frequency\n    max_item = max(freq_dict, key=freq_dict.get)\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = [char for char in s if char.lower() in 'aeiou']\n    vowels.reverse()\n    result = ''\n    index = 0\n    for char in s:\n        if char.lower() in 'aeiou':\n            result += vowels[index]\n            index += 1\n        else:\n            result += char\n    return result\n\n# Tests\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    return zero_count / (zero_count + non_zero_count)\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    # Base case: 0 can be represented as sum of non-zero powers of 2\n    if n == 0:\n        return True\n    \n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n    \n    # Check if n can be represented as sum of non-zero powers of 2\n    for i in range(n):\n        if is_Sum_Of_Powers_Of_Two(i) and is_Sum_Of_Powers_Of_Two(n - i):\n            return True\n    \n    return False\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return circumference\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        set: A set containing all the numbers from the input list.\n\n    Example:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    return set(num for sublist in lst for num in sublist)\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n    \"\"\"\n    # Sort the list using the pancake sorting algorithm\n    for i in range(len(lst)-1, 0, -1):\n        # Find the index of the maximum element\n        max_index = lst.index(max(lst[:i+1]))\n\n        # Flip the maximum element to the beginning\n        lst = lst[:max_index+1][::-1] + lst[max_index+1:]\n\n        # Flip the maximum element to its correct position\n        lst = lst[:i+1][::-1] + lst[i+1:]\n\n    return lst\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    This function counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of integers.\n\n    Returns:\n        int: The maximum absolute difference between any two elements.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_Abs_Diff((2,1,5,3))\n        4\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target value.\n\n    Returns:\n        tuple: A tuple containing x and y if a solution exists, otherwise None.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(2, 3, 8)\n        None\n    \"\"\"\n    # Check if n is divisible by gcd(a, b)\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Find the solution using the extended Euclidean algorithm\n    x, y, _ = extended_gcd(a, b)\n\n    # Calculate x and y for the given n\n    x *= n // gcd(a, b)\n    y *= n // gcd(a, b)\n\n    return x, y\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The GCD of a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculates the extended Euclidean algorithm to find the integers x and y that satisfy ax + by = gcd(a, b).\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        tuple: A tuple containing x, y, and the GCD of a and b.\n    \"\"\"\n    if b == 0:\n        return 1, 0, a\n    x, y, gcd_val = extended_gcd(b, a % b)\n    return y, x - (a // b) * y, gcd_val"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\n# Test cases\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(97 + i):\n            count += 1\n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdefg\") == 7\nassert count_char_position(\"\") == 0\nassert count_char_position(\"a\") == 1\nassert count_char_position(\"ab\") == 2\nassert count_char_position(\"abc\") == 3\nassert count_char_position(\"abcd\") == 4\nassert count_char_position(\"abcde\") == 5\nassert count_char_position(\"abcdef\") == 6\nassert count_char_position(\"abcdefg\") == 7\nassert count_char_position(\"abcdefgh\") == 7\nassert count_char_position(\"abcdefghi\") == 7\nassert count_char_position(\"abcdefghij\") == 7\nassert count_char_position(\"abcdefghijk\") == 7\nassert count_char_position(\"abcdefghijkl\") == 7\nassert count_char_position(\"abcdefghijklm\") == 7\nassert count_char_position(\"abcdefghijklmn\") == 7\nassert count_char_position(\"abcdefghijklmno\") == 7\nassert count_char_position(\"abcdefghijklmnop\") == 7\nassert count_char_position(\"abcdefghijklmnopq\") == 7\nassert count_char_position(\"abcdefghijklmnopqr\") == 7\nassert count_char_position(\"abcdefghijklmnopqrs\") == 7\nassert count_char_position(\"abcdefghijklmnopqrst\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstu\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstuv\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstuvw\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstuvwx\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstuvwxy\") == 7\nassert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26\n```"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n# Test cases\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The input list.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of times 'std' occurs in the input string.\n    \"\"\"\n    return string.count('std')\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    return len(set(type(x) for x in t)) == 1\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 6, 7, 3, 5, \"6\")) == False\nassert check_type(()) == True\nassert check_type((5, 6, 7, 3, 5, 6.0)) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element\n    first_occurrence = -1\n    for i in range(n):\n        if arr[i] == element:\n            first_occurrence = i\n            break\n    \n    # Check if the element is the majority element\n    if first_occurrence == -1:\n        return False\n    else:\n        return (first_occurrence + n//2) < n and arr[first_occurrence + n//2] == element\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        num (int): The number to count set bits in.\n\n    Returns:\n        int: The number of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function\nassert count_set_bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    return string[::2]\n\n# Test cases\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    int: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(\" \", character)\n\n# Test the function\nassert replace_blank(\"hello people\",'@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius ** 2\n    lateral_area = 2 * math.pi * radius * height\n    return base_area + lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(0)\n    0\n    >>> volume_cube(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be non-negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be non-negative.\")\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The number with all even bits set.\n\n    Examples:\n        >>> even_bit_set_number(10)\n        10\n        >>> even_bit_set_number(15)\n        14\n        >>> even_bit_set_number(0)\n        0\n    \"\"\"\n    return n | 0b10101010101010101010101010101010"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Example:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of non-empty substrings.\n\n    Examples:\n        >>> number_of_substrings(\"abc\")\n        6\n        >>> number_of_substrings(\"ab\")\n        3\n        >>> number_of_substrings(\"a\")\n        1\n        >>> number_of_substrings(\"\")\n        0\n    \"\"\"\n    n = len(s)\n    return n * (n + 1) // 2\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D list to store the number of sequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base case: there is only one sequence of length 1\n    dp[1][0] = 1\n\n    # Iterate through each length and each value\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            # Calculate the number of sequences by considering the previous element\n            dp[i][j] = dp[i - 1][j // 2]\n\n    # Return the total number of sequences\n    return dp[n][m]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1:] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "def next_perfect_square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        num (int): The given number.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Raises:\n        ValueError: If the given number is negative.\n\n    Examples:\n        >>> next_perfect_square(35)\n        36\n        >>> next_perfect_square(0)\n        1\n        >>> next_perfect_square(-5)\n        Traceback (most recent call last):\n            ...\n        ValueError: The given number must be non-negative.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"The given number must be non-negative.\")\n\n    # Find the square root of the given number\n    root = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if root * root == num:\n        return (root + 1) ** 2\n\n    # Find the next perfect square greater than the given number\n    return (root + 1) ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n    \n    # Find the peak element\n    peak = arr.index(max(arr))\n    \n    # Calculate the maximum sum of increasing subsequence up to the peak\n    max_sum_inc = 0\n    max_sum_inc_prev = 0\n    for i in range(peak):\n        if arr[i] <= arr[i+1]:\n            max_sum_inc_prev += arr[i]\n        else:\n            max_sum_inc = max(max_sum_inc, max_sum_inc_prev + arr[i])\n            max_sum_inc_prev = 0\n    \n    # Calculate the maximum sum of decreasing subsequence after the peak\n    max_sum_dec = 0\n    max_sum_dec_prev = 0\n    for i in range(peak, n-1):\n        if arr[i] >= arr[i+1]:\n            max_sum_dec_prev += arr[i]\n        else:\n            max_sum_dec = max(max_sum_dec, max_sum_dec_prev + arr[i])\n            max_sum_dec_prev = 0\n    \n    # Return the maximum sum of the bitonic subsequence\n    return max_sum_inc + max_sum_dec + arr[peak]\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for i in range(n-1, -1, -1):\n        for j in range(i+1, n):\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    return tuple_input.count(element)\n\n# Test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 2) == 2\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 15) == 1"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    return [element] * (len(lst) * 2 + 1)\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, phi) of the complex number.\n    \"\"\"\n    polar_coordinates = cmath.polar(num)\n    return polar_coordinates\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of integer elements in the list.\n    \"\"\"\n    return sum(1 for x in lst if isinstance(x, int))\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of the combinations.\n\n    Returns:\n        list: A list with tuples representing the combinations.\n\n    Example:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    return list(product(lst, repeat=n))\n\n# Test the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    \n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n    \n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n    \n    return sum(primes[:n])\n\n# Test cases\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return b, a\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\ndef test_maximize_elements():\n    assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n\ntest_maximize_elements()"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number to be found.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    return tuple(a // b for a, b in zip(tuple1, tuple2))\n\n# Test the function\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return lst[:L], lst[L:]\n\n# Test the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    \"\"\"\n    if not isinstance(human_age, int) or human_age <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test the function\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    return [lst[i:i+n] for i in range(0, len(lst), n)]\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    0\n    >>> lateralsurface_cube(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\n# Test the function\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    61\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    return (n * (n + 1)) // 2 + (n - 1)"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character to find the ASCII value of.\n\n    Returns:\n    int: The ASCII value of the input character.\n    \"\"\"\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of even numbers at even positions in the list.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 5\n    return sum\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [t[-1] for t in lst]\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n# Test the function\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients up to a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer up to which the sum of even index binomial coefficients is calculated.\n\n    Returns:\n    int: The sum of even index binomial coefficients up to n.\n\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through even index binomial coefficients\n    for i in range(n + 1):\n        # Calculate the binomial coefficient using the formula\n        coeff = binomial_coefficient(n, i)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the coefficient to the sum\n            sum += coeff\n\n    return sum\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculates the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient (n choose k).\n\n    \"\"\"\n    # Calculate the factorial of n\n    factorial_n = factorial(n)\n\n    # Calculate the factorial of k\n    factorial_k = factorial(k)\n\n    # Calculate the factorial of (n-k)\n    factorial_n_k = factorial(n - k)\n\n    # Calculate the binomial coefficient using the formula\n    coeff = factorial_n // (factorial_k * factorial_n_k)\n\n    return coeff\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the factorial is calculated.\n\n    Returns:\n    int: The factorial of the given number.\n\n    \"\"\"\n    # Initialize the factorial to 1\n    factorial = 1\n\n    # Calculate the factorial using a loop\n    for i in range(1, n + 1):\n        factorial *= i\n\n    return factorial\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    return {key: value for key, value in dictionary.items() if value >= n}\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to calculate.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    1176\n    >>> is_num_decagonal(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test cases\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3],[4,5,6])\n        [-3, -3, -3]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(121) == False\nassert validate(1111) == True\nassert validate(123456789) == False\nassert validate(987654321) == True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to compare with.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check if a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n    \n    # Calculate the maximum sum of a contiguous subarray\n    max_sum = max(arr)\n    \n    # Calculate the sum of the modified array\n    modified_sum = total_sum * k\n    \n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_modified_sum = max(modified_sum, max_sum)\n    \n    return max_modified_sum\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Example:\n    >>> square_Sum(2)\n    20\n    \"\"\"\n    return sum(i**2 for i in range(2, 2*n+1, 2))\n\n# Test the function\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with maximum length.\n\n    Example:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublst) for sublst in lst)\n    max_lst = [sublst for sublst in lst if len(sublst) == max_len]\n    return max_len, max_lst[0]\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b\n\n# Test cases\nassert find(10, 3) == 3"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n\n    Returns:\n    float: Length of the third side.\n\n    Raises:\n    ValueError: If either a or b is negative.\n\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or str: The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains only non-numeric values.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n\n        >>> max_val([1, 2, 3])\n        3\n\n        >>> max_val(['a', 'b', 'c'])\n        'c'\n\n        >>> max_val([])\n        Traceback (most recent call last):\n            ...\n        ValueError: List is empty\n\n        >>> max_val(['Python', 'version'])\n        Traceback (most recent call last):\n            ...\n        ValueError: List contains only non-numeric values\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    max_value = lst[0]\n    for item in lst:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n\n    if isinstance(max_value, (int, float)):\n        return max_value\n    else:\n        raise ValueError(\"List contains only non-numeric values\")"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        lst (list): A list of tuples containing names and scores.\n\n    Returns:\n        tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    Example:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    aggregates = {}\n    for name, score in lst:\n        aggregates[name] = aggregates.get(name, 0) + score\n    max_name = max(aggregates, key=aggregates.get)\n    return max_name, aggregates[max_name]"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Base case: n = 0\n    if n == 0:\n        return 1\n\n    # Recursive case: count for n > 0\n    count = 0\n    for i in range(2):\n        count += count_binary_seq(n - 1)\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    d (dict): The dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n\n    depths = [dict_depth(value) for value in d.values()]\n    return max(depths) + 1 if depths else 1\n\n# Test the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None\n\n# Test cases\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"Java JavaScript\", \"c c++\"]) == None"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum as 0\n    max_sum = 0\n\n    # Iterate through the array from index i to k\n    for j in range(i, k):\n        # If the current element is greater than the previous element,\n        # add it to the maximum sum\n        if arr[j] > arr[j-1]:\n            max_sum += arr[j]\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If num is less than 1.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num < 1:\n        raise ValueError(\"num must be greater than 0\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[0] * list2[0], list1[-1] * list2[0], list1[0] * list2[-1], list1[-1] * list2[-1])\n        if max_product == list1[0] * list2[0]:\n            products.append(list1.pop(0) * list2.pop(0))\n        elif max_product == list1[-1] * list2[0]:\n            products.append(list1.pop() * list2.pop(0))\n        elif max_product == list1[0] * list2[-1]:\n            products.append(list1.pop(0) * list2.pop())\n        else:\n            products.append(list1.pop() * list2.pop())\n\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The modified number with the left most unset bit set.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        14\n        >>> set_left_most_unset_bit(15)\n        15\n    \"\"\"\n    # Find the left most unset bit\n    mask = 1\n    while num & mask:\n        mask <<= 1\n\n    # Set the left most unset bit\n    num |= mask\n\n    return num"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = (base_area * height) / 3\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test cases\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(32) == 32\nassert highest_power_of_2(1) == 1"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(x) for x in lst]\n\n# Test the function\nassert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*args):\n    \"\"\"\n    Convert multiple lists to a nested dictionary.\n\n    Args:\n        *args: Variable number of lists.\n\n    Returns:\n        A list of nested dictionaries.\n\n    Raises:\n        ValueError: If the number of lists is less than 2.\n\n    Example:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(args) < 2:\n        raise ValueError(\"At least two lists are required.\")\n\n    result = []\n    for i in range(len(args[0])):\n        nested_dict = {}\n        for j in range(1, len(args)):\n            nested_dict[args[j][i]] = args[j+1][i]\n        result.append({args[0][i]: nested_dict})\n\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Tests\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    return [sum(int(digit) for digit in str(number)) for number in numbers]\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to be checked.\n        element: The element to be searched for.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd,\n    and False otherwise.\n\n    Parameters:\n    num (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or str: The minimum value in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains only non-numeric values.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n\n        >>> min_val([1, 2, 3])\n        1\n\n        >>> min_val([])\n        Traceback (most recent call last):\n            ...\n        ValueError: List is empty\n\n        >>> min_val(['a', 'b', 'c'])\n        Traceback (most recent call last):\n            ...\n        ValueError: List contains only non-numeric values\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    min_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_val is None or item < min_val:\n                min_val = item\n\n    if min_val is None:\n        raise ValueError(\"List contains only non-numeric values\")\n\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([2, 4, 6])\n        [2, 4, 6]\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]\n\n# Test cases\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)\n\n# Test cases\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input list is empty or contains less than two integers.\n\n    Examples:\n        >>> max_Product([1,2,3,4,7,0,8,4])\n        (7, 8)\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input list must contain at least two integers.\")\n\n    max1 = max(arr)\n    arr.remove(max1)\n    max2 = max(arr)\n\n    return (max1, max2)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    return max(lst, key=len)\n\n# Test cases\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Example:\n    >>> cube_sum(2)\n    72\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n\n# Test the function\nassert cube_sum(2) == 72"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by the delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to use between elements. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in t)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_cube = sum_of_cubes / n\n    return average_cube\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to count.\n\n    Returns:\n        int: The number of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please use yyyy-mm-dd.\")"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\n# Test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    \"\"\"\n    median = (a + b) / 2\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array.\n        num (int): The number to compare with the array elements.\n\n    Returns:\n        bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    return all(x < num for x in arr)\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return int(str(number)[-1])\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list containing only the negative numbers from the input list.\n\n    Examples:\n        >>> neg_nos([-1, 4, 5, -6])\n        [-1, -6]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return string[1::2]\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    joined_number = int(\"\".join(str(num) for num in numbers))\n    return joined_number\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n        >>> find_adverb_position(\"I am walking on the street\")\n        (10, 17, 'on')\n        >>> find_adverb_position(\"The weather is beautiful today\")\n        (12, 19, 'beautiful')\n    \"\"\"\n    adverbs = [\"clearly\", \"easily\", \"often\", \"quickly\", \"slowly\", \"today\", \"always\", \"never\", \"here\", \"there\", \"now\"]\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:\n            return i, i + len(word) - 1, word\n    raise ValueError(\"No adverb found in the sentence\")"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n    \"\"\"\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(x * y for x, y in zip(tuple1[i], tuple2[i])))\n    return tuple(result)\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\n# Test cases\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    perrin_numbers = [3, 0, 2]\n    if n <= 3:\n        return sum(perrin_numbers[:n])\n\n    for _ in range(3, n):\n        next_number = perrin_numbers[0] + perrin_numbers[1]\n        perrin_numbers[0] = perrin_numbers[1]\n        perrin_numbers[1] = perrin_numbers[2]\n        perrin_numbers[2] = next_number\n\n    return sum(perrin_numbers)\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    return [s for s in string_list if len(s) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function calculates the sum of even factors of a number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n# Test the function\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Write a function that matches a word containing 'z'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(13) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    return [s[::-1] for s in string_list]\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with minimum length in the given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n    \"\"\"\n    return ''.join(char for char in string if not char.isupper())\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\ntest_Extract()"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    def helper(lst, start, curr, result):\n        result.append(curr[:])\n        for i in range(start, len(lst)):\n            curr.append(lst[i])\n            helper(lst, i + 1, curr, result)\n            curr.pop()\n\n    result = []\n    helper(lst, 0, [], result)\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product of any contiguous subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        int: The maximum product of an increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n        >>> max_product([1, 2, 3, 4, 5])\n        60\n        >>> max_product([5, 4, 3, 2, 1])\n        60\n        >>> max_product([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input array cannot be empty.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test cases\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] - sorted_lst[i-1] != 1:\n            return False\n\n    return True\n\n# Test cases\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,4,6]) == False\nassert check_Consecutive([1,2,3,4,5,6]) == True\nassert check_Consecutive([1,2,3,4,5,6,7]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are common to both tuple lists.\n\n    \"\"\"\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with another character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace with.\n\n    Returns:\n        str: The modified string with replaced characters.\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    return sorted(d.items(), key=lambda x: x[1], reverse=True)\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of the largest and smallest value in the array.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> big_sum([1, 2, 3])\n        4\n        >>> big_sum([10, 20, 30, 40, 50])\n        60\n        >>> big_sum([-10, -5, 0, 5, 10])\n        15\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    arr.sort()\n    return arr[0] + arr[-1]"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The converted string in lower case.\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n        >>> remove_lowercase(\"Python\")\n        'Python'\n        >>> remove_lowercase(\"pythoN\")\n        'pythoN'\n    \"\"\"\n    return ''.join(char for char in string if char.isupper())\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The first digit of the input number.\n\n    Raises:\n    ValueError: If the input number is not a positive integer.\n\n    Examples:\n    >>> first_digit(123)\n    1\n    >>> first_digit(987654321)\n    9\n    >>> first_digit(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be a positive integer.\n    \"\"\"\n    if not isinstance(number, int) or number < 0:\n        raise ValueError(\"Input number must be a positive integer.\")\n\n    return int(str(number)[0])"}
{"task_id": "Mbpp/554", "solution": "def split_odd(lst):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd integers from the original list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd integers from the original list.\n\n    Example:\n        >>> split_odd([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n    \"\"\"\n    return [num for num in lst if num % 2 != 0]\n\n# Test the function\nassert split_odd([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_Odd_Pair([5,4,7,2,1],5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with toggled case.\n\n    Examples:\n        >>> toggle_string(\"Python\")\n        'pYTHON'\n        >>> toggle_string(\"Hello, World\ud8c0\udc00\ud8c0\udc01\ud8c0\udc02\ud8c0\udc03\ud8c0\udc04\ud8c0\udc05\ud8c0\udc06\ud8c0\udc07\ud8c0\udc08\ud8c0\udc09\ud8c0\udc0a\ud8c0\udc0b\ud8c0\udc0c\ud8c0\udc0d\ud8c0\udc0e\ud8c0\udc0f\ud8c0\udc10\ud8c0\udc11\ud8c0\udc12\ud8c0\udc13\ud8c0\udc14\ud8c0\udc15\ud8c0\udc16\ud8c0\udc17\ud8c0\udc18\ud8c0\udc19\ud8c0\udc1a\ud8c0\udc1b\ud8c0\udc1c\ud8c0\udc1d\ud8c0\udc1e\ud8c0\udc1f\ud8c0\udc20\ud8c0\udc21\ud8c0\udc22\ud8c0\udc23\ud8c0\udc24\ud8c0\udc25\ud8c0\udc26\ud8c0\udc27\ud8c0\udc28\ud8c0\udc29\ud8c0\udc2a\ud8c0\udc2b\ud8c0\udc2c\ud8c0\udc2d\ud8c0\udc2e\ud8c0\udc2f\ud8c0\udc30\ud8c0\udc31\ud8c0\udc32\ud8c0\udc33\ud8c0\udc34\ud8c0\udc35\ud8c0\udc36\ud8c0\udc37\ud8c0\udc38\ud8c0\udc39\ud8c0\udc3a\ud8c0\udc3b\ud8c0\udc3c\ud8c0\udc3d\ud8c0\udc3e\ud8c0\udc3f\ud8c4\udc00\ud8c4\udc01\ud8c4\udc02\ud8c4\udc03\ud8c4\udc04\ud8c4\udc05\ud8c4\udc06\ud8c4\udc07\ud8c4\udc08\ud8c4\udc09\ud8c4\udc0a\ud8c4\udc0b\ud8c4\udc0c\ud8c4\udc0d\ud8c4\udc0e\ud8c4\udc0f\ud8c4\udc10\ud8c4\udc11\ud8c4\udc12\ud8c4\udc13\ud8c4\udc14\ud8c4\udc15\ud8c4\udc16\ud8c4\udc17\ud8c4\udc18\ud8c4\udc19\ud8c4\udc1a\ud8c4\udc1b\ud8c4\udc1c\ud8c4\udc1d\ud8c4\udc1e\ud8c4\udc1f\ud8c4\udc20\ud8c4\udc21\ud8c4\udc22\ud8c4\udc23\ud8c4\udc24\ud8c4\udc25\ud8c4\udc26\ud8c4\udc27\ud8c4\udc28\ud8c4\udc29\ud8c4\udc2a\ud8c4\udc2b\ud8c4\udc2c\ud8c4\udc2d\ud8c4\udc2e\ud8c4\udc2f\ud8c4\udc30\ud8c4\udc31\ud8c4\udc32\ud8c4\udc33\ud8c4\udc34\ud8c4\udc35\ud8c4\udc36\ud8c4\udc37\ud8c4\udc38\ud8c4\udc39\ud8c4\udc3a\ud8c4\udc3b\ud8c4\udc3c\ud8c4\udc3d\ud8c4\udc3e\ud8c4\udc3f\ud8c4\udc40\ud8c4\udc41\ud8c4\udc42\ud8c4\udc43\ud8c4\udc44\ud8c4\udd40\ud8c4\udd41\ud8c4\udd42\ud8c4\udd43\ud8c4\udd44\ud8c4\udd45\ud8c4\udd46\ud8c4\udd47\ud8c4\udd48\ud8c4\udd49\ud8c4\udd4a\ud8c4\udd4b\ud8c4\udd4c\ud8c4\udd4d\ud8c4\udd4e\ud8c4\udd4f\ud8c4\udd50\ud8c4\udd51\ud8c4\udd52\ud8c4\udd53\ud8c4\udd54\ud8c4\udd55\ud8c4\udd56\ud8c4\udd57\ud8c4\udd58\ud8c4\udd59\ud8c4\udd5a\ud8c4\udd5b\ud8c4\udd5c\ud8c4\udd5d\ud8c4\udd5e\ud8c4\udd5f\ud8c4\udd60\ud8c4\udd61\ud8c4\udd62\ud8c4\udd63"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(a, b):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        6\n        >>> digit_distance_nums(100, 200)\n        0\n    \"\"\"\n    # Convert the integers to strings for easier manipulation\n    a_str = str(a)\n    b_str = str(b)\n\n    # Calculate the per-digit difference and sum them up\n    distance = 0\n    for i in range(min(len(a_str), len(b_str))):\n        distance += abs(int(a_str[i]) - int(b_str[i]))\n\n    # Handle the remaining digits if the lengths are different\n    if len(a_str) > len(b_str):\n        distance += sum(int(a_str[i]) for i in range(len(b_str), len(a_str)))\n    elif len(b_str) > len(a_str):\n        distance += sum(int(b_str[i]) for i in range(len(a_str), len(b_str)))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    curr_sum = 0\n\n    for i in range(n):\n        curr_sum = max(arr[i], curr_sum + arr[i])\n        max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n# Test cases\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        value = string[start_index + 1:end_index]\n        values.append(value)\n        start_index = string.find('\"', end_index + 1)\n    return values\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test cases\nassert count_Pairs([1,2,1],3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(99999)\n    45\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    total_sum = 0\n    while n > 0:\n        total_sum += n % 10\n        n //= 10\n\n    return total_sum"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    return list(set(nums))\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n        arr (list): The main list.\n        sub_arr (list): The sublist to check.\n\n    Returns:\n        bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    return sub_arr in arr\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 4, 3, 5], [4, 3]) == True\nassert is_sub_array([1, 4, 3, 5], [1, 4, 3, 5]) == True\nassert is_sub_array([1, 4, 3, 5], [1, 4, 3, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit in the factorial needs to be calculated.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(0)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(*lists):\n    \"\"\"\n    Interleave multiple lists into a single flat list.\n\n    Args:\n        *lists: Variable number of lists of the same length.\n\n    Returns:\n        A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Example:\n        >>> interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    \"\"\"\n    if any(len(lst) != len(lists[0]) for lst in lists):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    interleaved_list = []\n    for i in range(len(lists[0])):\n        for lst in lists:\n            interleaved_list.append(lst[i])\n\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    Example:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = tuple(set(tuple1) ^ set(tuple2))\n    return dissimilar_elements\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only the even elements from the nested mixed tuple.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge * (height / 2))\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]\n\n# Test cases\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Test cases\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    return max(lst) - min(lst)\n\n# Test the function\nassert big_diff([1, 2, 3, 4]) == 3"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    \"\"\"\n    squares = []\n    for num in range(start, end+1):\n        if (num**0.5).is_integer():\n            squares.append(num)\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n\n        >>> swap_list([])\n        []\n\n        >>> swap_list([1])\n        [1]\n\n        >>> swap_list([1, 2, 3])\n        [3, 2, 1]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(lst) < 2:\n        return lst\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculates the binomial coefficient (n choose k).\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial coefficient.\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        elif k > n:\n            return 0\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    total = 0\n    for i in range(1, n+1):\n        total += binomial_coefficient(n, i) * binomial_coefficient(n, i+1)\n\n    return total\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(cleaned_octets)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If no even or odd number is found in the list.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n        >>> diff_even_odd([1,3,5,7])\n        -1\n        >>> diff_even_odd([1,3,5,7,9])\n        4\n    \"\"\"\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    odd_num = next((num for num in lst if num % 2 != 0), None)\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"No even or odd number found in the list\")\n\n    return even_num - odd_num"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted array.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    \"\"\"\n    merged_arr = sorted(arr1 + arr2)\n\n    if k < 1 or k > len(merged_arr):\n        raise ValueError(\"k is out of range\")\n\n    return merged_arr[k - 1]\n\n# Test cases\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to get its length\n    num_str = str(num)\n    length = len(num_str)\n\n    # Calculate the sum of the cube of each digit\n    sum_of_cubes = sum(int(digit) ** length for digit in num_str)\n\n    # Check if the sum of the cube of each digit is equal to the original number\n    return sum_of_cubes == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    \"\"\"\n    sum_numbers = (n * (n + 1)) // 2\n    average = sum_numbers / n\n    return sum_numbers, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test cases\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string.\n\n    Raises:\n        ValueError: If no repeated character is found.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        'No repeated characters found.'\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    raise ValueError(\"No repeated characters found.\")\n\n# Test the function\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Checks if a given number is a lucid number.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a lucid number, False otherwise.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return is_lucid(n // 2)\n    elif n % 3 == 0:\n        return is_lucid(n // 3)\n    elif n % 5 == 0:\n        return is_lucid(n // 5)\n    else:\n        return False\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The reversed string with words separated by spaces.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The input string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If no match is found.\n\n    Example:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(\"No match found.\")"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for i in range(n+1)] for j in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test cases\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\n# Test the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test cases\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        TypeError: If any element in the list is not a tuple.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n    \"\"\"\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    total_sum = 0\n    for t in tuple_list:\n        if not isinstance(t, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n        total_sum += sum(t)\n\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    return [sum(t) / len(t) for t in tuples]\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the division of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have equal lengths\")\n\n    return [a / b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    nums = [char for char in string if char.isdigit()]\n    chars = [char for char in string if not char.isdigit()]\n    return ''.join(chars) + ''.join(nums)\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([1, 2, 3, 4, 5, 6])\n        3\n        >>> largest_subset([1, 2, 4, 8, 16, 32])\n        6\n    \"\"\"\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def backtrack(start, subset):\n        if start == len(numbers):\n            return len(subset)\n\n        max_subset_size = len(subset)\n        for i in range(start, len(numbers)):\n            if all(is_divisible(numbers[i], num) for num in subset):\n                max_subset_size = max(max_subset_size, backtrack(i + 1, subset + [numbers[i]]))\n\n        return max_subset_size\n\n    return backtrack(0, [])"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n    return median\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The converted string in uppercase.\n\n    Examples:\n        >>> convert_to_uppercase(\"person\")\n        'PERSON'\n    \"\"\"\n    return string.upper()\n\n# Test the function\nassert convert_to_uppercase(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        base = radius/2\n        area = 0.5 * base * height\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == 0.5 * 0.5 * math.sqrt(1**2 - (1/2)**2)\nassert triangle_area(2) == 0.5 * 2 * math.sqrt(2**2 - (2/2)**2)"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1, 2, 3, 4, 0, 0]\n    \"\"\"\n    return [x for x in lst if x != 0] + [0] * lst.count(0)\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(lst, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        lst (list): The input list of numbers.\n        n (int): The size of the list.\n\n    Returns:\n        int: The sum of XOR of all pairs of numbers in the list.\n\n    Raises:\n        ValueError: If the size of the list is less than 2.\n\n    Examples:\n        >>> pair_xor_Sum([5,9,7,6],4)\n        47\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"List size should be at least 2\")\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += (lst[i] ^ lst[j])\n\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    # Convert the list into a max heap\n    for i in range(len(lst) // 2 - 1, -1, -1):\n        heapify(lst, len(lst), i)\n\n    # Extract elements from the heap one by one\n    for i in range(len(lst) - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        heapify(lst, i, 0)\n\n    return lst\n\ndef heapify(lst, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and lst[left] > lst[largest]:\n        largest = left\n\n    if right < n and lst[right] > lst[largest]:\n        largest = right\n\n    if largest != i:\n        lst[i], lst[largest] = lst[largest], lst[i]\n        heapify(lst, n, largest)\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (int): The amount to be checked.\n        price (int): The price at which the amount was bought.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == price\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 120 km/h or the temperature is less than -273.15 celsius.\n\n    \"\"\"\n    if wind_velocity > 120 or temperature < -273.15:\n        raise ValueError(\"Invalid input: wind velocity must be less than or equal to 120 km/h and temperature must be greater than or equal to -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (wind_velocity ** 0.16)) + (0.3965 * temperature * (wind_velocity ** 0.16))\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    return sum(len(name) for name in names if not name[0].islower())\n\ndef test_sum_name_lengths():\n    assert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n\ntest_sum_name_lengths()"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (3 * n - 2)\n\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if 'z' is found in the middle of a word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    return t + (d,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[N-1][N-1] / (N * N)\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    return {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}\n\n# Test the function\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70) == {'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The number of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values between quotation marks.\n\n    Example:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n\n        >>> sum_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    return [lst[0]] + [lst[i] for i in range(1, len(lst)) if lst[i] != lst[i-1]]\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    LSA = math.pi * r * s\n\n    return LSA\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target: The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n        -1: If the target number is not found in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4])\n        70\n    \"\"\"\n    result = 0\n    for i in range(len(lst)):\n        for j in range(i, len(lst)):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Calculate the mask to toggle bits except the first and last bit\n    mask = (1 << (num.bit_length() - 2)) - 1\n\n    # Toggle the bits using the mask\n    toggled_num = num ^ mask\n\n    return toggled_num\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list in which to find the left insertion point.\n        value: The value for which to find the left insertion point.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n\n    Examples:\n        >>> left_insertion([1,2,4,5], 6)\n        4\n        >>> left_insertion([1,2,4,5], 3)\n        2\n        >>> left_insertion([1,2,4,5], 1)\n        0\n    \"\"\"\n    if arr != sorted(arr):\n        raise ValueError(\"Input list must be sorted\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Test cases\nassert check_str(\"annie\")\nassert not check_str(\"banana\")\nassert check_str(\"Elephant\")\nassert check_str(\"Ice Cream\")\nassert not check_str(\"xyz\")"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    index = 1\n    triangular_number = 1\n\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    return dict(zip(t[::2], t[1::2]))\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area of a square face\n    square_face_area = side_length ** 2\n\n    # Calculate the height of the tetrahedron\n    height = side_length / (2 * math.sqrt(3))\n\n    # Calculate the area of the square face triangles\n    triangle_area = square_face_area * math.sqrt(3) / 4\n\n    # Calculate the total area of the tetrahedron\n    total_area = 4 * triangle_area\n\n    return total_area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    return lst[-n:] + lst[:-n]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        t (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(x is None for x in t)\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num) if digit != '0'):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    words = string.split()\n    return ' '.join(words)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonIsAwesome\") == 'Python Is Awesome'\nassert capital_words_spaces(\"PythonIsAwesomeProgrammingLanguage\") == 'Python Is Awesome Programming Language'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to add the tuple to.\n        tpl (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Example:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    lst.extend(tpl)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    Args:\n        arr (list): The input array to be checked.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    for i in range(1, len(arr)):\n        parent = (i - 1) // 2\n        if arr[i] < arr[parent]:\n            return False\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert check_min_heap([8, 7, 6, 5, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    return sorted(records, key=lambda x: x[1])[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two unique numbers.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1, 1, 1])\n        Traceback (most recent call last):\n            ...\n        ValueError: List must have at least two unique numbers.\n    \"\"\"\n    unique_numbers = set(lst)\n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must have at least two unique numbers.\")\n\n    sorted_numbers = sorted(unique_numbers)\n    return sorted_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for string in string_list:\n        reversed_string = string[::-1]\n        if reversed_string in string_list:\n            count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        sublist_counts[sublist_tuple] = sublist_counts.get(sublist_tuple, 0) + 1\n    return sublist_counts\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    try:\n        float(s)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.11.1') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123.1111') == False\nassert is_decimal('123.11111') == False\nassert is_decimal('123.111111') == False\nassert is_decimal('123.1111111') == False\nassert is_decimal('123.11111111') == False\nassert is_decimal('123.111111111') == False\nassert is_decimal('123.1111111111') == False\nassert is_decimal('123.11111111111') == False\nassert is_decimal('123.111111111111') == False\nassert is_decimal('123.1111111111111') == False\nassert is_decimal('123.11111111111111') == False\nassert is_decimal('123.111111111111111') == False\nassert is_decimal('123.1111111111111111') == False\nassert is_decimal('123.11111111111111111') == False\nassert is_decimal('123.111111111111111111') == False\nassert is_decimal('123.1111111111111111111') == False\nassert is_decimal('123.11111111111111111111') == False\nassert is_decimal('123.111111111111111111111') == False\nassert is_decimal('123.1111111111111111111111') == False\nassert is_decimal('123.11111111111111111111111') == False\nassert is_decimal('123.111111111111111111111111') == False\nassert is_decimal('123.1111111111111111111111111') == False\nassert is_decimal('123.111111111111111"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([]) == True\nassert unique_Element([1]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of integers.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the array is empty or has less than two elements.\n\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n# Test cases\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Write a python function to count number of digits in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n\n    Examples:\n        >>> number_ctr('program2bedone')\n        1\n        >>> number_ctr('12345')\n        5\n        >>> number_ctr('abcdefg')\n        0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Testing the function\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abcdefg') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find nth polite number.\n\n    Parameters:\n    n (int): The index of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    \"\"\"\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return is_polite(n - 1) + is_polite(n - 2)\n\n# Test the function\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function\nassert pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                count += 1\n    return count\n\n# Test cases\nassert get_pairs_count([1,1,1,1], 2) == 6\nassert get_pairs_count([1,2,3,4,5], 5) == 2\nassert get_pairs_count([1,2,3,4,5], 6) == 2\nassert get_pairs_count([1,2,3,4,5], 7) == 1\nassert get_pairs_count([1,2,3,4,5], 8) == 0"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))\n\n# Test the function\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Example:\n    >>> odd_num_sum(2)\n    82\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i ** 4\n\n    return sum\n\n# Test the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return not stack\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\")"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test cases\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The input string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, its starting index, and ending index.\n        None: If there is no match.\n\n    Example:\n        >>> occurance_substring('python programming, python language','python')\n        ('python', 0, 6)\n    \"\"\"\n    start_index = string.find(substring)\n    if start_index != -1:\n        end_index = start_index + len(substring)\n        return substring, start_index, end_index\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    return all(lst[i] % 2 == 1 for i in range(1, len(lst), 2))\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,3,8]) == False\nassert odd_position([2,1,4,3,6,7,6,3,8,10]) == False\nassert odd_position([2,1,4,3,6,7,6,3,8,10,11]) == True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    return sum(set(lst))\n\n# Test the function\nassert find_sum([1,2,3,1,1,4,5,6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    \n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    \n    if current_sublist:\n        result.append(current_sublist)\n    \n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n\ndef test_find_combinations():\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\ntest_find_combinations()"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n        >>> odd_length_sum([1, 2, 4, 5, 6])\n        27\n    \"\"\"\n    total_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr), 2):\n            total_sum += sum(arr[i:j+1])\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None or num < even_num:\n                even_num = num\n        else:\n            if odd_num is None or num < odd_num:\n                odd_num = num\n    if even_num is not None and odd_num is not None:\n        return even_num * odd_num\n    else:\n        return None\n\n# Test cases\nassert mul_even_odd([1,3,5,7,4,1,6,8])==4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        tuple_str (str): The tuple string to be converted.\n\n    Returns:\n        tuple: The integer tuple representation of the input tuple string.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple string.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(10, 20, 30, 40, 50)\")\n        (10, 20, 30, 40, 50)\n    \"\"\"\n    try:\n        # Remove the parentheses and split the string into individual elements\n        elements = tuple_str[1:-1].split(\", \")\n\n        # Convert each element to an integer and create a tuple\n        int_tuple = tuple(int(element) for element in elements)\n\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple string\")"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list in which to find the insertion point.\n        value: The value to be inserted.\n\n    Returns:\n        int: The index of the right insertion point.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> right_insertion([1,2,4,5], 6)\n        4\n        >>> right_insertion([1,2,4,5], 3)\n        2\n        >>> right_insertion([1,2,4,5], 1)\n        0\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    left, right = 0, len(arr)\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of strings.\n        string (str): The string to be added to the list.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Example:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n        lst (list): The input list to check.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in lst[::2])\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    return tuple(x for x in tup if not isinstance(x, tuple))\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list.\n    \"\"\"\n    return len(lists)\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target: The element to find the last position of.\n\n    Returns:\n        int: The last position of the element in the array.\n\n    Raises:\n        ValueError: If the array is empty or the element is not found.\n\n    Examples:\n        >>> last([1,2,3], 1)\n        0\n        >>> last([1,2,3], 2)\n        1\n        >>> last([1,2,3], 3)\n        2\n        >>> last([1,2,3], 4)\n        Traceback (most recent call last):\n            ...\n        ValueError: Element not found\n        >>> last([], 1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Array is empty\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n\n    left, right = 0, len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    raise ValueError(\"Element not found\")"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r\"a.*b\"\n    match = re.match(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"ababab\")\nassert not text_starta_endb(\"bababa\")\nassert not text_starta_endb(\"abababa\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculate the sum of all items in the given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        int: The sum of all items in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower limit of the range.\n    r (int): The upper limit of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n    \"\"\"\n    # Initialize the sum variable\n    sum = 0\n\n    # Iterate over the range of numbers\n    for num in range(l, r+1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the sum\n            sum += num\n\n    return sum\n\n# Test the function\nassert sum_in_range(2, 5) == 8"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n    \"\"\"\n    return sum(arr)\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(10, 3)\n        160\n    \"\"\"\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    # Calculate the number of bits to be rotated\n    d = d % 32\n\n    # Perform the left rotation\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The number of equal integers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    # Using binary search to find the square root\n    left, right = 0, num\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == num:\n            return True\n        elif mid * mid < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\n# Test cases\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([-1, -2, -3]) == False\nassert is_product_even([-2, -4, -6]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list with the highest sum of elements.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists\")\n\n    if not lst:\n        return []\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            current_run = 0\n\n        if current_run > max_run:\n            max_run = current_run\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If no odd number is found in the list.\n\n    Examples:\n        >>> first_odd([1,3,5])\n        1\n        >>> first_odd([2,4,6])\n        Traceback (most recent call last):\n            ...\n        ValueError: No odd number found in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd number found in the list.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple to check.\n        k: The value to check for in the tuple.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == True"}
