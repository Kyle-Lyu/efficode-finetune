{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is a non-prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a non-prime number, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers, in descending order.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    # Use the heapq module to find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    # Reverse the list to get the descending order\n    largest_numbers.reverse()\n\n    return largest_numbers"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    This function checks whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = num1 ^ num2\n    return bin(xor_result).count('1') == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words which are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    return [word for word in words if len(word) >= 4]"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers and returns a new list with the squares of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the squares of each number in the input list.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n\n        >>> square_nums([-2, 0, 3, -4, 5])\n        [4, 0, 9, 16, 25]\n\n        >>> square_nums([])\n        []\n    \"\"\"\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Examples:\n        >>> find_rotations(\"aaaa\")\n        1\n        >>> find_rotations(\"abcde\")\n        5\n        >>> find_rotations(\"abcd\")\n        4\n    \"\"\"\n    rotations = 0\n    while string != string[1:] + string[0]:\n        string = string[1:] + string[0]\n        rotations += 1\n    return rotations\n\n# Test the function\nassert find_rotations(\"aaaa\") == 1\nassert find_rotations(\"abcde\") == 5\nassert find_rotations(\"abcd\") == 4"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"Python\", \"n\")\n        'Pytho'\n        >>> remove_Occ(\"apple\", \"p\")\n        'aple'\n    \"\"\"\n    if char in string:\n        string = string.replace(char, '', 1)\n        string = string.replace(char, '', string.rfind(char))\n    return string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A list of lists representing the matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    return all(c.islower() or c == '_' for c in text)"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square.\n\n    Parameters:\n    side_length (float): The length of each side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(5.5)\n    22.0\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    return ''.join(char for char in string1 if char not in string2)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    This function checks if a given array of integers contains any duplicate elements.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate elements, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Args:\n        n (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is woodball, False otherwise.\n\n    Examples:\n        >>> is_woodall(383)\n        True\n        >>> is_woodall(123)\n        False\n    \"\"\"\n    return n % 2 == 0 and n % 3 == 0 and n % 5 == 0"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse_num = int(str(num)[::-1])\n    return num == reverse_num * 2 - 1"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n    \"\"\"\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    Parameters:\n    n (int): The index of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n\n        >>> smallest_num([])\n        ValueError: Input list is empty\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n    return min(lst)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        marks (list): A list of tuples, where each tuple contains a subject and its corresponding mark.\n\n    Returns:\n        list: A new list of tuples sorted by the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Examples:\n        >>> pos_count([1,-2,3,-4])\n        2\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n\n    # Initialize the list of Bell numbers\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n\n    # Calculate the Bell numbers\n    for i in range(2, n + 1):\n        bell[i] = 0\n        for j in range(i):\n            bell[i] += bell[j] * bell[i - j - 1]\n\n    return bell[n]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\n# Test the function\nassert is_monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n        lst (list): The main list to check.\n        sublst (list): The sublist to search for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    return sublst in lst"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    This function takes a list of tuples as input and returns True if all tuples have equal length, and False otherwise.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(i, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check if the sequence follows the patterns given in the array.\n\n    Args:\n        patterns (list): A list of patterns.\n        sequence (list): A list of elements.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n\n    Examples:\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n        True\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"])\n        False\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    return [t for t in tuples if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    This function checks if a given number is divisible by 11.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return num % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of a word is odd.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * radius**3"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The index of the number to find.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_conway(10)\n    6\n    >>> newman_conway(1)\n    1\n    >>> newman_conway(2)\n    1\n    >>> newman_conway(3)\n    1\n    >>> newman_conway(4)\n    2\n    >>> newman_conway(5)\n    2\n    >>> newman_conway(6)\n    3\n    >>> newman_conway(7)\n    4\n    >>> newman_conway(8)\n    4\n    >>> newman_conway(9)\n    5\n    >>> newman_conway(10)\n    6\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: The merged dictionary.\n    \"\"\"\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        dict: A dictionary where the keys are the elements in the list and the values are their frequencies.\n\n    Examples:\n        >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n        {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Examples:\n        >>> closest_num(11)\n        10\n    \"\"\"\n    return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n    \"\"\"\n    return max(len(word) for word in words)"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if a given number is undulating.\n\n    An undulating number is a number in which the digits alternate between even and odd.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n\n    Examples:\n        >>> is_undulating(1212121)\n        True\n        >>> is_undulating(1212122)\n        False\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) % 2 == int(num_str[i-1]) % 2:\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of raising 'a' to the power 'b'.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2.5, 3)\n    15.625\n    \"\"\"\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = min(tuples, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_min_length([[1], [1, 2]])\n        1\n        >>> find_min_length([[1, 2], [1, 2, 3]])\n        2\n        >>> find_min_length([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(1)\n    1\n    >>> divisor(100)\n    9\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lists):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        dict: A dictionary where keys are elements and values are their frequencies.\n\n    Examples:\n        >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n        {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    frequency = {}\n    for sublist in lists:\n        for element in sublist:\n            frequency[element] = frequency.get(element, 0) + 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(nums):\n    \"\"\"\n    Function to multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    product = 1\n    for num in nums:\n        product *= num\n\n    return product / len(nums)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n        decimal (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary equivalent of the decimal number, represented as a string with no leading zeros.\n\n    Examples:\n        >>> decimal_to_binary(8)\n        '1000'\n        >>> decimal_to_binary(10)\n        '1010'\n        >>> decimal_to_binary(0)\n        '0'\n    \"\"\"\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The next smallest palindrome of the input integer.\n\n    Examples:\n        >>> next_smallest_palindrome(99)\n        101\n    \"\"\"\n    # Convert the input integer to a string\n    n_str = str(n)\n\n    # Find the length of the input integer\n    n_len = len(n_str)\n\n    # Check if the input integer is already a palindrome\n    if n_str == n_str[::-1]:\n        # If the input integer is a palindrome, return the next smallest palindrome\n        if n_len % 2 == 0:\n            # If the length is even, increment the middle digits by 1\n            mid = n_str[n_len // 2 - 1]\n            return int(n_str[:n_len // 2 - 1] + str(int(mid) + 1) + n_str[n_len // 2:])\n        else:\n            # If the length is odd, increment the middle digit by 1 and pad the rest with 0s\n            mid = n_str[n_len // 2]\n            return int(n_str[:n_len // 2] + str(int(mid) + 1) + n_str[n_len // 2 + 1:])\n\n    # If the input integer is not a palindrome, find the next smallest palindrome\n    for i in range(n_len // 2):\n        if n_str[i] < n_str[n_len - i - 1]:\n            # If the digit at the left is smaller than the digit at the right, increment the left digit by 1\n            n_str = n_str[:i] + str(int(n_str[i]) + 1) + n_str[i + 1:]\n            # Pad the rest of the digits with 0s\n            n_str = n_str[:i + 1] + '0' * (n_len - i - 1)\n            return int(n_str)\n        elif n_str[i] > n_str[n_len - i - 1]:\n            # If the digit at the left is greater than the digit at the right, swap the digits\n            n_str = n_str[:i] + n_str[n_len - i - 1] + n_str[i + 1:n_len - i - 1] + n_str[i] + n_str[n_len - i:]\n            return int(n_str)\n\n    # If no palindrome can be found, return the input integer\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        The kth element in the array.\n\n    Raises:\n        IndexError: If the kth element does not exist in the array.\n\n    Examples:\n        >>> kth_element([12, 3, 5, 7, 19], 2)\n        3\n        >>> kth_element([12, 3, 5, 7, 19], 5)\n        19\n        >>> kth_element([12, 3, 5, 7, 19], 6)\n        Traceback (most recent call last):\n            ...\n        IndexError: kth element does not exist in the array\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"kth element does not exist in the array\")\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to be converted.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    camel_str = ''.join(word.capitalize() for word in snake_str.split('_'))\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    \"\"\"\n    if m == 0:\n        return 1\n    elif m == 1:\n        return n\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + (m + 1) * eulerian_num(n, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists, where each sublist is sorted.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of true booleans in a given list.\n\n    Args:\n        lst (list): A list of booleans.\n\n    Returns:\n        int: The count of true booleans in the list.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True])\n        3\n    \"\"\"\n    return sum(1 for boolean in lst if boolean)\n\n# Test the function\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple after appending the list.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A single sorted list containing all elements from the input lists.\n\n    Examples:\n        >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n        [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        binary_string (str): The binary string to be rotated.\n        rotations (int): The number of rotations to be performed.\n\n    Returns:\n        int: The count of numbers with an odd value after the given number of rotations.\n\n    Examples:\n        >>> odd_Equivalent(\"011001\", 6)\n        3\n        >>> odd_Equivalent(\"101010\", 3)\n        0\n        >>> odd_Equivalent(\"111111\", 1)\n        6\n    \"\"\"\n    count = 0\n    for _ in range(rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists.\n\n    Returns:\n        list: A list of common elements.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n    return list(set.intersection(*map(set, nested_lists)))"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): A tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the tuple.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted array.\n\n    Returns:\n        int: The element that appears only once.\n\n    Raises:\n        ValueError: If the input array is empty or has an even number of elements.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n        >>> search([1,1,2,2,3,3,4,4,5])\n        5\n        >>> search([1,1,2,2,3,3,4,4])\n        ValueError: Input array has an even number of elements.\n        >>> search([])\n        ValueError: Input array is empty.\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty.\")\n    if len(arr) % 2 == 0:\n        raise ValueError(\"Input array has an even number of elements.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n    \"\"\"\n    max_product = 0\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to n.\n\n    Examples:\n        >>> amicable_numbers_sum(999)\n        504\n    \"\"\"\n    def sum_divisors(num):\n        \"\"\"\n        Calculate the sum of all divisors of a number.\n\n        Args:\n            num (int): The number for which to calculate the sum of divisors.\n\n        Returns:\n            int: The sum of all divisors of the number.\n        \"\"\"\n        divisors_sum = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for i in range(1, n + 1):\n        j = sum_divisors(i)\n        if i != j and sum_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    >>> angle_complex(1+0j)\n    0.0\n    \"\"\"\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): The input binary string.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors.\n\n    Examples:\n    >>> sum_common_divisors(10, 15)\n    6\n    >>> sum_common_divisors(24, 36)\n    18\n    \"\"\"\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(24, 36) == 18"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    This function multiplies two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of a and b.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(5, 3)\n    15\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be included.\n        words (str): A string containing the list of words, separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    return [word for word in words.split() if len(word) > n]"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    This function checks if a given matrix is a magic square.\n\n    Args:\n        matrix (list): A list of lists representing the matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    # Calculate the sum of the main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n\n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n\n    # Check if all sums are equal\n    if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and row_sums[0] == col_sums[0] == main_diag_sum == sec_diag_sum:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    return max(set(lst), key=lst.count)"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    \"\"\"\n    Reverse only the vowels of a given string (where y is not a vowel).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with vowels reversed.\n\n    Examples:\n        >>> reverse_vowels(\"Python\")\n        'Python'\n        >>> reverse_vowels(\"Hello, World\")\n        'Holle, Werld'\n        >>> reverse_vowels(\"aeiou\")\n        'uoiea'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    string_list = list(string)\n    vowel_list = [char for char in string_list if char in vowels]\n    vowel_list.reverse()\n    for i, char in enumerate(string_list):\n        if char in vowels:\n            string_list[i] = vowel_list.pop(0)\n    return ''.join(string_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    return sum(num for num in numbers if num < 0)"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n\n    Examples:\n        >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n        0.181818\n    \"\"\"\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check if a given number can be represented as the sum of non-zero powers of 2.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return False\n\n    return True\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return circumference"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    return set(sum(lst, []))"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n    # Implementation of the pancake sorting algorithm\n    # (The actual algorithm is not provided in the problem description)\n    # For the purpose of this example, we will use a simple bubble sort algorithm\n    n = len(lst)\n    for i in range(n):\n        for j in range(0, n-i-1):\n            if lst[j] > lst[j+1]:\n                lst[j], lst[j+1] = lst[j+1], lst[j]\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array.\n\n    Returns:\n        int: The maximum absolute difference between any two elements.\n\n    Examples:\n        >>> max_Abs_Diff((2, 1, 5, 3))\n        4\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target value.\n\n    Returns:\n        tuple: A tuple containing x and y, or None if no solution exists.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(2, 3, 8)\n        None\n    \"\"\"\n    for x in range(n + 1):\n        y = (n - a * x) / b\n        if y % 1 == 0:\n            return x, int(y)\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst1 (list): The list from which elements are to be removed.\n        lst2 (list): The list containing elements to be removed.\n\n    Returns:\n        list: The modified list with elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Args:\n        n (int): The upper limit of the series.\n\n    Returns:\n        int: The sum of the series.\n\n    Examples:\n        >>> sum_series(6)\n        12\n        >>> sum_series(10)\n        20\n        >>> sum_series(0)\n        0\n    \"\"\"\n    result = 0\n    for i in range(n//2):\n        result += n - 2*i\n    return result"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefghijklmnopqrstuvwxyz\")\n        26\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The number of pairs of integers that xor to an even number.\n\n    Examples:\n        >>> find_even_pair([5, 4, 7, 2, 1])\n        4\n    \"\"\"\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n        >>> next_power_of_2(0)\n        1\n        >>> next_power_of_2(1)\n        1\n        >>> next_power_of_2(2)\n        2\n        >>> next_power_of_2(3)\n        4\n        >>> next_power_of_2(4)\n        4\n        >>> next_power_of_2(5)\n        8\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The input list.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the number in the list.\n\n    Examples:\n        >>> frequency([1, 2, 3], 1)\n        1\n        >>> frequency([1, 2, 3], 4)\n        0\n    \"\"\"\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): The input list.\n        start (int): The starting index (inclusive).\n        end (int): The ending index (exclusive).\n\n    Returns:\n        int: The sum of numbers in the specified range.\n\n    Raises:\n        ValueError: If the start or end indices are out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end > len(lst):\n        raise ValueError(\"Start or end indices are out of range\")\n\n    return sum(lst[start:end])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of the occurence of the string 'std' in the input string.\n\n    Examples:\n        >>> count_occurance(\"letstdlenstdporstd\")\n        3\n    \"\"\"\n    return string.count('std')"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    return all(type(x) == type(t[0]) for x in t)"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if the given element is the majority element in the sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        n (int): The length of the array.\n        element: The element to check for majority.\n\n    Returns:\n        bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The count of set bits in the input number.\n\n    Examples:\n        >>> count_set_bits(2)\n        1\n        >>> count_set_bits(7)\n        3\n        >>> count_set_bits(0)\n        0\n    \"\"\"\n    count = 0\n    while num:\n        num &= num - 1\n        count += 1\n    return count\n\n# Test the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters with odd index values removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the given character.\n\n    Examples:\n        >>> replace_blank(\"hello people\", '@')\n        'hello@people'\n    \"\"\"\n    return string.replace(' ', character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to be returned.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of each side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Examples:\n    >>> volume_cube(3)\n    27.0\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number with all even bits set.\n\n    Examples:\n        >>> even_bit_set_number(10)\n        10\n        >>> even_bit_set_number(15)\n        14\n    \"\"\"\n    return num | 0b10101010101010101010101010101010"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of non-empty substrings.\n\n    Examples:\n        >>> number_of_substrings(\"abc\")\n        6\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The maximum value of each element in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n\n    Examples:\n        >>> get_total_number_of_sequences(10, 4)\n        4\n    \"\"\"\n    # Initialize the list with the first element\n    sequences = [[i] for i in range(1, m + 1)]\n\n    # Iterate through the remaining elements\n    for _ in range(1, n):\n        new_sequences = []\n        for seq in sequences:\n            for i in range(seq[-1] * 2, m + 1):\n                new_sequences.append(seq + [i])\n        sequences = new_sequences\n\n    return len(sequences)"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The total number of characters in the string.\n\n    Examples:\n        >>> count_charac(\"python programming\")\n        18\n    \"\"\"\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        num (int): The given number.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Examples:\n        >>> next_Perfect_Square(35)\n        36\n    \"\"\"\n    next_square = math.ceil(math.sqrt(num)) ** 2\n    return next_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n\n    A bitonic subsequence is a subsequence of a given sequence in which the elements are first increasing and then decreasing.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n    \"\"\"\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    # Calculate increasing subsequence sums\n    inc[0] = arr[0]\n    for i in range(1, n):\n        inc[i] = max(inc[i-1], arr[i])\n\n    # Calculate decreasing subsequence sums\n    dec[-1] = arr[-1]\n    for i in range(n-2, -1, -1):\n        dec[i] = max(dec[i+1], arr[i])\n\n    # Find the maximum sum of bitonic subsequences\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, inc[i] + dec[i] - arr[i])\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the longest palindromic subsequence.\n\n    Examples:\n        >>> lps(\"TENS FOR TENS\")\n        5\n    \"\"\"\n    # Base case: if the string is empty or has only one character, return 1\n    if len(string) <= 1:\n        return 1\n\n    # Recursive case: if the first and last characters are the same,\n    # add 2 to the length of the longest palindromic subsequence in the remaining string\n    if string[0] == string[-1]:\n        return lps(string[1:-1]) + 2\n\n    # Otherwise, find the maximum of the lengths of the longest palindromic subsequences\n    # obtained by removing the first and last characters\n    return max(lps(string[1:]), lps(string[:-1]))"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Args:\n        tuple: The input tuple.\n        element: The element to count occurrences of.\n\n    Returns:\n        The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tuple.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    return [element] * (len(lst) * 2 + 1)"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, theta) of the complex number.\n    \"\"\"\n    r = abs(complex_number)\n    theta = math.atan2(complex_number.imag, complex_number.real)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of integer elements in the list.\n\n    Examples:\n        >>> count_integer([1, 2, 'abc', 1.2])\n        2\n    \"\"\"\n    return sum(1 for x in lst if isinstance(x, int))"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of the combinations.\n\n    Returns:\n        list: A list with tuples representing the combinations.\n\n    Examples:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    if n == 0:\n        return [()]\n\n    combinations = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n - 1)\n        for sub_combination in sub_combinations:\n            combinations.append((lst[i],) + sub_combination)\n\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than the given non-negative number.\n\n    Examples:\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(100)\n    25\n    \"\"\"\n    if n < 2:\n        return 0\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n\n    return sum(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    Swaps the order of two numbers and returns a tuple with the second number first and the first number second.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        tuple: A tuple containing the second number first and the first number second.\n\n    Examples:\n        >>> swap_numbers(10, 20)\n        (20, 10)\n\n        >>> swap_numbers(3.14, 2.71)\n        (2.71, 3.14)\n\n        >>> swap_numbers(-5, 0)\n        (0, -5)\n    \"\"\"\n    return b, a"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: The maximized tuple.\n\n    Examples:\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    maximized_tuple = tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n    return maximized_tuple"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(10)\n    29\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than 0\")\n\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n\n    if n <= len(primes):\n        return primes[n - 1]\n\n    while len(primes) < n:\n        next_prime = primes[-1] + 2\n        is_prime = True\n\n        for prime in primes:\n            if next_prime % prime == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(next_prime)\n\n    return primes[n - 1]"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across the given tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n        ZeroDivisionError: If an element in tuple2 is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n\n        >>> division_elements((10, 4, 6, 9), (5, 2, 0, 3))\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is L.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two parts of the list.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n\n        >>> split_two_parts([1, 2, 3, 4, 5], 6)\n        ValueError: L cannot be greater than the length of the input list.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Examples:\n    >>> dog_age(12)\n    61\n    >>> dog_age(0)\n    0\n    >>> dog_age(1)\n    10\n    \"\"\"\n    return age * 7"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The interval at which to split the list.\n\n    Returns:\n        list: A list of lists, where each sublist contains the elements from the original list at intervals of n.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    return [lst[i:i+n] for i in range(0, len(lst), n)]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube.\n\n    Parameters:\n    side_length (float): The length of each side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100.0\n    \"\"\"\n    return 6 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the squares of the first n odd natural numbers.\n\n    Examples:\n        >>> square_Sum(2)\n        10\n        >>> square_Sum(3)\n        35\n        >>> square_Sum(4)\n        80\n    \"\"\"\n    return sum(i**2 for i in range(1, 2*n, 2))"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    \"\"\"\n    return (n * (n + 1)) // 2"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the input character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('C')\n    67\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Find the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(lst[1::2])"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Args:\n        n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Examples:\n        >>> even_Power_Sum(2)\n        1056\n        >>> even_Power_Sum(3)\n        2533\n        >>> even_Power_Sum(4)\n        5108\n    \"\"\"\n    return sum(2 * i ** 5 for i in range(1, n + 1))"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples):\n    \"\"\"\n    Extracts the rear element from each tuple in the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    return [t[-1] for t in tuples]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the tuples have different lengths.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of even index binomial coefficients up to a given positive integer n.\n\n    Args:\n        n (int): The positive integer up to which the sum of even index binomial coefficients is calculated.\n\n    Returns:\n        int: The sum of even index binomial coefficients up to n.\n\n    Examples:\n        >>> even_binomial_Coeff_Sum(4)\n        8\n        >>> even_binomial_Coeff_Sum(10)\n        100\n    \"\"\"\n    sum = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum += binomial_coefficient(n, i)\n    return sum\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Args:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n    Returns:\n        int: The binomial coefficient (n choose k).\n\n    Examples:\n        >>> binomial_coefficient(5, 2)\n        10\n        >>> binomial_coefficient(10, 3)\n        120\n    \"\"\"\n    return factorial(n) // (factorial(k) * factorial(n - k))\ndef factorial(n):\n    \"\"\"\n    Calculate the factorial of a non-negative integer.\n\n    Args:\n        n (int): The non-negative integer for which the factorial is calculated.\n\n    Returns:\n        int: The factorial of n.\n\n    Examples:\n        >>> factorial(5)\n        120\n        >>> factorial(0)\n        1\n    \"\"\"\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter by.\n\n    Returns:\n        dict: The filtered dictionary.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple_):\n    \"\"\"\n    Find the number of elements that occur before the tuple element in the given tuple.\n\n    Args:\n        tuple_: The input tuple.\n\n    Returns:\n        The number of elements before the tuple element.\n\n    Examples:\n        >>> count_first_elements((1, 5, 7, (4, 6), 10))\n        3\n        >>> count_first_elements((1, 5, 7, (4, 6), 10, 12))\n        3\n        >>> count_first_elements((1, 5, 7, (4, 6), 10, 12, 14))\n        3\n    \"\"\"\n    count = 0\n    for element in tuple_:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Searches for an element in an array using sequential search.\n\n    Args:\n        arr (list): The input array.\n        element: The element to search for.\n\n    Returns:\n        tuple: A tuple containing a boolean indicating if the element is found and the index position of the element.\n\n    Examples:\n        >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n        (True, 3)\n\n        >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 42)\n        (False, -1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a given list are unique.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n\n    Examples:\n        >>> all_unique([1, 2, 3])\n        True\n        >>> all_unique([1, 2, 2])\n        False\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(l1, l2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    l1 (list): The first list.\n    l2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of l1 and l2.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    Examples:\n    >>> sub_list([1, 2, 3], [4, 5, 6])\n    [-3, -3, -3]\n    >>> sub_list([1, 2, 3], [4, 5])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(l1) != len(l2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a - b for a, b in zip(l1, l2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check if the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Args:\n        num (int): The integer to be checked.\n\n    Returns:\n        bool: True if the condition is satisfied, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in a list are equal to a given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the modified array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Examples:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n        30\n    \"\"\"\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum * k\n\n    # If the modified sum is greater than the original sum, return the modified sum\n    if modified_sum > original_sum:\n        return modified_sum\n\n    # Otherwise, return the original sum\n    return original_sum\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray in the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a contiguous subarray.\n\n    Examples:\n        >>> max_sub_array_sum([10, 20, -30, -1])\n        30\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for num in arr[1:]:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Examples:\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    40\n    >>> square_Sum(4)\n    90\n    \"\"\"\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with the maximum length.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n        a (int): The dividend.\n        b (int): The divisor.\n\n    Returns:\n        int: The quotient of a divided by b.\n\n    Raises:\n        ZeroDivisionError: If b is zero.\n\n    Examples:\n        >>> find(10, 3)\n        3\n        >>> find(10, 0)\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    return a // b"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n\n    Returns:\n    float: Length of the third side.\n\n    Raises:\n    ValueError: If either a or b is negative.\n\n    Examples:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    >>> otherside_rightangle(0, 0)\n    0.0\n    >>> otherside_rightangle(-1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Both sides must be positive.\n    \"\"\"\n\n    if a < 0 or b < 0:\n        raise ValueError(\"Both sides must be positive.\")\n\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n    return max(lst)"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The number of inversions in the array.\n\n    Examples:\n        >>> get_Inv_Count([1,20,6,4,5])\n        5\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        nested_list (list): A nested list structure.\n\n    Returns:\n        list: A flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        tuples (list): A list of tuples, where each tuple contains a name and an aggregate.\n\n    Returns:\n        tuple: The tuple with the maximum aggregate.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_aggregate_tuple = max(tuples, key=lambda x: x[1])\n    return max_aggregate_tuple"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Args:\n        n (int): The length of the binary sequence.\n\n    Returns:\n        float: The count of binary sequences.\n\n    Examples:\n        >>> count_binary_seq(1)\n        2.0\n    \"\"\"\n    # Base case: If n is 0, there is only one possible sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: Count the number of sequences with n-1 bits\n    count = count_binary_seq(n - 1)\n\n    # Add 2 to the count for each sequence with n-1 bits that satisfies the condition\n    count += 2 * count_binary_seq(n - 1)\n\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(d):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Args:\n        d (dict): The input dictionary.\n\n    Returns:\n        int: The depth of the dictionary.\n\n    Examples:\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n        4\n    \"\"\"\n    if not isinstance(d, dict):\n        return 0\n    return 1 + max(dict_depth(v) for v in d.values())"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words and returns two words that start with the letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing the two words that start with the letter 'p'.\n\n    Raises:\n        ValueError: If the list does not contain at least two words starting with the letter 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"The list does not contain at least two words starting with the letter 'p'.\")\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n        i (int): The index up to which the subsequence is considered.\n        k (int): The index of the element to be included in the subsequence.\n\n    Returns:\n        int: The maximum sum of increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty or if the given index is out of range.\n\n    Examples:\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n        11\n    \"\"\"\n    if not arr or i < 0 or i >= n or k <= i:\n        raise ValueError(\"Invalid input\")\n\n    # Initialize the maximum sum to the element at index i\n    max_sum = arr[i]\n\n    # Iterate through the elements after index i\n    for j in range(i + 1, n):\n        if arr[j] > arr[i] and arr[j] < arr[k]:\n            max_sum += arr[j]\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the number of products to find is greater than the number of elements in the lists.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num > len(list1) or num > len(list2):\n        raise ValueError(\"Number of products to find is greater than the number of elements in the lists.\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[i] * list2[i] for list1, list2 in zip(list1, list2))\n        products.append(max_product)\n\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    Find the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple of characters.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The modified number with the left most unset bit set.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        14\n    \"\"\"\n    # Find the left most unset bit\n    bit_pos = 0\n    while num & (1 << bit_pos):\n        bit_pos += 1\n\n    # Set the left most unset bit\n    modified_num = num | (1 << bit_pos)\n\n    return modified_num"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n        >>> highest_power_of_2(10)\n        8\n        >>> highest_power_of_2(16)\n        16\n        >>> highest_power_of_2(0)\n        0\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test the function\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(0) == 0"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Examples:\n    >>> find_lucas(9)\n    76\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_string):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Args:\n        lst (list): The input list.\n        format_string (str): The format string to apply.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_string.format(item) for item in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n        keys (list): List of keys.\n        values (list): List of values.\n        scores (list): List of scores.\n\n    Returns:\n        list: List of nested dictionaries.\n\n    Examples:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    result = []\n    for key, value, score in zip(keys, values, scores):\n        result.append({key: {value: score}})\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character in the string.\n        None: If all characters in the string are repeated.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        None\n        >>> first_non_repeating_character(\"hello\")\n        'h'\n        >>> first_non_repeating_character(\"aabbcc\")\n        None\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in string:\n        # Increment the count of the character in the dictionary\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Iterate through each character in the string\n    for char in string:\n        # If the count of the character is 1, it is the first non-repeated character\n        if char_count[char] == 1:\n            return char\n\n    # If all characters are repeated, return None\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(1, 2, 3)\n    2.0\n    \"\"\"\n    return sorted([a, b, c])[1]"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number in the input list.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    return [sum(int(digit) for digit in str(num)) for num in numbers]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(2, 1)\n    1\n    >>> minimum(-1, 0)\n    -1\n    \"\"\"\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to search in.\n        element: The element to check for.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 == 1"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n    \"\"\"\n    return min(a * b for a, b in lst)"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input list contains non-numeric values.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    try:\n        return min(lst)\n    except TypeError:\n        raise TypeError(\"Input list contains non-numeric values.\")"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [tup[n] for tup in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (sequence): The first sequence.\n        seq2 (sequence): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input array is empty or has less than two elements.\n\n    Examples:\n        >>> max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n        (7, 8)\n\n        >>> max_Product([])\n        ValueError: Input array must have at least two elements.\n\n        >>> max_Product([1])\n        ValueError: Input array must have at least two elements.\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input array must have at least two elements.\")\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair"}
{"task_id": "Mbpp/418", "solution": "def find_max(lst):\n    \"\"\"\n    Find the element of a list with maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The element of the list with maximum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_max([['A'], ['A', 'B'], ['A', 'B', 'C']])\n        ['A', 'B', 'C']\n\n        >>> find_max([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    return max(lst, key=len)"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds every number in the given list and calculates the sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of rounded numbers multiplied by the length of the list.\n\n    Examples:\n        >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n        243\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(5)\n    1008\n    \"\"\"\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n\n# Test the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216\nassert cube_sum(5) == 1008"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_input, delimiter='-'):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        delimiter (str): The delimiter to use for concatenation. Default is '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(element) for element in tuple_input)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to include in the calculation.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Examples:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(5)\n    22.5\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): A tuple of strings.\n\n    Returns:\n        list: A list of rear index elements extracted from the strings in the tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    return [s[-1] for s in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to count.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters odd numbers from a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Args:\n        arr (list): The input array to be sorted.\n\n    Returns:\n        list: The sorted array.\n\n    Examples:\n        >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n        [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the elementwise and tuples.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): The coefficient of the x^2 term.\n    b (float): The coefficient of the x term.\n    c (float): The constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Examples:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n    return -b - (b**2 - 4*a*c)**0.5"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Length of the side of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Examples:\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    >>> median_trapezium(10, 20, 30)\n    15.0\n    >>> median_trapezium(5, 10, 15)\n    8.333333333333334\n    \"\"\"\n    median = (a + b - c) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array.\n        num (int): The number to compare with the elements of the array.\n\n    Returns:\n        bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    return all(x > num for x in arr)"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The last digit of the input number.\n\n    Examples:\n        >>> last_digit(123)\n        3\n        >>> last_digit(456789)\n        9\n        >>> last_digit(0)\n        0\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3\nassert last_digit(456789) == 9\nassert last_digit(0) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n\n    Examples:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    >>> neg_nos([1, 2, 3, 4])\n    []\n    >>> neg_nos([-1, -2, -3, -4])\n    [-1, -2, -3, -4]\n    \"\"\"\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n    \"\"\"\n    return ''.join(string[i] for i in range(len(string)) if i % 2 == 0)"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    return int(''.join(str(num) for num in numbers))"}
{"task_id": "Mbpp/440", "solution": "import re"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (float): The length of each side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150.0\n    \"\"\"\n    return 6 * size ** 2"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the index wise multiplication of elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))\n\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    \"\"\"\n    This function counts the occurrence of all elements of a list in a tuple.\n\n    Parameters:\n    tuple_input (tuple): The input tuple.\n    list_input (list): The list of elements to count the occurrence of.\n\n    Returns:\n    int: The total count of occurrences of the elements in the list.\n\n    Examples:\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n    3\n    \"\"\"\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Find cubes of individual elements in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with cubes of the input numbers.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 0\n    else:\n        return cal_sum(n - 2) + cal_sum(n - 3)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n\n    Returns:\n        list: A new list containing the extracted strings.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with whitespaces removed.\n\n    Examples:\n        >>> remove_whitespaces(' Google    Flutter ')\n        'GoogleFlutter'\n    \"\"\"\n    return string.replace(' ', '')"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The sum of even factors of the input number.\n\n    Examples:\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(24)\n    42\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the word contains 'z', False otherwise.\n\n    Examples:\n        >>> text_match_wordz(\"pythonz.\")\n        True\n        >>> text_match_wordz(\"python.\")\n        False\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    Args:\n        month_number (int): The month number to check.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    return [string[::-1] for string in string_list]"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Find the sublist with the minimum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n# Test the function\nassert find_min_sublist([[1], [1, 2], [1, 2, 3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n    \"\"\"\n    return ''.join(char for char in string if not char.isupper())"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: A new list containing the first elements of the sublists.\n\n    Examples:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n\n    Examples:\n        >>> combinations_list(['orange', 'red', 'green', 'blue'])\n        [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    def helper(lst, i, curr, result):\n        if i == len(lst):\n            result.append(curr[:])\n            return\n        helper(lst, i + 1, curr, result)\n        curr.append(lst[i])\n        helper(lst, i + 1, curr, result)\n        curr.pop()\n\n    result = []\n    helper(lst, 0, [], result)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    max_product = arr[0]\n    current_product = arr[0]\n\n    for num in arr[1:]:\n        current_product = max(num, current_product * num)\n        max_product = max(max_product, current_product)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    This function drops empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The modified dictionary with empty items removed.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        tuple: A new tuple with the pairwise addition of the neighboring elements.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n    \"\"\"\n    return tuple(a + b for a, b in zip(t, t[1:]))"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulus value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n\n    Examples:\n        >>> check_Consecutive([1, 2, 3, 4, 5])\n        True\n\n        >>> check_Consecutive([1, 2, 4, 5])\n        False\n\n        >>> check_Consecutive([1, 3, 4, 5])\n        False\n\n        >>> check_Consecutive([])\n        False\n\n        >>> check_Consecutive([1])\n        False\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] - sorted_lst[i-1] != 1:\n            return False\n\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): A list of tuples.\n        tuple_list2 (list): A list of tuples.\n\n    Returns:\n        set: A set of tuples representing the intersection of the two lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a given character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character with.\n\n    Returns:\n        str: The modified string.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        'pollgon'\n    \"\"\"\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(d):\n    \"\"\"\n    Sorts a dictionary by value.\n\n    Args:\n        d (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a key-value pair from the input dictionary, sorted by value.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    return sorted(d.items(), key=lambda x: x[1])"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of the largest and smallest value in the array.\n\n    Examples:\n        >>> big_sum([1, 2, 3])\n        4\n        >>> big_sum([5, 10, 15])\n        20\n        >>> big_sum([-5, 0, 5])\n        0\n    \"\"\"\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The converted string in lower case.\n\n    Examples:\n        >>> convert_to_lower(\"InValid\")\n        'invalid'\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n    \"\"\"\n    return ''.join(char for char in string if char.isupper())"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Finds the first digit of a given number.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The first digit of the number.\n\n    Examples:\n        >>> first_digit(123)\n        1\n        >>> first_digit(9001)\n        9\n        >>> first_digit(0)\n        0\n    \"\"\"\n    return int(str(number)[0])\n\n# Test the function\nassert first_digit(123) == 1\nassert first_digit(9001) == 9\nassert first_digit(0) == 0"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Examples:\n        >>> difference(3)\n        30\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with toggled case.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Hello, Worlds\")\n    'hELLO, wORLDS'\n    \"\"\"\n    return string.swapcase()"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        12\n        >>> digit_distance_nums(100, 200)\n        0\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n    for i in range(min(len(num1_str), len(num2_str))):\n        distance += abs(int(num1_str[i]) - int(num2_str[i]))\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        arr (list): The input list.\n        n (int): The length of the input list.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n\n    Examples:\n        >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n        7\n    \"\"\"\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements of the input tuples, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(union))"}
{"task_id": "Mbpp/562", "solution": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Examples:\n        >>> find_max_length([[1], [1, 4], [5, 6, 7, 8]])\n        4\n    \"\"\"\n    return max(len(sublist) for sublist in lst)\n\n# Test the function\nassert find_max_length([[1], [1, 4], [5, 6, 7, 8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The count of unordered pairs where both elements are unequal.\n\n    Examples:\n        >>> count_Pairs([1, 2, 1], 3)\n        2\n        >>> count_Pairs([1, 2, 3, 4, 5], 5)\n        10\n        >>> count_Pairs([1, 1, 1, 1], 4)\n        0\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Args:\n        num (int): The non-negative integer.\n\n    Returns:\n        int: The sum of the digits of the integer.\n\n    Raises:\n        ValueError: If the input is negative.\n\n    Examples:\n        >>> sum_digits(345)\n        12\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(12345)\n        15\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be non-negative\")\n\n    total = 0\n    while num > 0:\n        total += num % 10\n        num //= 10\n\n    return total"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list with the same structure as the input list, but with each sublist sorted.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the unique numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the unique numbers.\n\n    Examples:\n        >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n        [1, 4, 5]\n    \"\"\"\n    return list(set(nums))"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n    \"\"\"\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n        arr (list): The main list.\n        sub_arr (list): The sublist to check.\n\n    Returns:\n        bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    return sub_arr in arr\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 2, 3, 4, 5], [2, 3]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Find the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit in the factorial needs to be found.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(15)\n    0\n    \"\"\"\n    last_digit = 1\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n    return last_digit\n\n# Test the function\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 0\nassert last_digit_factorial(15) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list to be interleaved.\n        list2 (list): The second list to be interleaved.\n        list3 (list): The third list to be interleaved.\n\n    Returns:\n        list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = tuple(set(tuple1) ^ set(tuple2))\n    return dissimilar_elements"}
{"task_id": "Mbpp/580", "solution": "def extract_even(t):\n    \"\"\"\n    Write a function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with uneven elements removed.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    return tuple(x for x in t if isinstance(x, int) and x % 2 == 0)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * base_edge * height\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> catalan_number(10)\n    16796\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(1)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    catalan = [1] * (n + 1)\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries, where each dictionary represents an item.\n        n (int): The number of most expensive items to find.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the input list is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    if not items:\n        raise ValueError(\"Input list is empty\")\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    sorted_items = sorted(items, key=lambda item: item['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5, 6, 52, 36, 12, 10]\n    \"\"\"\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(lst):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([5, 10, 15, 20])\n        15\n        >>> big_diff([-5, 0, 5, 10])\n        15\n    \"\"\"\n    return max(lst) - min(lst)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n    \"\"\"\n    squares = []\n    for num in range(start, end + 1):\n        if (num ** 0.5).is_integer():\n            squares.append(num)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle of the polar coordinate in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), (r, theta)"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n    \"\"\"\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms in the summation.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Examples:\n    >>> sum_of_product(3)\n    15\n    >>> sum_of_product(5)\n    105\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in range(1, i+1):\n            product *= (i+1-j) // j\n        sum += product\n    return sum\n\n# Test the function\nassert sum_of_product(3) == 15\nassert sum_of_product(5) == 105"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The modified IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    return '.'.join(str(int(octet)) for octet in ip.split('.'))"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list is empty or does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n        >>> diff_even_odd([1,3,5,7])\n        ValueError: List does not contain any even or odd numbers.\n        >>> diff_even_odd([])\n        ValueError: List is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    even_numbers = [num for num in lst if num % 2 == 0]\n    odd_numbers = [num for num in lst if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_numbers[0] - odd_numbers[0]"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Find the size in bytes of the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        int: The size in bytes of the tuple.\n\n    Examples:\n        >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n        80\n    \"\"\"\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted array.\n\n    Raises:\n        ValueError: If k is out of bounds.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of bounds\")\n\n    i, j = 0, 0\n    while k > 1:\n        if i < len(arr1) and (j >= len(arr2) or arr1[i] < arr2[j]):\n            i += 1\n        else:\n            j += 1\n        k -= 1\n\n    if i < len(arr1) and j < len(arr2):\n        return min(arr1[i], arr2[j])\n    elif i < len(arr1):\n        return arr1[i]\n    else:\n        return arr2[j]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n\n    Examples:\n        >>> armstrong_number(153)\n        True\n        >>> armstrong_number(123)\n        False\n    \"\"\"\n    # Convert the number to a string to get the number of digits\n    num_str = str(num)\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_digits = 0\n    for digit in num_str:\n        sum_digits += int(digit) ** num_digits\n\n    # Check if the sum of the digits raised to the power of the number of digits is equal to the original number\n    return sum_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to include in the calculation.\n\n    Returns:\n        tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Examples:\n        >>> sum_average(10)\n        (55, 5.5)\n    \"\"\"\n    sum_numbers = sum(range(1, n+1))\n    average = sum_numbers / n\n    return sum_numbers, average"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    \"\"\"\n    Check if a given number is even or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test the function\nassert is_even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string.\n\n    Raises:\n        ValueError: If the string is empty or does not contain any repeated characters.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"hello\")\n        'l'\n        >>> first_repeated_char(\"\")\n        ValueError: The string is empty or does not contain any repeated characters.\n    \"\"\"\n    if not string:\n        raise ValueError(\"The string is empty or does not contain any repeated characters.\")\n\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n\n    raise ValueError(\"The string is empty or does not contain any repeated characters.\")"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n\n    Examples:\n    >>> get_lucid(10)\n    [1, 2, 3, 5, 7]\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Checks if a given number is a lucid number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a lucid number, False otherwise.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_lucid(n - 2)\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The reversed string.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Args:\n        n (int): The integer to be checked.\n\n    Returns:\n        bool: True if the integer is prime, False otherwise.\n\n    Examples:\n        >>> prime_num(13)\n        True\n        >>> prime_num(14)\n        False\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The input string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not found in the string.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(f\"Pattern '{pattern}' not found in string '{string}'\")"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n\n    Parameters:\n    n (int): The value of n for which the Bell number needs to be calculated.\n\n    Returns:\n    int: The nth Bell number.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(5)\n    15\n    >>> bell_Number(10)\n    1105\n    \"\"\"\n    bell = [1]\n    for i in range(1, n):\n        bell.append(sum(bell))\n    return bell[n - 1]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and returns a new list with the same elements, but the k'th element removed.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: A new list with the k'th element removed.\n\n    Raises:\n        IndexError: If the k'th element does not exist in the list.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n\n        >>> remove_kth_element([1, 2, 3, 4, 5], 2)\n        [1, 2, 4, 5]\n\n        >>> remove_kth_element([1, 2, 3, 4, 5], 5)\n        Traceback (most recent call last):\n            ...\n        IndexError: list index out of range\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"list index out of range\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix.\n\n    Args:\n        matrix (list of lists): The input matrix.\n        n (int): The index of the column to find the maximum value in.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the column index is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n        8\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n        Traceback (most recent call last):\n            ...\n        IndexError: column index out of range\n    \"\"\"\n    try:\n        return max(row[n] for row in matrix)\n    except IndexError:\n        raise IndexError(\"column index out of range\")"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Find the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n    \"\"\"\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average value for each tuple in a tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    return [sum(t) / len(t) for t in tuples]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    return tuple(a % b for a, b in zip(t1, t2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        lst1 (list): The first list.\n        lst2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of lst1 and lst2.\n\n    Raises:\n        ValueError: If the length of lst1 and lst2 are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    return [a / b for a, b in zip(lst1, lst2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    num_str = ''.join(c for c in string if c.isdigit())\n    char_str = ''.join(c for c in string if not c.isdigit())\n    return char_str + num_str"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    # Sort the list in descending order\n    numbers.sort(reverse=True)\n\n    # Initialize the size of the largest subset\n    subset_size = 0\n\n    # Iterate through the sorted list\n    for i in range(len(numbers)):\n        # Check if the current number is divisible by the previous number\n        if i > 0 and numbers[i] % numbers[i-1] == 0:\n            subset_size += 1\n\n    return subset_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two lists.\n\n    Raises:\n        ValueError: If the lists are not of the same size.\n\n    Examples:\n        >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n        16.0\n    \"\"\"\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"Lists must be of the same size.\")\n\n    # Find the median of the two lists\n    median = (list1[n // 2] + list2[n // 2]) / 2\n\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The exponent.\n\n    Returns:\n        list: A new list with the n-th power of each number in the original list.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The converted uppercase string.\n\n    Examples:\n        >>> is_upper(\"person\")\n        'PERSON'\n    \"\"\"\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n\n    Args:\n        radius (float): The radius of the semicircle.\n\n    Returns:\n        float: The area of the largest triangle.\n\n    Raises:\n        ValueError: If the radius is negative.\n\n    Examples:\n        >>> triangle_area(1)\n        0.5\n        >>> triangle_area(2)\n        2.0\n        >>> triangle_area(-1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    # Calculate the area of the largest triangle\n    area = (radius ** 2) / 2\n\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n\n    Examples:\n        >>> replace_spaces(\"My Name is Dawood\")\n        'My%20Name%20is%20Dawood'\n    \"\"\"\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    \"\"\"\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        coordinate (tuple): The input coordinate tuple.\n\n    Returns:\n        list: A list of adjacent coordinates.\n\n    Examples:\n        >>> get_coordinates((3, 4))\n        [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n    \"\"\"\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1, 0, 2, 0, 3, 4])\n        [1, 2, 3, 4, 0, 0]\n    \"\"\"\n    return [x for x in lst if x != 0] + [0] * lst.count(0)"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The sum of xor of all pairs of numbers in the list.\n\n    Examples:\n        >>> pair_xor_Sum([5,9,7,6],4)\n        47\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += nums[i] ^ nums[j]\n    return sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def heapify(arr, n, i):\n        \"\"\"\n        Heapifies the given array.\n\n        Parameters:\n        arr (list): The array to be heapified.\n        n (int): The size of the array.\n        i (int): The index of the current node.\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(lst)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        lst[0], lst[i] = lst[i], lst[0]\n        heapify(lst, i, 0)\n\n    return lst"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The amount to be checked.\n        cost (float): The cost associated with the amount.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == cost"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is less than 0 or the temperature is less than -273.15.\n\n    Examples:\n        >>> wind_chill(120, 35)\n        40\n        >>> wind_chill(0, 10)\n        10\n        >>> wind_chill(30, -20)\n        -10\n    \"\"\"\n    if wind_velocity < 0:\n        raise ValueError(\"Wind velocity must be greater than or equal to 0.\")\n    if temperature < -273.15:\n        raise ValueError(\"Temperature must be greater than or equal to -273.15.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of names.\n\n    Returns:\n        int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Examples:\n        >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n    \"\"\"\n    return sum(len(name) for name in names if name[0].isupper())\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Examples:\n    >>> is_nonagonal(10)\n    325\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/643", "solution": "import re\ndef text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    pattern = r'\\Bz\\B'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position upto which the array should be reversed.\n\n    Returns:\n        list: The reversed array.\n\n    Examples:\n        >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n        [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_input, dict_input):\n    \"\"\"\n    Adds a dictionary to a tuple and returns the resulting tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        dict_input (dict): The input dictionary.\n\n    Returns:\n        tuple: The resulting tuple with the dictionary added.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tuple_input + (dict_input,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths.\n    Average is computed as total cost divided by the number of cells visited in the path.\n\n    Args:\n        matrix (list of lists): The input square matrix.\n\n    Returns:\n        float: The maximum average over all existing paths.\n\n    Examples:\n        >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n    \"\"\"\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i - 1] + matrix[0][i]\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    return dp[n - 1][n - 1] / (n * n)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    \"\"\"\n    Filters students based on height and weight.\n\n    Args:\n        student_data (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required for a student to be included.\n        min_weight (float): The minimum weight required for a student to be included.\n\n    Returns:\n        dict: A new dictionary containing only the students with height and weight above the minimum.\n\n    Examples:\n        >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    filtered_data = {name: (height, weight) for name, (height, weight) in student_data.items() if height >= min_height and weight >= min_weight}\n    return filtered_data"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of all digits of the base to the specified power.\n\n    Examples:\n        >>> power_base_sum(2, 100)\n        115\n        >>> power_base_sum(3, 4)\n        8\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Parameters:\n    t (tuple): A tuple of numbers.\n\n    Returns:\n    tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Examples:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(a, b):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        a (list): The first input list.\n        b (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n    \"\"\"\n    if len(a) != len(b):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x + y for x, y in zip(a, b)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    return [lst[i] for i in range(len(lst)) if i == 0 or lst[i] != lst[i-1]]"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone.\n\n    Parameters:\n    r (float): Radius of the cone.\n    h (float): Height of the cone.\n\n    Returns:\n    float: Lateral surface area of the cone.\n\n    \"\"\"\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, and dots replaced with colons.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the number.\n\n    Raises:\n        ValueError: If the array is empty or the number is not found.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([], 5)\n        ValueError: Array is empty\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        ValueError: Number not found\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Array is empty\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    raise ValueError(\"Number not found\")"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4])\n        50\n    \"\"\"\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number for which to toggle bits.\n\n    Returns:\n        int: The number with toggled bits.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n    \"\"\"\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Calculate the mask to toggle bits\n    mask = ~(1 << (num.bit_length() - 1))\n\n    # Toggle the bits using the mask\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): Sorted list of integers.\n        value (int): Value to find the left insertion point for.\n\n    Returns:\n        int: Index of the left insertion point.\n\n    Examples:\n        >>> left_insertion([1, 2, 4, 5], 6)\n        4\n    \"\"\"\n    left = 0\n    right = len(arr)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regular expressions.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Examples:\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    12\n    >>> find_Index(4)\n    100\n    \"\"\"\n    index = 1\n    triangular_number = 1\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The converted dictionary.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    a (float): Length of the base edge of the tetrahedron.\n\n    Returns:\n    float: Area of the tetrahedron.\n    \"\"\"\n    return math.sqrt(3) * a**2"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        n (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tuple_):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tuple_: The input tuple to check.\n\n    Returns:\n        True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tuple_)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number for the range.\n        endnum (int): The ending number for the range.\n\n    Returns:\n        list: A list of numbers within the range that are divisible by every digit they contain.\n\n    Examples:\n        >>> divisible_by_digits(1, 22)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    \"\"\"\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonIsAwesome\")\n        'Python Is Awesome'\n        >>> capital_words_spaces(\"PythonIsAwesomeProgrammingLanguage\")\n        'Python Is Awesome Programming Language'\n    \"\"\"\n    words = string.split()\n    modified_string = ' '.join(words)\n    return modified_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings representing numbers.\n\n    Returns:\n        list: A new list with the strings sorted numerically.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The modified list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    for i in range(len(arr) // 2, -1, -1):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        if left_child_index < len(arr) and arr[left_child_index] < arr[i]:\n            return False\n\n        if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Find the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The index of the Jacobsthal number to find.\n\n    Returns:\n    int: The nth Jacobsthal number.\n\n    Examples:\n    >>> jacobsthal_num(5)\n    11\n    >>> jacobsthal_num(10)\n    127\n    >>> jacobsthal_num(0)\n    0\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        tuple_list (list): A list of tuples, where each tuple contains a value and a corresponding key.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records from the input list.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    This function takes three lists as input and returns a list of common elements from the three lists.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n        l3 (list): The third list.\n\n    Returns:\n        list: A list of common elements from the three input lists.\n\n    Examples:\n        >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n        [1, 7]\n    \"\"\"\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list is empty or has only one element.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n\n        >>> second_smallest([1])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list must have at least two elements.\n\n        >>> second_smallest([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list must have at least two elements.\n    \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"The list must have at least two elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        int: The count of pairs of reverse strings.\n\n    Examples:\n        >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n        2\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Args:\n        lst (list): The input list containing lists.\n\n    Returns:\n        dict: A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Examples:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    result = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        result[sublist_tuple] = result.get(sublist_tuple, 0) + 1\n    return result"}
{"task_id": "Mbpp/759", "solution": "import re\ndef is_decimal(string):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    pattern = r'^\\d+\\.\\d{2}$'\n    return bool(re.match(pattern, string))"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n\n    Examples:\n        >>> unique_Element([1, 1, 1])\n        True\n        >>> unique_Element([1, 2, 3])\n        False\n        >>> unique_Element([])\n        False\n    \"\"\"\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check if the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 30 days, False otherwise.\n\n    Examples:\n        >>> check_monthnumber_number(6)\n        True\n        >>> check_monthnumber_number(2)\n        False\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements.\n\n    Raises:\n        ValueError: If the array is empty or has only one element.\n\n    Examples:\n        >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n        1\n        >>> find_min_diff((1, 5, 3, 19, 18, 25), 0)\n        Traceback (most recent call last):\n            ...\n        ValueError: The array must have at least two elements.\n        >>> find_min_diff((1,), 1)\n        Traceback (most recent call last):\n            ...\n        ValueError: The array must have at least two elements.\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"The array must have at least two elements.\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n\n    Examples:\n        >>> number_ctr('program2bedone')\n        1\n        >>> number_ctr('12345')\n        5\n        >>> number_ctr('abcdefg')\n        0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n\n    A polite number is a number that is not divisible by any of its digits.\n\n    Args:\n        n (int): The position of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Examples:\n        >>> is_polite(7)\n        11\n    \"\"\"\n    polite_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    return polite_numbers[n - 1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of pairs of consecutive items.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to 'sum'.\n\n    Args:\n        nums (list): A list of numbers.\n        target_sum (int): The target sum for the pairs.\n\n    Returns:\n        int: The count of pairs whose sum is equal to 'sum'.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 5, 7, -1], 6)\n        2\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target_sum:\n                count += 1\n    return count"}
{"task_id": "Mbpp/769", "solution": "def diff(lst1, lst2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    lst1 (list): The first list.\n    lst2 (list): The second list.\n\n    Returns:\n    list: The difference between the two lists.\n\n    Examples:\n    >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return list(set(lst1) - set(lst2))\n\n# Test the function\nassert diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the fourth power of the first n odd natural numbers.\n\n    Examples:\n        >>> odd_num_sum(2)\n        82\n        >>> odd_num_sum(3)\n        202\n    \"\"\"\n    return sum(i**4 for i in range(1, 2*n, 2))"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n    \"\"\"\n    words = string.split()\n    modified_string = ' '.join([word for word in words if len(word) != k])\n    return modified_string"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to find within the string.\n\n    Returns:\n        tuple: A tuple containing the substring, its occurrence count, and its position within the string.\n\n    Examples:\n        >>> occurance_substring('python programming, python language','python')\n        ('python', 2, 0)\n\n        >>> occurance_substring('python programming, python language','java')\n        None\n    \"\"\"\n    occurrence = string.count(substring)\n    if occurrence > 0:\n        position = string.find(substring)\n        return substring, occurrence, position\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index contains odd numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    return sum(set(lst))"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for item in lst:\n        if not current_sublist or item != current_sublist[-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(item)\n\n    if current_sublist:\n        result.append(current_sublist)\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds all combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n        >>> odd_length_sum([1, 2, 4, 5, 6])\n        27\n        >>> odd_length_sum([1, 2, 4, 5, 6, 7])\n        35\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                total_sum += sum(arr[i:j+1])\n\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd number of a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The product of the first even and odd number.\n\n    Raises:\n        ValueError: If the list is empty or does not contain any even or odd numbers.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([1, 3, 5, 7])\n        3\n        >>> mul_even_odd([1, 3, 5, 7, 9])\n        9\n        >>> mul_even_odd([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list is empty or does not contain any even or odd numbers.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The list is empty or does not contain any even or odd numbers.\")\n\n    even_numbers = [num for num in lst if num % 2 == 0]\n    odd_numbers = [num for num in lst if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"The list is empty or does not contain any even or odd numbers.\")\n\n    return even_numbers[0] * odd_numbers[0]"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n    \"\"\"\n    return tuple(int(x) for x in tuple_str.strip(\"()\").split(\",\"))"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): Sorted list of integers.\n        value (int): Value to find the right insertion point for.\n\n    Returns:\n        int: Index of the right insertion point.\n\n    Examples:\n        >>> right_insertion([1, 2, 4, 5], 6)\n        4\n        >>> right_insertion([1, 2, 4, 5], 3)\n        2\n        >>> right_insertion([1, 2, 4, 5], 1)\n        1\n    \"\"\"\n    left = 0\n    right = len(arr)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by three 'b's.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): A list of strings.\n        string (str): A string.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index contains even numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    return all(num % 2 == 0 for num in lst[::2])"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n    \"\"\"\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        x (int): The element to find the last position of.\n\n    Returns:\n        int: The last position of the element in the array.\n\n    Raises:\n        ValueError: If the element is not found in the array.\n\n    Examples:\n        >>> last([1, 2, 3], 1)\n        0\n        >>> last([1, 2, 3], 2)\n        1\n        >>> last([1, 2, 3], 3)\n        2\n        >>> last([1, 2, 3], 4)\n        Traceback (most recent call last):\n            ...\n        ValueError: Element not found in the array\n    \"\"\"\n    try:\n        return len(arr) - 1 - arr[::-1].index(x)\n    except ValueError:\n        raise ValueError(\"Element not found in the array\")"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n\n    Examples:\n        >>> text_starta_endb(\"aabbbb\")\n        True\n        >>> text_starta_endb(\"abbbb\")\n        False\n        >>> text_starta_endb(\"aabbbbb\")\n        True\n    \"\"\"\n    pattern = r\"^a.*b$\"\n    match = re.match(pattern, text)\n    return bool(match)"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Args:\n        dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n        int: The sum of all values in the dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b':200, 'c':300})\n        600\n    \"\"\"\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n        l (int): The lower bound of the range.\n        r (int): The upper bound of the range.\n\n    Returns:\n        int: The sum of all odd natural numbers within the range.\n\n    Examples:\n        >>> sum_in_range(2, 5)\n        8\n        >>> sum_in_range(1, 10)\n        25\n    \"\"\"\n    return sum(range(l, r + 1, 2))"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    \"\"\"\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate left.\n\n    Returns:\n        int: The rotated number.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n    \"\"\"\n    return (num << d) | (num >> (32 - d))"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n\n    Examples:\n        >>> remove_all_spaces('python  program')\n        'pythonprogram'\n    \"\"\"\n    return string.replace(' ', '')"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "import math\ndef is_perfect_square(num):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    return math.sqrt(num) % 1 == 0"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in a list is even.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list in the list of lists with the highest sum of elements.\n\n    Examples:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    return max(lst, key=sum)"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list.\n\n    Raises:\n        ValueError: If the list does not contain any odd numbers.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        ValueError: The list does not contain any odd numbers.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"The list does not contain any odd numbers.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple.\n        k: The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n\n    Examples:\n        >>> check_smaller((1, 2, 3), (2, 3, 4))\n        False\n        >>> check_smaller((1, 2, 3), (0, 1, 2))\n        True\n    \"\"\"\n    return all(tuple1[i] < tuple2[i] for i in range(len(tuple1)))"}
