{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        set: A set containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        {4, 5}\n    \"\"\"\n    return set(list1) & set(list2)\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    numbers (list): A list of numbers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of the n largest integers in descending order.\n    \"\"\"\n    return heapq.nlargest(n, numbers)\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the two numbers to get a number with set bits at the positions where the numbers differ\n    diff_bits = num1 ^ num2\n\n    # Count the number of set bits in the diff_bits\n    set_bits_count = bin(diff_bits).count('1')\n\n    # If the count is exactly 1, then the numbers differ at one bit position only\n    return set_bits_count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list containing the squares of the input numbers.\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Raises:\n    ValueError: If the input string is empty.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"xyz\")\n    3\n    \"\"\"\n\n    if not string:\n        raise ValueError(\"Input string cannot be empty\")\n\n    rotations = 1\n    while string[1:] + string[0] != string:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first occurrence of the character\n    first_index = string.find(char)\n    \n    # If the character is not found, return the original string\n    if first_index == -1:\n        return string\n    \n    # Find the last occurrence of the character\n    last_index = string.rfind(char)\n    \n    # Remove the first occurrence of the character\n    string = string[:first_index] + string[first_index+1:]\n    \n    # If the first and last occurrences are the same, return the modified string\n    if first_index == last_index:\n        return string\n    \n    # Remove the last occurrence of the character\n    string = string[:last_index] + string[last_index+1:]\n    \n    return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, slant_height):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    slant_height (float): The slant height of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative.\n\n    \"\"\"\n    if base < 0 or height < 0 or slant_height < 0:\n        raise ValueError(\"Input parameters cannot be negative.\")\n\n    base_area = 0.5 * base * slant_height\n    volume = base_area * height\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The string to be checked.\n\n    Returns:\n        bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, input_string))\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(5.5)\n    22.0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40\nassert square_perimeter(5.5) == 22.0"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified first string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    clean_string = ''\n    for char in string1:\n        if char not in string2:\n            clean_string += char\n    return clean_string\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 1]) == True\nassert test_duplicate([1, 1, 1, 1, 1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Convert the number to a string representation\n    num_str = str(num)\n\n    # Check if the number is divisible by 3\n    if int(num_str) % 3 != 0:\n        return False\n\n    # Check if the digits in the number are unique\n    digits = set(num_str)\n    if '0' in digits:\n        return False\n\n    # Check if the digits in the number form a sequence\n    digits = sorted(digits)\n    for i in range(1, len(digits)):\n        if int(digits[i]) - int(digits[i-1]) != 1:\n            return False\n\n    return True\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse = int(str(num)[::-1])  # Reverse the number\n    twice_reverse = reverse * 2  # Multiply the reversed number by 2\n    return twice_reverse == num + 1  # Check if the result is equal to the original number plus 1\n\n# Test cases\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using those digits.\n\n    Parameters:\n    digits (list): A list of integers representing the digits.\n\n    Returns:\n    int: The largest number that can be formed using the given digits.\n    \"\"\"\n    # Sort the list of digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted list of digits into a string and then into an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test the function\nassert opposite_Signs(1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input is an empty list.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-5, 0, 5])\n        -5\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Empty list.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Empty list.\")\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input is empty or contains tuples with less than 2 elements.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    if not tuple_list:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_diff = float('-inf')\n    for pair in tuple_list:\n        if len(pair) < 2:\n            raise ValueError(\"Tuples must contain at least 2 elements\")\n        diff = pair[1] - pair[0]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n    lst (list): A list of tuples, where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list: The sorted list of tuples.\n\n    Examples:\n    >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n    [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n# Testing the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1, -2, 3, -4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The number of ways to partition a set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    \"\"\"\n\n    bell = [1]  # Initialize the list with the first Bell number\n\n    for i in range(1, n):\n        bell_i = 0\n        for j in range(i):\n            bell_i += bell[j] * bell_number(i - j - 1)\n        bell.append(bell_i)\n\n    return bell[n - 1]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n# Test the function\nassert is_monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sub):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list.\n    sub (list): The sublist to check.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sub) == 0:\n        return True\n    if len(lst) < len(sub):\n        return False\n\n    for i in range(len(lst) - len(sub) + 1):\n        if lst[i] == sub[0]:\n            if lst[i:i + len(sub)] == sub:\n                return True\n\n    return False\n\n# Test cases\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\nassert is_sublist([1, 2, 3, 4, 5], [2, 4]) == True\nassert is_sublist([1, 2, 3, 4, 5], [5, 6]) == False\nassert is_sublist([1, 2, 3, 4, 5], []) == True\nassert is_sublist([], [1, 2, 3]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n    tuples (list): A list of tuples.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    arr (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n\n    def shrink_factor(gap):\n        \"\"\"\n        Calculates the new gap size for the comb sort algorithm.\n\n        Parameters:\n        gap (int): The current gap size.\n\n        Returns:\n        int: The new gap size.\n        \"\"\"\n        new_gap = int(gap / 1.3)\n        if new_gap < 1:\n            return 1\n        return new_gap\n\n    n = len(arr)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = shrink_factor(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if arr[i] > arr[i + gap]:\n                arr[i], arr[i + gap] = arr[i + gap], arr[i]\n                swapped = True\n\n    return arr"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i ** 2 - j ** 2 == num:\n                return True\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(25) == True\nassert dif_Square(30) == False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns):\n    \"\"\"\n    Check whether the given patterns follow the sequence.\n\n    Args:\n    patterns (list): A list of patterns to check.\n\n    Returns:\n    bool: True if the patterns follow the sequence, False otherwise.\n    \"\"\"\n    sequence = patterns[0]\n    for pattern in patterns[1:]:\n        if pattern != sequence:\n            return False\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\", \"green\", \"green\"]) == True\nassert is_samepatterns([\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"blue\"]) == False\nassert is_samepatterns([\"a\", \"b\", \"a\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string representation\n    num_str = str(number)\n\n    # Calculate the sum of the digits at odd and even positions\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n\n    # Check if the difference between the sums is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check the length of.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    225\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (n + 1) * (n + 2) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(10) == 225"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return (4/3) * math.pi * (radius ** 3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Function to find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position of the number in the sequence to find.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_conway(10)\n    6\n    >>> newman_conway(1)\n    1\n    >>> newman_conway(2)\n    1\n    >>> newman_conway(3)\n    1\n    >>> newman_conway(4)\n    2\n    >>> newman_conway(5)\n    2\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first three terms\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[sequence[i - 1]]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * radius ** 2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Function to find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Test the function\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge dict1 and dict2\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Merge dict3 into merged_dict\n    merged_dict.update(dict3)\n    \n    return merged_dict\n\n# Test the function\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\nexpected_result = {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n\nassert merge_dictionaries_three(dict1, dict2, dict3) == expected_result"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(0)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10\nassert closest_num(10) == 9\nassert closest_num(0) == 0"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n        >>> len_log([])\n        ValueError: List cannot be empty.\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(words) == 0:\n        raise ValueError(\"List cannot be empty.\")\n\n    max_len = len(words[0])\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        strings (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found, False otherwise.\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n\n    for i in range(2, len(num_str)):\n        if num_str[i] == num_str[i-1] or num_str[i] == num_str[i-2]:\n            return False\n\n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1212122) == False\nassert is_undulating(123456789) == True\nassert is_undulating(1234567890) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples_list):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input is an empty list.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_tuple = min(tuples_list, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n\n    Parameters:\n    list_of_lists (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is an empty list.\n\n    Examples:\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    >>> Find_Min_Length([[1,2,3],[4,5],[6,7,8,9]])\n    2\n    >>> Find_Min_Length([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not list_of_lists:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = min(len(lst) for lst in list_of_lists)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n\n    Parameters:\n    n (int): The integer for which the number of divisors needs to be calculated.\n\n    Returns:\n    int: The number of divisors of the input integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n    \"\"\"\n    if not numbers:\n        return 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary\n\n# Test cases\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    # If the number itself is a palindrome, increment it by 1\n    if is_palindrome(n):\n        return n + 1\n\n    # Start checking from the next number\n    i = n + 1\n    while True:\n        if is_palindrome(i):\n            return i\n        i += 1\n\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If the input array is empty or if k is out of range.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([], 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array is empty.\n    >>> kth_element([12, 3, 5, 7, 19], 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty.\")\n\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range.\")\n\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    components = snake_str.split('_')\n    camel_str = components[0] + ''.join(x.title() for x in components[1:])\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of the integers 1 to n with exactly m cycles.\n\n    Parameters:\n    n (int): The upper limit of the range of integers.\n    m (int): The number of cycles.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    10\n    >>> eulerian_num(5, 3)\n    30\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n\n    result = 1\n    for i in range(1, m + 1):\n        result *= (n - i + 1)\n\n    return result"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in ascending order.\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n\n    Args:\n        lst (list): A list of boolean values.\n\n    Returns:\n        int: The count of True values in the list.\n    \"\"\"\n    return lst.count(True)\n\n# Test the function\nassert count([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)\n\n# Testing the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The number of numbers with an odd value after the given number of rotations.\n    \"\"\"\n\n    def rotate_string(string, num):\n        \"\"\"\n        Helper function to rotate a string by a given number of positions.\n\n        Parameters:\n        string (str): The string to be rotated.\n        num (int): The number of positions to rotate the string.\n\n        Returns:\n        str: The rotated string.\n        \"\"\"\n        return string[-num:] + string[:-num]\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_string(binary_string, 1)\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n    nested_lists (list): A list of lists containing elements.\n\n    Returns:\n    list: A list of common elements found in all nested lists.\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n# Test the function\nnested_lists = [[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]\nassert set(common_in_nested_lists(nested_lists)) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123a\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Parameters:\n    t (tuple): The input tuple of positive integers.\n\n    Returns:\n    int: The single integer representation of the input tuple.\n\n    Example:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    \"\"\"\n    return int(''.join(map(str, t)))\n\n# Test the function\nassert tuple_to_int((1, 2, 3)) == 123"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    list: A list of strings split on the space character.\n    \"\"\"\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (mid - left) % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if (right - mid) % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n# Test cases\nassert search([1, 1, 2, 2, 3]) == 3"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = 0\n    for tup in lst:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_numbers_sum = 0\n    for num in range(1, n+1):\n        sum1 = sum_of_divisors(num)\n        sum2 = sum_of_divisors(sum1)\n        if sum2 == num and sum1 != sum2:\n            amicable_numbers_sum += num\n    return amicable_numbers_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a complex number.\n\n    \"\"\"\n    if not isinstance(z, complex):\n        raise ValueError(\"Input must be a complex number.\")\n\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_difference = 0\n    current_difference = 0\n    for bit in binary_string:\n        if bit == '0':\n            current_difference -= 1\n        else:\n            current_difference += 1\n        max_difference = max(max_difference, current_difference)\n    return max_difference\n\n# Test the function\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Calculate the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n\n    def get_divisors(n):\n        \"\"\"\n        Get the divisors of a given number.\n\n        Parameters:\n        n (int): The number.\n\n        Returns:\n        list: A list of divisors of n.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n\n    common_divisors = [divisor for divisor in divisors_a if divisor in divisors_b]\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered long.\n        sentence (str): The input sentence containing words.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n    \"\"\"\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Calculate the sum of the first row\n\n    # Check if all rows have the same sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for i in range(n):\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if col_sum != magic_sum:\n            return False\n\n    # Check if the sum of the main diagonal is equal to the magic sum\n    diag_sum = sum(matrix[i][i] for i in range(n))\n    if diag_sum != magic_sum:\n        return False\n\n    # Check if the sum of the secondary diagonal is equal to the magic sum\n    sec_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if sec_diag_sum != magic_sum:\n        return False\n\n    return True\n\n# Test the function\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The item with maximum frequency.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_freq = 0\n    max_item = None\n    freq_dict = {}\n\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    left = 0\n    right = len(s) - 1\n\n    while left < right:\n        if s[left].lower() in vowels and s[right].lower() in vowels:\n            s[left], s[right] = s[right], s[left]\n            left += 1\n            right -= 1\n        elif s[left].lower() in vowels:\n            right -= 1\n        elif s[right].lower() in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n\n    return ''.join(s)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello\") == \"Holle\"\nassert reverse_vowels(\"Programming\") == \"Progamming\"\nassert reverse_vowels(\"Algorithms\") == \"Algoirthms\"\nassert reverse_vowels(\"Data Structures\") == \"Data Strucutres\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(t):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    str: The converted string.\n    \"\"\"\n    return ''.join(t)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers.\n    \"\"\"\n    sum_neg = 0\n    for num in numbers:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (2 * n - 1)\n\n# Testing the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(num):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if num < 1:\n        return False\n\n    while num > 1:\n        if num % 2 != 0:\n            return False\n        num = num // 2\n\n    return True\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    set: A set containing all the numbers from the input list.\n\n    Example:\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_list = [item for sublist in lst for item in sublist]\n    return set(flattened_list)\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n\n    def flip(arr, k):\n        \"\"\"\n        Reverses the order of the first k elements in the list.\n\n        Parameters:\n        arr (list): The list to be flipped.\n        k (int): The number of elements to be reversed.\n\n        Returns:\n        None\n        \"\"\"\n        arr[:k] = reversed(arr[:k])\n\n    def find_max_index(arr, n):\n        \"\"\"\n        Finds the index of the maximum element in the sublist from index 0 to n.\n\n        Parameters:\n        arr (list): The list to search for the maximum element.\n        n (int): The upper limit of the sublist.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_val = arr[0]\n        max_index = 0\n        for i in range(n):\n            if arr[i] > max_val:\n                max_val = arr[i]\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max_index(lst, i + 1)\n        if max_index != i:\n            flip(lst, max_index + 1)\n            flip(lst, i + 1)\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of numbers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input array must have at least two elements.\")\n\n    min_val = arr[0]\n    max_diff = arr[1] - arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] - min_val > max_diff:\n            max_diff = arr[i] - min_val\n        if arr[i] < min_val:\n            min_val = arr[i]\n\n    return max_diff\n\n# Test cases\nassert max_Abs_Diff((2, 1, 5, 3)) == 4\nassert max_Abs_Diff((1, 2, 3, 4, 5)) == 4\nassert max_Abs_Diff((5, 4, 3, 2, 1)) == 4\nassert max_Abs_Diff((1, 1, 1, 1)) == 0\nassert max_Abs_Diff((1, 2)) == 1"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    for x in range(n+1):\n        for y in range(n+1):\n            if a*x + b*y == n:\n                return x, y\n    return None\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst (list): The original list.\n        elements_to_remove (list): The list of elements to be removed.\n\n    Returns:\n        list: The modified list with elements removed.\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(97 + i):  # 97 is the ASCII value of 'a'\n            count += 1\n    return count\n\n# Test the function\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    This function takes a number 'n' as input and returns the smallest power of 2 greater than or equal to 'n'.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to 'n'.\n    \"\"\"\n\n    # Check if 'n' is already a power of 2\n    if n and not (n & (n - 1)):\n        return n\n\n    # Find the next power of 2\n    power = 1\n    while power < n:\n        power *= 2\n\n    return power\n\n# Test the function\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of num in lst.\n    \"\"\"\n    return lst.count(num)\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculate the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The list of numbers.\n        start (int): The starting index of the range (inclusive).\n        end (int): The ending index of the range (inclusive).\n\n    Returns:\n        int: The sum of numbers in the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"Start or end index is out of range\")\n\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 5 * side_length\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_types = set(type(item) for item in t)\n    return len(data_types) <= 1\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, \"6\", 7, 3, 5, 6)) == False\nassert check_type((\"apple\", \"banana\", \"cherry\")) == True\nassert check_type((\"apple\", \"banana\", 123)) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number for which set bits need to be counted.\n\n    Returns:\n    int: The count of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Remove characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return string[::2]\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a given string with a specified character.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    return string.replace(\" \", character)\n\n# Test the function\nassert replace_blank(\"hello people\", '@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Example:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    return 2 * base_area + lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> volume_cube(3)\n    27.0\n    >>> volume_cube(5.5)\n    140.625\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27\nassert volume_cube(5.5) == 140.625"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with all even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND to set even bits\n    return num | mask\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    occurences_dict = {}\n    for tup in tuples_list:\n        if tup in occurences_dict:\n            occurences_dict[tup] += 1\n        else:\n            occurences_dict[tup] = 1\n    return occurences_dict\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n    \"\"\"\n    length = len(string)\n    count = length * (length + 1) // 2\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences for each value of n\n    sequences = [1] * (n + 1)\n\n    # Iterate through each value of n\n    for i in range(2, n + 1):\n        # Calculate the number of sequences for the current value of n\n        for j in range(1, i):\n            sequences[i] += sequences[j]\n\n        # Adjust the number of sequences based on the value of m\n        sequences[i] = min(sequences[i], m // 2)\n\n    # Return the total number of sequences for length n\n    return sequences[n]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list with the last element replaced by the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The next perfect square greater than the input number.\n\n    Raises:\n        ValueError: If the input number is negative.\n\n    Examples:\n        >>> next_Perfect_Square(35)\n        36\n        >>> next_Perfect_Square(121)\n        144\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Find the square root of the number\n    sqrt_num = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt_num ** 2 == num:\n        # If the square root is a perfect square, increment it to find the next perfect square\n        return (sqrt_num + 1) ** 2\n    else:\n        # If the square root is not a perfect square, find the next integer greater than the square root\n        next_sqrt = sqrt_num + 1\n        # Return the square of the next integer\n        return next_sqrt ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(121) == 144"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Calculate the maximum sum of increasing subsequence from the left side of the peak\n    max_sum_left = 0\n    current_sum = 0\n    for i in range(peak):\n        if arr[i] <= arr[i + 1]:\n            current_sum += arr[i]\n        else:\n            max_sum_left = max(max_sum_left, current_sum)\n            current_sum = 0\n    max_sum_left = max(max_sum_left, current_sum)\n\n    # Calculate the maximum sum of increasing subsequence from the right side of the peak\n    max_sum_right = 0\n    current_sum = 0\n    for i in range(n - 1, peak, -1):\n        if arr[i] <= arr[i - 1]:\n            current_sum += arr[i]\n        else:\n            max_sum_right = max(max_sum_right, current_sum)\n            current_sum = 0\n    max_sum_right = max(max_sum_right, current_sum)\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_sum_bitonic = max_sum_left + max_sum_right + arr[peak]\n\n    return max_sum_bitonic\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # Every individual character is a palindrome of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Traverse the string diagonally from bottom-left to top-right\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_data, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Parameters:\n    tuple_data (tuple): The input tuple.\n    element: The element to count occurrences of.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tuple_data.count(element)\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n    \"\"\"\n    magnitude = abs(num)\n    angle = cmath.phase(num)\n    return magnitude, angle\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of a list and return a list with a tuple for each combination.\n\n    Args:\n    lst (list): The input list.\n    n (int): The length of the combinations.\n\n    Returns:\n    list: A list with tuples representing all combinations of length n.\n    \"\"\"\n    combinations = list(itertools.product(lst, repeat=n))\n    return combinations\n\n# Test cases\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than n.\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        This helper function checks if a number is prime or not.\n\n        Parameters:\n        num (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n    return count\n\n# Test the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    tuple: A tuple containing the second number followed by the first number.\n    \"\"\"\n    return b, a\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Check if the lengths of the tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    # Initialize an empty list to store the maximized tuples\n    maximized_tuples = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(tuple1)):\n        # Get the elements from each tuple\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n\n        # Check if both elements are tuples\n        if not isinstance(element1, tuple) or not isinstance(element2, tuple):\n            raise ValueError(\"Elements must be tuples\")\n\n        # Check if both tuples have the same length\n        if len(element1) != 2 or len(element2) != 2:\n            raise ValueError(\"Tuples must have two elements\")\n\n        # Maximize the elements of each tuple\n        maximized_tuple = (max(element1[0], element2[0]), max(element1[1], element2[1]))\n\n        # Append the maximized tuple to the list\n        maximized_tuples.append(maximized_tuple)\n\n    return tuple(maximized_tuples)\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across two tuples.\n\n    Args:\n    tuple1 (tuple): First input tuple.\n    tuple2 (tuple): Second input tuple.\n\n    Returns:\n    tuple: Result of division operation element-wise across the given tuples.\n\n    Raises:\n    ValueError: If the length of the input tuples are not equal.\n    ZeroDivisionError: If any element in the second tuple is zero.\n\n    Examples:\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((10, 4, 6, 9), (2, 0, 3, 3))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    >>> division_elements((10, 4, 6, 9), (2, 2, 3))\n    Traceback (most recent call last):\n        ...\n    ValueError: Input tuples must have equal length\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have equal length\")\n\n    result = tuple(tuple1[i] / tuple2[i] for i in range(len(tuple1)))\n\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n    lst (list): The input list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two parts of the split list.\n\n    Raises:\n    ValueError: If L is greater than the length of the input list.\n\n    Examples:\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]\n\n# Testing the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the human_age is less than zero.\n\n    \"\"\"\n    if human_age < 0:\n        raise ValueError(\"Human age cannot be negative\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test the function\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    0\n    >>> lateralsurface_cube(-3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n\n    return sum_of_squares\n\n# Test the function\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a number that can be represented as a sum of n unique positive integers.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    star_num = 0\n    for i in range(1, n+1):\n        star_num += i\n\n    return star_num\n\n# Test the function\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): A single character.\n\n    Returns:\n    int: The ASCII value of the character.\n    \"\"\"\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculate the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(lst[::2])\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculate the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_powers += i**5\n    return sum_of_powers\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list and returns a new list.\n\n    Args:\n    tuples_list (list): A list of tuples.\n\n    Returns:\n    list: A new list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tuple_item in tuples_list:\n        rear_elements.append(tuple_item[-1])\n    return rear_elements\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    subtracted_elements = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return subtracted_elements\n\n# Test the function\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculate the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer\")\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    coefficients = [1]\n    for i in range(1, n + 1):\n        new_coefficients = [1]\n        for j in range(1, i):\n            new_coefficients.append(coefficients[j - 1] + coefficients[j])\n        new_coefficients.append(1)\n        coefficients = new_coefficients\n\n    # Calculate the sum of even index binomial coefficients\n    sum_even_coefficients = sum(coefficients[::2])\n\n    return sum_even_coefficients"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value threshold.\n\n    Returns:\n        dict: The filtered dictionary.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}\n\n# Test the function\ninput_dict = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}\nthreshold = 170\nexpected_output = {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter(input_dict, threshold) == expected_output"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result as a new list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise difference between list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n\n        >>> sub_list([10, 20, 30], [5, 10, 15])\n        [5, 10, 15]\n\n        >>> sub_list([5, 10, 15], [10, 20, 30])\n        [-5, -10, -15]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]\n\n# Testing the function\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        digit_count = num_str.count(digit)\n        if digit_count > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(123456) == False\nassert validate(111111) == True\nassert validate(987654) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to be checked.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to the element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the original array.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array.\n\n    \"\"\"\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the repeated array\n    repeated_sum = max_sum * (k - 1) + original_sum\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_repeated_sum = max_sub_array_sum(arr * k)\n\n    # Return the maximum sum of a contiguous subarray in the modified array\n    return max_repeated_sum\n\n\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n\n    return sum_of_squares\n\n# Test the function\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(list_of_lists):\n    \"\"\"\n    Find the list with maximum length in a list of lists.\n\n    Args:\n        list_of_lists (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum length list and the maximum length list itself.\n\n    Raises:\n        ValueError: If the input is an empty list.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    if not list_of_lists:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_length = len(list_of_lists[0])\n    max_list = list_of_lists[0]\n\n    for lst in list_of_lists:\n        if len(lst) > max_length:\n            max_length = len(lst)\n            max_list = lst\n\n    return max_length, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the first number divided by the second number, rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division, rounded down to the nearest integer.\n    \"\"\"\n    quotient = dividend // divisor\n    return quotient\n\n# Test cases\nassert find(10, 3) == 3"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle.\n\n    Parameters:\n    side1 (float): Length of the first side.\n    side2 (float): Length of the second side.\n\n    Returns:\n    float: Length of the third side.\n\n    Raises:\n    ValueError: If either side1 or side2 is not a positive number.\n\n    \"\"\"\n    if side1 <= 0 or side2 <= 0:\n        raise ValueError(\"Sides must be positive numbers.\")\n\n    return math.sqrt(side1**2 + side2**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n    \"\"\"\n\n    def merge_and_count(left, right):\n        \"\"\"\n        This helper function merges two sorted arrays and counts the inversions.\n\n        Parameters:\n        left (list): The left sorted array.\n        right (list): The right sorted array.\n\n        Returns:\n        list: The merged sorted array.\n        int: The number of inversions.\n        \"\"\"\n        merged = []\n        inversions = 0\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inversions += len(left) - i\n\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n\n        return merged, inversions\n\n    def merge_sort_and_count(arr):\n        \"\"\"\n        This helper function sorts and counts the inversions in an array using merge sort.\n\n        Parameters:\n        arr (list): The input array.\n\n        Returns:\n        list: The sorted array.\n        int: The number of inversions.\n        \"\"\"\n        if len(arr) <= 1:\n            return arr, 0\n\n        mid = len(arr) // 2\n        left, inv_left = merge_sort_and_count(arr[:mid])\n        right, inv_right = merge_sort_and_count(arr[mid:])\n        merged, inv_merge = merge_and_count(left, right)\n\n        return merged, inv_left + inv_right + inv_merge\n\n    _, inversions = merge_sort_and_count(arr)\n    return inversions\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(scores):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    scores (list): A list of tuples representing student names and their scores.\n\n    Returns:\n    tuple: A tuple containing the name of the student with the maximum aggregate and their maximum aggregate score.\n\n    Raises:\n    ValueError: If the input is empty or if any of the tuples in the input list do not contain exactly two elements.\n\n    \"\"\"\n\n    if not scores:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_aggregate_score = 0\n    max_aggregate_student = None\n\n    for student, score in scores:\n        if not isinstance(student, str) or not isinstance(score, (int, float)):\n            raise ValueError(\"Invalid input format. Tuples should contain a string for the student name and a numeric value for the score.\")\n\n        if score > max_aggregate_score:\n            max_aggregate_score = score\n            max_aggregate_student = student\n\n    return (max_aggregate_student, max_aggregate_score)\n\n\n# Test the function\ndef test_max_aggregate():\n    \"\"\"\n    Test the max_aggregate function.\n    \"\"\"\n\n    # Test case 1\n    input_scores = [('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]\n    expected_output = ('Juan Whelan', 212)\n    assert max_aggregate(input_scores) == expected_output\n\n    # Test case 2\n    input_scores = [('Alice', 95), ('Bob', 82), ('Charlie', 99), ('David', 75), ('Eve', 92)]\n    expected_output = ('Charlie', 99)\n    assert max_aggregate(input_scores) == expected_output\n\n    # Test case 3\n    input_scores = [('Frank', 65), ('Grace', 78), ('Henry', 59), ('Ivy', 87), ('Jack', 62)]\n    expected_output = ('Ivy', 87)\n    assert max_aggregate(input_scores) == expected_output\n\n    # Test case 4\n    input_scores = [('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]\n    expected_output = ('Juan Whelan', 212)\n    assert max_aggregate(input_scores) == expected_output\n\n    # Test case 5\n    input_scores = []\n    with pytest.raises(ValueError):\n        max_aggregate(input_scores)\n\n    # Test case 6\n    input_scores = [('Juan Whelan', "}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits)\n\n    Returns:\n    float: The count of binary sequences satisfying the condition\n\n    \"\"\"\n\n    # Base case: If n is 0, there is only one possible sequence (empty sequence)\n    if n == 0:\n        return 1\n\n    # Initialize the count of binary sequences\n    count = 0\n\n    # Recursive case:\n    # Generate all possible binary sequences of length 2n\n    for seq in generate_binary_seq(n):\n        # Check if the sum of first n bits is equal to the sum of last n bits\n        if sum(seq[:n]) == sum(seq[n:]):\n            count += 1\n\n    return count\n\ndef generate_binary_seq(n):\n    \"\"\"\n    Helper function to generate all possible binary sequences of length n.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits)\n\n    Yields:\n    list: A binary sequence of length n\n\n    \"\"\"\n\n    # Base case: If n is 0, yield an empty sequence\n    if n == 0:\n        yield []\n\n    # Recursive case:\n    # Generate all possible binary sequences of length n-1\n    for seq in generate_binary_seq(n-1):\n        # Append 0 and 1 to each sequence of length n-1 to generate all possible sequences of length n\n        yield seq + [0]\n        yield seq + [1]\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    This function finds the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    Raises:\n    TypeError: If the input is not a dictionary.\n\n    Examples:\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {}}})\n    3\n    >>> dict_depth({'a':1})\n    1\n    >>> dict_depth({})\n    1\n    \"\"\"\n\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    depth = 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depth = max(depth, 1 + dict_depth(value))\n\n    return depth"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w.startswith('p'):\n                return w\n\n# Test the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for j in range(i, n):\n        if arr[j] > arr[i-1]:\n            current_sum += arr[j]\n            max_sum = max(max_sum, current_sum)\n        else:\n            current_sum = 0\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    list1 (list): The first list of factors.\n    list2 (list): The second list of factors.\n    num (int): The number of largest products to find.\n\n    Returns:\n    list: A list of the specified number of largest products.\n\n    Raises:\n    ValueError: If the number of products requested is greater than the total number of factors in both lists.\n\n    Examples:\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    \"\"\"\n\n    if num > len(list1) * len(list2):\n        raise ValueError(\"Number of products requested is greater than the total number of factors in both lists.\")\n\n    products = []\n    for factor1 in list1:\n        for factor2 in list2:\n            products.append(factor1 * factor2)\n\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two input numbers.\n    \"\"\"\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        tuple: A tuple of characters representing the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer as input and returns the number with the leftmost unset bit set to 1.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    int: The number with the leftmost unset bit set to 1.\n    \"\"\"\n    mask = 1\n    while num & mask:\n        mask = mask << 1\n    return num | mask\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    base_area = math.pi * radius**2\n    volume = (base_area * height) / 3\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test the function\nassert highest_power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers in which each number is the sum of the two previous numbers.\n    The first two Lucas numbers are 2 and 1.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_lucas(1)\n    2\n    >>> find_lucas(2)\n    1\n    >>> find_lucas(9)\n    76\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas_nums = [2, 1]\n        for i in range(2, n):\n            lucas_nums.append(lucas_nums[i-1] + lucas_nums[i-2])\n        return lucas_nums[-1]\n\n# Testing the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to each element.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test the function\nkeys = [\"S001\", \"S002\", \"S003\", \"S004\"]\nvalues1 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nvalues2 = [85, 98, 89, 92]\nexpected_output = [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary(keys, values1, values2) == expected_output"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))\n\n# Test the function\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns their median.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n    \"\"\"\n    numbers = [a, b, c]\n    numbers.sort()\n    if len(numbers) % 2 == 0:\n        median = (numbers[len(numbers)//2 - 1] + numbers[len(numbers)//2]) / 2\n    else:\n        median = numbers[len(numbers)//2]\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of the sums of digits for each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    sums = []\n    for num in numbers:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sums.append(digit_sum)\n    return sums\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for existence in the tuple.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check parity for.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test the function\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The minimum product from the pairs of tuples.\n\n    Raises:\n    ValueError: If the input is not a list or if any element in the list is not a tuple.\n\n    Examples:\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    >>> min_product_tuple([(3, 4), (5, 6), (1, 2)])\n    2\n    >>> min_product_tuple([(1, 2), (3, 4), (5, 6)])\n    6\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n\n    for element in lst:\n        if not isinstance(element, tuple):\n            raise ValueError(\"All elements in the list must be tuples.\")\n\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(lst) == 0:\n        raise ValueError(\"List cannot be empty.\")\n\n    min_val = None\n    for item in lst:\n        if min_val is None or item < min_val:\n            min_val = item\n\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(nums):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([2, 4, 6])\n        [2, 4, 6]\n    \"\"\"\n    return [num for num in nums if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [t[n] for t in lst]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (sequence): The first sequence.\n        seq2 (sequence): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test the function\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n    ValueError: If the input list has less than 2 elements.\n\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must have at least 2 elements.\")\n\n    max_product = float('-inf')\n    result = ()\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n\n    return result\n\n# Test the function\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_element = []\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element\n\n# Test the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i**3 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple by the delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to use for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(map(str, t))\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of the cubes of the first n natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(t):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n    t (tuple): The input tuple containing strings.\n\n    Returns:\n    list: A list of rear index elements extracted from the strings in the tuple.\n    \"\"\"\n    rear_elements = [s[-1] for s in t]\n    return rear_elements\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count within the sublists.\n\n    Returns:\n        int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters odd numbers from a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in yyyy-mm-dd format.\")\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array by using shell sort.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    Examples:\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    \"\"\"\n\n    # Start with a large gap size\n    gap = len(arr) // 2\n\n    # Do a step of insertion sort for the current gap size\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n\n            # Move elements that are greater than temp to the right by gap positions\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = temp\n\n        # Reduce the gap size for the next iteration\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    t1 (tuple): First input tuple.\n    t2 (tuple): Second input tuple.\n\n    Returns:\n    tuple: Elementwise and tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a & b for a, b in zip(t1, t2))\n    return result\n\n# Test the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its standard form coefficients a, b, and c.\n\n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola\n\n    Raises:\n    ValueError: If the parabola is not defined by the standard form coefficients\n\n    \"\"\"\n\n    if a == 0:\n        raise ValueError(\"The parabola is not defined by the standard form coefficients\")\n\n    # Calculate the directrix using the formula y = ax^2 + bx + c\n    directrix = -b / (2 * a)\n\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of side a of the trapezium.\n    b (float): Length of side b of the trapezium.\n    c (float): Length of side c of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If the given lengths cannot form a trapezium.\n\n    \"\"\"\n\n    # Check if the given lengths can form a trapezium\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"The given lengths cannot form a trapezium.\")\n\n    # Calculate the median length using the trapezium formula\n    median = (a + b + c) / 3\n\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array.\n    num (int or float): The number to compare against the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([10, 20, 30, 40, 50], 35) == True\nassert check_greater([100, 200, 300, 400, 500], 450) == False\nassert check_greater([1000, 2000, 3000, 4000, 5000], 2500) == False\nassert check_greater([10000, 20000, 30000, 40000, 50000], 45000) == True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n    \"\"\"\n    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Function to join a list of multiple integers into a single integer.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: A single integer formed by joining the input list of integers.\n\n    Example:\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))\n\n# Testing the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the start and end positions of the adverb, and the adverb itself.\n    If no adverb is found, returns None.\n\n    \"\"\"\n    adverbs = ['clearly', 'easily', 'often', 'quickly', 'slowly', 'today', 'always', 'never', 'here', 'there']\n    words = sentence.split()\n    for i in range(len(words)):\n        if words[i].lower() in adverbs:\n            return (i, i+1, words[i])\n    return None\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The length of each side of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive integer.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    \"\"\"\n\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Size must be a positive integer\")\n\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n        if isinstance(element1, tuple) and isinstance(element2, tuple):\n            multiplied_elements = tuple(x * y for x, y in zip(element1, element2))\n            result.append(multiplied_elements)\n        else:\n            result.append((element1 * element2,))\n    return tuple(result)\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_elements):\n    count = 0\n    for element in list_elements:\n        count += tuple_data.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with cubes of individual elements from the input list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    perrin_numbers = [3, 0, 2]  # Initialize the Perrin numbers list\n\n    if n <= 3:\n        return sum(perrin_numbers[:n])\n\n    while len(perrin_numbers) < n:\n        next_number = perrin_numbers[-3] + perrin_numbers[-2]\n        perrin_numbers.append(next_number)\n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n\n    Returns:\n        list: A list of strings with the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)\n        ['practice', 'solution']\n    \"\"\"\n    return [string for string in string_list if len(string) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The input string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    Calculate the sum of even factors of a given number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n\n# Test the function\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n    return month_number in month_days\n\n# Test the function\nassert check_monthnumb_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with minimum length in the given list.\n\n    Args:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: The sublist with minimum length.\n\n    Raises:\n    ValueError: If the input is an empty list.\n\n    Examples:\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    >>> Find_Min([[1,2],[3,4],[5,6,7]])\n    [1, 2]\n    >>> Find_Min([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    return [sublist for sublist in lst if len(sublist) == min_length][0]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(5.5, 3.2)\n    16.8\n    \"\"\"\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be non-negative\")\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(5.5, 3.2) == 16.8"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The input string with uppercase substrings removed.\n    \"\"\"\n    result = ''\n    for char in string:\n        if not char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element of each sublist.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n    \"\"\"\n    return [sublist[0] for sublist in sublists]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        new_comb = []\n        for combo in result:\n            new_comb.append(combo + [lst[i]])\n        result.extend(new_comb)\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product of any subarray within the input array.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    \"\"\"\n\n    max_product = float('-inf')\n    current_max = 1\n    current_min = 1\n\n    for num in arr:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n\n        max_product = max(max_product, current_max)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: A new dictionary with empty items removed.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for i in range(n):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple with the pairwise addition of the neighboring elements of the input tuple.\n\n    Raises:\n    ValueError: If the input tuple is empty.\n\n    Examples:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((1,))\n    (1,)\n    >>> add_pairwise(())\n    Traceback (most recent call last):\n        ...\n    ValueError: Input tuple is empty.\n    \"\"\"\n    if len(t) == 0:\n        raise ValueError(\"Input tuple is empty.\")\n\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] + t[i + 1])\n\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculate the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): List of integers.\n    n (int): Modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n\n\n# Test the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    return list(range(min(lst), max(lst)+1)) == lst\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 4, 5]) == False\nassert check_Consecutive([1, 2, 4, 5]) == False\nassert check_Consecutive([1, 2, 3, 5]) == False\nassert check_Consecutive([1, 2, 3, 4, 6]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    tuple_list1 (list): The first tuple list.\n    tuple_list2 (list): The second tuple list.\n\n    Returns:\n    set: The set of tuples that are common in both tuple lists.\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list1:\n        for tuple2 in tuple_list2:\n            if set(tuple1) == set(tuple2):\n                intersection.add(tuple1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with another character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace with.\n\n    Returns:\n        str: The modified string with characters replaced.\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l') == \"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in ascending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in ascending order.\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1])\n    return sorted_items\n\n# Test the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least 2 elements\")\n\n    max_val = max(arr)\n    min_val = min(arr)\n\n    return max_val + min_val\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, -2, -3]) == -4\nassert big_sum([10, 20, 30, 40, 50]) == 60"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The input string with lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    num (int): The number.\n\n    Returns:\n    int: The first digit of the given number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(num)[0]\n\n    # Convert the first digit back to an integer and return it\n    return int(first_digit)\n\n# Test the function\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def Split(lst):\n    return [num for num in lst if num % 2 != 0]\n\n# Test the function\nassert Split([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\narr = [5, 4, 7, 2, 1]\nn = len(arr)\nassert find_Odd_Pair(arr, n) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string\n\n# Test the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n\n    Example:\n    >>> digit_distance_nums(1, 2)\n    1\n    \"\"\"\n    # Convert the numbers to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Calculate the per-digit difference\n    distance = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance += abs(int(digit1) - int(digit2))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The union of the elements of tuple1 and tuple2 in sorted order.\n    \"\"\"\n    union = tuple1 + tuple2  # Combine the elements of both tuples\n    union = tuple(set(union))  # Remove duplicate elements using set and convert back to tuple\n    union = sorted(union)  # Sort the elements in ascending order\n    return union\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    \"\"\"\n    Finds the length of the longest sublist in a given list of sublists.\n\n    Args:\n    sublists (list): A list of sublists.\n\n    Returns:\n    int: The length of the longest sublist.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    >>> Find_Max_Length([[1,2,3],[4,5],[6,7,8,9,10]])\n    5\n    >>> Find_Max_Length([])\n    ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not isinstance(sublists, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(sublists) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test cases\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Parameters:\n    string (str): The input string to be split into characters.\n\n    Returns:\n    list: A list of characters from the input string.\n\n    Example:\n    >>> split('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the given integer.\n    \"\"\"\n    # Convert the integer to a string and iterate over its digits\n    digit_sum = 0\n    for digit in str(n):\n        digit_sum += int(digit)\n    return digit_sum\n\n# Test the function\nassert sum_digits(345) == 12"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(N):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        N (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(N)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists containing strings.\n\n    Returns:\n    list: A new list with each sublist sorted in ascending order.\n\n    Examples:\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    return unique_nums\n\n# Test the function\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(sub_list, main_list):\n    \"\"\"\n    Check whether a list is a sublist of another list.\n\n    Args:\n        sub_list (list): The potential sublist to check.\n        main_list (list): The main list to check against.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if len(sub_list) > len(main_list):\n        return False\n\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i + len(sub_list)] == sub_list:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2], [1, 2, 3, 4]) == True\nassert is_Sub_Array([3, 5], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5]) == False\nassert is_Sub_Array([], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([], []) == True"}
{"task_id": "Mbpp/577", "solution": "def last_Digit_Factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test the function\nassert last_Digit_Factorial(4) == 4"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nassert interleave_lists(list1, list2, list3) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements from both input tuples.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n    nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n    tuple: The output nested mixed tuple with uneven elements removed.\n    \"\"\"\n    result = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            result.append(extract_even(element))\n        elif element % 2 == 0:\n            result.append(element)\n    return tuple(result)\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float or int): The length of the base edge of the pyramid.\n    height (float or int): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n\n    Raises:\n    ValueError: If base_edge or height is not a positive number.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(5, 12)\n    100.0\n    \"\"\"\n\n    if base_edge <= 0 or height <= 0:\n        raise ValueError(\"Base edge and height must be positive numbers.\")\n\n    base_area = base_edge ** 2\n    lateral_area = base_edge * (2 * (height ** 2 + base_edge ** 2) ** 0.5)\n    surface_area = base_area + lateral_area\n\n    return surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (int): The position of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n <= 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    dataset (list): A list of dictionaries, where each dictionary represents an item with 'name' and 'price' attributes.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list: A list of dictionaries, containing the n most expensive items from the dataset.\n    \"\"\"\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    # Split the list at the nth element\n    split_list = arr[n:] + arr[:n]\n    \n    return split_list\n\n# Test the function\nassert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if not nums:\n        return 0\n\n    min_val = min(nums)\n    max_val = max(nums)\n    return max_val - min_val\n\n# Test the function\nassert big_diff([1, 2, 3, 4]) == 3"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect square numbers between start and end (inclusive).\n    \"\"\"\n    squares = []\n    num = int(start ** 0.5)  # Find the square root of start\n\n    while num ** 2 <= end:\n        if num ** 2 >= start:\n            squares.append(num ** 2)\n        num += 1\n\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with the first and last elements swapped.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[-1]] + lst[1:-1] + [lst[0]]\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    if k > n - k:\n        k = n - k\n\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) // i\n\n    return result\n\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of terms in the sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    if n < 1:\n        return 0\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n + i, i) * binomial_coefficient(n + i, i - 1)\n\n    return total_sum\n\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    octets = ip_address.split('.')\n    non_zero_octets = [str(int(octet)) for octet in octets if int(octet) != 0]\n    return '.'.join(non_zero_octets)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd number.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8])\n        0\n        >>> diff_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: List does not contain any even or odd number.\n    \"\"\"\n    first_even = None\n    first_odd = None\n\n    for num in numbers:\n        if num % 2 == 0 and first_even is None:\n            first_even = num\n        elif num % 2 != 0 and first_odd is None:\n            first_odd = num\n\n        if first_even is not None and first_odd is not None:\n            break\n\n    if first_even is None or first_odd is None:\n        raise ValueError(\"List does not contain any even or odd number.\")\n\n    return first_even - first_odd"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted arrays.\n\n    Raises:\n        ValueError: If either array is empty or k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    if not arr1 or not arr2:\n        raise ValueError(\"Arrays cannot be empty\")\n\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n\n    merged = sorted(arr1 + arr2)\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits, each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n\n    # Calculate the sum of digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return num == sum_of_digits\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    total_sum = (n * (n + 1)) // 2\n\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n\n    return total_sum, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test cases\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated characters are found.\n    \"\"\"\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") == None\nassert first_repeated_char(\"\") == None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Function to get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The given integer.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"\n        Helper function to check if a number is lucid.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is lucid, False otherwise.\n        \"\"\"\n        if num == 1:\n            return True\n        if num % 2 == 0 or num % 3 == 0:\n            return False\n        i = 5\n        while i * i <= num:\n            if num % i == 0 or num % (i + 2) == 0:\n                return False\n            i += 6\n        return True\n\n    lucid_numbers = []\n    for num in range(1, n + 1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words separated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with words in reverse order.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the integer is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Test the function\nassert abs(radian_degree(90) - 1.5707963267948966) < 1e-10, \"Test failed\""}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n# Test the function\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 2, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the n'th column of a matrix.\n\n    Parameters:\n    matrix (list of lists): The matrix represented as a list of lists.\n    n (int): The index of the column to find the maximum value in.\n\n    Returns:\n    int: The maximum value in the n'th column of the matrix.\n\n    Raises:\n    ValueError: If the matrix is empty or the column index is out of range.\n\n    Examples:\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    19\n    >>> max_of_nth([[1, 2, 3], [4, 5, 6]], 0)\n    4\n    >>> max_of_nth([[1, 2, 3], [4, 5, 6]], 2)\n    3\n    \"\"\"\n\n    if not matrix:\n        raise ValueError(\"Matrix cannot be empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column index out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo operation.\n\n    Args:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    \"\"\"\n\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Function to divide two lists element wise.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise division of list1 and list2.\n\n    Raises:\n    ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n    >>> div_list([4,5,6],[1, 2, 3])\n    [4.0, 2.5, 2.0]\n    >>> div_list([1,2,3],[0,0,0])\n    [inf, inf, inf]\n    >>> div_list([1,2,3],[1,0,1])\n    [1.0, nan, 3.0]\n    \"\"\"\n\n    if len(list1) != len(list2):\n        raise ValueError(\"Lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        if list2[i] == 0:\n            result.append(float('inf')) if list1[i] > 0 else result.append(float('-inf'))\n        else:\n            result.append(list1[i] / list2[i])\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    nums = ''\n    letters = ''\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset where every pair is divisible.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, index):\n        \"\"\"\n        Recursive function to find the largest subset of numbers where every pair is divisible.\n\n        Args:\n            numbers (list): The remaining numbers to consider.\n            current_subset (list): The current subset being built.\n            index (int): The index of the current number being considered.\n\n        Returns:\n            int: The size of the largest subset where every pair is divisible.\n        \"\"\"\n        if index == len(numbers):\n            return len(current_subset)\n\n        # Exclude the current number and move to the next index\n        exclude_current = find_subset(numbers, current_subset, index + 1)\n\n        # Include the current number and move to the next index\n        include_current = find_subset(numbers[index + 1:], current_subset + [numbers[index]], index + 1)\n\n        # Return the maximum size of the two subsets\n        return max(exclude_current, include_current)\n\n    return find_subset(numbers, [], 0)"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        median = (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        median = merged_list[size // 2]\n    return median\n\n# Test the function\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nsize = 5\nexpected_median = 16.0\nassert get_median(list1, list2, size) == expected_median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with each number raised to the n-th power.\n\n    Raises:\n        TypeError: If nums is not a list or n is not an integer.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"nums must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts the given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\ndef test_convert_to_uppercase():\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n\n# Run the tests\ntest_convert_to_uppercase()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        base = 2 * radius\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = 0.5 * base * height\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0.0\nassert triangle_area(1) == 1.5707963267948966\nassert triangle_area(2) == 3.141592653589793"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by underscores and vice versa.\n    \"\"\"\n    modified_string = string.replace(' ', '_')\n    return modified_string\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with zeroes moved to the end.\n    \"\"\"\n    non_zero_lst = [num for num in lst if num != 0]  # Create a new list without zeroes\n    zero_lst = [0] * (len(lst) - len(non_zero_lst))  # Create a new list of zeroes with the same length as the original list minus the non-zero elements\n    return non_zero_lst + zero_lst  # Concatenate the non-zero list and the zero list to get the final result\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, target):\n    \"\"\"\n    Calculate the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n    nums (list): A list of integers.\n    target (int): The target value.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            pair_xor = nums[i] ^ nums[j]\n            if pair_xor == target:\n                result += pair_xor\n    return result\n\n# Test the function\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def sort_array(arr):\n        n = len(arr)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n        return arr\n\n    return sort_array(arr)\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The actual amount.\n        expected_amount (float): The expected amount.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    velocity (int): Wind velocity in km/h.\n    temperature (int): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    Raises:\n    ValueError: If the wind velocity is less than 0 or greater than 150 km/h, or the temperature is less than -40\u00b0C or greater than 50\u00b0C.\n\n    \"\"\"\n\n    if velocity < 0 or velocity > 150:\n        raise ValueError(\"Wind velocity must be between 0 and 150 km/h.\")\n\n    if temperature < -40 or temperature > 50:\n        raise ValueError(\"Temperature must be between -40\u00b0C and 50\u00b0C.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test the function\nnames = ['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']\nassert sum_name_lengths(names) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(10)\n    325\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (7 * n - 5) // 2\n\n# Test the function\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    matches = re.findall(pattern, text)\n    for match in matches:\n        if match[0] != 'z' and match[-1] != 'z':\n            return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\")==True"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverses an array up to a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position up to which the array should be reversed.\n\n    Returns:\n    list: The reversed array up to the given position.\n\n    Raises:\n    ValueError: If k is out of range.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0)\n    [1, 2, 3, 4, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6)\n    [6, 5, 4, 3, 2, 1]\n    \"\"\"\n\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"Invalid value of k\")\n\n    return arr[:k+1][::-1] + arr[k+1:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    \"\"\"\n    Add a dictionary to the tuple. The output should be a tuple.\n\n    Args:\n    t (tuple): The input tuple.\n    d (dict): The input dictionary.\n\n    Returns:\n    tuple: The input tuple with the dictionary added.\n    \"\"\"\n    return t + (d,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n\n    # Initialize the first cell\n    dp[0][0] = matrix[0][0]\n\n    # Initialize the first column\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    # Initialize the first row\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n\n    # Fill in the rest of the matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    # Calculate the maximum average\n    max_average = dp[n-1][n-1] / (n + n - 1)\n\n    return max_average\n\n# Test the function\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\nexpected_output = {'Cierra Vega': (6.2, 70)}\nassert filter_data(students, min_height, min_weight) == expected_output"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the number of indices where the lists have the same values.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    int: The count of indices where the lists have the same values.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7, 8]\nlist2 = [2, 2, 3, 1, 2, 6, 7, 9]\nassert count_same_pair(list1, list2) == 4"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values between quotation marks.\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    \"\"\"\n    Function to multiply adjacent elements of a tuple.\n\n    Args:\n    numbers (tuple): A tuple of numbers.\n\n    Returns:\n    tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i+1])\n    return tuple(result)\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list where each element is the sum of the corresponding elements from list1 and list2.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n\n    return result\n\n# Test the function\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    slant_height = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given text.\n\n    Args:\n        text (str): The input text.\n\n    Returns:\n        str: The modified text with special characters replaced by colons.\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        text = text.replace(char, ':')\n    return text\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1  # Look for first occurrence on the left side\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    \"\"\"\n\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    if num == 0 or num == 1:\n        return num\n\n    binary = bin(num)[2:]  # Convert number to binary representation\n    middle_bits = binary[1:-1]  # Exclude first and last bits\n    toggled_bits = ''.join(['1' if bit == '0' else '0' for bit in middle_bits])\n    toggled_num = int(binary[0] + toggled_bits + binary[-1], 2)  # Reconstruct number with toggled middle bits\n    return toggled_num\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list in which to find the left insertion point.\n        value: The value for which to find the left insertion point.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n\n    Examples:\n        >>> left_insertion([1, 2, 4, 5], 6)\n        4\n        >>> left_insertion([1, 2, 4, 5], 0)\n        0\n        >>> left_insertion([1, 2, 4, 5], 3)\n        2\n    \"\"\"\n    if not is_sorted(arr):\n        raise ValueError(\"Input list must be sorted\")\n\n    left = 0\n    right = len(arr)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\ndef is_sorted(arr):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Args:\n        arr (list): The list to check for sorting.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            return False\n    return True"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Test the function\nassert check_str(\"annie\") == True\nassert check_str(\"banana\") == False\nassert check_str(\"Elephant\") == True\nassert check_str(\"iguana\") == False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is a triangular number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a triangular number, False otherwise.\n        \"\"\"\n        i = 1\n        while True:\n            triangular_num = (i * (i + 1)) // 2\n            if triangular_num >= 10**(n-1):\n                break\n            i += 1\n        return triangular_num == num\n\n    index = 1\n    while True:\n        triangular_num = (index * (index + 1)) // 2\n        if is_triangular(triangular_num) and len(str(triangular_num)) == n:\n            return index\n        index += 1\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length\")\n\n    return dict(zip(t[::2], t[1::2]))\n\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n\n    Parameters:\n    string (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a regular tetrahedron.\n\n    Parameters:\n    side_length (float): The length of the sides of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    base_area = (math.sqrt(3) * math.pow(side_length, 2)) / 4\n    volume = (math.sqrt(2) * math.pow(side_length, 3)) / 12\n    area = base_area + (4 * volume)\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst (list): The list to be rotated.\n    num_items (int): The number of items to rotate by.\n\n    Returns:\n    list: The rotated list.\n\n    Examples:\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    num_items = num_items % len(lst)  # Adjust the number of items if it exceeds the length of the list\n    return lst[-num_items:] + lst[:-num_items]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return None in t\n\n# Test the function\nassert check_none((10, 4, 5, 6, None)) == True"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between capital words.\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper() and len(word) > 1:\n            modified_words.append(word[0] + ' ' + word[1:])\n        else:\n            modified_words.append(word)\n    return ' '.join(modified_words)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonLanguage\") == 'Python Language'\nassert capital_words_spaces(\"helloWorld\") == 'hello World'\nassert capital_words_spaces(\"CapitalLetters\") == 'Capital Letters'\nassert capital_words_spaces(\"\") == ''"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    # Convert the list of strings to a list of integers\n    numbers = [int(num) for num in numbers]\n    \n    # Sort the list numerically\n    numbers.sort()\n    \n    return numbers\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    return lst + list(tup)\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n\n    def is_min_heap(arr, i):\n        \"\"\"\n        Helper function to recursively check if the given array represents a min heap.\n\n        Parameters:\n        arr (list): The input array to be checked.\n        i (int): The index of the current node being checked.\n\n        Returns:\n        bool: True if the array represents a min heap, False otherwise.\n        \"\"\"\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        # Base case: leaf nodes are considered min heaps by default\n        if left_child_index >= len(arr):\n            return True\n\n        # Check if the left child is smaller than the current node\n        if arr[left_child_index] < arr[i]:\n            return False\n\n        # Check if the right child exists and is smaller than the current node\n        if right_child_index < len(arr) and arr[right_child_index] < arr[i]:\n            return False\n\n        # Recursively check the left and right subtrees\n        return is_min_heap(arr, left_child_index) and is_min_heap(arr, right_child_index)\n\n    # Check if the array is empty or has only one element\n    if len(arr) < 2:\n        return True\n\n    # Start checking the heap property from the root node\n    return is_min_heap(arr, 0)\n\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 2]) == False\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 1, 4, 5]) == False\nassert check_min_heap([5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5]) == True\nassert check_min_heap([5, 4, 3, 2, 1, 0]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n    records (list): A list of tuples, where each tuple contains a name and a numerical value.\n    k (int): The number of minimum records to be returned.\n\n    Returns:\n    list: A list of the minimum k records, sorted in ascending order based on the numerical value.\n\n    Raises:\n    ValueError: If the number of records is less than k.\n\n    Examples:\n    >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n    [('Akash', 2), ('Akshat', 4)]\n    >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Number of records is less than k.\n    \"\"\"\n\n    if len(records) < k:\n        raise ValueError(\"Number of records is less than k.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort records based on numerical value\n    return sorted_records[:k]  # Return the first k records"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    smallest = min(numbers)\n    second_smallest_num = float('inf')\n\n    for num in numbers:\n        if num > smallest and num < second_smallest_num:\n            second_smallest_num = num\n\n    return second_smallest_num"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    s (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        # Convert the string to a float and check if it has a precision of 2\n        float_value = float(s)\n        return round(float_value, 2) == float_value\n    except ValueError:\n        return False\n\n# Test the function\nassert is_decimal('123.11') == True"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([]) == False\nassert unique_Element([1]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(9) == True\nassert check_monthnumber_number(12) == False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than 2 elements.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((10, 20, 30, 40, 50), 5)\n    10\n    >>> find_min_diff((5, 5, 5, 5), 4)\n    0\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least 2 elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize min_diff with positive infinity\n\n    for i in range(n - 1):\n        diff = arr[i+1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update min_diff if a smaller difference is found\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def count_divisors(num):\n        count = 0\n        for i in range(1, int(num**0.5) + 1):\n            if num % i == 0:\n                count += 1\n                if i != num // i:\n                    count += 1\n        return count\n\n    polite_num = 1\n    count = 0\n    while count < n:\n        polite_num += 1\n        if is_prime(count_divisors(polite_num)):\n            count += 1\n    return polite_num\n\n# Test the function\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs\n\n# Test the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    count = 0\n    num_count = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_count:\n            count += num_count[complement]\n        if num in num_count:\n            num_count[num] += 1\n        else:\n            num_count[num] = 1\n\n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]\n\n# Test the function\nassert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    for i in range(1, 2 * n, 2):\n        sum_of_powers += i ** 4\n\n    return sum_of_powers\n\n# Test the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"({[]})\") == True\nassert check_expression(\"([)]\") == False\nassert check_expression(\"(\") == False\nassert check_expression(\"[\") == False"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, its starting index, and ending index within the string.\n        None: If there is no match.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    index = string.find(substring)\n    if index != -1:\n        return substring, index, index + len(substring) - 1\n    else:\n        return None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([1,2,3,4,5,6,7,8]) == False\nassert odd_position([1,2,3,4,5,6,7]) == True\nassert odd_position([2,1,4,3,6,7,6,3,1]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n    \"\"\"\n    non_repeated_elements = []\n    for num in lst:\n        if lst.count(num) == 1:\n            non_repeated_elements.append(num)\n    return sum(non_repeated_elements)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            current_sublist = [lst[i]]\n            result.append(current_sublist)\n        else:\n            current_sublist.append(lst[i])\n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples):\n    combinations = []\n    for i in range(len(tuples)):\n        for j in range(i+1, len(tuples)):\n            combinations.append((tuples[i][0] + tuples[j][0], tuples[i][1] + tuples[j][1]))\n            combinations.append((tuples[i][0] + tuples[j][1], tuples[i][1] + tuples[j][0]))\n    return combinations\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd length subarrays in a given list.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    \"\"\"\n\n    subarrays = []\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            if len(subarray) % 2 != 0:\n                subarrays.append(subarray)\n\n    return sum(sum(subarray) for subarray in subarrays)\n\n# Testing the function\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Find the product of the first even and odd numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the first even and odd numbers.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: List must contain at least one even and one odd number.\n    \"\"\"\n    even_found = False\n    odd_found = False\n    even_product = 1\n    odd_product = 1\n\n    for num in numbers:\n        if num % 2 == 0 and not even_found:\n            even_product *= num\n            even_found = True\n        elif num % 2 != 0 and not odd_found:\n            odd_product *= num\n            odd_found = True\n\n        if even_found and odd_found:\n            break\n\n    if not even_found or not odd_found:\n        raise ValueError(\"List must contain at least one even and one odd number.\")\n\n    return even_product * odd_product"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple, e.g., \"(7, 8, 9)\"\n\n    Returns:\n        tuple: An integer tuple, e.g., (7, 8, 9)\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(10)\")\n        (10,)\n        >>> tuple_str_int(\"(1, 2, 3, 4, )\")\n        Traceback (most recent call last):\n          File \"<stdin>\", line 1, in <module>\n          File \"<stdin>\", line 12, in tuple_str_int\n        ValueError: Invalid tuple representation: '(1, 2, 3, 4, )'\n    \"\"\"\n    try:\n        # Remove the leading and trailing parentheses from the string\n        tuple_str = tuple_str.strip('()')\n\n        # Split the string by comma and convert each element to integer\n        int_tuple = tuple(int(elem) for elem in tuple_str.split(','))\n\n        return int_tuple\n    except ValueError:\n        raise ValueError(f\"Invalid tuple representation: '{tuple_str}'\")"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted into the list.\n\n    Returns:\n    int: The index where the target value should be inserted to maintain sorted order.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n\n    # If the target is greater than any element in the list, return the length of the list\n    if target > arr[-1]:\n        return len(arr)\n\n    # If the target is less than or equal to the first element, return 0\n    if target <= arr[0]:\n        return 0\n\n    # Binary search to find the right insertion point\n    left, right = 0, len(arr) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list to be converted to a tuple.\n        string (str): The string to be added to the tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements of the list and the string.\n    \"\"\"\n    return tuple(lst + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every even index contains an even number, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([1,2,3,4,5,6]) == False\nassert even_position([2,4,6,8,10]) == True\nassert even_position([1,2,3,4,5,6,7,8,9,10]) == False"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: The input tuple with all nested tuples removed.\n    \"\"\"\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list.\n    \"\"\"\n    count = 0\n    for lst in lists:\n        if isinstance(lst, list):\n            count += 1\n    return count\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array, or -1 if it is not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 2, 3], 2) == 1\nassert last([1, 2, 3], 3) == 2\nassert last([1, 2, 3], 4) == -1\nassert last([1, 2, 2, 3], 2) == 2\nassert last([1, 2, 2, 3], 4) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r\"a.*b$\"\n    return bool(re.match(pattern, text))\n\n# Test the function\nassert text_starta_endb(\"aabbbb\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The sum of all items in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the given range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers within the given range.\n\n    Raises:\n    ValueError: If l is greater than r or if either l or r is negative.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 4)\n    4\n    >>> sum_in_range(0, 3)\n    4\n    >>> sum_in_range(1, 1)\n    1\n    >>> sum_in_range(0, 0)\n    0\n    \"\"\"\n\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r\")\n    if l < 0 or r < 0:\n        raise ValueError(\"l and r must be non-negative\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits in a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate by.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If d is greater than 32 or less than 0.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(16, 0)\n        16\n        >>> left_rotate(16, 32)\n        Traceback (most recent call last):\n            ...\n        ValueError: Rotation value should be between 0 and 32.\n    \"\"\"\n    if d > 32 or d < 0:\n        raise ValueError(\"Rotation value should be between 0 and 32.\")\n\n    # Mask to extract the leftmost d bits\n    mask = (1 << d) - 1\n\n    # Rotate the leftmost d bits\n    rotated_bits = (num & mask) << (32 - d)\n\n    # Clear the leftmost d bits and shift the remaining bits to the left\n    num = (num & ~mask) << d\n\n    # Merge the rotated bits with the shifted remaining bits\n    rotated_num = rotated_bits | num\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 3)\n        2\n    \"\"\"\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b or a == c or b == c:\n        count = 2\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0 or num == 1:\n        return True\n\n    left = 1\n    right = num\n\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == num:\n            return True\n        elif mid * mid < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\n# Test cases\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of the numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test the function\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sub_list in lst:\n        current_sum = sum(sub_list)\n        if current_sum > max_sum:\n            max_sum = current_sum\n            max_list = sub_list\n    \n    return max_list\n\n# Test the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == None\nassert first_odd([2, 4, 6, 8, 10, 11]) == 11\nassert first_odd([1, 2, 3, 4, 5]) == 1"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_data, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        k: The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tuple_data\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of the second tuple is smaller than its corresponding element in the first tuple, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
