{"date": "2025-02-04 21:09", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A list containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using the given digits.\n\n    Parameters:\n    digits (list): A list of digits.\n\n    Returns:\n    int: The largest number that can be formed using the given digits.\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits list to an integer\n    max_num = int(\"\".join(map(str, sorted_digits)))\n\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the index of the first occurrence of the character\n    first_index = string.find(char)\n\n    # Find the index of the last occurrence of the character\n    last_index = string.rfind(char)\n\n    # Remove the first occurrence of the character\n    modified_string = string[:first_index] + string[first_index+1:]\n\n    # Remove the last occurrence of the character\n    modified_string = modified_string[:last_index] + modified_string[last_index+1:]\n\n    return modified_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the side of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative.\n\n    Examples:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    >>> find_Volume(0, 8, 6)\n    Traceback (most recent call last):\n    ...\n    ValueError: All input parameters must be positive.\n    \"\"\"\n\n    if base < 0 or height < 0 or length < 0:\n        raise ValueError(\"All input parameters must be positive.\")\n\n    volume = (base * height * length) / 2\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of the side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Examples:\n        >>> find_Rotations(\"aaaa\")\n        1\n        >>> find_Rotations(\"abcde\")\n        5\n        >>> find_Rotations(\"xyz\")\n        3\n    \"\"\"\n    n = len(s)\n    rotations = [s]\n    for i in range(1, n):\n        s = s[1:] + s[0]\n        rotations.append(s)\n    rotations.sort()\n    return rotations.index(s) + 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["aaaaaaaaaaaaaaaaaaaaaaaaaaabaaaaaaab"]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n    \"\"\"\n    clean_string = ''.join([char for char in string1 if char not in string2])\n    return clean_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_power_of_two(num):\n        if num == 0:\n            return False\n        while num != 1:\n            if num % 2 != 0:\n                return False\n            num = num // 2\n        return True\n\n    if is_prime(n) and is_power_of_two(n):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[383]], "plus_fail_tests": [[true]]}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        list: A list containing the common elements.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return num % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    This function counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "import re\ndef text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string contains lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    pattern = r'[a-z]+_[a-z]+'\n    return bool(re.search(pattern, input_string))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Aaab_abbbc"]], "plus_fail_tests": [["abc_def_ghi_"]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> Find_Min_Length([[1],[1,2]])\n        1\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublst, list) for sublst in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    for sublst in lst:\n        if len(sublst) < min_length:\n            min_length = len(sublst)\n\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of n objects taken m at a time,\n    without repetition and without regard to order.\n\n    Parameters:\n    n (int): The total number of objects.\n    m (int): The number of objects taken at a time.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(5, 3)\n    10\n    >>> eulerian_num(0, 0)\n    1\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers.\")\n\n    if m == 0:\n        return 1\n\n    if n == 0:\n        return 0\n\n    return eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Check if a number is an octagonal number.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is an octagonal number, False otherwise.\n\n    \"\"\"\n    return (n * (3 * n - 2)) % 3 == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the squares of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list containing the squares of each number.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([-1, -2, -3, -4, -5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Parameters:\n    decimal (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary equivalent of the decimal number as a string with no leading zeros.\n    \"\"\"\n    if decimal == 0:\n        return '0'\n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse = int(str(num)[::-1])  # Reverse the number\n    twice_reverse = reverse * 2  # Multiply the reversed number by 2\n    return twice_reverse == num + 1  # Check if the result is equal to the input number plus 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_diff = float('-inf')\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"Index out of range\")\n    return arr[k-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "def heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n cannot be greater than the length of the numbers list.\")\n\n    # Create a max heap of the first n elements\n    heap = numbers[:n]\n    heapq.heapify(heap)\n\n    # Iterate through the remaining elements\n    for num in numbers[n:]:\n        # If the current number is larger than the smallest element in the heap, replace it\n        if num > heap[0]:\n            heapq.heapreplace(heap, num)\n\n    # Return the heap elements in descending order\n    return sorted(heap, reverse=True)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3]]}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = num1 ^ num2\n    return xor_result != 0 and (xor_result & (xor_result - 1)) == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(s):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    s (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(s)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The input matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of true booleans in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The count of true booleans.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True, False, True])\n        4\n    \"\"\"\n    return lst.count(True)\n\n# Test cases\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True, False, True]) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tpl in tuples:\n        if all(elem % k == 0 for elem in tpl):\n            result.append(tpl)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n\n    return increasing or decreasing", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of rotations to be performed.\n\n    Returns:\n        int: The count of numbers with an odd value after the rotations.\n\n    Examples:\n        >>> odd_Equivalent(\"011001\", 6)\n        3\n    \"\"\"\n    def rotate_binary_string(binary_string, num_rotations):\n        \"\"\"\n        Rotate a binary string the given number of times.\n\n        Args:\n            binary_string (str): The binary string to be rotated.\n            num_rotations (int): The number of rotations to be performed.\n\n        Returns:\n            str: The rotated binary string.\n        \"\"\"\n        num_bits = len(binary_string)\n        num_rotations %= num_bits\n        if num_rotations == 0:\n            return binary_string\n        rotated_string = binary_string[-num_rotations:] + binary_string[:-num_rotations]\n        return rotated_string\n\n    def is_odd(number):\n        \"\"\"\n        Check if a number is odd.\n\n        Args:\n            number (int): The number to be checked.\n\n        Returns:\n            bool: True if the number is odd, False otherwise.\n        \"\"\"\n        return number % 2 != 0\n\n    count = 0\n    for _ in range(num_rotations):\n        rotated_string = rotate_binary_string(binary_string, 1)\n        decimal_value = int(rotated_string, 2)\n        if is_odd(decimal_value):\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that has consecutive digits that are repeated twice in a row.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str) - 2):\n        if num_str[i] == num_str[i+1] == num_str[i+2]:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1212121]], "plus_fail_tests": [[2121212121212121]]}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    surface_area = 4 * math.pi * radius**2\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int or float): The exponent.\n\n    Returns:\n    int or float: The result of 'a' raised to the power 'b'.\n\n    Raises:\n    TypeError: If 'a' or 'b' is not an integer or float.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2.5, 3)\n    15.625\n    >>> power(0, 5)\n    0\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"Both 'a' and 'b' must be integers or floats.\")\n\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def flatten_lists(lst):\n    \"\"\"\n    Flatten a list of lists into a single list.\n\n    Args:\n        lst (list): The list of lists to be flattened.\n\n    Returns:\n        list: The flattened list.\n    \"\"\"\n    flattened = []\n    for sublist in lst:\n        flattened.extend(sublist)\n    return flattened\ndef frequency_lists(lst):\n    \"\"\"\n    Find the frequency of each element in a flattened list of lists.\n\n    Args:\n        lst (list): The list of lists to be flattened and analyzed.\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values.\n    \"\"\"\n    flattened = flatten_lists(lst)\n    frequency = {}\n    for element in flattened:\n        if element in frequency:\n            frequency[element] += 1\n        else:\n            frequency[element] = 1\n    return frequency", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the strings in the list, False otherwise.\n    \"\"\"\n    for string in lst:\n        if substring in string:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check the length of.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        list: The sorted list of lists.\n\n    Examples:\n        >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        lst (list): The main list to be checked.\n        sublst (list): The sublist to be searched for.\n\n    Returns:\n        bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is given by the formula:\n    T(n) = (n * (n + 1) * (n + 2)) // 6\n\n    Parameters:\n    n (int): The index of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(0)\n    0\n    >>> tetrahedral_number(1)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(0)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    return n - 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_value = float('inf')\n    min_index = None\n\n    for i, tup in enumerate(lst):\n        if tup[1] < min_value:\n            min_value = tup[1]\n            min_index = i\n\n    return lst[min_index][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\nlist1 = [25, 24, 15, 4, 5, 29, 110]\nlist2 = [19, 20, 11, 56, 25, 233, 154]\nlist3 = [24, 26, 54, 48]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    sequence = [0, 1, 1]  # Initial values of the sequence\n\n    for i in range(3, n + 1):\n        if i % 2 == 0:\n            sequence.append(sequence[i // 2])\n        else:\n            sequence.append(sequence[(i - 1) // 2] + sequence[(i + 1) // 2])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('hello_world')\n    'HelloWorld'\n    >>> snake_to_camel('this_is_a_test')\n    'ThisIsATest'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() if word else word for word in words)\n    return camel_str[0].lower() + camel_str[1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python_program"]], "plus_fail_tests": [["___python_program"]]}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(sequence, patterns):\n    \"\"\"\n    Check whether the given sequence follows the patterns array.\n\n    Args:\n        sequence (list): The sequence to be checked.\n        patterns (list): The patterns to be compared against.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(sequence) != len(patterns):\n        return False\n\n    pattern_map = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_map:\n            pattern_map[patterns[i]] = sequence[i]\n        elif pattern_map[patterns[i]] != sequence[i]:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge dict1 and dict2\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Update values in merged_dict with values from dict3\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of that integer.\n\n    Parameters:\n    n (int): The integer for which the number of divisors needs to be found.\n\n    Returns:\n    int: The number of divisors of the input integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): The input tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the input tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple or contains non-positive integers.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((10, 20, 30))\n        102030\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    for num in t:\n        if not isinstance(num, int) or num <= 0:\n            raise TypeError(\"Tuple must contain only positive integers\")\n\n    return int(\"\".join(map(str, t)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    freq_dict = {}\n    max_freq = 0\n    max_item = None\n\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n\n    return max_item", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]]]}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        sentence (str): The input sentence.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n\n    Returns:\n    int: Sum of common divisors.\n\n    Example:\n    >>> sum_common_divisors(10, 15)\n    6\n    \"\"\"\n\n    def get_divisors(n):\n        \"\"\"\n        Get all divisors of a given number.\n\n        Parameters:\n        n (int): Number.\n\n        Returns:\n        list: List of divisors.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    divisors_a = get_divisors(a)\n    divisors_b = get_divisors(b)\n\n    common_divisors = set(divisors_a) & set(divisors_b)\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    \"\"\"\n    if not isinstance(z, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    angle = math.atan2(z.imag, z.real)\n    return angle", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or contains an odd number of elements.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n        >>> search([1,1,2,2,3,3,4,4,5])\n        5\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array cannot be empty.\")\n    if len(arr) % 2 == 0:\n        raise ValueError(\"Input array must contain an odd number of elements.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (right - mid) % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-tuple elements.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n        36\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_product = float('-inf')\n\n    for tup in lst:\n        if not isinstance(tup, tuple):\n            raise ValueError(\"Input list must contain only tuples.\")\n\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    return sum(num for num in numbers if num < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: The product of a and b.\n    \"\"\"\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_0s = 0\n    count_1s = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0s += 1\n        elif char == '1':\n            count_1s += 1\n\n        diff = count_0s - count_1s\n        if diff < 0:\n            diff = -diff\n\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["100000011100000000111111111000000011111101"]]}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n        if s[i].lower() in vowels:\n            while j > i:\n                if s[j].lower() in vowels:\n                    s[i], s[j] = s[j], s[i]\n                    i += 1\n                    j -= 1\n                    break\n                j -= 1\n        i += 1\n\n    return ''.join(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n\n    def flip(lst, k):\n        \"\"\"\n        Flips the first k elements of the list in place.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        k (int): The number of elements to be flipped.\n\n        Returns:\n        None\n        \"\"\"\n        lst[:k] = lst[:k][::-1]\n\n    def find_max_index(lst, end):\n        \"\"\"\n        Finds the index of the maximum element in the list within the range [0, end].\n\n        Parameters:\n        lst (list): The list to search for the maximum element.\n        end (int): The upper bound of the range to search.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(1, end + 1):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max_index(lst, i)\n        if max_index != i:\n            flip(lst, max_index + 1)\n            flip(lst, i + 1)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of numbers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains non-numeric elements.\n\n    Examples:\n    >>> max_Abs_Diff((2,1,5,3))\n    4\n    >>> max_Abs_Diff((10, 5, 2, 8))\n    6\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for num in arr:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"Input array can only contain numeric elements.\")\n\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n\n    return max_val - min_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in the given string with the specified character and returns the modified string.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    modified_string = string.replace(\" \", character)\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n        list3 (list): The third input list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is a non-positive integer.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    6\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    magic_sum = sum(matrix[0])  # Sum of elements in the first row\n\n    # Check if all rows have the same sum\n    for row in matrix:\n        if sum(row) != magic_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for col in range(n):\n        col_sum = sum(matrix[i][col] for i in range(n))\n        if col_sum != magic_sum:\n            return False\n\n    # Check if the sum of the main diagonal is equal to the magic sum\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    if main_diag_sum != magic_sum:\n        return False\n\n    # Check if the sum of the secondary diagonal is equal to the magic sum\n    secondary_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n    if secondary_diag_sum != magic_sum:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(ord('a') + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Finds the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): The input list of numbers.\n        start (int): The starting index of the range (inclusive).\n        end (int): The ending index of the range (exclusive).\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        IndexError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end > len(lst) or start >= end:\n        raise IndexError(\"Invalid range specified\")\n\n    return sum(lst[start:end])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10]], "plus_fail_tests": [[[-2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8], 3, 7]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function returns the number of integer elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_list = [num for sublist in lst for num in sublist]\n    return set(flattened_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The input list.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element in the array\n    first_occurrence = -1\n    for i in range(n):\n        if arr[i] == element:\n            first_occurrence = i\n            break\n    \n    # If the element is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element occurs more than n/2 times\n    if (first_occurrence + n//2) <= (n - 1) and arr[first_occurrence + n//2] == element:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the input number.\n\n    Examples:\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(100)\n    121\n    >>> next_Perfect_Square(10)\n    16\n    \"\"\"\n    # Find the square root of the given number\n    sqrt = math.isqrt(num)\n\n    # Increment the square root by 1\n    sqrt += 1\n\n    # Return the square of the incremented square root\n    return sqrt * sqrt", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (len(bin(n)) - 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = -1\n    for i in range(1, n-1):\n        if arr[i-1] < arr[i] and arr[i] > arr[i+1]:\n            peak = i\n            break\n\n    if peak == -1:\n        return sum(arr)\n\n    # Calculate the maximum sum of increasing subsequence from the left side of the peak\n    max_sum_left = [0] * n\n    max_sum_left[0] = arr[0]\n    for i in range(1, peak+1):\n        max_sum_left[i] = max(max_sum_left[i-1], arr[i])\n\n    # Calculate the maximum sum of decreasing subsequence from the right side of the peak\n    max_sum_right = [0] * n\n    max_sum_right[n-1] = arr[n-1]\n    for i in range(n-2, peak-1, -1):\n        max_sum_right[i] = max(max_sum_right[i+1], arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_sum_bitonic = [0] * n\n    for i in range(n):\n        max_sum_bitonic[i] = max_sum_left[i] + max_sum_right[i] - arr[i]\n\n    return max(max_sum_bitonic)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1]]]}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Removes characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return string[::2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements):\n    \"\"\"\n    Removes all elements from a given list present in another list.\n\n    Args:\n        lst (list): The list from which elements are to be removed.\n        elements (list): The list of elements to be removed from the given list.\n\n    Returns:\n        list: The updated list with elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return 0\n    else:\n        return length * (length + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in the given tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(t[0])\n    for element in t[1:]:\n        if type(element) != data_type:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    This function counts the number of occurrences of the string 'std' in a given string.\n\n    Parameters:\n    string (str): The input string to search for occurrences of 'std'.\n\n    Returns:\n    int: The number of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count if non_zero_count != 0 else 0\n    return ratio", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return circumference", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import math\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n    \"\"\"\n    magnitude = abs(num)\n    angle = math.atan2(num.imag, num.real)\n    return (magnitude, angle)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        element: The element to count occurrences of.\n\n    Returns:\n        int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tuple_input.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    num (int): The number for which even bits need to be set.\n\n    Returns:\n    int: The number with even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    \"\"\"\n\n    # Convert the number to binary representation\n    binary = bin(num)[2:]\n\n    # Set even bits to 1\n    binary = binary[:-1] + '1' + binary[-1]\n\n    # Convert the binary representation back to decimal\n    result = int(binary, 2)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list with the last element replaced by the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1\nlist1 = [1, 3, 5, 7, 9, 10]\nlist2 = [2, 4, 6, 8]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number for which set bits need to be counted.\n\n    Returns:\n    int: The count of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Raises:\n        ValueError: If n is greater than the length of the input list.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n    \"\"\"\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the list\")\n\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if (nums[i] ^ nums[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n    c (int): Third number.\n\n    Returns:\n    int: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a list to store the number of sequences for each length\n    sequences = [1] + [0] * n\n    \n    # Iterate through each length from 1 to n\n    for length in range(1, n+1):\n        # Iterate through each possible element for the current length\n        for element in range(2*length, m+1):\n            # Increment the number of sequences for the current length\n            sequences[length] += sequences[length-1]\n    \n    # Return the total number of sequences for length n\n    return sequences[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n\n    # Base case: if n is 0, it can be represented as sum of non-zero powers of 2\n    if n == 0:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as sum of non-zero powers of 2\n    for i in range(1, n):\n        if is_Sum_Of_Powers_Of_Two(n - 2**i):\n            return True\n\n    return False", "base_status": "fail", "plus_status": "timeout", "base_fail_tests": [[7]], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"racecar\")\n    7\n    >>> lps(\"python\")\n    1\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All characters in the input string are considered as palindromic subsequences of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Traverse the string diagonally from bottom-left to top-right\n    for l in range(2, n + 1):\n        for i in range(n - l + 1):\n            j = i + l - 1\n            if s[i] == s[j] and l == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i**2 - j**2 == n:\n                return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[true]]}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The index of the Bell number to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell number at index n.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    \"\"\"\n\n    def partition(n):\n        if n <= 1:\n            return 1\n        else:\n            return sum(partition(i) * bell_number(n - 1 - i) for i in range(n))\n\n    return partition(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[100]]}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    divisors_sum = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors_sum += i\n            if i != n // i:\n                divisors_sum += n // i\n    return divisors_sum\ndef amicable_numbers_sum(n):\n    amicable_sum = 0\n    for i in range(1, n+1):\n        sum_of_divisors_i = sum_of_divisors(i)\n        if sum_of_divisors_i <= n and sum_of_divisors_i != i:\n            sum_of_divisors_sum_of_divisors_i = sum_of_divisors(sum_of_divisors_i)\n            if sum_of_divisors_sum_of_divisors_i == i:\n                amicable_sum += i\n    return amicable_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    n (int): The target value.\n\n    Returns:\n    tuple or None: A tuple containing x and y, or None if no solution exists.\n    \"\"\"\n    for x in range(n + 1):\n        for y in range(n + 1):\n            if a * x + b * y == n:\n                return x, y\n    return None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[499, 499, 4000]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    volume = math.pi * radius**2 * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateral_surface_cube(5)\n    100.0\n    >>> lateral_surface_cube(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    lateral_surface_area = 4 * side_length ** 2\n    return lateral_surface_area\n\n# Test the function\nassert lateral_surface_cube(5) == 100.0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or str: The minimum value in the list.\n\n    Raises:\n        TypeError: If the list contains elements of different types.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    # Check if all elements in the list are of the same type\n    if not all(isinstance(elem, type(lst[0])) for elem in lst):\n        raise TypeError(\"List elements must be of the same type\")\n\n    # Initialize the minimum value as the first element in the list\n    min_val = lst[0]\n\n    # Iterate through the list and update the minimum value if a smaller value is found\n    for elem in lst:\n        if elem < min_val:\n            min_val = elem\n\n    return min_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the modified array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Raises:\n        ValueError: If the length of the modified array is less than the length of the input array.\n\n    Examples:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n        30\n    \"\"\"\n    if n < len(arr):\n        raise ValueError(\"Length of modified array should be greater than or equal to the length of the input array.\")\n\n    # Create a modified array by repeating the input array k times\n    modified_arr = arr * k\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array\n    for num in modified_arr:\n        # Update current sum\n        current_sum += num\n\n        # If current sum is greater than max sum, update max sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If current sum is negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, -30, -1], 4, 3]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(lst[::2])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 12, 1, 18, 8]]], "plus_fail_tests": [[[1, 3, 5, 7, 9]]]}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        tuple: A tuple of characters representing the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number and then the first number.\n    \"\"\"\n    return num2, num1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the input lists are empty or the specified number is negative.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if not list1 or not list2:\n        raise ValueError(\"Input lists cannot be empty.\")\n    if num < 0:\n        raise ValueError(\"Number of products to find cannot be negative.\")\n\n    products = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            product = list1[i] * list2[j]\n            products.append(product)\n\n    products.sort(reverse=True)\n    return products[:num]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [], 0]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers in which each number is the sum of the two preceding ones.\n    The first two Lucas numbers are 2 and 1.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_lucas(1)\n    1\n    >>> find_lucas(2)\n    2\n    >>> find_lucas(9)\n    76\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result\nkeys = [\"S001\", \"S002\", \"S003\", \"S004\"]\nvalues1 = [\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"]\nvalues2 = [85, 98, 89, 92]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        lst (list): A list of tuples in the format (name, aggregate).\n\n    Returns:\n        tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_aggregate_value = float('-inf')\n    max_aggregate_name = None\n\n    for name, aggregate in lst:\n        if aggregate > max_aggregate_value:\n            max_aggregate_value = aggregate\n            max_aggregate_name = name\n\n    return max_aggregate_name, max_aggregate_value", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]]], "plus_fail_tests": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    This function counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across the given tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The resulting tuple after performing division operation element-wise.\n\n    Raises:\n        ZeroDivisionError: If any element in `tuple2` is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the input age is less than 0.\n\n    \"\"\"\n    if age < 0:\n        raise ValueError(\"Age cannot be negative.\")\n    return age * 7", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[12]], "plus_fail_tests": [[100]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Removes odd numbers from a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list with odd numbers removed.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n\n    Args:\n        words (list): A list of strings containing words.\n\n    Returns:\n        tuple: A tuple containing two words starting with letter 'p'.\n\n    Raises:\n        ValueError: If there are less than two words starting with letter 'p' in the list.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"There are less than two words starting with letter 'p' in the list.\")\n    return p_words[:2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters the dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter by.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n\n    Args:\n        seq1 (list or tuple): The first sequence.\n        seq2 (list or tuple): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The input list of elements.\n        format_str (str): The format string to be applied.\n\n    Returns:\n        list: A new list with the elements formatted according to the given format string.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: The subtracted list.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3],[4,5,6])\n        [-3, -3, -3]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either `a` or `b` is not a positive number.\n\n    \"\"\"\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Both sides of the triangle must be positive numbers.\")\n\n    c = math.sqrt(a**2 + b**2)\n    return c", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is a negative number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(0)\n    0\n    >>> is_num_decagonal(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be a non-negative integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples):\n    \"\"\"\n    Extracts the rear element of each tuple in the given list and returns a new list.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n    \"\"\"\n    rear_list = []\n    for tup in tuples:\n        rear_list.append(tup[-1])\n    return rear_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('a')\n    97\n    >>> ascii_value('5')\n    53\n    \"\"\"\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character.\")\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum as 0\n    max_sum = 0\n\n    # Initialize the current sum as 0\n    curr_sum = 0\n\n    # Iterate through the array from index 0 to i\n    for j in range(i + 1):\n        # If the current element is greater than the given k, add it to the current sum\n        if arr[j] > k:\n            curr_sum += arr[j]\n\n    # Iterate through the array from index i+1 to n-1\n    for j in range(i + 1, n):\n        # If the current element is greater than the given k, add it to the current sum\n        if arr[j] > k:\n            curr_sum += arr[j]\n\n        # If the current sum is greater than the maximum sum, update the maximum sum\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    return max_sum\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\ni = 6\nk = 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division.\n\n    Raises:\n    ZeroDivisionError: If the divisor is zero.\n\n    Examples:\n    >>> find(10, 3)\n    3\n    >>> find(7, 2)\n    3\n    >>> find(10, 0)\n    Traceback (most recent call last):\n    ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if divisor == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    quotient = dividend // divisor\n    return quotient", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Check if the lengths of the tuples are different\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the tuples must be equal.\")\n\n    # Initialize an empty list to store the maximized tuples\n    maximized_tuples = []\n\n    # Iterate over the tuples and maximize each element\n    for i in range(len(tuple1)):\n        maximized_tuple = tuple(max(x, y) for x, y in zip(tuple1[i], tuple2[i]))\n        maximized_tuples.append(maximized_tuple)\n\n    return tuple(maximized_tuples)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The input list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [t[n] for t in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Parameters:\n    num (int): The number for which the left most unset bit needs to be set.\n\n    Returns:\n    int: The number with the left most unset bit set.\n\n    Example:\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n\n    # Count the number of bits in the given number\n    num_bits = num.bit_length()\n\n    # Iterate through the bits from left to right\n    for i in range(num_bits):\n        # Check if the current bit is unset\n        if (num & (1 << i)) == 0:\n            # Set the current bit and return the modified number\n            return num | (1 << i)\n\n    # If no unset bit is found, return the original number\n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000]]}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function checks if the parity of a given number is odd.\n\n    Parameters:\n    num (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef count_Primes_nums(n):\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    \n    # Count the occurrences of each character in the string\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    sums = []\n    for num in numbers:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sums.append(digit_sum)\n    return sums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): The positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Example:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    binomial_coeffs = [1]\n    for i in range(1, n + 1):\n        binomial_coeffs.append((binomial_coeffs[i - 1] * (n - i + 1)) // i)\n\n    # Sum the even index binomial coefficients\n    even_sum = sum(binomial_coeffs[::2])\n\n    return even_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: The resulting tuple after subtracting the elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive values.\")\n\n    volume = (math.pi * radius**2 * height) / 3\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n    \n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Get the frequency of the digit in the number\n        freq = num_str.count(digit)\n        \n        # Check if the frequency is greater than the digit itself\n        if freq > int(digit):\n            return False\n    \n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = ()\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1000000, 2000000, 3000000, 4000000, 4000000]]]}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the corresponding list.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublst) for sublst in lst)\n    max_lst = [sublst for sublst in lst if len(sublst) == max_len][0]\n    return max_len, max_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    Examples:\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    \"\"\"\n\n    def find_depth(dictionary, current_depth):\n        if isinstance(dictionary, dict):\n            if not dictionary:\n                return current_depth\n            else:\n                return max(find_depth(value, current_depth + 1) for value in dictionary.values())\n        else:\n            return current_depth\n\n    return find_depth(dictionary, 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": "python"}}]], "plus_fail_tests": [[{"1": null, "2": {"3": [1, 2, 3, "four", {"five": []}]}}]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n\n    Raises:\n    TypeError: If any of the input parameters are not numeric.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    \"\"\"\n\n    # Check if the input parameters are numeric\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"Input parameters must be numeric.\")\n\n    # Find the median\n    median = sorted([a, b, c])[1]\n\n    return float(median)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-tuple elements.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n        8\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n    for tup in lst:\n        if not isinstance(tup, tuple):\n            raise ValueError(\"Input list must contain only tuples.\")\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible sequence with sum of first and last n bits being equal\n    if n == 0:\n        return 2.0\n    \n    # Recursive case: count the number of sequences with sum of first and last n bits being equal\n    count = 0\n    for i in range(2):\n        count += count_binary_seq(n-1)\n    \n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1]], "plus_fail_tests": [[4]]}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_element = []\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive integer.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(10)\n    600\n    \"\"\"\n\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Size must be a positive integer.\")\n\n    return 6 * size ** 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-3]]}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple by the delimiter.\n\n    Args:\n        tup (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to be used. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(element) for element in tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        temp = []\n        for j in range(len(tuple1[i])):\n            temp.append(tuple1[i][j] * tuple2[i][j])\n        result.append(tuple(temp))\n    return tuple(result)\ntuple1 = ((1, 3), (4, 5), (2, 9), (1, 10))\ntuple2 = ((6, 7), (3, 9), (1, 1), (7, 3))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is a non-positive integer.\n\n    Examples:\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    216\n    >>> cube_Sum(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**3\n\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing the cubes of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list containing the cubes of each number.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    cubes = [num ** 3 for num in nums]\n    return cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Counts the number of sublists in a list that contain a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to search for.\n\n    Returns:\n        int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the starting position, ending position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n    \"\"\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["clearly!! we can see the sky"]], "plus_fail_tests": [["heavily and quickly we ran down the steep hill"]]}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n    \"\"\"\n    return string[1::2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term\n    b (float): Coefficient of x term\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola\n\n    Raises:\n    ValueError: If the parabola does not have a directrix\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is not valid\")\n\n    directrix = -b / (2 * a)\n    return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    >>> cal_sum(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be a non-negative integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    perrin_numbers = [3, 0, 2]\n\n    if n <= 2:\n        return sum(perrin_numbers[:n])\n\n    for _ in range(3, n):\n        next_number = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_number)\n\n    return sum(perrin_numbers)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise and tuples from the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The elementwise and tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): The input tuple containing strings.\n\n    Returns:\n        list: A list of rear index elements extracted from the input tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple or if any element in the tuple is not a string.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    rear_elements = []\n    for string in tup:\n        if not isinstance(string, str):\n            raise TypeError(\"Tuple elements must be strings\")\n        rear_elements.append(string[-1])\n\n    return rear_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values are negative.\n\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Input values cannot be negative.\")\n\n    median = (a + b) / 2\n    return median", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-88, 999999, 10000001]]}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Input date should be in yyyy-mm-dd format.\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters odd numbers from a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Round every number in the given list of numbers and return the total sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): A list of numbers to be rounded.\n\n    Returns:\n        int: The total sum multiplied by the length of the list.\n\n    Examples:\n        >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n        243\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    12.0\n    >>> find_Average_Of_Cube(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    total_sum = sum(i**3 for i in range(1, n+1))\n    average = total_sum / n\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The number for which the last digit needs to be found.\n\n    Returns:\n    int: The last digit of the given number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200.0\n    >>> rectangle_area(5.5, 3.2)\n    17.1\n    >>> rectangle_area(-1, 2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Length and width must be positive numbers.\n    \"\"\"\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be positive numbers.\")\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        raise ValueError(\"Invalid month number. Please provide a number between 1 and 12.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[2]]}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array of numbers.\n    num (int): The number to compare against the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in the given list.\n\n    Args:\n        lst (list): The input list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are present in both tuple_list1 and tuple_list2.\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]]], "plus_fail_tests": [[[[2, 3, 1], [6, 5, 4], [11, 12, 10]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): The input list of numbers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Example:\n    >>> find_remainder([ 100, 10, 5, 25, 35, 14 ],11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product *= num\n    return product % n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([5, 10, 15])\n    15\n    >>> big_sum([-1, -2, -3])\n    -4\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    max_value = max(arr)\n    min_value = min(arr)\n\n    return max_value + min_value", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product of a subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    max_product = arr[0]\n    max_positive = arr[0]\n    max_negative = arr[0]\n\n    for num in arr[1:]:\n        if num >= 0:\n            max_positive = max(max_positive * num, num)\n            max_negative = min(max_negative * num, num)\n        else:\n            temp = max_positive\n            max_positive = max(max_negative * num, num)\n            max_negative = min(temp * num, num)\n\n        max_product = max(max_product, max_positive)\n\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        temp = []\n        for j in range(len(result)):\n            temp.append(result[j] + [lst[i]])\n        result.extend(temp)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here += arr[i]\n        if max_ending_here < 0:\n            max_ending_here = 0\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    return max_so_far\narr = [-2, -3, 4, -1, -2, 1, 5, -3]\nn = len(arr)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of specified size from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    extracted_strings = [string for string in string_list if len(string) == size]\n    return extracted_strings", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Args:\n        arr (list): The input list of numbers.\n\n    Returns:\n        int: The maximum product of an increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(lst, elements):\n    \"\"\"\n    Counts the occurrence of all elements of a list in a tuple.\n\n    Args:\n        lst (tuple): The input tuple.\n        elements (list): The list of elements to count.\n\n    Returns:\n        int: The total count of occurrences.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] )\n        3\n    \"\"\"\n    count = 0\n    for element in elements:\n        count += lst.count(element)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The input string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    return sorted(lst) == list(range(min(lst), max(lst)+1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if a word containing 'z' exists in the given text.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if a word containing 'z' is found, False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n    \"\"\"\n    result = ''\n    i = 0\n    while i < len(string):\n        if string[i].isupper():\n            i += 1\n        else:\n            result += string[i]\n            i += 1\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    values = re.findall(r'\"([^\"]*)\"', string)\n    return values", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in ascending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in ascending order.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Math', 81), ('Physics', 83), ('Chemistry', 87)]\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1])\n    return sorted_items", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Math": 81, "Physics": 83, "Chemistry": 87}]], "plus_fail_tests": [[{"A": -10, "B": 20, "C": -5, "D": 15, "E": 0}]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The union of the elements of the two input tuples in sorted order.\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    num (int): The number for which the first digit needs to be found.\n\n    Returns:\n    int: The first digit of the given number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(num)[0]\n\n    # Convert the first digit back to an integer and return it\n    return int(first_digit)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The new character.\n\n    Returns:\n        str: The modified string with replaced characters.\n    \"\"\"\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters representing the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\narr = [5, 4, 7, 2, 1]\nn = len(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the input list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return string.lower()\n\ndef test_convert_to_lower():\n    \"\"\"\n    Test the convert_to_lower function.\n    \"\"\"\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n\n# Run the test function\ntest_convert_to_lower()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between num1 and num2.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 321)\n        12\n        >>> digit_distance_nums(1234, 4321)\n        17\n    \"\"\"\n    # Convert the integers to strings to access individual digits\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Calculate the length of the longer number\n    max_length = max(len(num1_str), len(num2_str))\n\n    # Pad the shorter number with zeros to match the length of the longer number\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n\n    # Calculate the sum of the per-digit difference\n    distance_sum = sum(abs(int(num1_str[i]) - int(num2_str[i])) for i in range(max_length))\n\n    return distance_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with toggled case.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    This function drops empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The updated dictionary with empty items removed.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple where each element is the sum of its neighboring elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: A new tuple with the pairwise addition of neighboring elements.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    result = []\n    for i in range(len(tup)):\n        if i == 0:\n            result.append(tup[i] + tup[i+1])\n        elif i == len(tup) - 1:\n            result.append(tup[i] + tup[i-1])\n        else:\n            result.append(tup[i] + tup[i-1] + tup[i+1])\n\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, 8, 10]]], "plus_fail_tests": [[[1, 2, -3, 4, 5]]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n        lst (list): The input list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = (n * (n + 1) * (2 * n + 1)) // 6\n    sum_of_numbers = (n * (n + 1)) // 2\n    return sum_of_cubes - sum_of_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    count = 0\n    num = 1\n\n    while count < n:\n        sum_of_squares += num**2\n        count += 1\n        num += 2\n\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\nlist1 = [1,2,3,4,5,6,7]\nlist2 = [10,20,30,40,50,60,70]\nlist3 = [100,200,300,400,500,600,700]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Raises:\n        TypeError: If n is not an integer.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(9876543210)\n    45\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub (list): The sublist to check.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    n = len(arr)\n    m = len(sub)\n\n    for i in range(n - m + 1):\n        if arr[i:i + m] == sub:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = list(set(numbers))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Removes uneven elements in the nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: The nested mixed tuple with uneven elements removed.\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    def extract_even_helper(nested):\n        if isinstance(nested, tuple):\n            return tuple(extract_even_helper(item) for item in nested if is_even(item))\n        else:\n            return nested if is_even(nested) else None\n\n    return extract_even_helper(nested_tuple)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = list(set(nums))\n    return unique_nums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 3, 4, 5]]], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        list: The sorted list of lists.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is a negative number.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n <= 1:\n        return 1\n\n    # Initialize the first two Catalan numbers\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    # Calculate the remaining Catalan numbers\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    4\n    >>> last_digit_factorial(12)\n    6\n    \"\"\"\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If base_edge or height is negative.\n\n    Examples:\n    >>> surface_Area(3, 4)\n    33.0\n    >>> surface_Area(0, 5)\n    0.0\n    >>> surface_Area(4, -2)\n    Traceback (most recent call last):\n    ...\n    ValueError: Base edge and height must be positive values.\n    \"\"\"\n\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive values.\")\n\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge * height / 2)\n    surface_area = base_area + lateral_area\n\n    return surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\ndef sum_of_product(n):\n    total = 0\n    for i in range(1, n + 1):\n        total += binomial_coefficient(n, i) * binomial_coefficient(n, i + 1)\n    return total\n\n# Test the function\nassert sum_of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import math\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list.\n        n (int): The index at which the list should be split.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        IndexError: If the index n is out of range.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5, 6, 52, 36, 12, 10]\n    \"\"\"\n    if n < 0 or n >= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    result = [[], []]\n    for sublist in lst:\n        result[0].append(sublist[0])\n        result[1].append(sublist[1])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address with leading zeroes.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    new_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(new_octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum_n = (n * (n + 1)) / 2\n    average_n = sum_n / n\n    return (sum_n, average_n)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Finds the difference between the first even and first odd number of a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n        >>> diff_even_odd([1,3,5,7])\n        Traceback (most recent call last):\n            ...\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_numbers[0] - odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with the first and last elements swapped.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return lst[-1:] + lst[1:-1] + lst[:1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    return sys.getsizeof(t)\nt = (\"A\", 1, \"B\", 2, \"C\", 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = tuple(set(tuple1) ^ set(tuple2))\n    return dissimilar_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The input string converted to uppercase.\n    \"\"\"\n    return string.upper()\n\ndef test_convert_to_uppercase():\n    \"\"\"\n    Test the convert_to_uppercase function.\n\n    Returns:\n    None\n    \"\"\"\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n\n# Run the test function\ntest_convert_to_uppercase()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([5, 10, 15, 20])\n        15\n        >>> big_diff([2, 2, 2, 2])\n        0\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_num = max(nums)\n    min_num = min(nums)\n    return max_num - min_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"\n        Checks if a number is lucid.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is lucid, False otherwise.\n        \"\"\"\n        if num == 1:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            return is_lucid(num - 2)\n\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise and returns the result.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the division of corresponding elements from list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> div_list([4,5,6],[1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1,2,3],[0,0,0])\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        try:\n            result.append(list1[i] / list2[i])\n        except ZeroDivisionError:\n            raise\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Finds even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list containing only the even numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list and returns the modified list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The list with the k'th element removed.\n\n    Raises:\n        IndexError: If the index k is out of range.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index out of range\")\n\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character found in the string.\n\n    Raises:\n        ValueError: If no repeated character is found in the string.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        'No repeated characters found'\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    raise ValueError(\"No repeated characters found\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abc"]], "plus_fail_tests": [[""]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The tuple obtained by performing element wise modulo on t1 and t2.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(numbers, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"numbers must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    return [num ** n for num in numbers]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words separated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The reversed string with words in reverse order.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()  # Split the string into a list of words\n    reversed_words = words[::-1]  # Reverse the order of the words\n    reversed_string = ' '.join(reversed_words)  # Join the reversed words with spaces\n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        height = radius\n        base = 2 * radius\n        area = 0.5 * base * height\n        return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[0]], "plus_fail_tests": [[0]]}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Search a string for a regex pattern.\n\n    Args:\n        string (str): The string to search in.\n        pattern (str): The regex pattern to search for.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not found in the string.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(f\"Pattern '{pattern}' not found in string.\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted arrays.\n\n    Raises:\n        ValueError: If k is less than 1 or greater than the sum of lengths of arr1 and arr2.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k should be between 1 and the sum of lengths of arr1 and arr2.\")\n\n    merged_arr = sorted(arr1 + arr2)\n    return merged_arr[k - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of the given matrix.\n\n    Args:\n        matrix (list): The matrix represented as a list of lists.\n        n (int): The column number to find the maximum value from.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the column number is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n    \"\"\"\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column number is out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    median_index = n - 1\n    median = (merged_list[median_index] + merged_list[median_index + 1]) / 2\n    return median\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nn = 5", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1], [2], 0]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset that satisfies the condition.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset):\n        if not numbers:\n            return current_subset\n\n        new_subset = [num for num in numbers if all(is_divisible(num, subset_num) for subset_num in current_subset)]\n        if len(new_subset) > len(current_subset):\n            return find_subset([num for num in numbers if num not in new_subset], new_subset)\n        else:\n            return find_subset([num for num in numbers if num not in current_subset], current_subset)\n\n    return len(find_subset(numbers, []))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584]]]}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_powers == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    nums = ''\n    letters = ''\n\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n\n    return letters + nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number for which to toggle the middle bits.\n\n    Returns:\n        int: The number with toggled middle bits.\n\n    Raises:\n        ValueError: If the input number is less than 2.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n        >>> toggle_middle_bits(11)\n        13\n    \"\"\"\n    if num < 2:\n        raise ValueError(\"Input number should be greater than or equal to 2.\")\n\n    # Count the number of bits in the number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle all the bits except the first and last bit\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "import re\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    pattern = r'\\b[^z]*z[^z]*\\b'\n    matches = re.findall(pattern, text)\n    return any(matches)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["zxyabc."]], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    A nonagonal number is a figurate number that represents a shape similar to a pentagonal number.\n    It can be calculated using the formula: n * (7 * n - 5) / 2.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Examples:\n    >>> is_nonagonal(10)\n    325\n    \"\"\"\n    return n * (7 * n - 5) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of names.\n\n    Returns:\n        int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array upto the given position.\n\n    Examples:\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n    [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        velocity (int): Wind velocity in km/h.\n        temperature (int): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -273.15 celsius.\n\n    Examples:\n        >>> wind_chill(120, 35)\n        40\n    \"\"\"\n    if velocity > 150 or temperature < -273.15:\n        raise ValueError(\"Invalid input: wind velocity should be less than or equal to 150 km/h and temperature should be greater than or equal to -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n    return round(wind_chill_index)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500, -50]]}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return all(char == string[0] for char in string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array to search in.\n        target: The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n            Returns -1 if the target number is not found.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9)\n        7\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        -1\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length.\")\n\n    result = {}\n    for i in range(0, len(t), 2):\n        result[t[i]] = t[i+1]\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4])\n        56\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n\n    for i in range(n):\n        sublist_product = 1\n        for j in range(i, n):\n            sublist_product *= lst[j]\n            total_sum += sublist_product\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    total_sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            total_sum += (nums[i] ^ nums[j])\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced.\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n    \n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n    \n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap root with the last element\n        heapify(arr, i, 0)  # Heapify the reduced heap\n    \n    return arr", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 0]]], "plus_fail_tests": []}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    num_items = num_items % len(lst)  # Handle cases where num_items is larger than the length of the list\n    return lst[-num_items:] + lst[:-num_items]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiou]'\n    return re.match(pattern, string, re.IGNORECASE) is not None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n    \"\"\"\n    modified_string = string.replace(' ', '_')\n    return modified_string", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["The_Avengers"]], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1, 2, 3, 4, 0, 0]\n    \"\"\"\n    zeroes = lst.count(0)  # Count the number of zeroes in the list\n    lst = [num for num in lst if num != 0]  # Remove all zeroes from the list\n    lst.extend([0] * zeroes)  # Append the zeroes at the end of the list\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    \"\"\"\n    This function takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n    Args:\n        numbers (tuple): The input tuple of numbers.\n\n    Returns:\n        tuple: The resulting tuple of length N.\n\n    Raises:\n        ValueError: If the input tuple has less than 2 elements.\n\n    Examples:\n        >>> multiply_elements((1, 5, 7, 8, 10))\n        (5, 35, 56, 80)\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"Input tuple must have at least 2 elements.\")\n\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i+1])\n\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12]]], "plus_fail_tests": [[[]]]}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(s):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    s (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(s)\n        parts = s.split('.')\n        if len(parts) == 2 and len(parts[1]) <= 2:\n            return True\n    except ValueError:\n        pass\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    thirty_day_months = [4, 6, 9, 11]  # Months that have 30 days\n\n    if month_number in thirty_day_months:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of pairs of consecutive items.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has fewer than two elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to the tuple and returns the resulting tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        dictionary (dict): The dictionary to be added.\n\n    Returns:\n        tuple: The resulting tuple with the dictionary added.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tup + (dictionary,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        buy_price (float): The price at which the asset was bought.\n        sell_price (float): The price at which the asset was sold.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return buy_price == sell_price", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if len(stack) == 0:\n                return False\n            last_opening_bracket = stack.pop()\n            if opening_brackets.index(last_opening_bracket) != closing_brackets.index(char):\n                return False\n\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    quotation_marks = re.findall(r'\"([^\"]*)\"', string)\n    return quotation_marks", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if arr[i] > arr[2 * i + 1] or (2 * i + 2 < n and arr[i] > arr[2 * i + 2]):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper():\n            modified_words.append(word)\n        else:\n            modified_words.append(word[0] + ' ' + word[1:])\n    return ' '.join(modified_words)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    area = math.sqrt(2) * math.pow(side_length, 2)\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples representing records with a name and a value.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the length of the records list.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the length of the records list.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the value\n    return sorted_records[:k]  # Return the first k records", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of numbers.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n            if string_list[j] == string_list[i][::-1]:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["julia", "best", "tseb", "for", "ailuj"]]], "plus_fail_tests": [[["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): A sorted list of integers.\n        value (int): The value to be inserted.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n\n    Examples:\n        >>> left_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    if arr != sorted(arr):\n        raise ValueError(\"Input list must be sorted.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference as the maximum possible value\n    min_diff = float('inf')\n    \n    # Iterate through the array to find the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 3, 19, 18, 25], 6]], "plus_fail_tests": [[[15, 12, 20, 30, 8, 4, 19, 37, 22, 28, 11, 25], 12]]}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n        >>> sum_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: The input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    lst.extend(tup)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    num_dict = {}\n    \n    for num in nums:\n        complement = target_sum - num\n        if complement in num_dict:\n            count += num_dict[complement]\n        if num in num_dict:\n            num_dict[num] += 1\n        else:\n            num_dict[num] = 1\n    \n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        t (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return None in t", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n        string (str): The string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple or None: A tuple containing the matched substring, starting position, and ending position.\n                        Returns None if there is no match.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        start_pos = string.index(substring)\n        end_pos = start_pos + len(substring)\n        return substring, start_pos, end_pos\n    else:\n        return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    unique_elements = set(lst)\n    return sum(unique_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n    result.append(current_sublist)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): The string representation of a tuple.\n\n    Returns:\n        tuple: The integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(10, 20, 30)\")\n        (10, 20, 30)\n    \"\"\"\n    try:\n        # Remove the parentheses and split the string by commas\n        tuple_elements = tuple_str.strip('()').split(', ')\n        # Convert each element to an integer\n        int_tuple = tuple(map(int, tuple_elements))\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Find the product of the first even and odd numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the first even and odd numbers.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_numbers[0] * odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds and returns a list of perfect squares between the given start and end numbers.\n\n    Parameters:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the start and end numbers.\n    \"\"\"\n    squares = []\n    for num in range(start, end+1):\n        if num >= 0 and int(num**0.5)**2 == num:\n            squares.append(num)\n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1, 0]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in the given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1,2,4])\n    14\n    >>> odd_length_sum([1,2,4,6,8])\n    44\n    >>> odd_length_sum([1,2,4,6,8,10])\n    60\n    \"\"\"\n\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i) % 2 == 0:\n                total_sum += sum(arr[i:j+1])\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is defined as the sum of the factorial of its digits.\n    For example, 145 is a star number because 145 = 1!-- + 4!-- + 5!-- = 145.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    299\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    def factorial(num):\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def is_star_number(num):\n        return num == sum(factorial(int(digit)) for digit in str(num))\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_star_number(num):\n            count += 1\n\n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combination = (tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1])\n            combinations.append(combination)\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): A sorted list of integers.\n        value (int): The value to be inserted.\n\n    Returns:\n        int: The index where the value should be inserted to maintain sorted order.\n\n    Examples:\n        >>> right_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] >= value:\n            return i\n    return len(arr)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target: The element to find the last position of.\n\n    Returns:\n        int: The last position of the element in the array, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        int: The number of lists in the input list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of elements.\n        string (str): The string to be included in the tuple.\n\n    Returns:\n        tuple: A new tuple with elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The sum of all the values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The input tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    return tuple(filter(lambda x: not isinstance(x, tuple), tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return re.search(pattern, text) is not None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function checks if a given text starts with 'a' and ends with 'b'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    match = re.match(pattern, text)\n    if match:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    \"\"\"\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(10, 3)\n        36\n    \"\"\"\n    if not isinstance(num, int) or not isinstance(d, int):\n        raise ValueError(\"Both arguments must be integers.\")\n\n    if num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    count = 0\n    if a == b == c:\n        count = 3\n    elif a == b or b == c or a == c:\n        count = 2\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists of integers.\n\n    Returns:\n        list: The list in lst whose sum of elements is the highest.\n\n    Raises:\n        ValueError: If lst is an empty list.\n\n    Examples:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_sum = float('-inf')\n    max_sum_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sum_list = sublist\n\n    return max_sum_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tuple_input, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tuple_input (tuple): The input tuple to check.\n        k: The value to search for in the tuple.\n\n    Returns:\n        bool: True if the k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tuple_input", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n\n    # Use binary search to find the square root\n    left, right = 1, num\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == num:\n            return True\n        elif mid * mid < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function finds the sum of even factors of a number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Example:\n    >>> sumofFactors(18)\n    26\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the given range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers within the given range.\n\n    Raises:\n    ValueError: If l is greater than r or either l or r is negative.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    25\n    >>> sum_in_range(10, 1)\n    Traceback (most recent call last):\n    ...\n    ValueError: l must be less than or equal to r\n    >>> sum_in_range(-1, 5)\n    Traceback (most recent call last):\n    ...\n    ValueError: l and r must be positive integers\n    \"\"\"\n\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r\")\n    if l < 0 or r < 0:\n        raise ValueError(\"l and r must be positive integers\")\n\n    sum_odd = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            sum_odd += num\n\n    return sum_odd", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is a triangular number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a triangular number, False otherwise.\n\n        \"\"\"\n        triangular = 0\n        i = 1\n        while triangular < num:\n            triangular += i\n            i += 1\n        return triangular == num\n\n    index = 1\n    triangular = 1\n    while True:\n        if len(str(triangular)) == n:\n            return index\n        index += 1\n        triangular += index", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find nth polite number.\n\n    A number is called polite if it has no prime factors greater than 3.\n\n    Args:\n        n (int): The index of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Examples:\n        >>> is_polite(7)\n        11\n    \"\"\"\n    count = 0\n    num = 2\n    while count < n:\n        is_polite = True\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                if i > 3 or num // i > 3:\n                    is_polite = False\n                    break\n        if is_polite:\n            count += 1\n        num += 1\n    return num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    result = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n-1)\n        for sub_combination in sub_combinations:\n            result.append(sub_combination + (lst[i],))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}