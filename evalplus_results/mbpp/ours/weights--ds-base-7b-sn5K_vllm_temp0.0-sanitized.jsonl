{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the shared elements.\n\n    Examples:\n    >>> similar_elements((3, 4, 5, 6),(5, 7, 4, 10))\n    [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Parameters:\n    numbers (list): A list of numbers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of n largest integers in descending order.\n    \"\"\"\n    # Create a min-heap using heapq module\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Convert the heap to a list and reverse it to get descending order\n    largest_numbers = list(heap)\n    largest_numbers.reverse()\n\n    return largest_numbers"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the numbers to get the bit positions where they differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    set_bit_count = bin(xor_result).count('1')\n\n    # Check if the count is exactly 1\n    return set_bit_count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words which are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the squares of each number in the input list.\n    \"\"\"\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"abcd\")\n    4\n    \"\"\"\n    # Check if the string is already a rotation of itself\n    if string == string[1:] + string[0]:\n        return 1\n\n    # Find the length of the string\n    n = len(string)\n\n    # Find the minimum number of rotations\n    rotations = n\n    for i in range(1, n):\n        if string[i:] + string[:i] == string:\n            rotations = min(rotations, i)\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n\n    Parameters:\n    string (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    if char in string:\n        first_index = string.find(char)\n        last_index = string.rfind(char)\n        modified_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n        return modified_string\n    else:\n        return string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A 2D list representing the matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into a list of words\n    words = input_string.split(\"_\")\n\n    # Check if each word is lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of the side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string1 (str): The first string.\n    string2 (str): The second string.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    clean_chars = set(string1) - set(string2)\n    return ''.join(char for char in string1 if char in clean_chars)"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    if n < 10:\n        return False\n\n    digits = [int(digit) for digit in str(n)]\n    product = digits[0]\n\n    for digit in digits[1:]:\n        product *= digit\n\n    return product == n"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Convert the reversed number back to an integer\n    reversed_num = int(reversed_num)\n\n    # Check if the number is one less than twice its reverse\n    if num == (reversed_num * 2) - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n\n    Parameters:\n    digits (list): A list of digits.\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted digits to an integer\n    max_num = int(''.join(map(str, digits)))\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite sign, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-10, -20, -1, -45, -99])\n        -99\n        >>> smallest_num([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n    return min(numbers)"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        marks (list): A list of tuples, where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n        list: A new list of tuples sorted based on the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Parameters:\n    lst (list): The list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    # Base cases\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n\n    # Initialize the table\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    # Fill the table\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if a given array is monotonic.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n    decreasing = arr[0] >= arr[-1]\n\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        if decreasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert is_monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 2, 1, 2, 3, 4, 5, 6]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == True\nassert is_monotonic([20, 19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list.\n    sublst (list): The sublist to check for.\n\n    Returns:\n    bool: True if the sublist is present in the main list, False otherwise.\n    \"\"\"\n    if len(sublst) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in a list have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in tuples]\n    return len(set(lengths)) == 1"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list using the Comb Sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(0, len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(i, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the sequence follows the patterns given in the patterns array.\n\n    Parameters:\n    patterns (list): A list of patterns.\n    sequence (list): A list of elements.\n\n    Returns:\n    bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples from a given list of tuples that have all elements divisible by k.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of odd-positioned digits and even-positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through the digits of the number\n    for i in range(len(number_str)):\n        # Convert the digit back to an integer\n        digit = int(number_str[i])\n\n        # Add the digit to the appropriate sum based on its position\n        if i % 2 == 0:\n            even_sum += digit\n        else:\n            odd_sum += digit\n\n    # Calculate the difference between the sums\n    difference = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    if difference % 11 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check the length of.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)"}
{"task_id": "Mbpp/84", "solution": "def sequence(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position of the number in the sequence.\n\n    Returns:\n    int: The nth number in the sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> sequence(10)\n    6\n    >>> sequence(1)\n    1\n    >>> sequence(2)\n    1\n    >>> sequence(3)\n    1\n    >>> sequence(4)\n    2\n    >>> sequence(5)\n    2\n    >>> sequence(6)\n    3\n    >>> sequence(7)\n    4\n    >>> sequence(8)\n    4\n    >>> sequence(9)\n    5\n    >>> sequence(10)\n    6\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n <= 2:\n        return 1\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Function to find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n\n    Examples:\n    >>> freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Parameters:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n    \"\"\"\n    if n <= 10:\n        return 0\n    else:\n        return n - 1"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    int: The length of the longest word.\n    \"\"\"\n    longest_length = 0\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    return longest_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that alternates between even and odd digits.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    digits = [int(digit) for digit in str(num)]\n    for i in range(len(digits) - 1):\n        if (digits[i] % 2 == 0 and digits[i+1] % 2 == 0) or (digits[i] % 2 != 0 and digits[i+1] % 2 != 0):\n            return False\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> find_min_length([[1], [1, 2]])\n    1\n    >>> find_min_length([[1, 2], [1, 2, 3]])\n    2\n    >>> find_min_length([[1, 2, 3], [1, 2, 3, 4]])\n    3\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for sublist in lst:\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of n.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    \"\"\"\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    dict: A dictionary containing the frequency of each element in the flattened list of lists.\n\n    Examples:\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    frequency = {}\n    for sublist in lst:\n        for element in sublist:\n            if element in frequency:\n                frequency[element] += 1\n            else:\n                frequency[element] = 1\n    return frequency"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Function to multiply all the numbers in a list and divide with the length of the list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> multiply_num([8, 2, 3, -1, 7])\n    -67.2\n    >>> multiply_num([1, 2, 3])\n    2.0\n    >>> multiply_num([0, 0, 0])\n    0.0\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Parameters:\n    decimal (int): The decimal number to convert.\n\n    Returns:\n    str: The binary equivalent of the decimal number, represented as a string with no leading zeros.\n    \"\"\"\n    if decimal == 0:\n        return '0'\n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The starting integer.\n\n    Returns:\n    int: The next smallest palindrome.\n    \"\"\"\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find.\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If k is out of range.\n\n    Examples:\n    >>> kth_element([12,3,5,7,19], 2)\n    3\n    >>> kth_element([12,3,5,7,19], 5)\n    19\n    >>> kth_element([12,3,5,7,19], 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_case_string):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_case_string (str): The snake case string to convert.\n\n    Returns:\n    str: The camel case string.\n    \"\"\"\n    words = snake_case_string.split('_')\n    camel_case_string = ''.join(word.capitalize() for word in words)\n    return camel_case_string"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using the recursive formula:\n    a(n, m) = a(n-1, m) + m * a(n-1, m-1)\n\n    Parameters:\n    n (int): The first parameter\n    m (int): The second parameter\n\n    Returns:\n    int: The Eulerian number a(n, m)\n    \"\"\"\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return eulerian_num(n-1, m) + m * eulerian_num(n-1, m-1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists of strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n\n    Parameters:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n    \"\"\"\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Parameters:\n    lst (list): The list to be appended.\n    tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n    tuple: The resulting tuple after appending the list.\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    def rotate_binary_string(binary_string):\n        \"\"\"\n        Helper function to rotate a binary string by one position.\n\n        Parameters:\n        binary_string (str): The binary string to be rotated.\n\n        Returns:\n        str: The rotated binary string.\n        \"\"\"\n        return binary_string[-1] + binary_string[:-1]\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string)\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Parameters:\n    nested_lists (list): A list of lists.\n\n    Returns:\n    list: A list of common elements found in all the nested lists.\n\n    Examples:\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): A tuple of positive integers.\n\n    Returns:\n    int: The single integer formed by concatenating the elements of the tuple.\n\n    Examples:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    >>> tuple_to_int((4, 5, 6))\n    456\n    \"\"\"\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of strings split on the space character.\n    \"\"\"\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n\n    Returns:\n    int: The element that appears only once.\n\n    Raises:\n    ValueError: If the input array is empty or has an odd length.\n\n    Examples:\n    >>> search([1,1,2,2,3])\n    3\n    >>> search([1,1,2,2,3,3,4,4,5])\n    5\n    >>> search([1,1,2,2,3,3,4,4])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array must have an odd length.\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    if len(arr) % 2 == 0:\n        raise ValueError(\"Input array must have an odd length.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    Write a function to sum all amicable numbers from 1 to a specified number.\n\n    Parameters:\n    n (int): The upper limit for the range of numbers to check for amicable numbers.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    def sum_divisors(num):\n        \"\"\"\n        Helper function to calculate the sum of divisors of a number.\n\n        Parameters:\n        num (int): The number to calculate the sum of divisors for.\n\n        Returns:\n        int: The sum of divisors of the given number.\n        \"\"\"\n        divisors_sum = 0\n        for i in range(1, int(num ** 0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum - num\n\n    amicable_sum = 0\n    for num in range(1, n + 1):\n        divisor_sum = sum_divisors(num)\n        if divisor_sum != num and sum_divisors(divisor_sum) == num:\n            amicable_sum += num\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): A binary string.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of a and b.\n    \"\"\"\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The minimum length of words to be included.\n    words (str): A string of words separated by spaces.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n    \"\"\"\n    word_list = words.split()\n    long_words_list = [word for word in word_list if len(word) > n]\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Parameters:\n    matrix (list of lists): The matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Check if the matrix is square\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    # Calculate the sum of the main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n\n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(matrix[i][len(matrix) - 1 - i] for i in range(len(matrix)))\n\n    # Check if all sums are equal\n    if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and row_sums[0] == col_sums[0] == main_diag_sum == sec_diag_sum:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    item_count = {}\n    max_count = 0\n    max_item = None\n\n    for item in lst:\n        if item in item_count:\n            item_count[item] += 1\n        else:\n            item_count[item] = 1\n\n        if item_count[item] > max_count:\n            max_count = item_count[item]\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    string_list = list(string)\n    vowel_list = [char for char in string if char in vowels]\n    vowel_list.reverse()\n    vowel_index = 0\n    for i in range(len(string_list)):\n        if string_list[i] in vowels:\n            string_list[i] = vowel_list[vowel_index]\n            vowel_index += 1\n    return \"\".join(string_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    str: The string representation of the input tuple.\n    \"\"\"\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers of a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n    \"\"\"\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n    return negative_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    Examples:\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.181818\n    \"\"\"\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = sum(1 for num in arr if num != 0)\n    ratio = zero_count / non_zero_count\n    return ratio"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as sum of non-zero powers of 2\n    for i in range(1, n):\n        if is_Sum_Of_Powers_Of_Two(n - 2**i):\n            return True\n\n    return False"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    return set(num for sublist in lst for num in sublist)"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def flip(lst, k):\n        \"\"\"\n        Flips the first k elements of a list in place.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        k (int): The number of elements to be flipped.\n\n        Returns:\n        list: The flipped list.\n        \"\"\"\n        i = 0\n        while i < k // 2:\n            lst[i], lst[k - i - 1] = lst[k - i - 1], lst[i]\n            i += 1\n        return lst\n\n    def find_max_index(lst, n):\n        \"\"\"\n        Finds the index of the maximum element in a list.\n\n        Parameters:\n        lst (list): The list to search.\n        n (int): The number of elements to consider.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(1, n):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    while n > 1:\n        max_index = find_max_index(lst, n)\n        if max_index != n - 1:\n            lst = flip(lst, max_index + 1)\n            lst = flip(lst, n)\n        n -= 1\n\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n    list3 (list): The third list.\n\n    Returns:\n    int: The count of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): A tuple of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Examples:\n    >>> max_Abs_Diff((2,1,5,3))\n    4\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    n (int): The target value.\n\n    Returns:\n    tuple: A tuple containing x and y, or None if no solution exists.\n    \"\"\"\n    # Check if a and b are relatively prime\n    if gcd(a, b) != 1:\n        return None\n\n    # Use the extended Euclidean algorithm to find the integers x and y\n    x, y, _ = extended_gcd(a, b)\n\n    # Check if n is a multiple of the GCD of a and b\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Calculate the required x and y\n    x *= n // gcd(a, b)\n    y *= n // gcd(a, b)\n\n    return x, y\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers using the Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The GCD of a and b.\n    \"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculates the integers x and y such that ax + by = gcd(a, b) using the extended Euclidean algorithm.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    tuple: A tuple containing x, y, and the GCD of a and b.\n    \"\"\"\n    if b == 0:\n        return 1, 0, a\n    x, y, gcd = extended_gcd(b, a % b)\n    return y, x - (a // b) * y, gcd"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst1 (list): The list from which elements will be removed.\n        lst2 (list): The list of elements to be removed.\n\n    Returns:\n        list: The updated list with elements from lst2 removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The number to calculate the sum up to.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    return 2 ** (n - 1).bit_length()"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the number in the list.\n    \"\"\"\n    return lst.count(num)"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    lst (list): The input list of numbers.\n    start (int): The starting index of the range.\n    end (int): The ending index of the range.\n\n    Returns:\n    int: The sum of numbers within the specified range.\n\n    Raises:\n    ValueError: If the start or end indices are out of range.\n\n    Examples:\n    >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\n    29\n    \"\"\"\n    if start < 0 or end >= len(lst) or start > end:\n        raise ValueError(\"Invalid range indices\")\n\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of occurrences of the string 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(tup[0])\n    for element in tup:\n        if not isinstance(element, data_type):\n            return False\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): Sorted array.\n    n (int): Length of the array.\n    element: Element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority element, False otherwise.\n    \"\"\"\n    # Find the first occurrence of the element\n    first_occurrence = binary_search(arr, 0, n-1, element)\n\n    # Check if the element occurs more than n/2 times\n    if first_occurrence != -1 and first_occurrence + n//2 < n and arr[first_occurrence + n//2] == element:\n        return True\n    else:\n        return False\ndef binary_search(arr, low, high, element):\n    \"\"\"\n    Perform binary search to find the first occurrence of an element in a sorted array.\n\n    Parameters:\n    arr (list): Sorted array.\n    low (int): Starting index of the search range.\n    high (int): Ending index of the search range.\n    element: Element to search for.\n\n    Returns:\n    int: Index of the first occurrence of the element, or -1 if not found.\n    \"\"\"\n    if high >= low:\n        mid = (low + high) // 2\n\n        if (mid == 0 or element > arr[mid - 1]) and arr[mid] == element:\n            return mid\n        elif element > arr[mid]:\n            return binary_search(arr, mid + 1, high, element)\n        else:\n            return binary_search(arr, low, mid - 1, element)\n\n    return -1\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nelement = 3"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number to count set bits in.\n\n    Returns:\n    int: The count of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with characters with odd index values removed.\n    \"\"\"\n    return string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a specified character.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    return string.replace(\" \", character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to be returned.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Examples:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n\n    >>> larg_nnum([1, 2, 3, 4, 5], 3)\n    [5, 4, 3]\n\n    >>> larg_nnum([10, 20, 30, 40, 50], 1)\n    [50]\n    \"\"\"\n    # Sort the list in descending order\n    lst.sort(reverse=True)\n\n    # Return the first n items from the sorted list\n    return lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with all even bits set.\n    \"\"\"\n    # Create a mask to set even bits\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits\n    return num | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Function to find the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The maximum value of each element in the sequence.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of possible sequences.\n    \"\"\"\n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize the dynamic programming table\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Fill the dynamic programming table\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n        dp[2][i] = 2\n\n    for i in range(3, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = sum(dp[i - 1][k] for k in range(j // 2, j + 1))\n\n    # Return the result\n    return sum(dp[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The modified first list.\n    \"\"\"\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n    \"\"\"\n    # Find the square root of the given number\n    sqrt_num = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt_num ** 2 == num:\n        # If the square root is a perfect square, return the next perfect square\n        return (sqrt_num + 1) ** 2\n    else:\n        # If the square root is not a perfect square, find the next perfect square\n        next_perfect_square = (sqrt_num + 1) ** 2\n        return next_perfect_square"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n\n    A bitonic subsequence is a sequence that is first increasing and then decreasing.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Calculate the maximum sum of increasing subsequence from the left side of the peak\n    left_sum = [0] * n\n    left_sum[0] = arr[0]\n    for i in range(1, peak):\n        if arr[i] > arr[i-1]:\n            left_sum[i] = left_sum[i-1] + arr[i]\n        else:\n            left_sum[i] = arr[i]\n\n    # Calculate the maximum sum of decreasing subsequence from the right side of the peak\n    right_sum = [0] * n\n    right_sum[-1] = arr[-1]\n    for i in range(n-2, peak, -1):\n        if arr[i] > arr[i+1]:\n            right_sum[i] = right_sum[i+1] + arr[i]\n        else:\n            right_sum[i] = arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = max(left_sum)\n    for i in range(peak):\n        for j in range(peak, n):\n            if left_sum[i] + right_sum[j] > max_sum:\n                max_sum = left_sum[i] + right_sum[j]\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n    \"\"\"\n    # Create a 2D table to store the lengths of palindromic subsequences\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: single characters are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table diagonally\n    for cl in range(2, n + 1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if string[i] == string[j] and cl == 2:\n                dp[i][j] = 2\n            elif string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occcurences of the element in the tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, theta) of the complex number.\n    \"\"\"\n    r = abs(complex_number)\n    theta = math.atan2(complex_number.imag, complex_number.real)\n    return (r, theta)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of a list and returns a list with a tuple for each combination.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The length of the combinations.\n\n    Returns:\n    list: A list with tuples representing the combinations.\n\n    Examples:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    if n == 0:\n        return [()]\n\n    combinations = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n - 1)\n        for sub_combination in sub_combinations:\n            combinations.append((lst[i],) + sub_combination)\n\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than the given non-negative number.\n    \"\"\"\n    if n < 2:\n        return 0\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n\n    return sum(primes[:n])"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the order of two numbers and returns a tuple with the second number first and the first number second.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n\n    Returns:\n    tuple: A tuple containing the second number first and the first number second.\n    \"\"\"\n    return num2, num1"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the maximum elements from both input tuples.\n\n    Examples:\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    # Check if the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    # Create a new tuple with the maximum elements from both input tuples\n    new_tuple = tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\n    return new_tuple"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across the given tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n    ZeroDivisionError: If an element in tuple2 is zero.\n\n    Examples:\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length.\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is L.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return first_part, second_part"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n    \"\"\"\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Parameters:\n    lst (list): The input list to be split.\n    n (int): The number of elements to skip between each split.\n\n    Returns:\n    list: A list of lists, where each sublist contains the elements from the original list split at every nth element.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return sum(num ** 2 for num in odd_numbers)"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n - 1) + n"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the input character.\n    \"\"\"\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            even_sum += lst[i]\n    return even_sum"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    return [tup[-1] for tup in lst]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple with the subtracted elements.\n\n    Raises:\n    ValueError: If the length of the tuples are not equal.\n\n    Examples:\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n    int: The sum of even index binomial coefficients for the given positive integer n.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    for i in range(n + 1):\n        # Calculate the binomial coefficient using the formula (n k) = (n k-1) * (n-k+1) / k\n        coeff = (n - i) * (n - i + 1) // (i + 1)\n\n        # Add the even index binomial coefficients to the sum\n        if i % 2 == 0:\n            sum += coeff\n\n    return sum"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n    n (int): The minimum value to filter the dictionary.\n\n    Returns:\n    dict: A new dictionary containing only the entries with values greater than or equal to n.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Sequential search algorithm to find an element in an array.\n\n    Parameters:\n    arr (list): The input array.\n    element: The element to search for.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is found and the index position of the element (or -1 if not found).\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(lst1, lst2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Parameters:\n    lst1 (list): The first list.\n    lst2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of lst1 and lst2.\n\n    Raises:\n    ValueError: If the length of lst1 and lst2 are not equal.\n\n    Examples:\n    >>> sub_list([1, 2, 3],[4,5,6])\n    [-3, -3, -3]\n    >>> sub_list([1, 2, 3],[4,5])\n    Traceback (most recent call last):\n        ...\n    ValueError: Length of lst1 and lst2 must be equal.\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Length of lst1 and lst2 must be equal.\")\n    return [x - y for x, y in zip(lst1, lst2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Parameters:\n    num (int): The integer to be checked.\n\n    Returns:\n    bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    freq = [0] * 10  # Create a list to store the frequency of each digit\n\n    # Count the frequency of each digit\n    while num > 0:\n        digit = num % 10\n        freq[digit] += 1\n        num //= 10\n\n    # Check if the frequency is less than or equal to the digit\n    for i in range(10):\n        if freq[i] > i:\n            return False\n\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in a list are equal to a given element.\n\n    Parameters:\n    lst (list): The input list.\n    element: The element to check for.\n\n    Returns:\n    bool: True if all items in the list are equal to the element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the original array.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array.\n    \"\"\"\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum * k\n\n    # If the sum of the original array is positive, calculate the maximum sum of a contiguous subarray in the modified array\n    # by adding the original sum to the maximum sum of a contiguous subarray in the original array\n    if original_sum > 0:\n        modified_sum += (k - 1) * original_sum\n\n    # If the sum of the original array is negative, calculate the maximum sum of a contiguous subarray in the modified array\n    # by taking the maximum of the maximum sum of a contiguous subarray in the original array and the sum of the original array\n    # multiplied by k\n    elif original_sum < 0:\n        modified_sum = max(modified_sum, original_sum * k)\n\n    return modified_sum\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i * i\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum length list and the maximum length list itself.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_list[0]"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    a (int or float): The dividend.\n    b (int or float): The divisor.\n\n    Returns:\n    int: The quotient of a divided by b, rounded down to the nearest integer.\n\n    Raises:\n    ZeroDivisionError: If b is zero.\n\n    Examples:\n    >>> find(10, 3)\n    3\n    >>> find(10.5, 3)\n    3\n    >>> find(10, 3.5)\n    2\n    >>> find(10.5, 3.5)\n    2\n    >>> find(10, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if b == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return int(a // b)"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of the first side.\n    b (float): Length of the second side.\n\n    Returns:\n    float: Length of the third side.\n\n    Raises:\n    ValueError: If either a or b is not a positive number.\n\n    Examples:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    \"\"\"\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Sides must be positive numbers.\")\n    c = math.sqrt(a**2 + b**2)\n    return c"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): A list of heterogeneous values.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    if len(lst) == 0:\n        raise ValueError(\"List cannot be empty.\")\n\n    max_value = lst[0]\n    for item in lst:\n        if item > max_value:\n            max_value = item\n\n    return max_value"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): Input array.\n\n    Returns:\n    int: Number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples, where each tuple contains a name and an aggregate.\n\n    Returns:\n        tuple: The tuple with the maximum aggregate.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_aggregate_name = lst[0][0]\n    max_aggregate_value = lst[0][1]\n\n    for name, aggregate in lst:\n        if aggregate > max_aggregate_value:\n            max_aggregate_name = name\n            max_aggregate_value = aggregate\n\n    return (max_aggregate_name, max_aggregate_value)"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): Length of the binary sequence.\n\n    Returns:\n    float: Count of binary sequences.\n    \"\"\"\n    # Base case: If n is 0, there is only one possible sequence\n    if n == 0:\n        return 1\n\n    # Recursive case: Count of binary sequences with n bits\n    count = 0\n    for i in range(2):\n        count += count_binary_seq(n - 1)\n\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    max_depth = 0\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n\n    return max_depth + 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list that start with the letter 'p'.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    tuple: A tuple containing the two words that start with the letter 'p'.\n\n    Raises:\n    ValueError: If the list does not contain at least two words starting with the letter 'p'.\n\n    Examples:\n    >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n    ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.lower().startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"The list does not contain at least two words starting with the letter 'p'.\")\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    arr (list): The input array.\n    n (int): The length of the array.\n    i (int): The index up to which the prefix sum is calculated.\n    k (int): The index of the element after i.\n\n    Returns:\n    int: The maximum sum of increasing subsequence.\n    \"\"\"\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Initialize the current sum to 0\n    curr_sum = 0\n\n    # Iterate from 0 to i-1\n    for j in range(i):\n        # If the current element is greater than the previous element\n        if arr[j] < arr[j+1]:\n            # Add the current element to the current sum\n            curr_sum += arr[j]\n\n            # Update the maximum sum if the current sum is greater\n            if curr_sum > max_sum:\n                max_sum = curr_sum\n        else:\n            # Reset the current sum to 0\n            curr_sum = 0\n\n    # Add the kth element to the current sum\n    curr_sum += arr[k]\n\n    # Update the maximum sum if the current sum is greater\n    if curr_sum > max_sum:\n        max_sum = curr_sum\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n    num (int): The number of largest products to find.\n\n    Returns:\n    list: A list of the specified number of largest products.\n\n    Examples:\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    \"\"\"\n    # Create a list to store the products\n    products = []\n\n    # Iterate over the first list\n    for i in list1:\n        # Iterate over the second list\n        for j in list2:\n            # Calculate the product and add it to the list of products\n            products.append(i * j)\n\n    # Sort the list of products in descending order\n    products.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    tuple: A tuple of characters.\n    \"\"\"\n    return tuple(string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with the left most unset bit set.\n    \"\"\"\n    # Find the position of the leftmost unset bit\n    bit_pos = 0\n    while num & (1 << bit_pos):\n        bit_pos += 1\n\n    # Set the leftmost unset bit\n    num |= (1 << bit_pos)\n\n    return num"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    Parameters:\n    n (int): The position of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to each element.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character in the string.\n        None: If there are no non-repeated characters.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        None\n        >>> first_non_repeating_character(\"abcdabcd\")\n        'c'\n        >>> first_non_repeating_character(\"aabbcc\")\n        None\n    \"\"\"\n    # Create a dictionary to store character counts\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated characters are found, return None\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    This function takes three numbers as input and returns the median value.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    num3 (int or float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([num1, num2, num3])\n\n    # Calculate the median\n    median = (sorted_numbers[1] + sorted_numbers[2]) / 2\n\n    return median"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list with the sum of digits for each number.\n\n    Examples:\n    >>> sum_of_digits([10, 2, 56])\n    [1, 2, 11]\n    \"\"\"\n    result = []\n    for num in numbers:\n        digit_sum = sum(int(digit) for digit in str(num))\n        result.append(digit_sum)\n    return result"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to check.\n    element: The element to search for.\n\n    Returns:\n    bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n    \"\"\"\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][1]\n            if product < min_product:\n                min_product = product\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    min_val = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            min_val = min(min_val, item)\n\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with odd numbers removed.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A new list containing the nth element from each tuple in the input list.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [tup[n] for tup in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in a sequence or not.\n\n    Parameters:\n    seq1 (list or tuple): The first sequence.\n    seq2 (list or tuple): The second sequence.\n\n    Returns:\n    bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input list contains less than two integers.\n\n    Examples:\n        >>> max_Product([1,2,3,4,7,0,8,4])\n        (7, 8)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must contain at least two integers.\")\n\n    max_product = float('-inf')\n    pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Finds the element of a list with maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The element of the list with maximum length.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_length = max(len(sublist) for sublist in lst)\n    max_element = [sublist for sublist in lst if len(sublist) == max_length]\n\n    return max_element[0]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculates the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum(num ** 3 for num in even_numbers)\n    return cube_sum\n\n# Test the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenate each element of a tuple by a delimiter.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    delimiter (str, optional): The delimiter to use for concatenation. Default is '-'.\n\n    Returns:\n    str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(x) for x in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): A tuple of strings.\n\n    Returns:\n        list: A list of rear index elements.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    return [string[-1] for string in tup]"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): A list of lists.\n        element: The element to count.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters odd numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\""}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the elementwise and of the input tuples.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(a & b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: Directrix of the parabola.\n    \"\"\"\n    return -b / (2 * a)"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n    \"\"\"\n    median = (a + b) / 2\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array.\n    num (int or float): The number to compare with the array elements.\n\n    Returns:\n    bool: True if the number is greater than all the elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The number to find the last digit of.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with odd characters removed.\n    \"\"\"\n    return ''.join([char for i, char in enumerate(string) if i % 2 == 0])"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The joined integer.\n    \"\"\"\n    return int(''.join(map(str, numbers)))"}
{"task_id": "Mbpp/440", "solution": "import re"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int or float): The length of each side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    return 6 * size ** 2"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the index wise multiplication of elements from the input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n    ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n\n    # Check if the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Perform index wise multiplication of elements\n    result = tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))\n\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    \"\"\"\n    This function counts the occurrence of all elements of a list in a tuple.\n\n    Parameters:\n    tuple_input (tuple): The input tuple.\n    list_input (list): The list of elements to count the occurrence of.\n\n    Returns:\n    int: The count of occurrences of all elements in the list in the tuple.\n    \"\"\"\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of each number.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the cubes of each number in the input list.\n    \"\"\"\n    cubes = [num ** 3 for num in nums]\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 0\n    else:\n        perrin_numbers = [3, 0, 2]\n        for _ in range(3, n):\n            perrin_numbers.append(perrin_numbers[-3] + perrin_numbers[-2])\n        return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A new list containing strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [string for string in string_list if len(string) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function takes a number as input and returns the sum of all even factors of that number.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of the input number.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    elif month_number == 2:\n        return False  # February has 28 or 29 days in a leap year\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Parameters:\n    string_list (list): A list of string values.\n\n    Returns:\n    list: A new list with each string reversed.\n\n    Examples:\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n        >>> find_min_sublist([[1, 2], [1, 2, 3], [1]])\n        [1]\n        >>> find_min_sublist([[1, 2, 3], [1], [1, 2]])\n        [1]\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with uppercase substrings removed.\n    \"\"\"\n    modified_string = \"\"\n    current_substring = \"\"\n\n    for char in string:\n        if char.isupper():\n            current_substring += char\n        else:\n            if current_substring.isupper():\n                modified_string += current_substring.lower()\n            else:\n                modified_string += current_substring\n            current_substring = char\n\n    if current_substring.isupper():\n        modified_string += current_substring.lower()\n    else:\n        modified_string += current_substring\n\n    return modified_string"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist in a given list.\n\n    Parameters:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: A new list containing the first elements of each sublist.\n\n    Examples:\n    >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n    [1, 3, 6]\n    \"\"\"\n    return [sublist[0] for sublist in lst]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Write a function to find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): A list of elements.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n\n    Examples:\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    def backtrack(start, path):\n        result.append(path[:])\n        for i in range(start, len(lst)):\n            path.append(lst[i])\n            backtrack(i + 1, path)\n            path.pop()\n\n    result = []\n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product subarray.\n    \"\"\"\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n\n        if num == 0:\n            current_product = 1\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple with the pairwise addition of neighboring elements.\n\n    Examples:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    result = tuple(a + b for a, b in zip(tup, tup[1:]))\n    return result"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulus value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): A list of tuples.\n        tuple_list2 (list): A list of tuples.\n\n    Returns:\n        set: A set of tuples representing the intersection of elements in the given tuple lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    string (str): The input string.\n    old_char (str): The character to be replaced.\n    new_char (str): The new character.\n\n    Returns:\n    str: The modified string.\n    \"\"\"\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Parameters:\n    dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n    list: A list of tuples, where each tuple contains a key-value pair from the input dictionary, sorted by value in descending order.\n    \"\"\"\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements.\")\n\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in arr:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def is_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n    \"\"\"\n    return string.lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    start = 0\n    end = 0\n\n    while end < len(string):\n        if string[end].islower():\n            end += 1\n        else:\n            if end - start > 0:\n                result += string[start:end]\n            start = end\n            end += 1\n\n    if end - start > 0:\n        result += string[start:end]\n\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    number (int or float): The number from which the first digit needs to be extracted.\n\n    Returns:\n    int: The first digit of the input number.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Extract the first character of the string\n    first_digit = int(number_str[0])\n\n    return first_digit\n\n# Test the function\nassert first_digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    return toggled_string"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n    \"\"\"\n    num1_digits = [int(digit) for digit in str(num1)]\n    num2_digits = [int(digit) for digit in str(num2)]\n\n    # Pad the shorter list with zeros to make them the same length\n    if len(num1_digits) < len(num2_digits):\n        num1_digits = num1_digits + [0] * (len(num2_digits) - len(num1_digits))\n    elif len(num2_digits) < len(num1_digits):\n        num2_digits = num2_digits + [0] * (len(num1_digits) - len(num2_digits))\n\n    # Calculate the per-digit difference\n    digit_difference = [abs(num1_digits[i] - num2_digits[i]) for i in range(len(num1_digits))]\n\n    # Calculate the sum of the per-digit difference\n    sum_digit_difference = sum(digit_difference)\n\n    return sum_digit_difference"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): The input list.\n    n (int): The length of the input list.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n    \"\"\"\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here = max_ending_here + arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the union of elements from tuple1 and tuple2 in sorted order.\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Parameters:\n    lst (list): A list of sublists.\n\n    Returns:\n    int: The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        if end_index != -1:\n            value = string[start_index + 1:end_index]\n            values.append(value)\n            start_index = string.find('\"', end_index + 1)\n        else:\n            break\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The count of unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Split a string into characters.\n\n    Parameters:\n    string (str): The string to be split.\n\n    Returns:\n    list: A list of characters from the input string.\n    \"\"\"\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    num (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input integer is negative.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input integer cannot be negative.\")\n\n    sum_of_digits = 0\n    while num > 0:\n        sum_of_digits += num % 10\n        num //= 10\n\n    return sum_of_digits"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists of strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    Write a python function to remove duplicate numbers from a given number of lists.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with only two unique numbers.\n\n    Examples:\n    >>> two_unique_nums([1,2,3,2,3,4,5])\n    [1, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    if len(unique_nums) >= 2:\n        return unique_nums[:2]\n    else:\n        return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The product of the unique numbers in the list.\n\n    Examples:\n    >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n    720000000\n    \"\"\"\n    unique_numbers = list(set(lst))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr1, arr2):\n    \"\"\"\n    Check if arr2 is a subarray of arr1.\n\n    Parameters:\n    arr1 (list): The main array.\n    arr2 (list): The subarray to check.\n\n    Returns:\n    bool: True if arr2 is a subarray of arr1, False otherwise.\n    \"\"\"\n    if len(arr2) > len(arr1):\n        return False\n\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n\n    return False\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 2, 3, 4, 5], [2, 3]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers.\")\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test the function\nassert last_digit_factorial(4) == 4"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A single flat list containing the interleaved elements.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n\n    # Check if the input lists are of the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    # Interleave the lists\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the dissimilar elements from both input tuples.\n\n    Examples:\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = set(tuple1) ^ set(tuple2)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only even elements.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    even_elements = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            even_elements.append(extract_even(element))\n        elif element % 2 == 0:\n            even_elements.append(element)\n    return tuple(even_elements)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge * height)\n    surface_area = base_area + lateral_area\n    return surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n <= 0:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries representing items with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The input list to be split.\n    n (int): The index at which to split the list.\n\n    Returns:\n    list: The modified list with the first part added to the end.\n\n    Examples:\n    >>> split_Arr([12,10,5,6,52,36],2)\n    [5, 6, 52, 36, 12, 10]\n    \"\"\"\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest - smallest"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Parameters:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the given numbers.\n\n    Examples:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    squares = []\n    for num in range(start, end + 1):\n        if (num ** 0.5).is_integer():\n            squares.append(num)\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Examples:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), (r, theta)"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial coefficients to calculate.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n    \"\"\"\n    # Initialize the sum and the product\n    sum_product = 0\n    product = 1\n\n    # Calculate the sum of the product of consecutive binomial coefficients\n    for i in range(1, n+1):\n        # Calculate the binomial coefficient using the formula (n k) = n!/k!/((n-k)!)\n        binomial_coefficient = factorial(n) // (factorial(i) * factorial(n - i))\n\n        # Update the sum and product\n        sum_product += product * binomial_coefficient\n        product *= binomial_coefficient\n\n    return sum_product\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a number.\n\n    Parameters:\n    n (int): The number to calculate the factorial of.\n\n    Returns:\n    int: The factorial of the number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Parameters:\n    ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The difference between the first even and first odd number.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([1,3,5,7])\n    Traceback (most recent call last):\n        ...\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num - odd_num"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the tuple.\n    \"\"\"\n    return sys.getsizeof(t)"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The index of the element to find.\n\n    Returns:\n    int: The kth element from the merged sorted array.\n\n    Raises:\n    ValueError: If k is out of range for the given arrays.\n\n    Examples:\n    >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n    6\n    >>> find_kth([1, 2, 3], [4, 5, 6], 4)\n    5\n    >>> find_kth([1, 2, 3], [4, 5, 6], 7)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range for the given arrays\n    \"\"\"\n\n    # Check if k is within the range of the arrays\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range for the given arrays\")\n\n    # Initialize pointers for arr1 and arr2\n    i = j = 0\n\n    # Initialize the current element and the count\n    current = None\n    count = 0\n\n    # Iterate until we have found the kth element\n    while count < k:\n        # If arr1 is exhausted, return the kth element from arr2\n        if i >= len(arr1):\n            current = arr2[j]\n            j += 1\n        # If arr2 is exhausted, return the kth element from arr1\n        elif j >= len(arr2):\n            current = arr1[i]\n            i += 1\n        # Compare the current elements from arr1 and arr2\n        elif arr1[i] < arr2[j]:\n            current = arr1[i]\n            i += 1\n        else:\n            current = arr2[j]\n            j += 1\n\n        count += 1\n\n    return current"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access its digits\n    num_str = str(num)\n\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return sum_of_digits == num"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to calculate the sum and average for.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n    \"\"\"\n    sum_numbers = n * (n + 1) // 2\n    average = sum_numbers / n\n    return sum_numbers, average"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check if a number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string.\n\n    Raises:\n        ValueError: If the input string is empty.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        ''\n    \"\"\"\n    if not string:\n        raise ValueError(\"Input string cannot be empty.\")\n\n    seen_chars = set()\n    for char in string:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n\n    return ''"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a number is lucid.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n    \"\"\"\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    while num > 1:\n        if num % 2 == 0:\n            return False\n        num = (num - 1) / 2\n    return True\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The reversed string with words seperated by spaces.\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert is_prime(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Function to find nth bell number.\n\n    Parameters:\n    n (int): The value of n for which to find the bell number.\n\n    Returns:\n    int: The nth bell number.\n    \"\"\"\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Parameters:\n    lst (list): The input list.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: A new list with the k'th element removed.\n\n    Examples:\n    >>> remove_kth_element([1,1,2,3,4,4,5,1],3)\n    [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n    Parameters:\n    matrix (list of lists): The matrix.\n    n (int): The index of the column to find the max of.\n\n    Returns:\n    int: The maximum value in the n'th column.\n\n    Raises:\n    ValueError: If the matrix is empty or if the n'th column does not exist.\n\n    Examples:\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    19\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n    8\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Column 3 does not exist\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(f\"Column {n} does not exist\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n    list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n    >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n    [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Function to find the cumulative sum of all the values that are present in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n    \"\"\"\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average value for each tuple in a tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Performs element-wise modulo operation on two tuples of the same length.\n\n    Parameters:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the element-wise modulo result.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Parameters:\n    lst1 (list): The first list.\n    lst2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise division of lst1 and lst2.\n\n    Raises:\n    ValueError: If the length of lst1 and lst2 are not equal.\n\n    Examples:\n    >>> div_list([4,5,6],[1, 2, 3])\n    [4.0, 2.5, 2.0]\n    >>> div_list([1,2,3],[4,5,6])\n    [0.25, 0.4, 0.5]\n    >>> div_list([1,2,3],[0,0,0])\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Length of lst1 and lst2 must be equal.\")\n\n    result = []\n    for i in range(len(lst1)):\n        try:\n            result.append(lst1[i] / lst2[i])\n        except ZeroDivisionError:\n            raise\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with all numbers moved to the end.\n    \"\"\"\n    num_chars = [char for char in string if char.isdigit()]\n    other_chars = [char for char in string if not char.isdigit()]\n    return ''.join(other_chars) + ''.join(num_chars)"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    # Sort the list in descending order\n    numbers.sort(reverse=True)\n\n    # Initialize the size of the largest subset\n    subset_size = 0\n\n    # Iterate through the sorted list\n    for i in range(len(numbers)):\n        # Check if the current number is divisible by any previous number\n        for j in range(i):\n            if numbers[i] % numbers[j] == 0:\n                # Update the size of the largest subset\n                subset_size = max(subset_size, j + 1)\n                break\n\n    return subset_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Function to find the median of two sorted lists of same size.\n\n    Parameters:\n    list1 (list): The first sorted list.\n    list2 (list): The second sorted list.\n    n (int): The size of the lists.\n\n    Returns:\n    float: The median of the two sorted lists.\n\n    Raises:\n    ValueError: If the size of the lists is not equal.\n\n    Examples:\n    >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n    16.0\n    \"\"\"\n\n    if n != len(list1) or n != len(list2):\n        raise ValueError(\"List sizes must be equal.\")\n\n    i = 0\n    j = 0\n    count = 0\n    median1 = 0\n    median2 = 0\n\n    while count <= n:\n        if i == n:\n            median1 = median2\n            break\n\n        if j == n:\n            median1 = median2\n            break\n\n        if list1[i] <= list2[j]:\n            median2 = median1\n            median1 = list1[i]\n            i += 1\n        else:\n            median2 = median1\n            median1 = list2[j]\n            j += 1\n\n        count += 1\n\n    return (median1 + median2) / 2"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to raise each number to.\n\n    Returns:\n    list: A new list with the n-th power of each number in the original list.\n    \"\"\"\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        area = (radius ** 2) * math.pi / 2\n        return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with whitespaces replaced.\n    \"\"\"\n    return string.replace(' ', '_')"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Create a new list to store the non-zero elements\n    non_zero_lst = [num for num in lst if num != 0]\n\n    # Create a new list to store the zero elements\n    zero_lst = [num for num in lst if num == 0]\n\n    # Concatenate the non-zero list with the zero list\n    result = non_zero_lst + zero_lst\n\n    return result"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the list.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts a given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    # Build a max heap\n    heapify(arr)\n\n    # Extract elements from the heap one by one\n    for i in range(len(arr) - 1, 0, -1):\n        # Swap the root (maximum element) with the last element\n        arr[0], arr[i] = arr[i], arr[0]\n\n        # Heapify the reduced heap\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    amount (int or float): The amount of money earned.\n    cost (int or float): The cost of the product or service.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if amount > cost:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    wind_velocity (float): Wind velocity in km/h.\n    temperature (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Remove names that start with a lowercase letter\n    names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    length_sum = sum(len(name) for name in names)\n\n    return length_sum\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Examples:\n    >>> is_nonagonal(10)\n    325\n    \"\"\"\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if word.startswith('z') or word.endswith('z'):\n            continue\n        if 'z' in word:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverses an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array.\n\n    Examples:\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n    [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to a tuple.\n\n    Parameters:\n    tup (tuple): The original tuple.\n    dictionary (dict): The dictionary to be added.\n\n    Returns:\n    tuple: The updated tuple with the dictionary added.\n    \"\"\"\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n    Args:\n        matrix (list of lists): A square matrix of size N*N, where each cell is associated with a specific cost.\n\n    Returns:\n        float: The maximum average over all existing paths.\n\n    Examples:\n        >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n    \"\"\"\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    \"\"\"\n    Filters students based on height and weight above the minimum.\n\n    Parameters:\n    student_data (dict): A dictionary with student names as keys and tuples of (height, weight) as values.\n    min_height (float): The minimum height required.\n    min_weight (float): The minimum weight required.\n\n    Returns:\n    dict: A new dictionary containing only the students with height and weight above the minimum.\n    \"\"\"\n    filtered_students = {name: (height, weight) for name, (height, weight) in student_data.items() if height >= min_height and weight >= min_weight}\n    return filtered_students\nstudent_data = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    int: The count of indices where the lists have the same values.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    Examples:\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to raise the base to.\n\n    Returns:\n    int: The sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        if end_index != -1:\n            values.append(string[start_index + 1:end_index])\n            start_index = string.find('\"', end_index + 1)\n        else:\n            break\n    return values"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    Function to multiply adjacent elements of a tuple.\n\n    Parameters:\n    t (tuple): Input tuple of numbers.\n\n    Returns:\n    tuple: Tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Examples:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] as input and returns [a_1+b_1,...,a_n+b_n].\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list containing the element-wise sum of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    Examples:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = [a + b for a, b in zip(list1, list2)]\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): Radius of the cone.\n    h (float): Height of the cone.\n\n    Returns:\n    float: Lateral surface area of the cone.\n    \"\"\"\n    return math.pi * r * math.sqrt(r**2 + h**2)"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces, commas, and dots replaced with colons.\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): Sorted array of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n\n    Raises:\n        ValueError: If the target number is not found in the array.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9)\n        7\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        Traceback (most recent call last):\n            ...\n        ValueError: Target number not found in the array.\n    \"\"\"\n\n    # Perform binary search to find the first occurrence of the target number\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            # Check if the current element is the first occurrence\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    raise ValueError(\"Target number not found in the array.\")"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n\n    for i in range(n):\n        sublist_prod = 1\n        for j in range(i, n):\n            sublist_prod *= lst[j]\n            total_sum += sublist_prod\n\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Parameters:\n    num (int): The number whose middle bits need to be toggled.\n\n    Returns:\n    int: The number with toggled middle bits.\n    \"\"\"\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Calculate the number of bits in the number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): Sorted list of integers.\n    value (int): Value to be inserted.\n\n    Returns:\n    int: Index of the left insertion point.\n\n    Examples:\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    >>> left_insertion([1,2,4,5], 3)\n    2\n    >>> left_insertion([1,2,4,5], 1)\n    0\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regular expressions.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    index = 1\n    triangular_number = 1\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The converted key-value dictionary.\n\n    Raises:\n        ValueError: If the length of the tuple is odd.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even.\")\n\n    return dict(zip(tup[::2], tup[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) == 0:\n        return True\n    else:\n        first_char = string[0]\n        for char in string:\n            if char != first_char:\n                return False\n        return True"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area of a tetrahedron using the formula:\n    # Area = \u221a3 * (edge_length)^2\n    area = math.sqrt(3) * (edge_length ** 2)\n    return area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    n (int): The number of items to rotate.\n\n    Returns:\n    list: The rotated list.\n    \"\"\"\n    n = n % len(lst)  # Adjust n to handle cases where n is greater than the length of the list\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tup)"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    modified_string = ' '.join(word if word[0].islower() else ' ' + word for word in words)\n    return modified_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Parameters:\n    lst (list): A list of strings of numbers.\n\n    Returns:\n    list: A new list with the strings sorted numerically.\n\n    Examples:\n    >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n    [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x))"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Parameters:\n    lst (list): The list to which the tuple will be added.\n    tup (tuple): The tuple to be added to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n    \"\"\"\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Function to find the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The position of the Jacobsthal number to find.\n\n    Returns:\n    int: The nth Jacobsthal number.\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples, where each tuple contains a name and a value.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records, sorted by value in ascending order.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list contains less than two unique numbers.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1, 1, 1])\n        Traceback (most recent call last):\n            ...\n        ValueError: List must contain at least two unique numbers.\n    \"\"\"\n    unique_numbers = list(set(lst))\n    if len(unique_numbers) < 2:\n        raise ValueError(\"List must contain at least two unique numbers.\")\n    unique_numbers.sort()\n    return unique_numbers[1]"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Parameters:\n    string_list (list): A list of strings.\n\n    Returns:\n    int: The count of pairs of reverse strings.\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        dict: A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Examples:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n    Parameters:\n    month_number (int): The month number to check.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements.\n    \"\"\"\n    arr = sorted(arr)\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find nth polite number.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Examples:\n    >>> is_polite(7)\n    11\n    \"\"\"\n    if n <= 0:\n        return 0\n    if n == 1:\n        return 1\n\n    polite_numbers = [0, 1]\n    for i in range(2, n+1):\n        polite_numbers.append(polite_numbers[i-1] + polite_numbers[i-2])\n\n    return polite_numbers[n]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of pairs of consecutive items.\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    This function counts the number of pairs in a list whose sum is equal to a given target sum.\n\n    Parameters:\n    nums (list): A list of numbers.\n    target_sum (int): The target sum for which pairs need to be counted.\n\n    Returns:\n    int: The count of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    nums_dict = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_dict:\n            count += nums_dict[complement]\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, 2*n, 2):\n        odd_sum += i**4\n    return odd_sum"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with k length in the given string.\n\n    Parameters:\n    string (str): The input string.\n    k (int): The length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    modified_words = [word for word in words if len(word) != k]\n    modified_string = ' '.join(modified_words)\n    return modified_string"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, the starting index, and the ending index of the substring within the string.\n\n    Raises:\n        ValueError: If the substring is not found within the string.\n\n    Examples:\n        >>> occurance_substring('python programming, python language','python')\n        ('python', 0, 6)\n    \"\"\"\n    start_index = string.find(substring)\n    if start_index == -1:\n        raise ValueError(\"Substring not found within the string.\")\n    end_index = start_index + len(substring)\n    return substring, start_index, end_index"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set(lst)\n    return sum(unique_elements)"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n\n    if current_sublist:\n        result.append(current_sublist)\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds all combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_sum = 0\n            for k in range(i, j + 1):\n                subarray_sum += arr[k]\n            if (j - i + 1) % 2 != 0:\n                total_sum += subarray_sum\n\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    Function to find the product of first even and odd number of a given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The product of the first even and odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([1,3,5,7])\n    Traceback (most recent call last):\n        ...\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a string representation of a tuple to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple.\n\n    Returns:\n    tuple: An integer tuple.\n\n    Examples:\n    >>> tuple_str_int(\"(7, 8, 9)\")\n    (7, 8, 9)\n    \"\"\"\n    return eval(tuple_str)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): Sorted list of integers.\n    value (int): Value to be inserted.\n\n    Returns:\n    int: Index of the right insertion point.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): A list of strings.\n        string (str): A string.\n\n    Returns:\n        tuple: A new tuple containing the elements of the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: The tuple with tuples removed.\n    \"\"\"\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The number of lists in the input list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): Sorted array.\n    target: Element to find the last position of.\n\n    Returns:\n    int: Last position of the element in the array.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] > target:\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            if mid == len(arr) - 1 or arr[mid] != arr[mid + 1]:\n                return mid\n            else:\n                left = mid + 1\n\n    return -1"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Parameters:\n    text (str): The string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    odd_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Parameters:\n    num (int): The number to be rotated.\n    d (int): The number of bits to rotate left.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers.\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    # Check if the square root of the number is an integer\n    sqrt_num = int(num ** 0.5)\n    return sqrt_num ** 2 == num"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in the list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The list in the list of lists with the highest sum of elements.\n\n    Examples:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any odd numbers.\n\n    Examples:\n    >>> first_odd([1,3,5])\n    1\n    >>> first_odd([2,4,6])\n    Traceback (most recent call last):\n        ...\n    ValueError: No odd numbers found in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd numbers found in the list.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple.\n        k: The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True"}
