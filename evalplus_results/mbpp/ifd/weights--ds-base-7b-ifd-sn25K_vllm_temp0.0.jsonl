{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n# Testing the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return True\n\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n\n# Test cases\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers, in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n cannot be greater than the length of the numbers list.\")\n\n    # Use heapq.nlargest to find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the two numbers to get a number with only the bits that differ\n    diff_bits = num1 ^ num2\n\n    # Count the number of set bits (1s) in the diff_bits\n    set_bits = bin(diff_bits).count('1')\n\n    # If the number of set bits is exactly 1, then the numbers differ at one bit position only\n    return set_bits == 1\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(10, 10) == False\nassert differ_At_One_Bit_Pos(7, 11) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Testing the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the squares of each number in the input list.\n\n    Example:\n    >>> square_nums([1, 2, 3, 4, 5])\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Testing the function\nassert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    string (str): The input string to be rotated.\n\n    Returns:\n    int: The minimum number of rotations required to get the same string.\n\n    Examples:\n    >>> find_rotations(\"aaaa\")\n    1\n    >>> find_rotations(\"abcde\")\n    5\n    >>> find_rotations(\"xyz\")\n    3\n    \"\"\"\n\n    # Concatenate the string with itself\n    temp = string + string\n\n    # Find the length of the original string\n    n = len(string)\n\n    # Find the length of the concatenated string\n    m = len(temp)\n\n    # Find the index of the first character of the original string in the concatenated string\n    index = temp.find(string[0])\n\n    # Calculate the number of rotations required\n    rotations = index if index != -1 else n\n\n    # Return the minimum number of rotations required\n    return rotations\n\n# Test cases\nassert find_rotations(\"aaaa\") == 1\nassert find_rotations(\"abcde\") == 5\nassert find_rotations(\"xyz\") == 3"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n        ValueError: If the character is not found in the string.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"python\", \"o\")\n        'python'\n        >>> remove_Occ(\"python\", \"z\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Character not found in the string.\n    \"\"\"\n    # Find the first and last occurrence of the character\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    # If the character is not found, raise an exception\n    if first_index == -1:\n        raise ValueError(\"Character not found in the string.\")\n\n    # Remove the first and last occurrence of the character\n    modified_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n\n    return modified_string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A 2D matrix represented as a list of lists.\n\n    Returns:\n        list: The sorted matrix.\n\n    Raises:\n        ValueError: If the input matrix is empty or not rectangular.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n\n        >>> sort_matrix([[3, 2, 1], [5, 4, 2], [1, 1, 1]])\n        [[1, 1, 1], [3, 2, 1], [5, 4, 2]]\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Input matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    # Check if the matrix is rectangular\n    for row in matrix:\n        if len(row) != num_cols:\n            raise ValueError(\"Input matrix is not rectangular\")\n\n    # Calculate the sum of each row and store it in a list\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input values are negative or zero.\n\n    \"\"\"\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"Input values must be positive numbers.\")\n\n    base_area = 0.5 * base * height\n    volume = base_area * length\n\n    return volume\n\n# Testing the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The string to be checked.\n\n    Returns:\n    bool: True if the input string contains lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string is empty or has less than 3 characters\n    if len(input_string) < 3:\n        return False\n\n    # Iterate through each character in the input string\n    for i in range(len(input_string) - 2):\n        # Check if the current character is lowercase and the next two characters are lowercase letters joined with an underscore\n        if input_string[i].islower() and input_string[i+1:i+3] == '_' and input_string[i+3].islower():\n            return True\n\n    return False\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40.0"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n        >>> remove_dirty_chars(\"hello\", \"world\")\n        'hello'\n        >>> remove_dirty_chars(\"python\", \"\")\n        'python'\n    \"\"\"\n    # Convert the second string into a set for faster lookup\n    dirty_chars = set(string2)\n\n    # Use a list comprehension to filter out the characters from the first string\n    clean_string = ''.join(char for char in string1 if char not in dirty_chars)\n\n    return clean_string\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def has_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array contains duplicate elements, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert has_duplicate([1, 2, 3, 4, 5]) == False\nassert has_duplicate([1, 2, 3, 3, 4, 5]) == True\nassert has_duplicate([1, 1, 2, 3, 4, 5]) == True\nassert has_duplicate([1, 2, 3, 4, 5, 5]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer that is the product of two consecutive integers\n    (i.e., n = (2^p) * (2^(p+1)), where p is a positive integer).\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return False\n\n    # Check if n is a product of two consecutive powers of 2\n    while n % 2 == 0:\n        n //= 2\n\n    return n % 2 == 1\n\n# Test cases\nassert is_woodall(383) == True\nassert is_woodall(1024) == False\nassert is_woodall(0) == False\nassert is_woodall(-10) == False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Check if the number is one less than twice its reverse\n    if num == (2 * int(reversed_num)) - 1:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check(70) == False\nassert check(121) == True\nassert check(123) == False\nassert check(12321) == True\nassert check(1234321) == True\nassert check(1234567) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed using the given digits.\n\n    Parameters:\n    digits (list): A list of integers representing the digits.\n\n    Returns:\n    int: The largest number that can be formed using the given digits.\n\n    Examples:\n    >>> find_Max_Num([1, 2, 3])\n    321\n    >>> find_Max_Num([4, 2, 4, 3, 1])\n    44321\n    >>> find_Max_Num([9, 8, 7, 6, 5])\n    98765\n    \"\"\"\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and return as an integer\n    return int(''.join(map(str, sorted_digits)))\n\n# Test cases\nassert find_Max_Num([1, 2, 3]) == 321\nassert find_Max_Num([4, 2, 4, 3, 1]) == 44321\nassert find_Max_Num([9, 8, 7, 6, 5]) == 98765"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(a, b):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (a ^ b) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, 2) == False\nassert opposite_Signs(-1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    An octagonal number is a figurate number that represents a shape with eight equal sides.\n    The nth octagonal number is given by the formula: n(3n-2), where n is a positive integer.\n\n    Args:\n        n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n        int: The nth octagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> is_octagonal(5)\n        65\n        >>> is_octagonal(10)\n        181\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Testing the function\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 181"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    \"\"\"\n    Count the number of substrings with the sum of digits equal to their length.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The count of substrings with the sum of digits equal to their length.\n\n    Examples:\n    >>> count_Substrings('112112')\n    6\n    >>> count_Substrings('12345')\n    0\n    >>> count_Substrings('123123')\n    9\n    \"\"\"\n\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n\n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6\nassert count_Substrings('12345') == 0\nassert count_Substrings('123123') == 9"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-5, -10, -20])\n        -20\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Finds the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs in the tuple list.\n\n    Raises:\n        ValueError: If the tuple list is empty or contains tuples with less than two elements.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n        >>> max_difference([(1, 1), (2, 2), (3, 3)])\n        0\n        >>> max_difference([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The tuple list cannot be empty.\n        >>> max_difference([(1,), (2, 2), (3, 3)])\n        Traceback (most recent call last):\n            ...\n        ValueError: Each tuple must contain two elements.\n    \"\"\"\n    if not tuple_list:\n        raise ValueError(\"The tuple list cannot be empty.\")\n\n    max_diff = float('-inf')\n\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) != 2:\n            raise ValueError(\"Each tuple must contain two elements.\")\n\n        for j in range(i + 1, len(tuple_list)):\n            diff = tuple_list[j][0] - tuple_list[i][1]\n            max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples_by_second_value(lst):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n\n    Args:\n        lst (list): The list of tuples to be sorted.\n\n    Returns:\n        list: The sorted list of tuples.\n\n    Examples:\n        >>> sort_tuples_by_second_value([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\n# Testing the function\nassert sort_tuples_by_second_value([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Parameters:\n    lst (list): The input list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n\n    Examples:\n    >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n    21\n    >>> recursive_list_sum([1, [2, [3, [4]]], 5])\n    15\n    \"\"\"\n\n    # Base case: if the input is not a list, return the element\n    if not isinstance(lst, list):\n        return lst\n\n    # Recursive case: sum the elements of the list\n    return sum(recursive_list_sum(sublist) for sublist in lst)\n\n# Test cases\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21\nassert recursive_list_sum([1, [2, [3, [4]]], 5]) == 15"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n\n    Examples:\n    >>> pos_count([1,-2,3,-4])\n    2\n    >>> pos_count([-1,-2,-3,-4])\n    0\n    >>> pos_count([1,2,3,4])\n    4\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Testing the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n# Testing the function\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the array is increasing or decreasing\n    increasing = arr[0] <= arr[-1]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the array is increasing, check if the current element is less than or equal to the previous element\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        # If the array is decreasing, check if the current element is greater than or equal to the previous element\n        elif not increasing and arr[i] > arr[i-1]:\n            return False\n\n    # If the array passes all checks, it is monotonic\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 2, 4]) == False\nassert is_monotonic([1, 3, 2, 4]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublist):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list to be checked.\n    sublist (list): The sublist to be searched in the main list.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sublist) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n\n    return False\n\n# Test cases\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5]) == True\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7]) == True\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9, 11]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = [len(t) for t in tuples]\n    return all(l == lengths[0] for l in lengths)\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66), (77, 88)]) == False"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n\n    # Check if the number is negative\n    if n < 0:\n        return False\n\n    # Check if the number is a perfect square\n    if int(n**0.5)**2 == n:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(int(n**0.5) + 1):\n        for j in range(i, int(n**0.5) + 1):\n            if i**2 - j**2 == n:\n                return True\n\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == True\nassert dif_Square(15) == False\nassert dif_Square(20) == True\nassert dif_Square(25) == True\nassert dif_Square(30) == False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the given sequence follows the patterns in the array.\n\n    Args:\n        patterns (list): A list of patterns to be checked.\n        sequence (list): A list of elements to be checked against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n\n    Examples:\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n        True\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"])\n        False\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = sequence[i]\n        elif pattern_dict[patterns[i]] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n        >>> find_tuples([(15, 25, 30), (10, 20, 30), (12, 18, 21)], 5)\n        [(15, 25, 30), (10, 20, 30)]\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        if all(element % k == 0 for element in t):\n            result.append(t)\n    return result\n\n# Testing the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string for easier manipulation\n    number_str = str(number)\n\n    # Calculate the sum of the digits at odd and even positions\n    sum_odd_digits = 0\n    sum_even_digits = 0\n    for i, digit in enumerate(number_str):\n        if i % 2 == 0:\n            sum_even_digits += int(digit)\n        else:\n            sum_odd_digits += int(digit)\n\n    # Check if the difference between the sums is divisible by 11\n    return (sum_odd_digits - sum_even_digits) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to be checked.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == True\nassert word_len(\"Java\") == True\nassert word_len(\"\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is the sum of the first n positive integers,\n    and is denoted by T(n). It is the number of ways to form an n-sided simplex.\n\n    Parameters:\n    n (int): The value of n for which to calculate the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(0)\n    0\n    >>> tetrahedral_number(1)\n    1\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6\n\n\n# Testing the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is a sequence of integers defined by the following rules:\n    - The first two terms are 1 and 1.\n    - Each subsequent term is the sum of the previous two terms.\n\n    Args:\n        n (int): The position of the number to find in the sequence.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> newman_conway(1)\n        1\n        >>> newman_conway(2)\n        1\n        >>> newman_conway(3)\n        2\n        >>> newman_conway(10)\n        6\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two terms\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Testing the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth centered hexagonal number.\n\n    A centered hexagonal number is a hexagonal number that is centered around 1.\n    The nth centered hexagonal number is given by the formula:\n    centered_hexagonal_number = (3n^2 - 2n) + 1\n\n    Args:\n        n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n        int: The nth centered hexagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> centered_hexagonal_number(1)\n        1\n        >>> centered_hexagonal_number(2)\n        7\n        >>> centered_hexagonal_number(10)\n        271\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (3 * n**2 - 2 * n) + 1\n\n# Testing the function\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: A new dictionary containing the merged key-value pairs from all three dictionaries.\n\n    \"\"\"\n    merged_dict = {}\n\n    # Merge dict1 into merged_dict\n    for key, value in dict1.items():\n        merged_dict[key] = value\n\n    # Merge dict2 into merged_dict\n    for key, value in dict2.items():\n        merged_dict[key] = value\n\n    # Merge dict3 into merged_dict\n    for key, value in dict3.items():\n        merged_dict[key] = value\n\n    return merged_dict\n\n# Test the function\ndict1 = { \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }\ndict2 = { \"G\": \"Green\", \"W\": \"White\" }\ndict3 = { \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" }\n\nmerged_dict = merge_dictionaries_three(dict1, dict2, dict3)\n\nassert merged_dict == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency of each element in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n\n    Example:\n    >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n\n# Testing the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(0)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    # Find the closest smaller number\n    closest = n - 1\n    while closest > 0:\n        if str(n) in str(closest):\n            return closest\n        closest -= 1\n\n    return closest\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The input list is empty.\n        >>> len_log(\"not a list\")\n        Traceback (most recent call last):\n            ...\n        ValueError: The input is not a list.\n    \"\"\"\n    if not isinstance(words, list):\n        raise ValueError(\"The input is not a list.\")\n\n    if len(words) == 0:\n        raise ValueError(\"The input list is empty.\")\n\n    longest_length = 0\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n\n    return longest_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for item in lst:\n        if substring in item:\n            return True\n    return False\n\n# Test cases\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that has alternating odd and even digits.\n    For example, 1212121 is an undulating number as it has alternating odd and even digits.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str) - 2):\n        if int(num_str[i]) % 2 == int(num_str[i+1]) % 2 or int(num_str[i+1]) % 2 == int(num_str[i+2]) % 2:\n            return False\n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1212122) == False\nassert is_undulating(123456789) == True\nassert is_undulating(1234567890) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of 'a' raised to the power 'b'.\n\n    Raises:\n    ValueError: If 'a' is negative and 'b' is not an integer.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2, 5)\n    32\n    >>> power(5, 0)\n    1\n    >>> power(0, 5)\n    0\n    >>> power(-2, 3)\n    -8\n    >>> power(-2, 4)\n    16\n    >>> power(-2, 5)\n    -32\n    >>> power(-2, 0)\n    1\n    >>> power(2, -3)\n    0.125\n    >>> power(0, 0)\n    1\n    \"\"\"\n\n    if a < 0 and not isinstance(b, int):\n        raise ValueError(\"Cannot raise a negative number to a non-integer exponent.\")\n\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value in the given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n        >>> index_minimum([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(list_of_lists):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Args:\n        list_of_lists (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> Find_Min_Length([[1],[1,2]])\n        1\n        >>> Find_Min_Length([[1,2,3],[4,5],[6]])\n        1\n        >>> Find_Min_Length([[1,2,3],[4,5,6,7],[8,9]])\n        2\n    \"\"\"\n    if not isinstance(list_of_lists, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    for sublist in list_of_lists:\n        if not isinstance(sublist, list):\n            raise ValueError(\"Input must be a list of lists.\")\n        min_length = min(min_length, len(sublist))\n\n    return min_length\n\n# Test cases\nassert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2,3],[4,5],[6]]) == 1\nassert Find_Min_Length([[1,2,3],[4,5,6,7],[8,9]]) == 2"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Calculate the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(24)\n    8\n    >>> divisor(1)\n    1\n    \"\"\"\n\n    # Initialize the count of divisors to 0\n    count = 0\n\n    # Iterate from 1 to the given integer\n    for i in range(1, n+1):\n        # If the given integer is divisible by i, increment the count\n        if n % i == 0:\n            count += 1\n\n    return count\n\n# Test the function\nassert divisor(15) == 4\nassert divisor(24) == 8\nassert divisor(1) == 1"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a flattened list of lists and returns a dictionary with the frequency of each element.\n\n    Parameters:\n    lst (list): A flattened list of lists.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n\n    Example:\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n\n    # Create an empty dictionary to store the frequencies\n    freq_dict = {}\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # If the element is already in the dictionary, increment its frequency by 1\n            if element in freq_dict:\n                freq_dict[element] += 1\n            # If the element is not in the dictionary, add it with a frequency of 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list is empty.\n        >>> multiply_num(\"not a list\")\n        Traceback (most recent call last):\n            ...\n        ValueError: The input must be a list.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise ValueError(\"The input must be a list.\")\n    if len(numbers) == 0:\n        raise ValueError(\"The list is empty.\")\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)\n\n# Testing the function\nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Parameters:\n    decimal (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary equivalent of the decimal number.\n\n    Raises:\n    ValueError: If the input is not a non-negative integer.\n\n    Examples:\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(0)\n    '0'\n    \"\"\"\n\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n\n    if binary == \"\":\n        binary = \"0\"\n\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The integer to find the next smallest palindrome of.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if is_palindrome(n):\n        return n\n\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n\n# Test cases\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If the input array is empty or k is out of range.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([12, 3, 5, 7, 19], 5)\n    19\n    >>> kth_element([12, 3, 5, 7, 19], 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range\n    >>> kth_element([], 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array is empty\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    return sorted(arr)[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('hello_world')\n    'HelloWorld'\n    >>> snake_to_camel('')\n    ''\n    \"\"\"\n\n    # Split the snake case string into words\n    words = snake_str.split('_')\n\n    # Capitalize the first letter of each word except the first word\n    words = [words[0]] + [word.capitalize() for word in words[1:]]\n\n    # Join the words to form the camel case string\n    camel_str = ''.join(words)\n\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of m objects taken n at a time,\n    without regard to order. It is a generalization of the binomial coefficient.\n\n    Parameters:\n    n (int): The number of objects taken at a time.\n    m (int): The total number of objects.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    3\n    >>> eulerian_num(0, 5)\n    1\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers.\")\n\n    if n == 0:\n        return 1\n\n    result = 0\n    for i in range(1, m + 1):\n        result += eulerian_num(n - 1, i)\n\n    return result\n\n\n# Testing the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Testing the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n\n    Parameters:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n\n    Examples:\n    >>> count([True, False, True])\n    2\n    >>> count([False, False, False])\n    0\n    >>> count([True, True, True])\n    3\n    \"\"\"\n    return sum(1 for value in lst if value)\n\n# Testing the function\nassert count([True, False, True]) == 2\nassert count([False, False, False]) == 0\nassert count([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)\n\n# Testing the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A new list containing all the elements from the input lists in sorted order.\n\n    Examples:\n        >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n        [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n    merged_list = list1 + list2 + list3  # Concatenate the three lists\n    merged_list.sort()  # Sort the merged list\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, rotations):\n    \"\"\"\n    Function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    rotations (int): The number of rotations to be performed.\n\n    Returns:\n    int: The number of numbers with an odd value after the rotations.\n\n    Example:\n    >>> odd_Equivalent(\"011001\",6)\n    3\n    \"\"\"\n\n    def rotate_string(string, n):\n        \"\"\"\n        Helper function to rotate a binary string by n positions.\n\n        Parameters:\n        string (str): The binary string to be rotated.\n        n (int): The number of positions to rotate the string.\n\n        Returns:\n        str: The rotated binary string.\n\n        Example:\n        >>> rotate_string(\"011001\", 2)\n        '100100'\n        \"\"\"\n        return string[-n:] + string[:-n]\n\n    count = 0\n    for _ in range(rotations):\n        binary_string = rotate_string(binary_string, 1)\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n    return count\n\n# Testing the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        list: A list of common elements found in all nested lists.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n    if not isinstance(nested_lists, list) or not all(isinstance(lst, list) for lst in nested_lists):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n\n\n# Testing the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123a\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n\n    Parameters:\n    t (tuple): The input tuple of positive integers.\n\n    Returns:\n    int: The converted single integer.\n\n    Raises:\n    TypeError: If the input is not a tuple or contains non-positive integers.\n\n    Examples:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    >>> tuple_to_int((4, 5, 6))\n    456\n    >>> tuple_to_int((7, 8, 9))\n    789\n    \"\"\"\n\n    # Check if the input is a tuple\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Check if the tuple contains only positive integers\n    for num in t:\n        if not isinstance(num, int) or num <= 0:\n            raise TypeError(\"Tuple must contain only positive integers\")\n\n    # Convert the tuple to a single integer\n    result = int(''.join(map(str, t)))\n\n    return result"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    list: A list of strings split on the space character.\n\n    Example:\n    >>> string_to_list(\"python programming\")\n    ['python', 'programming']\n    \"\"\"\n    return string.split()\n\n# Testing the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n\n    Raises:\n    ValueError: If the input array is empty or not sorted.\n\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    if arr != sorted(arr):\n        raise ValueError(\"Input array must be sorted.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        elif arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n# Test cases\nassert search([1, 1, 2, 2, 3]) == 3\nassert search([1, 1, 2, 3, 3]) == 2\nassert search([1, 2, 2, 3, 3]) == 1\nassert search([1, 1, 2, 2, 3, 4, 4]) == 3\nassert search([1, 1, 2, 2, 3, 3, 4]) == 4"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or if any tuple within the list has less than 2 elements.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(1, 2, 3), (4, 5), (6,)])\n        Traceback (most recent call last):\n            ...\n        ValueError: All tuples within the list must have exactly 2 elements.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_product = float('-inf')\n\n    for tup in lst:\n        if len(tup) != 2:\n            raise ValueError(\"All tuples within the list must have exactly 2 elements.\")\n\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    Calculates the sum of all amicable numbers from 1 to the specified number.\n\n    Parameters:\n    n (int): The upper limit for the range of numbers to check.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to n.\n\n    \"\"\"\n\n    def sum_of_divisors(num):\n        \"\"\"\n        Calculates the sum of proper divisors of a given number.\n\n        Parameters:\n        num (int): The number for which to calculate the sum of divisors.\n\n        Returns:\n        int: The sum of proper divisors of the given number.\n\n        \"\"\"\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(1, n+1):\n        sum1 = sum_of_divisors(num)\n        sum2 = sum_of_divisors(sum1)\n        if num == sum2 and num != sum1:\n            amicable_sum += num\n\n    return amicable_sum\n\n# Testing the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number for which to calculate the angle.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    >>> angle_complex(1-1j)\n    -0.7853981633974483\n    >>> angle_complex(1)\n    TypeError: Input must be a complex number.\n    \"\"\"\n    if not isinstance(z, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    angle = math.atan2(z.imag, z.real)\n    return angle\n\n# Testing the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): The binary string to search for substrings.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string.\n\n    Raises:\n        ValueError: If the input is not a valid binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n        >>> find_length(\"1010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Calculates the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    \"\"\"\n    def get_divisors(n):\n        \"\"\"\n        Returns a list of divisors of a given number.\n\n        Parameters:\n        n (int): The number to find divisors for.\n\n        Returns:\n        list: A list of divisors of n.\n\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_divisors = set(get_divisors(a)).intersection(get_divisors(b))\n    return sum(common_divisors)\n\n# Testing the function\nassert sum_of_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    This function multiplies two integers and returns the result.\n\n    Parameters:\n    a (int): The first integer to be multiplied.\n    b (int): The second integer to be multiplied.\n\n    Returns:\n    int: The product of the two integers.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(-5, 3)\n    -15\n    >>> multiply_int(0, 10)\n    0\n    \"\"\"\n    return a * b\n\n# Testing the function\nassert multiply_int(10, 20) == 200\nassert multiply_int(-5, 3) == -15\nassert multiply_int(0, 10) == 0"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        sentence (str): The input sentence containing words.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n\n# Testing the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    matrix (list): A 2D list representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Check if the matrix is square\n    n = len(matrix)\n    if any(len(row) != n for row in matrix):\n        return False\n\n    # Calculate the expected sum of each row, column, and diagonal\n    expected_sum = n * (n ** 2 + 1) // 2\n\n    # Check if the sum of each row, column, and diagonal is equal to the expected sum\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        diag_sum1 = sum(matrix[i][j] for i, j in zip(range(n), range(n)))\n        diag_sum2 = sum(matrix[i][j] for i, j in zip(range(n), range(n - 1, -1, -1)))\n\n        if row_sum != expected_sum or col_sum != expected_sum or diag_sum1 != expected_sum or diag_sum2 != expected_sum:\n            return False\n\n    return True\n\n# Test cases\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == False\nassert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n        >>> max_occurrences([1, 2, 3, 4, 5])\n        1\n        >>> max_occurrences([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item\n\n# Test cases\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2\nassert max_occurrences([1, 2, 3, 4, 5]) == 1"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s[i].lower() not in vowels:\n            i += 1\n        elif s[j].lower() not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n\n    return ''.join(s)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World\") == \"Hollo Werld\"\nassert reverse_vowels(\"aeiou\") == \"uoiea\"\nassert reverse_vowels(\"\") == \"\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    tup (tuple): The input tuple to be converted.\n\n    Returns:\n    str: The converted string.\n\n    Examples:\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n# Testing the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list contains non-numeric values.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n        >>> sum_negativenum([])\n        0\n        >>> sum_negativenum([1, 2, 3, 4, 5])\n        0\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    negative_sum = 0\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"List must contain only numeric values.\")\n        if num < 0:\n            negative_sum += num\n\n    return negative_sum\n\n# Test cases\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([]) == 0\nassert sum_negativenum([1, 2, 3, 4, 5]) == 0"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    6\n    >>> hexagonal_num(5)\n    35\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Testing the function\nassert hexagonal_num(1) == 1\nassert hexagonal_num(2) == 6\nassert hexagonal_num(5) == 35\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    \"\"\"\n    Calculates the ratio of zeroes to non-zeroes in an array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    Raises:\n    ValueError: If the input is not a list or if the list contains non-integer elements.\n\n    Examples:\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.181818\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise ValueError(\"Input must be a list\")\n\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"List must contain only integers\")\n\n    zero_count = sum(1 for x in arr if x == 0)\n    non_zero_count = len(arr) - zero_count\n\n    if non_zero_count == 0:\n        return 0\n\n    return zero_count / non_zero_count\n\n# Testing the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as the sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n\n    # Base case: If the number is 0 or negative, it cannot be represented as the sum of non-zero powers of 2\n    if n <= 0:\n        return False\n\n    # Iterate through all possible powers of 2 from 1 to the given number\n    for i in range(1, n + 1):\n        # Check if the current power of 2 is equal to the given number\n        if 2 ** i == n:\n            return True\n\n        # Check if the current power of 2 is less than the given number\n        if 2 ** i < n:\n            # Recursively check if the remaining difference can be represented as the sum of non-zero powers of 2\n            if is_sum_of_powers_of_two(n - 2 ** i):\n                return True\n\n    # If no combination of powers of 2 sums up to the given number, return False\n    return False\n\n# Test cases\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(16) == True\nassert is_sum_of_powers_of_two(20) == True\nassert is_sum_of_powers_of_two(25) == True\nassert is_sum_of_powers_of_two(30) == True\nassert is_sum_of_powers_of_two(32) == True\nassert is_sum_of_powers_of_two(33) == False\nassert is_sum_of_powers_of_two(37) == False\nassert is_sum_of_powers_of_two(40) == True\nassert is_sum_of_powers_of_two(45) == True\nassert is_sum_of_powers_of_two(50) == True\nassert is_sum_of_powers_of_two(55) == True\nassert is_sum_of_powers_of_two(60) == True\nassert is_sum_of_powers_of_two(64) == True\nassert is_sum_of_powers_of_two(65) == False\nassert is_sum_of_powers_of_two(70) == False\nassert is_sum_of_powers_of_two(75) == False\nassert is_sum_of_powers_of_two(80) == True\nassert is_sum_of_powers_of_two(85) == True\nassert is_sum_of_powers_of_two(90) == True\nassert is_sum_of_powers_of_two(95) == True\nassert is_sum_of_powers_of_two(100) == True\n```"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(0)\n    0.0\n    >>> circle_circumference(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    circumference = 2 * math.pi * radius\n    return circumference\n\n# Testing the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Extracts all unique numbers from a list of lists into a single set.\n\n    Args:\n        lst (list): A list of lists containing numbers.\n\n    Returns:\n        set: A set containing all unique numbers from the input list of lists.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    return set(num for sublist in lst for num in sublist)\n\n# Testing the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(arr):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Parameters:\n    arr (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n\n    def flip(arr, i):\n        \"\"\"\n        Flips the elements in the given list from index 0 to i.\n\n        Parameters:\n        arr (list): The list of elements to be flipped.\n        i (int): The index up to which the elements should be flipped.\n\n        Returns:\n        list: The flipped list.\n\n        \"\"\"\n        start = 0\n        while start < i:\n            arr[start], arr[i] = arr[i], arr[start]\n            start += 1\n            i -= 1\n        return arr\n\n    def find_max(arr, n):\n        \"\"\"\n        Finds the index of the maximum element in the given list up to index n.\n\n        Parameters:\n        arr (list): The list of elements to search for the maximum element.\n        n (int): The index up to which the search should be performed.\n\n        Returns:\n        int: The index of the maximum element.\n\n        \"\"\"\n        max_idx = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n        return max_idx\n\n    n = len(arr)\n    current_size = n\n    while current_size > 1:\n        max_idx = find_max(arr, current_size)\n        if max_idx != current_size - 1:\n            arr = flip(arr, max_idx)\n            arr = flip(arr, current_size - 1)\n        current_size -= 1\n    return arr\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n        >>> count_samepair([1,2,3],[4,5,6],[7,8,9])\n        0\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count\n\n# Testing the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple or list): The input array.\n\n    Returns:\n    int: The maximum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains less than 2 elements.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff([-5, -10, -2, -15])\n    15\n    >>> max_Abs_Diff([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array cannot be empty.\n    >>> max_Abs_Diff((1))\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array must contain at least 2 elements.\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"Input array cannot be empty.\")\n    if len(arr) < 2:\n        raise ValueError(\"Input array must contain at least 2 elements.\")\n\n    min_val = max_val = arr[0]\n    max_diff = 0\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    max_diff = max_val - min_val\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target integer.\n\n    Returns:\n        tuple: A tuple containing x and y, or None if no solution exists.\n\n    Raises:\n        ValueError: If a, b, or n is not an integer.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(4, 6, 12)\n        (1, 0)\n        >>> find_solution(2, 3, 10)\n        None\n    \"\"\"\n    if not all(isinstance(num, int) for num in (a, b, n)):\n        raise ValueError(\"a, b, and n must be integers\")\n\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return x, y\n\n    if n % b == 0:\n        x = 0\n        y = n // b\n        return x, y\n\n    if a == b:\n        if n % (2 * a) == 0:\n            x = n // (2 * a)\n            y = x\n            return x, y\n        else:\n            return None\n\n    if a % b == 0 or b % a == 0:\n        if a % b == 0:\n            x = 1\n            y = (n - b) // a\n            return x, y\n        else:\n            x = (n - a) // b\n            y = 1\n            return x, y\n\n    if a < b:\n        a, b = b, a\n\n    while a % b != 0:\n        a, b = b, a % b\n\n    if n % b == 0:\n        x = n // b\n        y = (n - b) // a\n        return x, y\n\n    return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from lst1 that are present in lst2.\n\n    Args:\n        lst1 (list): The first list.\n        lst2 (list): The second list.\n\n    Returns:\n        list: A new list with elements from lst1 that are not present in lst2.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]\n\n# Testing the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The number up to which the series is calculated.\n\n    Returns:\n    int: The sum of the series.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(0)\n    0\n    >>> sum_series(1)\n    0\n    >>> sum_series(10)\n    20\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n\n    return total_sum\n\n# Testing the function\nassert sum_series(6) == 12\nassert sum_series(0) == 0\nassert sum_series(1) == 0\nassert sum_series(10) == 20"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdef\")\n        6\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i, char in enumerate(string.lower()):\n        if i < len(alphabet) and char == alphabet[i]:\n            count += 1\n    return count\n\n# Testing the function\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdef\") == 6\nassert count_char_position(\"\") == 0"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The count of pairs that xor to an even number.\n\n    Examples:\n    >>> find_even_pair([5, 4, 7, 2, 1])\n    4\n    >>> find_even_pair([1, 2, 3, 4, 5])\n    0\n    >>> find_even_pair([1, 2, 3, 4, 5, 6])\n    6\n    \"\"\"\n\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([1, 2, 3, 4, 5]) == 0\nassert find_even_pair([1, 2, 3, 4, 5, 6]) == 6"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n    >>> next_power_of_2(0)\n    1\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(10)\n    16\n    \"\"\"\n\n    if n <= 0:\n        return 1\n\n    # Find the next power of 2 using bitwise operations\n    n -= 1\n    n |= n >> 1\n    n |= n >> 2\n    n |= n >> 4\n    n |= n >> 8\n    n |= n >> 16\n    n += 1\n\n    return n"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num (int): The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0\nassert frequency([1, 2, 3, 2, 2], 2) == 3\nassert frequency([1, 2, 3, 4, 5], 1) == 1\nassert frequency([1, 2, 3, 4, 5], 5) == 1\nassert frequency([1, 2, 3, 4, 5], 6) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculates the sum of numbers in a list within a specified range.\n\n    Parameters:\n    lst (list): The input list of numbers.\n    start (int): The starting index of the range (inclusive).\n    end (int): The ending index of the range (exclusive).\n\n    Returns:\n    int: The sum of numbers within the specified range.\n\n    Raises:\n    ValueError: If the start or end index is out of range.\n\n    Examples:\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    29\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 12)\n    78\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 0)\n    2\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 1)\n    1\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 1, 12)\n    77\n    \"\"\"\n\n    if start < 0 or end > len(lst) or start >= end:\n        raise ValueError(\"Invalid range\")\n\n    return sum(lst[start:end])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25.0\n    >>> perimeter_pentagon(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter\n\n# Testing the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurrences(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n\n    Examples:\n        >>> count_occurrences(\"letstdlenstdporstd\")\n        3\n        >>> count_occurrences(\"std\")\n        1\n        >>> count_occurrences(\"abc\")\n        0\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Testing the function\nassert count_occurrences(\"letstdlenstdporstd\") == 3\nassert count_occurrences(\"std\") == 1\nassert count_occurrences(\"abc\") == 0"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Parameters:\n    t (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_types = set(type(element) for element in t)\n    return len(data_types) <= 1\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((\"apple\", \"banana\", \"cherry\")) == True\nassert check_type((5, \"apple\", 7, \"banana\")) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array of integers.\n    n (int): The length of the array.\n    element (int): The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n    \"\"\"\n\n    # Find the first occurrence of the element in the array\n    first_occurrence = -1\n    left, right = 0, n - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == element:\n            first_occurrence = mid\n            right = mid - 1\n        elif arr[mid] < element:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # If the element is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    return first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == element\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number to count the set bits in.\n\n    Returns:\n    int: The number of set bits in the given number.\n\n    Examples:\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(0)\n    0\n    \"\"\"\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Testing the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the characters at odd index values.\n\n    Parameters:\n    string (str): The input string from which characters at odd index values will be removed.\n\n    Returns:\n    str: A new string with only the characters at odd index values.\n\n    Example:\n    >>> odd_values_string('abcdef')\n    'ace'\n    \"\"\"\n\n    # Initialize an empty string to store the characters at odd index values\n    new_string = ''\n\n    # Iterate over the characters in the input string\n    for i in range(len(string)):\n        # Check if the index is odd\n        if i % 2 != 0:\n            # Append the character to the new string\n            new_string += string[i]\n\n    return new_string\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n\n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n    c (int): Third number.\n\n    Returns:\n    int: The minimum of the three numbers.\n\n    Examples:\n    >>> min_of_three(10, 20, 0)\n    0\n    >>> min_of_three(5, 5, 5)\n    5\n    >>> min_of_three(-10, 0, 10)\n    -10\n    \"\"\"\n    return min(a, b, c)\n\n# Testing the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(5, 5, 5) == 5\nassert min_of_three(-10, 0, 10) == -10"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a specified character.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    return string.replace(\" \", character)\n\n# Testing the function\nassert replace_blank(\"hello people\",'@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([1, 2, 3, 4, 5], 3)\n    [5, 4, 3]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 10)\n    [100, 90, 80, 70, 60, 50, 50, 40, 30, 20]\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive.\")\n\n    lateral_area = 2 * math.pi * radius * height\n    return lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> volume_cube(3)\n    27.0\n    >>> volume_cube(0)\n    0.0\n    >>> volume_cube(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return side_length ** 3\n\n# Testing the function\nassert volume_cube(3) == 27.0\nassert volume_cube(0) == 0.0\n\ntry:\n    volume_cube(-5)\nexcept ValueError as e:\n    assert str(e) == \"Side length must be a positive number.\""}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    This function sets all even bits of a given number.\n\n    Parameters:\n    num (int): The number for which even bits need to be set.\n\n    Returns:\n    int: The number with even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(11)\n    10\n    >>> even_bit_set_number(12)\n    14\n    \"\"\"\n\n    # Create a mask with all even bits set\n    mask = int('10101010101010101010101010101010', 2)\n\n    # Set even bits of the number using bitwise OR operation\n    result = num | mask\n\n    return result\n\n# Test cases\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(11) == 10\nassert even_bit_set_number(12) == 14"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (6, 3): 1}\n    \"\"\"\n    # Create an empty dictionary to store the occurrences\n    occurrences = {}\n\n    # Iterate over each tuple in the list\n    for t in lst:\n        # Check if the tuple is already in the dictionary\n        if t in occurrences:\n            # If it is, increment the count by 1\n            occurrences[t] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            occurrences[t] = 1\n\n    # Return the dictionary of occurrences\n    return occurrences\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (6, 3): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n\n    # Calculate the length of the string\n    n = len(string)\n\n    # If the string is empty, return 0\n    if n == 0:\n        return 0\n\n    # Calculate the number of non-empty substrings using the formula n*(n+1)/2\n    count = n * (n + 1) // 2\n\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"\") == 0"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the number of possible sequences of length n, where each element is a positive integer\n    greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The maximum value an element can have.\n    n (int): The length of the sequences.\n\n    Returns:\n    int: The number of possible sequences.\n\n    \"\"\"\n\n    # Create a 2D list to store the number of sequences for each value of m and n\n    sequences = [[0] * (n + 1) for _ in range(m + 1)]\n\n    # Initialize the base cases\n    for i in range(1, m + 1):\n        sequences[i][1] = 1\n\n    # Calculate the number of sequences for each value of m and n\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(j // 2, j):\n                sequences[j][i] += sequences[k][i - 1]\n\n    # Return the total number of sequences\n    return sum(sequences[j][n] for j in range(1, m + 1))\n\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified list1 with the last element replaced by the elements of list2.\n\n    Raises:\n        ValueError: If either list1 or list2 is empty.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n        >>> replace_list([], [1, 2, 3])\n        ValueError: list1 cannot be empty.\n\n        >>> replace_list([1, 2, 3], [])\n        ValueError: list2 cannot be empty.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"list1 cannot be empty.\")\n    if not list2:\n        raise ValueError(\"list2 cannot be empty.\")\n\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string to count the characters of.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    Example:\n    >>> count_charac(\"python programming\")\n    18\n    \"\"\"\n    return len(string)\n\n# Testing the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the input number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the input number.\n\n    Examples:\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(100)\n    121\n    >>> next_Perfect_Square(1000)\n    12321\n    \"\"\"\n\n    # Find the square root of the input number\n    sqrt_num = math.sqrt(num)\n\n    # Check if the square root is an integer\n    if sqrt_num.is_integer():\n        # If the square root is an integer, return the square of the next integer\n        return int(sqrt_num + 1) ** 2\n    else:\n        # If the square root is not an integer, find the next integer greater than the square root\n        next_int = int(sqrt_num) + 1\n        # Return the square of the next integer\n        return next_int ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(100) == 121\nassert next_Perfect_Square(1000) == 12321"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n\n    \"\"\"\n\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = -1\n    for i in range(1, n-1):\n        if arr[i] > arr[i-1] and arr[i] > arr[i+1]:\n            peak = i\n            break\n\n    if peak == -1:\n        return sum(arr)\n\n    # Calculate the maximum sum of increasing subsequence from the left of the peak\n    max_sum_left = 0\n    current_sum = 0\n    for i in range(peak, -1, -1):\n        current_sum += arr[i]\n        max_sum_left = max(max_sum_left, current_sum)\n\n    # Calculate the maximum sum of increasing subsequence from the right of the peak\n    max_sum_right = 0\n    current_sum = 0\n    for i in range(peak, n):\n        current_sum += arr[i]\n        max_sum_right = max(max_sum_right, current_sum)\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_sum_bitonic = max_sum_left + max_sum_right - arr[peak]\n\n    return max_sum_bitonic\n\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCDEFG\")\n    1\n    >>> lps(\"ABCBA\")\n    5\n    \"\"\"\n\n    n = len(s)\n    # Create a table to store the lengths of longest palindromic subsequences\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the table diagonally\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"ABCDEFG\") == 1\nassert lps(\"ABCBA\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_data, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Parameters:\n    tuple_data (tuple): The input tuple.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tuple_data.count(element)\n\n# Test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 2) == 1\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 15) == 1"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    return [element] + [element + item for item in lst]\n\n# Testing the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2+3j)\n    (3.605551275463989, 0.982793723247329)\n    >>> convert(-1j)\n    (1.0, 3.141592653589793)\n    \"\"\"\n    magnitude = abs(complex_num)\n    angle = math.phase(complex_num)\n    return magnitude, angle\n\n# Testing the function\nassert convert(1) == (1.0, 0.0)\nassert convert(2+3j) == (3.605551275463989, 0.982793723247329)\nassert convert(-1j) == (1.0, 3.141592653589793)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n\n    Examples:\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([1, 2, 3, 4, 5])\n    5\n    >>> count_integer([])\n    0\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Testing the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3, 4, 5]) == 5\nassert count_integer([]) == 0"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of a list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list of tuples representing the combinations.\n\n    Example:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    return list(product(lst, repeat=n))\n\n# Test cases\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number to find the count of prime numbers less than.\n\n    Returns:\n    int: The count of prime numbers less than the given non-negative number.\n\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        This helper function checks if a number is prime or not.\n\n        Parameters:\n        num (int): The number to check for primality.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n\n    return count\n\n# Testing the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    Swaps the order of two numbers and returns a tuple with the second number first and then the first number.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    tuple: A tuple with the second number first and then the first number.\n\n    Example:\n    >>> swap_numbers(10, 20)\n    (20, 10)\n    \"\"\"\n    return b, a\n\n# Testing the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum elements from both input tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the maximum elements from both input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements((1, 3), (4, 5))\n        (4, 5)\n\n        >>> maximize_elements((1, 3), (2, 1))\n        (2, 3)\n\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(10) == 29\nassert newman_prime(100) == 547"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division operation on two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the result of element-wise division.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n        ZeroDivisionError: If any element in tuple2 is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n\n        >>> division_elements((10, 4, 6, 9), (5, 2, 0, 3))\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3, 4))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]\n\n# Testing the function\nassert split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3) == ([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the human_age is less than zero.\n\n    \"\"\"\n    if human_age < 0:\n        raise ValueError(\"Human age cannot be negative.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61\nassert dog_age(0) == 0\nassert dog_age(1) == 10.5\nassert dog_age(2) == 21\nassert dog_age(3) == 25.5"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements to skip between each resulting list.\n\n    Returns:\n        list: A list of lists, where each sublist contains the nth elements from the input list.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n\n    return result\n\n# Testing the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateral_surface_cube(5)\n    100.0\n    >>> lateral_surface_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 4 * side_length ** 2\n\n# Testing the function\nassert lateral_surface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    10\n    >>> square_sum(3)\n    36\n    >>> square_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    odd_number = 1\n\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n    For example, 145 is a star number because 1!-- + 4!-- + 5!-- = 145.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    def factorial(x):\n        \"\"\"\n        Calculates the factorial of a number.\n\n        Parameters:\n        x (int): The number to calculate the factorial of.\n\n        Returns:\n        int: The factorial of x.\n\n        Raises:\n        ValueError: If x is not a positive integer.\n\n        \"\"\"\n        if not isinstance(x, int) or x < 0:\n            raise ValueError(\"x must be a positive integer\")\n\n        if x == 0 or x == 1:\n            return 1\n        else:\n            return x * factorial(x - 1)\n\n    def is_star_num(num):\n        \"\"\"\n        Checks if a number is a star number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if num is a star number, False otherwise.\n\n        \"\"\"\n        digits = [int(digit) for digit in str(num)]\n        return sum(factorial(digit) for digit in digits) == num\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_star_num(num):\n            count += 1\n\n    return num\n\n# Testing the function\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the input character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('Z')\n    90\n    \"\"\"\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65\nassert ascii_value('B') == 66\nassert ascii_value('Z') == 90"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculates the sum of even numbers at even positions in a list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n\n    Examples:\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6])\n    12\n    >>> sum_even_and_even_index([10, 20, 30, 40, 50, 60])\n    120\n    \"\"\"\n    return sum(lst[::2])\n\n# Testing the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30\nassert sum_even_and_even_index([1, 2, 3, 4, 5, 6]) == 12\nassert sum_even_and_even_index([10, 20, 30, 40, 50, 60]) == 120"}
{"task_id": "Mbpp/271", "solution": "def even_power_sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the even natural numbers raised to the fifth power.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> even_power_sum(2)\n    1056\n    >>> even_power_sum(5)\n    2244960\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_powers += i ** 5\n\n    return sum_of_powers\n\n# Testing the function\nassert even_power_sum(2) == 1056\nassert even_power_sum(5) == 2244960"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list and returns a new list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A new list containing the rear element of each tuple.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n\n        >>> rear_extract([])\n        ValueError: Input list is empty.\n\n        >>> rear_extract('not a list')\n        TypeError: Input is not a list.\n    \"\"\"\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"Input is not a list.\")\n\n    if len(tuples_list) == 0:\n        raise ValueError(\"Input list is empty.\")\n\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n        >>> subtract_elements((1, 2, 3), (4, 5, 6))\n        (-3, -3, -3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a - b for a, b in zip(tuple1, tuple2))\n\n# Testing the function\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(5)\n    10\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the sum to 0\n    sum_even_coeff = 0\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    for k in range(n + 1):\n        coeff = binomial_coefficient(n, k)\n        if k % 2 == 0:\n            sum_even_coeff += coeff\n\n    return sum_even_coeff\n\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to be chosen.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If n or k is negative.\n\n    Examples:\n    >>> binomial_coefficient(5, 2)\n    10\n    >>> binomial_coefficient(4, 3)\n    4\n    \"\"\"\n\n    if n < 0 or k < 0:\n        raise ValueError(\"n and k must be non-negative\")\n\n    # Calculate the binomial coefficient using the formula C(n, k) = nCk = nC(n-k)\n    if k > n - k:\n        k = n - k\n\n    coeff = 1\n    for i in range(1, k + 1):\n        coeff = coeff * (n - i + 1) // i\n\n    return coeff"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Examples:\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(0, 10)\n    0.0\n    >>> volume_cylinder(10, -5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume\n\n# Testing the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter the dictionary.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}\n\n# Testing the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple_data):\n    \"\"\"\n    Counts the number of elements that occur before the tuple element in the given tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n\n    Returns:\n        int: The number of elements that occur before the tuple element.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> count_first_elements((1, 5, 7, (4, 6), 10))\n        3\n        >>> count_first_elements((1, 2, 3))\n        2\n        >>> count_first_elements(('a', 'b', 'c', ('d', 'e'), 'f'))\n        2\n    \"\"\"\n    if not isinstance(tuple_data, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    count = 0\n    for element in tuple_data:\n        if isinstance(element, tuple):\n            break\n        count += 1\n\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    1256\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Testing the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(10) == 1256"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Perform a sequential search on the given array to find the given element.\n\n    Args:\n        arr (list): The array to search in.\n        element: The element to find.\n\n    Returns:\n        tuple: A tuple containing a boolean indicating if the element is found and the index position of the element (or -1 if not found).\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n# Test the function\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list with the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n\n        >>> sub_list([1, 2, 3], [1, 2])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a - b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check whether the frequency of each digit in the given number is less than or equal to the digit itself.\n\n    Args:\n        num (int): The number to be validated.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert the number to a string to iterate over its digits\n    num_str = str(num)\n\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Count the frequency of each digit\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if int(digit) > freq:\n            return False\n\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(122333) == False\nassert validate(111111) == True\nassert validate(123456) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to be checked.\n        element: The element to compare with the list items.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\nassert check_element([1, 1, 1, 1], 1)==True\nassert check_element([1, 2, 3, 4], 1)==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous subarray in a modified array formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The original array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the modified array.\n\n    Returns:\n    int: The largest sum of a contiguous subarray in the modified array.\n\n    \"\"\"\n\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = kadane_algorithm(arr)\n\n    # If the maximum sum is positive, we can repeat the array to increase the sum\n    if max_sum > 0:\n        max_sum = max_sum * (k - 1) + max_sum\n\n    # If the maximum sum is negative, we can repeat the array only if the total sum is positive\n    elif max_sum < 0 and total_sum > 0:\n        max_sum = max_sum * (k - 2) + total_sum\n\n    # If the maximum sum is negative and the total sum is also negative, we cannot repeat the array\n    else:\n        max_sum = max_sum * k\n\n    return max_sum\n\n\ndef kadane_algorithm(arr):\n    \"\"\"\n    Implements the Kadane's algorithm to find the maximum sum of a contiguous subarray in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum += num\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    20\n    >>> square_sum(3)\n    50\n    >>> square_sum(4)\n    120\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i ** 2\n\n    return sum_of_squares\n\n# Testing the function\nassert square_sum(2) == 20\nassert square_sum(3) == 50\nassert square_sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum list and the maximum list itself.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_len = 0\n    max_list = None\n\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the division of the dividend by the divisor, rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division rounded down to the nearest integer.\n\n    Raises:\n    ZeroDivisionError: If the divisor is zero.\n\n    Examples:\n    >>> find_quotient(10, 3)\n    3\n    >>> find_quotient(10, 2)\n    5\n    >>> find_quotient(10, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n\n    if divisor == 0:\n        raise ZeroDivisionError(\"division by zero\")\n\n    quotient = dividend // divisor\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle given the lengths of the other two sides.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is negative.\n\n    \"\"\"\n    if side1 < 0 or side2 < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    return math.sqrt(side1**2 + side2**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or str: The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains non-numeric values.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n        >>> max_val([1, 2, 3, 4, 5])\n        5\n        >>> max_val([])\n        Traceback (most recent call last):\n            ...\n        ValueError: List is empty.\n        >>> max_val(['Python', 'version'])\n        Traceback (most recent call last):\n            ...\n        ValueError: List contains non-numeric values.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    max_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_val is None or item > max_val:\n                max_val = item\n        else:\n            raise ValueError(\"List contains non-numeric values.\")\n\n    if max_val is None:\n        raise ValueError(\"List contains non-numeric values.\")\n\n    return max_val"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The count of inversions in the array.\n\n    \"\"\"\n\n    def merge_and_count(arr, left, mid, right):\n        \"\"\"\n        Helper function to merge two sorted subarrays and count inversions.\n\n        Parameters:\n        arr (list): The input array.\n        left (int): The starting index of the left subarray.\n        mid (int): The middle index of the subarray.\n        right (int): The ending index of the right subarray.\n\n        Returns:\n        int: The count of inversions in the merged subarrays.\n\n        \"\"\"\n        inv_count = 0\n\n        # Create temporary subarrays\n        left_arr = arr[left:mid+1]\n        right_arr = arr[mid+1:right+1]\n\n        # Merge the subarrays back into arr[left:right+1]\n        i = j = k = 0\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                arr[left+k] = left_arr[i]\n                i += 1\n            else:\n                arr[left+k] = right_arr[j]\n                j += 1\n                inv_count += (mid + 1) - (left + i)\n            k += 1\n\n        # Copy the remaining elements of left_arr, if any\n        while i < len(left_arr):\n            arr[left+k] = left_arr[i]\n            i += 1\n            k += 1\n\n        # Copy the remaining elements of right_arr, if any\n        while j < len(right_arr):\n            arr[left+k] = right_arr[j]\n            j += 1\n            k += 1\n\n        return inv_count\n\n    def count_inversions(arr, left, right):\n        \"\"\"\n        Recursive function to count inversions in an array.\n\n        Parameters:\n        arr (list): The input array.\n        left (int): The starting index of the subarray.\n        right (int): The ending index of the subarray.\n\n        Returns:\n        int: The count of inversions in the array.\n\n        \"\"\"\n        inv_count = 0\n\n        if left < right:\n            mid = (left + right) // 2\n\n            # Count inversions in left subarray\n            inv_count += count_inversions(arr, left, mid)\n\n            # Count inversions in right subarray\n            inv_count += count_inversions(arr, mid+1, right)\n\n            # Merge the two subarrays and count inversions\n            inv_count += merge_and_count(arr, left, mid, right)\n\n        return inv_count\n\n    return count_inversions(arr, 0, len(arr)-1)\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        nested_list (list): The nested list to be flattened.\n\n    Returns:\n        list: The flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Testing the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        tuples (list): A list of tuples where each tuple contains a name and an aggregate score.\n\n    Returns:\n        tuple: A tuple containing the name and the maximum aggregate score.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_name = tuples[0][0]\n    max_aggregate_score = tuples[0][1]\n\n    for name, aggregate_score in tuples:\n        if aggregate_score > max_aggregate_score:\n            max_name = name\n            max_aggregate_score = aggregate_score\n\n    return max_name, max_aggregate_score\n\n\n# Testing the function\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence divided by 2.\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    \"\"\"\n\n    # Base case: If n is 0, there is only one possible sequence (empty sequence)\n    if n == 0:\n        return 1\n\n    # Recursive case:\n    # Count the number of sequences with first n-1 bits same and last bit as 0\n    count_0 = count_binary_seq(n-1)\n\n    # Count the number of sequences with first n-1 bits same and last bit as 1\n    count_1 = count_binary_seq(n-1)\n\n    # Total count of sequences with first n bits same as last n bits\n    total_count = 2 * (count_0 + count_1)\n\n    return total_count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursive function to find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    depths = []\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depths.append(dict_depth(value) + 1)\n        else:\n            depths.append(0)\n\n    return max(depths) if depths else 0\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a': {'b': {'c': {'d': {}}}}}) == 5\nassert dict_depth({'a': 1}) == 0\nassert dict_depth({}) == 0"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words and returns two words that start with the letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words that start with the letter 'p'.\n\n    Raises:\n        ValueError: If no words in the list start with the letter 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.startswith('p') or word.startswith('P')]\n    if len(p_words) < 2:\n        raise ValueError(\"No words in the list start with the letter 'p'\")\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until the ith index,\n    including the kth element which is after i.\n\n    Args:\n        arr (list): The input list of integers.\n        n (int): The length of the input list.\n        i (int): The index up to which the prefix is considered.\n        k (int): The index of the element to be included after i.\n\n    Returns:\n        int: The maximum sum of increasing subsequence.\n\n    Raises:\n        ValueError: If i or k is out of range.\n\n    Examples:\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n        11\n    \"\"\"\n\n    if i < 0 or i >= n or k < 0 or k >= n:\n        raise ValueError(\"Invalid index(es) provided.\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Iterate through the prefix until the ith index\n    for j in range(i + 1):\n        if arr[j] < arr[k]:\n            max_sum += arr[j]\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the input lists are empty or if num is less than 1.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if not list1 or not list2 or num < 1:\n        raise ValueError(\"Invalid input\")\n\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n\n    Examples:\n    >>> maximum(5, 10)\n    10\n    >>> maximum(-5, -10)\n    -5\n    >>> maximum(5, 5)\n    5\n    \"\"\"\n    if a >= b:\n        return a\n    else:\n        return b\n\n# Testing the function\nassert maximum(5, 10) == 10\nassert maximum(-5, -10) == -5\nassert maximum(5, 5) == 5"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    tuple: A tuple containing the characters of the input string.\n\n    Example:\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)\n\n# Testing the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns the number with the leftmost unset bit set to 1.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    int: The number with the leftmost unset bit set to 1.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(0)\n    1\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n\n    # Find the leftmost unset bit\n    mask = 1\n    while num & mask:\n        mask <<= 1\n\n    # Set the leftmost unset bit to 1\n    num |= mask\n\n    return num\n\n# Test cases\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(0) == 1\nassert set_left_most_unset_bit(15) == 15"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either the radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    base_area = math.pi * radius**2\n    volume = (base_area * height) / 3\n\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    power = 1\n    while power <= n:\n        power *= 2\n\n    return power // 2"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas sequence is a series of numbers in which each number is the sum of the two preceding ones.\n    The first two numbers in the sequence are 2 and 1, so find_lucas(0) returns 2 and find_lucas(1) returns 1.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> find_lucas(0)\n    2\n    >>> find_lucas(1)\n    1\n    >>> find_lucas(9)\n    76\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_sequence = [2, 1]\n        for i in range(2, n + 1):\n            lucas_sequence.append(lucas_sequence[i - 1] + lucas_sequence[i - 2])\n        return lucas_sequence[n]\n\n# Testing the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to the elements.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n\n        >>> add_string(['a', 'b', 'c'], '{0}')\n        ['a', 'b', 'c']\n    \"\"\"\n    return [format_str.format(item) for item in lst]\n\n# Testing the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a', 'b', 'c'], '{0}') == ['a', 'b', 'c']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    \"\"\"\n    Convert multiple lists to a nested dictionary.\n\n    Args:\n        *lists: Variable number of lists. The first list represents keys, the second list represents values, and the third list represents nested values.\n\n    Returns:\n        A list of nested dictionaries.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Example:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(lists) != 3:\n        raise ValueError(\"Exactly three lists are required.\")\n\n    keys_list, values_list, nested_values_list = lists\n\n    if len(keys_list) != len(values_list) or len(keys_list) != len(nested_values_list):\n        raise ValueError(\"The lengths of the input lists must be equal.\")\n\n    nested_dicts = []\n    for i in range(len(keys_list)):\n        nested_dict = {keys_list[i]: {values_list[i]: nested_values_list[i]}}\n        nested_dicts.append(nested_dict)\n\n    return nested_dicts"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\n# Test cases\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Parameters:\n    t (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 2, 3, 4, 5)) == True\nassert check_distinct(()) == True\nassert check_distinct((1,)) == True\nassert check_distinct((1, 2, 3, 2, 4, 5, 6, 5)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character, or None if no such character exists.\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabbcc\") == None\nassert first_non_repeating_character(\"aabbc\") == \"c\"\nassert first_non_repeating_character(\"aabbccd\") == \"d\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median value.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n\n    Raises:\n    TypeError: If any of the input parameters are not numeric.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(100, 200, 300)\n    200.0\n    \"\"\"\n\n    # Check if the input parameters are numeric\n    if not all(isinstance(num, (int, float)) for num in [a, b, c]):\n        raise TypeError(\"All input parameters must be numeric.\")\n\n    # Find the median value\n    median = sorted([a, b, c])[1]\n\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the sum of digits for each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    result = []\n    for number in numbers:\n        digit_sum = 0\n        while number > 0:\n            digit_sum += number % 10\n            number //= 10\n        result.append(digit_sum)\n    return result\n\n# Testing the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(3.5, 2.5)\n    2.5\n    >>> minimum(-5, 10)\n    -5\n    \"\"\"\n    if a <= b:\n        return a\n    else:\n        return b\n\n# Testing the function\nassert minimum(1, 2) == 1\nassert minimum(3.5, 2.5) == 2.5\nassert minimum(-5, 10) == -5"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for existence in the tuple.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test cases\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'x')==False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number for which the parity needs to be checked.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False\nassert find_Parity(11) == True\nassert find_Parity(0) == False\nassert find_Parity(-5) == True"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or if any tuple within the list has less than 2 elements.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([(3, 4), (5, 6), (7, 8)])\n        12\n        >>> min_product_tuple([(1, 2, 3), (4, 5, 6)])\n        Traceback (most recent call last):\n            ...\n        ValueError: All tuples within the list must have exactly 2 elements.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n\n    for tup in lst:\n        if len(tup) != 2:\n            raise ValueError(\"All tuples within the list must have exactly 2 elements.\")\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n        >>> min_val([])\n        Traceback (most recent call last):\n            ...\n        ValueError: List is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    min_val = lst[0]\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_val:\n            min_val = item\n\n    return min_val\n\n# Test cases\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with only the even numbers from the input list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    list: A new list with only the even numbers from the input list.\n\n    Examples:\n    >>> remove_odd([1, 2, 3, 4, 5])\n    [2, 4]\n    >>> remove_odd([2, 4, 6, 8])\n    [2, 4, 6, 8]\n    >>> remove_odd([1, 3, 5, 7, 9])\n    []\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Testing the function\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n        [99, 96, 94, 98]\n    \"\"\"\n    return [t[n] for t in lst]\n\n# Testing the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list or tuple): The first sequence.\n        seq2 (list or tuple): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test cases\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\nassert overlapping([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert overlapping([], [1, 2, 3, 4, 5]) == False\nassert overlapping([1, 2, 3, 4, 5], []) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n    ValueError: If the input list is empty or contains less than 2 elements.\n\n    Examples:\n    >>> max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_Product([-1, -2, -3, -4, -7, 0, -8, -4])\n    (-4, -3)\n    >>> max_Product([1, 2])\n    (1, 2)\n    >>> max_Product([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> max_Product([1])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list must contain at least 2 elements.\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must contain at least 2 elements.\")\n\n    max_product = float('-inf')\n    result = ()\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n\n    return result"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Finds the element of a list with the maximum length.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: The element with the maximum length in the input list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n\n        >>> Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D']])\n        ['A', 'B', 'C', 'D']\n\n        >>> Find_Max([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_length = max(len(sublist) for sublist in lst)\n    max_elements = [sublist for sublist in lst if len(sublist) == max_length]\n\n    return max_elements[0]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Round every number in the given list and calculate the sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of rounded numbers multiplied by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n        243\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n\n    return result\n\n# Testing the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculates the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 3\n\n    return sum\n\n# Testing the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216\nassert cube_sum(0) == 0"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_data, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by the given delimiter.\n\n    Args:\n        tuple_data (tuple): The input tuple to be concatenated.\n        delimiter (str, optional): The delimiter to be used for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_')\n        'ID_is_4_UTS'\n    \"\"\"\n    if not isinstance(tuple_data, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return delimiter.join(str(element) for element in tuple_data)\n\n\n# Testing the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_') == 'ID_is_4_UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculates the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(5)\n    22.5\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average = sum_of_cubes / n\n    return average\n\n# Testing the function\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(5) == 22.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tuple_of_strings (tuple): A tuple of strings.\n\n    Returns:\n        list: A list containing the rear index element of each string in the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    if not isinstance(tuple_of_strings, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return [string[-1] for string in tuple_of_strings]\n\n# Testing the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count in the sublists.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2)\n        0\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test cases\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2) == 0"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters out odd numbers from a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the even numbers.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [2, 4, 6, 8, 10]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Testing the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date_str (str): The date string in yyyy-mm-dd format.\n\n    Returns:\n        str: The date string in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date string is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date_str.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format. Expected yyyy-mm-dd.\")\n\n# Testing the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    \"\"\"\n\n    # Start with a large gap, then reduce the gap until it becomes 1\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n\n            # Shift earlier gap-sorted elements until the correct position is found\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            # Insert the current element in its correct position\n            arr[j] = temp\n\n        gap //= 2\n\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise and of the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n        >>> and_tuples((1, 2, 3), (4, 5, 6))\n        (0, 0, 2)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a & b for a, b in zip(tuple1, tuple2))\n\n\n# Testing the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculates the directrix of a parabola given its coefficients a, b, and c.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Raises:\n    ValueError: If the parabola is not defined (i.e., a=0).\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is not defined (a=0).\")\n\n    directrix = -b / (2 * a)\n    return directrix\n\n# Testing the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the first parallel side of the trapezium.\n    b (float): Length of the second parallel side of the trapezium.\n    c (float): Length of the non-parallel side of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values are negative or if the trapezium is not valid.\n\n    \"\"\"\n\n    # Check if the input values are valid\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Input values must be positive.\")\n\n    # Check if the trapezium is valid\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Invalid trapezium.\")\n\n    # Calculate the median length\n    median = (a + b - c) / 2\n\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The array of numbers.\n    num (int or float): The number to compare with the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([10, 20, 30, 40, 50], 35) == False\nassert check_greater([10, 20, 30, 40, 50], 60) == True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The number for which the last digit needs to be found.\n\n    Returns:\n    int: The last digit of the given number.\n\n    Examples:\n    >>> last_digit(123)\n    3\n    >>> last_digit(987654321)\n    1\n    >>> last_digit(0)\n    0\n    \"\"\"\n    return abs(number) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A list of negative numbers from the given list.\n\n    Examples:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    >>> neg_nos([1, 2, 3, 4])\n    []\n    >>> neg_nos([-10, -5, -2, -8])\n    [-10, -5, -2, -8]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Testing the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([1, 2, 3, 4]) == []\nassert neg_nos([-10, -5, -2, -8]) == [-10, -5, -2, -8]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the even-indexed characters.\n\n    Parameters:\n    string (str): The input string from which odd characters will be removed.\n\n    Returns:\n    str: A new string with only the even-indexed characters.\n\n    Examples:\n    >>> remove_odd(\"python\")\n    'yhn'\n    >>> remove_odd(\"programming\")\n    'rogm'\n    >>> remove_odd(\"\")\n    ''\n    \"\"\"\n    return string[::2]\n\n# Testing the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: A single integer formed by joining the input list of integers.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n        >>> multiple_to_single([10, 20, 30, 40])\n        10203040\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers.\")\n\n    return int(''.join(map(str, numbers)))\n\n# Testing the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    This function finds the first adverb and their positions in a given sentence.\n\n    Parameters:\n    sentence (str): The input sentence to search for adverbs.\n\n    Returns:\n    tuple: A tuple containing the position of the first adverb, the length of the adverb, and the adverb itself.\n\n    Example:\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    \"\"\"\n\n    adverbs = ['clearly', 'easily', 'often', 'quickly', 'slowly', 'suddenly']\n    words = sentence.split()\n\n    for i, word in enumerate(words):\n        if word in adverbs:\n            return i, len(word), word\n\n    return None\n\n# Test cases\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\nassert find_adverb_position(\"I ran quickly to the store\") == (2, 7, 'quickly')\nassert find_adverb_position(\"The weather is pleasant\") == None"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive number.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150.0\n    >>> surfacearea_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Size must be a positive number.\n    \"\"\"\n\n    if size <= 0:\n        raise ValueError(\"Size must be a positive number.\")\n\n    return 6 * size ** 2\n\n# Testing the function\nassert surfacearea_cube(5) == 150.0"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the result of index wise multiplication of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(x * y for x, y in zip(tuple1[i], tuple2[i])))\n\n    return tuple(result)\n\n# Testing the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_data):\n    \"\"\"\n    This function counts the occurrence of all elements of a list in a tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        list_data (list): The list of elements to count.\n\n    Returns:\n        int: The total count of occurrences of elements in the list.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd'])\n        4\n    \"\"\"\n    if not isinstance(tuple_data, tuple) or not isinstance(list_data, list):\n        raise TypeError(\"Input arguments must be of type tuple and list respectively.\")\n\n    count = 0\n    for element in list_data:\n        count += tuple_data.count(element)\n\n    return count\n\n# Testing the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c']) == 3\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd']) == 4"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of the individual elements.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the cubes of the individual elements.\n\n    Example:\n    >>> cube_nums([1, 2, 3, 4, 5])\n    [1, 8, 27, 64, 125]\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Testing the function\nassert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    >>> cal_sum(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a non-negative integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    perrin_numbers = [3, 0, 2]  # Initial Perrin numbers\n\n    if n <= 2:\n        return sum(perrin_numbers[:n])\n\n    for _ in range(3, n):\n        next_number = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_number)\n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings with the specified size.\n\n    Raises:\n        TypeError: If string_list is not a list.\n        TypeError: If size is not an integer.\n        ValueError: If size is negative.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10)\n        []\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0)\n        []\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"string_list must be a list\")\n    if not isinstance(size, int):\n        raise TypeError(\"size must be an integer\")\n    if size < 0:\n        raise ValueError(\"size cannot be negative\")\n\n    return [s for s in string_list if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string from which whitespaces will be removed.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n\n    Examples:\n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    >>> remove_whitespaces('  Hello  World  ')\n    'HelloWorld'\n    >>> remove_whitespaces('  Python  ')\n    'Python'\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Testing the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    Calculates the sum of even factors of a given number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Examples:\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(24)\n    42\n    >>> sumofFactors(10)\n    10\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n+1):\n        # Check if i is a factor of n and if it is even\n        if n % i == 0 and i % 2 == 0:\n            # Add i to the sum\n            sum += i\n\n    # Return the sum of even factors\n    return sum\n\n# Test the function\nassert sumofFactors(18) == 26\nassert sumofFactors(24) == 42\nassert sumofFactors(10) == 10"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if a given text contains a word with 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the text contains a word with 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False\n\n# Test cases\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"This is a test.\") == True\nassert text_match_wordz(\"No match here.\") == False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    # Create a dictionary to map month numbers to the number of days\n    month_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number is in the dictionary\n    if month_number in month_days:\n        # Check if the number of days is 31\n        if month_days[month_number] == 31:\n            return True\n    return False\n\n# Test the function\nassert check_month_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverses each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Testing the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n        >>> Find_Min([[1,2,3],[4,5],[6]])\n        [6]\n        >>> Find_Min([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    return [sublist for sublist in lst if len(sublist) == min_length][0]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200.0\n    >>> rectangle_area(0, 5)\n    0.0\n    >>> rectangle_area(5, 0)\n    0.0\n    >>> rectangle_area(-10, 20)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length cannot be negative.\n    >>> rectangle_area(10, -20)\n    Traceback (most recent call last):\n        ...\n    ValueError: Width cannot be negative.\n    \"\"\"\n    if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n    if width < 0:\n        raise ValueError(\"Width cannot be negative.\")\n    return length * width\n\n# Test cases\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(0, 5) == 0\nassert rectangle_area(5, 0) == 0"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n    \"\"\"\n    result = ''\n    for char in string:\n        if not char.isupper():\n            result += char\n    return result\n\n# Testing the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element of each sublist and returns a list of these elements.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If any sublist is empty.\n\n    Examples:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n\n        >>> Extract([[1], [2, 3], [4, 5, 6]])\n        [1, 2, 4]\n\n        >>> Extract([])\n        []\n\n        >>> Extract([[], [1, 2], [3, 4]])\n        ValueError: Sublist is empty.\n\n        >>> Extract(\"not a list\")\n        TypeError: Input must be a list.\n    \"\"\"\n    if not isinstance(sublists, list):\n        raise TypeError(\"Input must be a list.\")\n\n    result = []\n    for sublist in sublists:\n        if not sublist:\n            raise ValueError(\"Sublist is empty.\")\n        result.append(sublist[0])\n\n    return result\n\n# Test cases\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1], [2, 3], [4, 5, 6]]) == [1, 2, 4]\nassert Extract([]) == []\n\ntry:\n    Extract([[], [1, 2], [3, 4]])\nexcept ValueError as e:\n    assert str(e) == \"Sublist is empty.\"\n\ntry:\n    Extract(\"not a list\")\nexcept TypeError as e:\n    assert str(e) == \"Input must be a list.\""}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of lists, where each inner list represents a combination of elements from the input list.\n\n    Examples:\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n\n    def backtrack(start, path):\n        # Add the current combination to the result\n        result.append(path[:])\n\n        # Explore the remaining elements\n        for i in range(start, len(lst)):\n            # Add the current element to the current combination\n            path.append(lst[i])\n            # Recursively explore the remaining elements\n            backtrack(i + 1, path)\n            # Remove the current element from the current combination\n            path.pop()\n\n    result = []\n    backtrack(0, [])\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product of a subarray.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    >>> max_subarray_product([-2, 0, -1])\n    0\n    >>> max_subarray_product([-2, 3, -4])\n    24\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result\n\n\n# Test cases\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([-2, 0, -1]) == 0\nassert max_subarray_product([-2, 3, -4]) == 24"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items removed.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Testing the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    >>> max_product([1, 2, 3, 4, 5])\n    60\n    >>> max_product([5, 4, 3, 2, 1])\n    60\n    \"\"\"\n\n    if len(arr) < 2:\n        return arr[0]\n\n    max_product_so_far = max_product_ending_here = min_product_ending_here = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product_ending_here, min_product_ending_here = min_product_ending_here, max_product_ending_here\n\n        max_product_ending_here = max(arr[i], max_product_ending_here * arr[i])\n        min_product_ending_here = min(arr[i], min_product_ending_here * arr[i])\n\n        max_product_so_far = max(max_product_so_far, max_product_ending_here)\n\n    return max_product_so_far"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple where each element is the sum of its neighboring elements.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple where each element is the sum of its neighboring elements.\n\n    Example:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))\n\n# Testing the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculates the product of the array elements modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array elements modulo n.\n\n    Raises:\n    ValueError: If the input list is empty or if n is not a positive integer.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    >>> find_remainder([1, 2, 3, 4, 5], 7)\n    3\n    >>> find_remainder([], 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> find_remainder([1, 2, 3, 4, 5], 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Modulo value must be a positive integer.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    if n <= 0:\n        raise ValueError(\"Modulo value must be a positive integer.\")\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n\n    return True\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 4, 6, 7]) == False\nassert check_Consecutive([10, 11, 12, 13, 14]) == True\nassert check_Consecutive([1, 2, 4, 5]) == False\nassert check_Consecutive([1]) == False\nassert check_Consecutive([]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: A set of tuples representing the intersection of the two input lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character with.\n\n    Returns:\n        str: The modified string with replaced characters.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        'pollgon'\n        >>> replace_char(\"hello\",'l','x')\n        'hexlo'\n        >>> replace_char(\"python\",'o','a')\n        'python'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Testing the function\nassert replace_char(\"polygon\",'y','l')==\"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in descending order.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list\n\n# Testing the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Calculates the sum of the largest and smallest values in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([-1, 0, 1])\n    0\n    >>> big_sum([10, 20, 30, 40, 50])\n    50\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    return min(arr) + max(arr)\n\n# Testing the function\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, 0, 1]) == 0\nassert big_sum([10, 20, 30, 40, 50]) == 50"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The converted string in lower case.\n    \"\"\"\n    return string.lower()\n\n# Testing the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string from which lowercase substrings will be removed.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n        >>> remove_lowercase(\"lowercase\")\n        'lowercase'\n        >>> remove_lowercase(\"UPPERCASE\")\n        'UPPERCASE'\n    \"\"\"\n    result = ''\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n\n# Testing the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"\nassert remove_lowercase(\"lowercase\") == \"lowercase\"\nassert remove_lowercase(\"UPPERCASE\") == \"UPPERCASE\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    number (int): The number for which the first digit needs to be found.\n\n    Returns:\n    int: The first digit of the given number.\n\n    Examples:\n    >>> first_digit(123)\n    1\n    >>> first_digit(987654321)\n    9\n    >>> first_digit(-12345)\n    1\n    \"\"\"\n\n    # Check if the number is negative\n    if number < 0:\n        number = abs(number)\n\n    # Iterate through each digit of the number\n    while number >= 10:\n        number //= 10\n\n    return number\n\n# Testing the function\nassert first_digit(123) == 1\nassert first_digit(987654321) == 9\nassert first_digit(-12345) == 1"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    Returns a list of odd numbers from the given list of integers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers from the given list.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n        >>> get_odd_numbers([2, 4, 6, 8])\n        []\n        >>> get_odd_numbers([1, 3, 5, 7, 9])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Testing the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> difference(3)\n    30\n    >>> difference(5)\n    120\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n\n    return sum_of_cubes - sum_of_numbers\n\n# Testing the function\nassert difference(3) == 30\nassert difference(5) == 120"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6\nassert find_Odd_Pair([1, 2, 3, 4, 5], 5) == 10\nassert find_Odd_Pair([1, 1, 1, 1, 1], 5) == 0"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with toggled case.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Hello World\")\n    'hELLO wORLD'\n    >>> toggle_string(\"12345\")\n    '12345'\n    \"\"\"\n\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n\n    return toggled_string\n\n# Testing the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Raises:\n        ValueError: If either of the input integers is negative.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 321)\n        3\n        >>> digit_distance_nums(1234, 4321)\n        10\n    \"\"\"\n    if num1 < 0 or num2 < 0:\n        raise ValueError(\"Input integers must be non-negative.\")\n\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    if len(num1_str) != len(num2_str):\n        raise ValueError(\"Input integers must have the same number of digits.\")\n\n    digit_diff_sum = 0\n    for i in range(len(num1_str)):\n        digit_diff_sum += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    return digit_diff_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    Examples:\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    7\n    >>> max_sub_array_sum([1, 2, 3, 4, 5], 5)\n    15\n    >>> max_sub_array_sum([-1, -2, -3, -4, -5], 5)\n    -1\n    \"\"\"\n\n    max_sum = float('-inf')  # Initialize the maximum sum as negative infinity\n    current_sum = 0  # Initialize the current sum as 0\n\n    for i in range(n):\n        current_sum += arr[i]  # Add the current element to the current sum\n\n        if current_sum > max_sum:\n            max_sum = current_sum  # Update the maximum sum if the current sum is greater\n\n        if current_sum < 0:\n            current_sum = 0  # Reset the current sum to 0 if it becomes negative\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of elements from tuple1 and tuple2, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n\n        >>> union_elements(('a', 'b', 'c'), ('b', 'c', 'd'))\n        ('a', 'b', 'c', 'd')\n    \"\"\"\n    # Combine the two input tuples\n    combined_tuple = tuple1 + tuple2\n\n    # Create a set to remove duplicates\n    unique_elements = set(combined_tuple)\n\n    # Sort the unique elements in ascending order\n    sorted_elements = sorted(unique_elements)\n\n    # Convert the sorted elements back to a tuple\n    union_tuple = tuple(sorted_elements)\n\n    return union_tuple\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    \"\"\"\n    Finds the length of the longest sublist in a given list of sublists.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n        >>> Find_Max_Length([[1,2,3],[4,5],[6,7,8,9,10]])\n        5\n        >>> Find_Max_Length([])\n        ValueError: Input list is empty.\n        >>> Find_Max_Length(\"not a list\")\n        TypeError: Input is not a list.\n    \"\"\"\n    if not isinstance(sublists, list):\n        raise TypeError(\"Input is not a list.\")\n\n    if len(sublists) == 0:\n        raise ValueError(\"Input list is empty.\")\n\n    max_length = 0\n    for sublist in sublists:\n        if len(sublist) > max_length:\n            max_length = len(sublist)\n\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n\n    Args:\n        string (str): The input string from which to extract values.\n\n    Returns:\n        list: A list of values extracted from the string.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Testing the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The count of unordered pairs where both elements are unequal.\n\n    Example:\n    >>> count_Pairs([1, 2, 1], 3)\n    2\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Testing the function\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into a list of characters.\n\n    Parameters:\n    string (str): The input string to be split.\n\n    Returns:\n    list: A list of characters from the input string.\n\n    Example:\n    >>> split_string('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Testing the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n    int: The sum of the digits of the given non-negative integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(9)\n    9\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    return digit_sum\n\n# Testing the function\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(9) == 9"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test cases\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 15]) == False\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 13]) == False\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 15]) == False\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 13]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n\n    Example:\n    >>> empty_list(5)\n    [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Testing the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Testing the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with only the unique numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with only the unique numbers.\n\n    Examples:\n        >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n        [1, 4, 5]\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\n# Testing the function\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list contains non-numeric values.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n\n        >>> unique_product([])\n        1\n\n        >>> unique_product([1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1.5, 2.5, 3.5, 4.5, 5.5])\n        130.6\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5])\n        120\n\n        >>> unique_product([1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, "}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub_arr):\n    \"\"\"\n    Check whether a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to be checked.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 4, 3, 5], [4, 3]) == True\nassert is_Sub_Array([1, 4, 3, 5], [3, 5, 1]) == False\nassert is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5]) == True\nassert is_Sub_Array([1, 4, 3, 5], [1, 4, 3, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit of the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit of the factorial is to be calculated.\n\n    Returns:\n    int: The last digit of the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    8\n    >>> last_digit_factorial(0)\n    1\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Calculate the factorial using the property that the last digit of the factorial\n    # is equal to the last digit of the product of the numbers from 1 to n.\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A new list that is the interleaved result of the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\n\n        >>> interleave_lists([10, 20, 30], [40, 50, 60], [70, 80, 90])\n        [10, 40, 70, 20, 50, 80, 30, 60, 90]\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n\n# Testing the function\nassert interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9]) == [1, 4, 7, 2, 5, 8, 3, 6, 9]\nassert interleave_lists([10, 20, 30], [40, 50, 60], [70, 80, 90]) == [10, 40, 70, 20, 50, 80, 30, 60, 90]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    Raises:\n        TypeError: If either of the input arguments is not a tuple.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both input arguments must be tuples.\")\n\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n\n    return tuple(dissimilar_elements)\n\n\n# Testing the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple to extract even elements from.\n\n    Returns:\n        tuple: A new tuple with only the even elements from the nested mixed tuple.\n\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((1, 2, (3, 4, (5, 6, (7, 8))), 9, 10)) == (2, (4, (6, (8))), 10)\nassert extract_even((1, 3, (5, 7, (9, 11, (13, 15))), 17, 19)) == (1, (5, (9, (13))), 17, 19)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(0, 5)\n    0.0\n    >>> surface_area(4, -2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n\n    if base_edge < 0:\n        raise ValueError(\"Base edge cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n\n    base_area = base_edge ** 2\n    lateral_area = base_edge * (2 * (2 * height / base_edge) ** 0.5)\n    total_area = base_area + lateral_area\n\n    return total_area\n\n# Test cases\nassert surface_area(3, 4) == 33.0\nassert surface_area(0, 5) == 0.0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n\n    The Catalan numbers form a sequence of natural numbers that occur in various counting problems,\n    such as the number of possible binary search trees and the number of possible convex polygons\n    with n + 2 sides.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is a negative integer.\n\n    Examples:\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(5)\n    42\n    >>> catalan_number(10)\n    16796\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Calculate the nth Catalan number using the formula: (2n)! / ((n+1)! * n!)\n    numerator = 1\n    denominator = 1\n\n    for i in range(1, n + 1):\n        numerator *= (n + i)\n        denominator *= i\n\n    return numerator // denominator\n\n\n# Testing the function\nassert catalan_number(0) == 1\nassert catalan_number(5) == 42\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries, where each dictionary represents an item with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or n is less than or equal to 0.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n        [{'name': 'Item-2', 'price': 555.22}]\n\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)\n        [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty.\")\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    sorted_items = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The input list to be split.\n    n (int): The index at which the list should be split.\n\n    Returns:\n    list: The modified list with the first part added to the end.\n\n    Examples:\n    >>> split_Arr([12,10,5,6,52,36],2)\n    [5, 6, 52, 36, 12, 10]\n    >>> split_Arr([1, 2, 3, 4, 5], 0)\n    [1, 2, 3, 4, 5]\n    >>> split_Arr([10, 20, 30, 40, 50], 5)\n    [10, 20, 30, 40, 50]\n    \"\"\"\n\n    if n == 0:\n        return arr\n\n    first_part = arr[:n]\n    second_part = arr[n:]\n    return second_part + first_part"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The list to be converted.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Testing the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-integer values.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([-1, 0, 1])\n        2\n        >>> big_diff([5, 5, 5, 5])\n        0\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if not all(isinstance(num, int) for num in nums):\n        raise ValueError(\"Input list must contain only integers\")\n\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    Raises:\n        ValueError: If start is greater than end.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n        >>> perfect_squares(10, 20)\n        [16, 25]\n        >>> perfect_squares(30, 1)\n        Traceback (most recent call last):\n            ...\n        ValueError: start must be less than or equal to end.\n    \"\"\"\n    if start > end:\n        raise ValueError(\"start must be less than or equal to end.\")\n\n    squares = []\n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            squares.append(num)\n\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * cmath.rect(1, theta)\n    return x, cmath.polar(x)\n\n# Testing the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    This function takes a list as input and swaps the first and last elements of the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n\n    Examples:\n    >>> swap_list([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n\n    >>> swap_list(['apple', 'banana', 'cherry'])\n    ['cherry', 'banana', 'apple']\n    \"\"\"\n\n    # Check if the list has at least two elements\n    if len(lst) < 2:\n        return lst\n\n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n\n    return lst\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms in the sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_of_product(3)\n    15\n    >>> sum_of_product(5)\n    120\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = 0\n    for i in range(1, n+1):\n        product = 1\n        for j in range(1, i+1):\n            product *= j\n        result += product\n\n    return result\n\n# Testing the function\nassert sum_of_product(3) == 15\nassert sum_of_product(5) == 120"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n        >>> removezero_ip(\"001.002.003.004\")\n        '1.2.3.4'\n        >>> removezero_ip(\"000.000.000.000\")\n        '0.0.0.0'\n    \"\"\"\n    octets = ip_address.split('.')\n    octets_without_zeroes = [str(int(octet)) for octet in octets]\n    return '.'.join(octets_without_zeroes)\n\n# Testing the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'\nassert removezero_ip(\"001.002.003.004\") == '1.2.3.4'\nassert removezero_ip(\"000.000.000.000\") == '0.0.0.0'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Finds the difference of the first even and first odd number of a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If there are no even or odd numbers in the list.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8])\n        0\n        >>> diff_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: No odd numbers found in the list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if len(even_numbers) > 0:\n        first_even = even_numbers[0]\n    else:\n        raise ValueError(\"No even numbers found in the list.\")\n\n    if len(odd_numbers) > 0:\n        first_odd = odd_numbers[0]\n    else:\n        raise ValueError(\"No odd numbers found in the list.\")\n\n    return first_even - first_odd"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the tuple.\n\n    Raises:\n    TypeError: If the input is not a tuple.\n\n    Examples:\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    80\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n    True\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Calculate the size of the tuple\n    size = sys.getsizeof(t)\n\n    # Calculate the size of each element in the tuple\n    for item in t:\n        size += sys.getsizeof(item)\n\n    return size"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the given arrays.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    \"\"\"\n\n    # Check if k is out of range\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n\n    # Initialize indices for both arrays\n    i, j = 0, 0\n\n    # Iterate until we reach the kth element\n    while i + j < k:\n        # If arr1 is exhausted, return the kth element from arr2\n        if i == len(arr1):\n            return arr2[j + k - i - 1]\n\n        # If arr2 is exhausted, return the kth element from arr1\n        if j == len(arr2):\n            return arr1[i + k - j - 1]\n\n        # Compare the elements at the current indices\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the kth element\n    return min(arr1[i], arr2[j])\n\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to count the number of digits\n    num_str = str(num)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit)**len(num_str) for digit in num_str)\n\n    # Check if the sum of the digits is equal to the original number\n    return sum_of_digits == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculates the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_average(10)\n    (55, 5.5)\n    >>> sum_average(0)\n    (0, 0)\n    >>> sum_average(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum_of_numbers = (n * (n + 1)) / 2\n    average = sum_of_numbers / n\n\n    return sum_of_numbers, average\n\n\n# Testing the function\nassert sum_average(10) == (55, 5.5)\nassert sum_average(0) == (0, 0)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(4) == True\nassert is_Even(5) == False\nassert is_Even(6) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated character is found.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        None\n    \"\"\"\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") == None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer 'n'.\n\n    Parameters:\n    n (int): The upper limit for lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to 'n'.\n\n    \"\"\"\n\n    def is_lucid(num):\n        \"\"\"\n        Checks if a number is lucid.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is lucid, False otherwise.\n\n        \"\"\"\n        if num == 1:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            return is_lucid(num - 2)\n\n    lucid_nums = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid_nums.append(i)\n\n    return lucid_nums\n\n# Testing the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverses the words seperated by spaces in a given string.\n\n    Parameters:\n    string (str): The input string containing words seperated by spaces.\n\n    Returns:\n    str: The reversed string with words in reverse order.\n\n    Example:\n    >>> reverse_words(\"python program\")\n    'program python'\n    \"\"\"\n    words = string.split()  # Split the string into a list of words\n    reversed_words = words[::-1]  # Reverse the list of words\n    reversed_string = ' '.join(reversed_words)  # Join the reversed words with spaces\n    return reversed_string\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True\nassert prime_num(15) == False\nassert prime_num(2) == True\nassert prime_num(1) == False"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The value in degrees to be converted.\n\n    Returns:\n    float: The value in radians.\n\n    Raises:\n    TypeError: If the input is not a number.\n\n    Examples:\n    >>> radian_degree(90)\n    1.5707963267948966\n    >>> radian_degree(0)\n    0.0\n    >>> radian_degree(360)\n    6.283185307179586\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise TypeError(\"Input must be a number.\")\n\n    return degrees * (math.pi / 180)\n\n# Testing the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not a valid regular expression.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    try:\n        match = re.search(pattern, string)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None, None, None\n    except re.error as e:\n        raise ValueError(\"Invalid regular expression: {}\".format(e))\n\n# Testing the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\nassert bell_Number(5) == 52"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list and returns the modified list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The modified list with the k'th element removed.\n\n    Raises:\n        IndexError: If the index k is out of range.\n\n    Examples:\n        >>> remove_kth_element([1, 2, 3, 4, 5], 2)\n        [1, 2, 4, 5]\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n        >>> remove_kth_element([1, 2, 3], 5)\n        Traceback (most recent call last):\n            ...\n        IndexError: list assignment index out of range\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"list assignment index out of range\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The column number (0-indexed) to find the maximum value.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the column number is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n        8\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1)\n        9\n    \"\"\"\n    if n >= len(matrix[0]):\n        raise IndexError(\"Column number is out of range.\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists, where the first list contains the first element of each sublist,\n    and the second list contains the second element of each sublist.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists, where the first list contains the first element of each sublist,\n              and the second list contains the second element of each sublist.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n\n# Testing the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Raises:\n        TypeError: If the input is not a list of tuples.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n        >>> cummulative_sum([(1,), (2,), (3,)])\n        6\n        >>> cummulative_sum([()])\n        0\n    \"\"\"\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    total_sum = 0\n    for t in tuple_list:\n        if not isinstance(t, tuple):\n            raise TypeError(\"Input must be a list of tuples.\")\n        total_sum += sum(t)\n\n    return total_sum\n\n# Test cases\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(1,), (2,), (3,)]) == 6\nassert cummulative_sum([()]) == 0"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculates the average value for each tuple in a given tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Raises:\n        ValueError: If the input is not a tuple of tuples.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    if not isinstance(tuples, tuple):\n        raise ValueError(\"Input must be a tuple of tuples.\")\n\n    averages = []\n    for t in tuples:\n        if not isinstance(t, tuple):\n            raise ValueError(\"Input must be a tuple of tuples.\")\n        averages.append(sum(t) / len(t))\n\n    return averages\n\n# Testing the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a % b for a, b in zip(tuple1, tuple2))\n\n# Testing the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise and returns the result as a new list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n        ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        [1.0, 1.0, 1.0]\n\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of list1 and list2 must be equal.\")\n\n    return [x / y for x, y in zip(list1, list2)]\n\n# Testing the function\nassert div_list([4, 5, 6], [1, 2, 3]) == [4.0, 2.5, 2.0]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    nums = ''\n    letters = ''\n\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n\n    return letters + nums\n\n# Testing the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([2, 4, 6, 8, 10])\n        5\n        >>> largest_subset([1, 2, 3, 4, 5])\n        1\n    \"\"\"\n\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if a and b are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, index):\n        \"\"\"\n        Recursive helper function to find the largest subset.\n\n        Args:\n            numbers (list): The remaining numbers to consider.\n            current_subset (list): The current subset being built.\n            index (int): The index of the current number being considered.\n\n        Returns:\n            list: The largest subset found so far.\n        \"\"\"\n        if index == len(numbers):\n            return current_subset\n\n        # Include the current number in the subset\n        new_subset = current_subset + [numbers[index]]\n        max_subset = find_subset(numbers, new_subset, index + 1)\n\n        # Exclude the current number from the subset\n        max_subset = max(max_subset, find_subset(numbers, current_subset, index + 1), key=len)\n\n        return max_subset\n\n    return len(find_subset(numbers, [], 0))"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        size (int): The size of the lists.\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        ValueError: If the size of the lists is not the same.\n\n    \"\"\"\n    if len(list1) != size or len(list2) != size:\n        raise ValueError(\"The size of the lists must be the same.\")\n\n    merged_list = sorted(list1 + list2)\n    if size % 2 == 0:\n        median = (merged_list[size // 2 - 1] + merged_list[size // 2]) / 2\n    else:\n        median = merged_list[size // 2]\n\n    return median\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number.\n\n    Raises:\n        TypeError: If nums is not a list or n is not an integer.\n        ValueError: If n is negative.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5], 2)\n        [1, 4, 9, 16, 25]\n        >>> nth_nums([1, 2, 3, 4, 5], 3)\n        [1, 8, 27, 64, 125]\n        >>> nth_nums([1, 2, 3, 4, 5], 0)\n        [1, 1, 1, 1, 1]\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"nums must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n cannot be negative\")\n\n    return [num ** n for num in nums]\n\n# Testing the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The converted string in uppercase.\n\n    Examples:\n    >>> is_upper(\"person\")\n    'PERSON'\n    >>> is_upper(\"Hello World\")\n    'HELLO WORLD'\n    >>> is_upper(\"UPPERCASE\")\n    'UPPERCASE'\n    \"\"\"\n    return string.upper()\n\n# Testing the function\nassert is_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n\n    Parameters:\n    radius (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle inscribed in the semicircle.\n    None: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = 0.5 * radius * height\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == 0.7853981633974483\nassert triangle_area(5) == 17.690890230927238"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n\n# Testing the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the even numbers.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> find_even_numbers([10, 15, 20, 25, 30])\n        [10, 20, 30]\n        >>> find_even_numbers([7, 9, 11, 13, 15])\n        []\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Testing the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx != 0 or dy != 0:\n                adjacent_coordinates.append([x + dx, y + dy])\n    return adjacent_coordinates\n\n# Testing the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by underscores and vice versa.\n    \"\"\"\n    modified_string = ''\n    for char in string:\n        if char == ' ':\n            modified_string += '_'\n        elif char == '_':\n            modified_string += ' '\n        else:\n            modified_string += char\n    return modified_string\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('Hello_World') == 'Hello World'\nassert replace_spaces('Python_is_awesome') == 'Python is awesome'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1, 2, 3, 4, 0, 0]\n        >>> move_zero([0,0,1,0,2,3])\n        [1, 2, 3, 0, 0, 0]\n        >>> move_zero([1,2,3,4,5])\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    # Create a new list to store non-zero elements\n    result = [num for num in lst if num != 0]\n\n    # Append the required number of zeros to the list\n    result.extend([0] * lst.count(0))\n\n    return result\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the given list.\n\n    Example:\n    >>> pair_xor_Sum([5,9,7,6],4)\n    47\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum_xor = 0\n\n    # Iterate through each pair of numbers\n    for i in range(n):\n        for j in range(i+1, n):\n            # Calculate the XOR of the pair and add it to the sum\n            sum_xor += (nums[i] ^ nums[j])\n\n    return sum_xor\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def heapify(arr, n, i):\n        \"\"\"\n        Builds a max heap from the given list.\n\n        Parameters:\n        arr (list): The list to be heapified.\n        n (int): The size of the heap.\n        i (int): The index of the current root node.\n\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr\n\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    buy_price (float): The price at which the stock was bought.\n    sell_price (float): The price at which the stock was sold.\n\n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return buy_price == sell_price\n\n# Test cases\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(1000, 1000) == True\nassert noprofit_noloss(2000, 1500) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    wind_velocity (float): Wind velocity in km/h.\n    temperature (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    Formula:\n    Wind chill index (\u00b0C) = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity^0.16 + 0.3965 * temperature * wind_velocity^0.16\n\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity**0.16 + 0.3965 * temperature * wind_velocity**0.16\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Calculates the sum of the lengths of names in a given list, excluding names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of strings representing names.\n\n    Returns:\n        int: The sum of the lengths of names after excluding lowercase names.\n\n    Examples:\n        >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n        >>> sum_name_lengths(['Alice', 'Bob', 'Charlie'])\n        18\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if not name[0].islower():\n            total_length += len(name)\n    return total_length\n\n# Testing the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\nassert sum_name_lengths(['Alice', 'Bob', 'Charlie']) == 18"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    A nonagonal number is a figurate number that represents a polygon with n sides,\n    where each side has a length of 1. The formula to calculate the nth nonagonal number is:\n    n(3n-2)/2.\n\n    Args:\n        n (int): The position of the nonagonal number to be calculated.\n\n    Returns:\n        int: The nth nonagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> is_nonagonal(1)\n        1\n        >>> is_nonagonal(2)\n        10\n        >>> is_nonagonal(3)\n        35\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2) // 2\n\n# Testing the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 10\nassert is_nonagonal(3) == 35\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z', except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z', except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()  # Split the text into words\n\n    for word in words:\n        if len(word) >= 3 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonzabc\") == False\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzabcz\") == True\nassert text_match_wordz_middle(\"pythonzabczdefz\") == True\nassert text_match_wordz_middle(\"pythonzabczdef\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverses the given array up to the given position 'k'.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position up to which the array should be reversed.\n\n    Returns:\n    list: The reversed array.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 2)\n    [2, 1, 3, 4, 5, 6]\n    \"\"\"\n\n    # Reverse the first 'k' elements of the array\n    arr[:k] = arr[:k][::-1]\n\n    return arr\n\n# Testing the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 2) == [2, 1, 3, 4, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_input, dict_input):\n    \"\"\"\n    Adds a dictionary to a tuple and returns the updated tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        dict_input (dict): The input dictionary.\n\n    Returns:\n        tuple: The updated tuple with the dictionary added.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tuple_input + (dict_input,)\n\n# Testing the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Finds the maximum average over all existing paths in a square matrix.\n\n    Args:\n        matrix (list of lists): The square matrix of size N*N, where each cell is associated with a specific cost.\n\n    Returns:\n        float: The maximum average over all existing paths.\n\n    Raises:\n        ValueError: If the input matrix is not a square matrix.\n\n    \"\"\"\n\n    # Check if the input matrix is a square matrix\n    N = len(matrix)\n    for row in matrix:\n        if len(row) != N:\n            raise ValueError(\"Input matrix is not a square matrix.\")\n\n    # Initialize the memoization table\n    memo = [[0] * N for _ in range(N)]\n\n    # Calculate the maximum average over all existing paths\n    def dfs(i, j):\n        # Base case: Reached the bottom right cell\n        if i == N - 1 and j == N - 1:\n            return matrix[i][j]\n\n        # If the value is already calculated, return it\n        if memo[i][j] != 0:\n            return memo[i][j]\n\n        # Calculate the maximum average by exploring the right and down cells\n        right_avg = float('-inf')\n        down_avg = float('-inf')\n        if j + 1 < N:\n            right_avg = (matrix[i][j] + dfs(i, j + 1)) / 2\n        if i + 1 < N:\n            down_avg = (matrix[i][j] + dfs(i + 1, j)) / 2\n\n        # Update the memoization table\n        memo[i][j] = max(right_avg, down_avg)\n        return memo[i][j]\n\n    # Start the depth-first search from the top-left cell\n    return dfs(0, 0)\n\n\n# Test the function\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on their height and weight, returning only those that meet the minimum criteria.\n\n    Args:\n        students (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required.\n        min_weight (float): The minimum weight required.\n\n    Returns:\n        dict: A dictionary containing only the students that meet the minimum height and weight criteria.\n\n    Example:\n        >>> students = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n        >>> filter_data(students, 6.0, 70)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n\n# Testing the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nassert filter_data(students, 6.0, 70) == {'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n        >>> count_same_pair([1, 2, 3], [4, 5, 6])\n        0\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count\n\n# Testing the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) == 4\nassert count_same_pair([1, 2, 3], [4, 5, 6]) == 0"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of a number raised to a specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to which the base is raised.\n\n    Returns:\n    int: The sum of all digits of the base raised to the power.\n\n    Example:\n    >>> power_base_sum(2, 100)\n    115\n    \"\"\"\n\n    # Calculate the number raised to the power\n    result = base ** power\n\n    # Convert the result to a string and split into individual digits\n    digits = list(str(result))\n\n    # Convert each digit back to integer and calculate the sum\n    digit_sum = sum(int(digit) for digit in digits)\n\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Testing the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(numbers):\n    \"\"\"\n    This function takes a tuple of numbers and returns a tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Args:\n        numbers (tuple): A tuple of numbers.\n\n    Returns:\n        tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Raises:\n        ValueError: If the input is not a tuple or if it is an empty tuple.\n\n    Examples:\n        >>> multiply_elements((1, 5, 7, 8, 10))\n        (5, 35, 56, 80)\n        >>> multiply_elements((2, 4, 6))\n        (8, 12)\n        >>> multiply_elements(())\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuple cannot be empty.\n    \"\"\"\n    if not isinstance(numbers, tuple):\n        raise ValueError(\"Input must be a tuple.\")\n    if len(numbers) == 0:\n        raise ValueError(\"Input tuple cannot be empty.\")\n\n    result = []\n    for i in range(len(numbers) - 1):\n        result.append(numbers[i] * numbers[i + 1])\n\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n\n        >>> sum_list([1, 2, 3], [4, 5, 6])\n        [5, 7, 9]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]\n\n# Testing the function\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n\n# Testing the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateral_surface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either r or h is negative.\n\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    slant_height = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_area = math.pi * r * slant_height\n\n    return lateral_area\n\n# Test the function\nassert lateral_surface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced by colons.\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':')\n    return string\n\n# Testing the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if not found.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        -1\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    >>> sum_Of_Subarray_Prod([2, 3, 4, 5])\n    94\n    \"\"\"\n\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        sublist_product = 1\n        for j in range(i, n):\n            sublist_product *= lst[j]\n            result += sublist_product\n\n    return result\n\n# Testing the function\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([2, 3, 4, 5]) == 94"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number whose middle bits need to be toggled.\n\n    Returns:\n        int: The number with toggled middle bits.\n\n    Raises:\n        ValueError: If the input number is negative.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n        >>> toggle_middle_bits(15)\n        15\n        >>> toggle_middle_bits(0)\n        0\n        >>> toggle_middle_bits(-1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Input number must be non-negative.\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Count the number of bits in the given number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in a sorted list.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to find the left insertion point for.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    Examples:\n    >>> left_insertion([1, 2, 4, 5], 6)\n    4\n    >>> left_insertion([1, 2, 4, 5], 3)\n    2\n    >>> left_insertion([1, 2, 4, 5], 1)\n    0\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU].*'\n    return bool(re.match(pattern, string))\n\n# Test cases\nassert check_str(\"annie\") == True\nassert check_str(\"banana\") == False\nassert check_str(\"apple\") == True\nassert check_str(\"Elephant\") == True\nassert check_str(\"cat\") == False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is triangular.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is triangular, False otherwise.\n\n        \"\"\"\n        # Calculate the triangular number up to the given number\n        triangular_num = 0\n        i = 1\n        while triangular_num < num:\n            triangular_num += i\n            i += 1\n\n        # Check if the calculated triangular number is equal to the given number\n        return triangular_num == num\n\n    # Find the index of the smallest triangular number with n digits\n    index = 1\n    while True:\n        triangular_num = index * (index + 1) // 2\n        if is_triangular(triangular_num) and len(str(triangular_num)) == n:\n            return index\n        index += 1\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert a given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: A dictionary where the keys are elements from the tuple and the values are the corresponding adjacent elements.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n\n        >>> tuple_to_dict(('a', 'b', 'c', 'd'))\n        {'a': 'b', 'c': 'd'}\n\n        >>> tuple_to_dict(('x',))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuple must have an even length.\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length.\")\n\n    return {t[i]: t[i+1] for i in range(0, len(t), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a given string are the same or not.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) <= 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a regular tetrahedron.\n\n    Parameters:\n    a (float): The length of the sides of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the input value is not a positive number.\n\n    \"\"\"\n    if a <= 0:\n        raise ValueError(\"Input value must be a positive number.\")\n\n    # Calculate the area of a tetrahedron using Heron's formula\n    area = math.sqrt(3) * a**2\n\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    if num_items == 0 or len(lst) <= 1:\n        return lst\n\n    num_items = num_items % len(lst)  # Handle cases where num_items is larger than the length of the list\n\n    return lst[-num_items:] + lst[:-num_items]\n\n\n# Testing the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value.\n\n    Parameters:\n    t (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return None in t\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Test cases\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    This function takes a string as input and returns the string with spaces between words starting with capital letters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with spaces between words starting with capital letters.\n\n    Examples:\n    >>> capital_words_spaces(\"Python\")\n    'Python'\n    >>> capital_words_spaces(\"HelloWorld\")\n    'Hello World'\n    >>> capital_words_spaces(\"ThisIsAString\")\n    'This Is A String'\n    \"\"\"\n\n    # Split the string into words\n    words = string.split()\n\n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i].istitle():\n            # Insert a space before the word\n            words[i] = \" \" + words[i]\n\n    # Join the words back into a string\n    result = \"\".join(words)\n\n    return result"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of numbers in ascending order.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a string.\n        ValueError: If any element in the list is not a valid number.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    for num in numbers:\n        if not isinstance(num, str):\n            raise TypeError(\"All elements in the list must be strings.\")\n\n    try:\n        sorted_numbers = sorted(numbers, key=lambda x: int(x))\n    except ValueError:\n        raise ValueError(\"All elements in the list must be valid numbers.\")\n\n    return sorted_numbers\n\n\n# Testing the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tpl (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    return lst + list(tpl)\n\n# Testing the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n\n    def is_min_heap(arr, i):\n        \"\"\"\n        Helper function to recursively check if the subtree rooted at index i is a min heap.\n\n        Parameters:\n        arr (list): The input array.\n        i (int): The index of the root of the subtree.\n\n        Returns:\n        bool: True if the subtree is a min heap, False otherwise.\n        \"\"\"\n        n = len(arr)\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        # Base case: leaf nodes are considered min heaps\n        if left_child_index >= n:\n            return True\n\n        # Check if the left child is smaller than the root\n        if arr[left_child_index] < arr[i]:\n            return False\n\n        # Recursively check the left and right subtrees\n        if right_child_index < n and arr[right_child_index] < arr[i]:\n            return False\n\n        return is_min_heap(arr, left_child_index) and is_min_heap(arr, right_child_index)\n\n    return is_min_heap(arr, 0)\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 1, 2, 3]) == False\nassert check_min_heap([1, 2, 3, 4, 5]) == True\nassert check_min_heap([5, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test cases\nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(10) == 341"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples containing records.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the second element of each tuple\n    return sorted_records[:k]  # Return the first k records\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test cases\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]\nassert extract_index_list([1, 2, 3, 4, 5],[1, 2, 3, 4, 5],[1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\nassert extract_index_list([1, 2, 3, 4, 5],[6, 7, 8, 9, 10],[11, 12, 13, 14, 15]) == []"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two numbers.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([10, 5, 8, 7, 2])\n        7\n        >>> second_smallest([1])\n        ValueError: List must have at least two numbers.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers.\")\n\n    smallest = min(numbers)\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n\n    return second_smallest\n\n# Test cases\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2\nassert second_smallest([10, 5, 8, 7, 2]) == 5"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        int: The count of pairs of reverse strings.\n\n    Examples:\n        >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n        2\n        >>> count_reverse_pairs([\"hello\", \"world\", \"python\"])\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Testing the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"hello\", \"world\", \"python\"]) == 0"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        parts = string.split('.')\n        if len(parts) == 2 and len(parts[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == False\nassert is_decimal('123.') == False\nassert is_decimal('123.1') == True\nassert is_decimal('123.111.11') == False\nassert is_decimal('abc') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([1]) == True\nassert unique_Element([]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    # Create a dictionary to map month numbers to their corresponding number of days\n    month_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number is valid\n    if month_number < 1 or month_number > 12:\n        return False\n\n    # Check if the number of days in the given month is 30\n    if month_days[month_number] == 30:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_month_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than 2 elements.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((10, 20, 30, 40, 50), 5)\n    10\n    >>> find_min_diff((1, 1, 1, 1), 4)\n    0\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least 2 elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n\n    min_diff = float('inf')  # Initialize minimum difference as positive infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string to count the digits from.\n\n    Returns:\n    int: The count of digits in the given string.\n\n    Examples:\n    >>> number_ctr('program2bedone')\n    1\n    >>> number_ctr('12345')\n    5\n    >>> number_ctr('abcdefg')\n    0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Testing the function\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abcdefg') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    A polite number is a positive integer that does not have a non-trivial divisor with an even sum of digits.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Examples:\n    >>> is_polite(7)\n    11\n    >>> is_polite(10)\n    13\n    >>> is_polite(15)\n    17\n    \"\"\"\n\n    def has_even_sum_of_digits(num):\n        \"\"\"\n        Helper function to check if a number has an even sum of digits.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the sum of digits is even, False otherwise.\n        \"\"\"\n        digit_sum = sum(int(digit) for digit in str(num))\n        return digit_sum % 2 == 0\n\n    count = 0\n    num = 1\n    while count < n:\n        if not has_even_sum_of_digits(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases\nassert is_polite(7) == 11\nassert is_polite(10) == 13\nassert is_polite(15) == 17"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in the given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of tuples, where each tuple contains consecutive items from the input list.\n\n    Example:\n    >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Testing the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target):\n    \"\"\"\n    Count the number of pairs whose sum is equal to the given target.\n\n    Args:\n        nums (list): A list of numbers.\n        target (int): The target sum.\n\n    Returns:\n        int: The count of pairs whose sum is equal to the target.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 5, 3, 2, 4], 6)\n        2\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def diff(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the elements that are present in list1 but not in list2.\n\n    Example:\n    >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n# Testing the function\nassert diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    202\n    >>> odd_num_sum(4)\n    432\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    odd_num = 1\n\n    for _ in range(n):\n        sum_of_powers += odd_num ** 4\n        odd_num += 2\n\n    return sum_of_powers\n\n# Testing the function\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 202\nassert odd_num_sum(4) == 432"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Parameters:\n    expression (str): The expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n\n    Examples:\n    >>> check_expression(\"{()}[{}]\")\n    True\n    >>> check_expression(\"{[}]\")\n    False\n    >>> check_expression(\"({[}])\")\n    False\n    \"\"\"\n\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            opening_bracket = stack.pop()\n            if opening_brackets.index(opening_bracket) != closing_brackets.index(char):\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n        >>> remove_length('Hello world', 5)\n        'Hello world'\n        >>> remove_length('Python is awesome', 2)\n        'Python is awesome'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Testing the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The main string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n               If there is no match, returns None.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        first_occurrence = string.index(substring)\n        last_occurrence = string.rindex(substring)\n        return substring, first_occurrence, last_occurrence\n    else:\n        return None\n\n# Test cases\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)\nassert occurrence_substring('python programming, python language', 'java') == None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([1,2,3,4,5,6,7,8]) == False\nassert odd_position([1,3,5,7,9]) == True\nassert odd_position([2,4,6,8,10]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Calculates the sum of non-repeated elements in a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n\n    Examples:\n    >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n    21\n    >>> find_sum([1, 1, 1, 1, 1, 1, 1, 1])\n    1\n    >>> find_sum([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate over the list\n    for num in lst:\n        # Check if the element is already in the set\n        if num not in unique_elements:\n            # If not, add it to the set and continue to the next element\n            unique_elements.add(num)\n        else:\n            # If the element is already in the set, it is a duplicate\n            # so remove it from the set\n            unique_elements.remove(num)\n\n    # Calculate the sum of unique elements\n    sum_of_unique_elements = sum(unique_elements)\n\n    return sum_of_unique_elements\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i-1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n\n    result.append(current_sublist)\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n\n# Testing the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of a given number is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10) == True"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in a given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    >>> odd_length_sum([1, 2, 4, 5, 6])\n    37\n    >>> odd_length_sum([1, 2, 3, 4, 5, 6, 7])\n    60\n    \"\"\"\n\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_length = j - i + 1\n            if subarray_length % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result\n\n# Testing the function\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 4, 5, 6]) == 37\nassert odd_length_sum([1, 2, 3, 4, 5, 6, 7]) == 60"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    This function takes a list as input and returns the product of the first even and odd numbers in the list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The product of the first even and odd numbers in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([2,4,6,8])\n    16\n    >>> mul_even_odd([1,3,5,7])\n    Traceback (most recent call last):\n        ...\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                break\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(10, 20, 30, 40)\")\n        (10, 20, 30, 40)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5)\")\n        (1, 2, 3, 4, 5)\n    \"\"\"\n    try:\n        # Remove the parentheses from the string\n        tuple_str = tuple_str.strip(\"()\")\n\n        # Split the string by commas to get individual elements\n        elements = tuple_str.split(\",\")\n\n        # Convert each element to an integer\n        int_tuple = tuple(int(element) for element in elements)\n\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation\")\n\n# Test cases\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(10, 20, 30, 40)\") == (10, 20, 30, 40)\nassert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Finds the right insertion point for a specified value in a sorted list.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted into the list.\n\n    Returns:\n    int: The index where the target value should be inserted into the list.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.match(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"abb\")\nassert not text_match_three(\"ab\")\nassert not text_match_three(\"a\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of elements to be included in the tuple.\n        string (str): The string to be included in the tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])\n\n# Testing the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([1,2,3,4,5,6]) == False\nassert even_position([2,4,6,8,10]) == True\nassert even_position([2,4,6,8,9]) == False"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with nested tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n        >>> remove_nested(('a', 'b', ('c', 'd'), 'e'))\n        ('a', 'b', 'e')\n    \"\"\"\n    return tuple(x for x in t if not isinstance(x, tuple))\n\n# Testing the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested(('a', 'b', ('c', 'd'), 'e')) == ('a', 'b', 'e')"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given list.\n\n    Parameters:\n    lst (list): The input list containing sublists.\n\n    Returns:\n    int: The number of lists in the input list.\n\n    Examples:\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    >>> count_list([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]])\n    4\n    >>> count_list([[1], [2], [3], [4], [5]])\n    5\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Testing the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 2, 3], [4, 5], [6], [7, 8, 9, 10]]) == 4\nassert count_list([[1], [2], [3], [4], [5]]) == 5"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of elements.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The index of the last occurrence of the target element in the array.\n         Returns -1 if the target element is not found.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 3)\n    2\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    This function checks if a given text starts with 'a' and ends with 'b',\n    while allowing anything in between.\n\n    Args:\n        text (str): The text to be checked.\n\n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n\n# Test cases\nassert text_starta_endb(\"aabbbb\") == True\nassert text_starta_endb(\"abbbbb\") == False\nassert text_starta_endb(\"aabbbbbb\") == False\nassert text_starta_endb(\"aaabbbb\") == False\nassert text_starta_endb(\"aabbbb\") == True"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculates the sum of all values in the given dictionary.\n\n    Args:\n        dictionary (dict): The dictionary to calculate the sum of.\n\n    Returns:\n        int: The sum of all values in the dictionary.\n\n    Raises:\n        TypeError: If the input is not a dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b':200, 'c':300})\n        600\n\n        >>> return_sum({'x': 5, 'y': 10, 'z': 15})\n        30\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    return sum(dictionary.values())\n\n# Testing the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the given range.\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Raises:\n    ValueError: If l is greater than r or either l or r is not a positive integer.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    25\n    >>> sum_in_range(10, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: l must be less than or equal to r.\n    >>> sum_in_range(2.5, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: l and r must be positive integers.\n    \"\"\"\n\n    if not isinstance(l, int) or not isinstance(r, int) or l <= 0 or r <= 0:\n        raise ValueError(\"l and r must be positive integers.\")\n\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r.\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum\n\n# Test cases\nassert sum_in_range(2, 5) == 8\nassert sum_in_range(1, 10) == 25\nassert sum_in_range(10, 1) == 25"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculates the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the elements in the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([-1, 0, 1])\n    0\n    >>> _sum([10, 20, 30, 40, 50])\n    150\n    \"\"\"\n    return sum(arr)\n\n# Testing the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a given number to the left by d positions.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of positions to rotate the bits.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(0b1100, 3)\n        120\n    \"\"\"\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Parameters:\n    string (str): The input string from which whitespaces will be removed.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n\n    Examples:\n    >>> remove_all_spaces('python  program')\n    'pythonprogram'\n    >>> remove_all_spaces('  python  program  ')\n    'pythonprogram'\n    >>> remove_all_spaces('')\n    ''\n    \"\"\"\n    return string.replace(' ', '')\n\n# Testing the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('  python  program  ') == 'pythonprogram'\nassert remove_all_spaces('') == ''"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    if num == 0 or num == 1:\n        return True\n\n    left = 1\n    right = num // 2\n\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\n# Test cases\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([1, 2, 3, 4, 5]) == False\nassert is_product_even([2, 4, 6, 8]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The list in the input list of lists with the highest sum of elements.\n\n    Raises:\n    ValueError: If the input list is empty or if any of the sublists are empty.\n\n    Examples:\n    >>> max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    [10, 11, 12]\n    >>> max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n    [1, 2, 3]\n    >>> max_sum_list([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3]\n    >>> max_sum_list([[1, 2, 3]])\n    [1, 2, 3]\n    >>> max_sum_list([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> max_sum_list([[]])\n    Traceback (most recent call last):\n        ...\n    ValueError: Sublist cannot be empty.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        if not sublist:\n            raise ValueError(\"Sublist cannot be empty.\")\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n        >>> max_run_uppercase('abcDEFG')\n        1\n        >>> max_run_uppercase('ABC')\n        3\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)\n\n# Test cases\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('abcDEFG') == 1\nassert max_run_uppercase('ABC') == 3"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == None\nassert first_odd([2, 3, 4, 5]) == 3\nassert first_odd([4, 6, 8, 1, 3, 5]) == 1"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_list, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tuple_list (tuple): A tuple of tuples.\n        k (int): The value to check for.\n\n    Returns:\n        bool: True if the k is found in any of the tuples, False otherwise.\n    \"\"\"\n    for t in tuple_list:\n        if k in t:\n            return True\n    return False\n\n# Test cases\nassert check_K(((10, 4, 5, 6, 8), (1, 2, 3), (7, 9, 11)), 6) == True\nassert check_K(((10, 4, 5, 6, 8), (1, 2, 3), (7, 9, 11)), 12) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if all elements in tuple2 are smaller than their corresponding elements in tuple1, False otherwise.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == False\nassert check_smaller((1, 2, 3), (0, 1, 3)) == False"}
