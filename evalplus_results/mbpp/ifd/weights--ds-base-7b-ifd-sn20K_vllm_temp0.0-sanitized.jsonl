{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list containing the shared elements.\n\n    Raises:\n        TypeError: If either list1 or list2 is not a list.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (4, 5)\n        >>> similar_elements((1, 2, 3), (4, 5, 6))\n        ()\n    \"\"\"\n    if not isinstance(list1, list) or not isinstance(list2, list):\n        raise TypeError(\"Both arguments must be lists.\")\n\n    return tuple(set(list1) & set(list2))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False"}
{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of integers.\n        n (int): The number of largest integers to return.\n\n    Returns:\n        list: A list of the n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n        >>> heap_queue_largest([1, 2, 3, 4, 5], 5)\n        [5, 4, 3, 2, 1]\n        >>> heap_queue_largest([10, 20, 30, 40, 50], 6)\n        Traceback (most recent call last):\n            ...\n        ValueError: n is greater than the length of the numbers list.\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n is greater than the length of the numbers list.\")\n\n    # Use a min-heap to store the n largest integers\n    heap = []\n    for num in numbers:\n        if len(heap) < n:\n            heapq.heappush(heap, num)\n        else:\n            heapq.heappushpop(heap, num)\n\n    # Return the n largest integers in descending order\n    return sorted(heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n\n    # XOR the two numbers to get a number with only the bits that differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the xor_result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is 1, then the numbers differ at one bit position only\n    return count == 1"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the squares of each number in the input list.\n\n    Examples:\n    >>> square_nums([1, 2, 3, 4, 5])\n    [1, 4, 9, 16, 25]\n    >>> square_nums([-2, 0, 2])\n    [4, 0, 4]\n    >>> square_nums([])\n    []\n    \"\"\"\n    return [num ** 2 for num in nums]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations required to get the same string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Raises:\n    TypeError: If the input is not a string.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"\")\n    0\n    \"\"\"\n\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(string) == 0:\n        return 0\n\n    rotations = 1\n    while string != string[1:] + string[0]:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n        ValueError: If the character is not found in the string.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"python\", \"o\")\n        'pythn'\n        >>> remove_Occ(\"python\", \"z\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Character not found in the string.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_index = string.find(char)\n\n    # If the character is not found, raise an exception\n    if first_index == -1:\n        raise ValueError(\"Character not found in the string.\")\n\n    # Find the last occurrence of the character\n    last_index = string.rfind(char)\n\n    # Remove the first occurrence of the character\n    modified_string = string[:first_index] + string[first_index+1:]\n\n    # Remove the last occurrence of the character\n    modified_string = modified_string[:last_index] + modified_string[last_index+1:]\n\n    return modified_string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The matrix to be sorted.\n\n    Returns:\n        list: The sorted matrix.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    sorted_matrix = sorted(matrix, key=lambda row: sum(row))\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input values is negative.\n\n    Examples:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    >>> find_Volume(0, 8, 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base length cannot be negative.\n    \"\"\"\n\n    if base < 0:\n        raise ValueError(\"Base length cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n    if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string contains lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the text into words\n    words = text.split()\n\n    # Iterate over each word\n    for word in words:\n        # Check if the word contains lowercase letters joined with an underscore\n        if any(char.islower() and word.count('_') == 1 and word.count(char) == 1 for char in word):\n            return True\n\n    return False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(0)\n    0.0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n\n    perimeter = 4 * side_length\n    return perimeter"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n        >>> remove_dirty_chars(\"hello\", \"world\")\n        'hello'\n        >>> remove_dirty_chars(\"\", \"\")\n        ''\n    \"\"\"\n    # Convert both strings to sets for efficient membership testing\n    set1 = set(string1)\n    set2 = set(string2)\n\n    # Use set difference to remove characters from string1 that are present in string2\n    clean_string = ''.join(char for char in string1 if char not in set2)\n\n    return clean_string"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate through each element in the array\n    for num in arr:\n        # If the element is already in the set, it is a duplicate\n        if num in unique_elements:\n            return True\n        # Otherwise, add the element to the set\n        unique_elements.add(num)\n\n    # If no duplicate is found, return False\n    return False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer that is the product of two consecutive integers.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    if num <= 0:\n        return False\n\n    for i in range(1, num):\n        if i * (i + 1) == num:\n            return True\n\n    return False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n\n    # Reverse the number\n    reverse_num = int(str(num)[::-1])\n\n    # Check if the number is one less than twice its reverse\n    if num == reverse_num * 2 - 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of integers representing the digits.\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n        >>> find_Max_Num([4, 2, 9, 7])\n        9742\n        >>> find_Max_Num([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not digits:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and convert it back to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculate the nth octagonal number.\n\n    An octagonal number is a figurate number that represents a regular octagon.\n    The nth octagonal number can be calculated using the formula: n * (3 * n - 2).\n\n    Args:\n        n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n        int: The nth octagonal number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> is_octagonal(5)\n        65\n        >>> is_octagonal(10)\n        1265\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    \"\"\"\n    Count the number of substrings with the sum of digits equal to their length.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The number of substrings with the sum of digits equal to their length.\n\n    Examples:\n    >>> count_Substrings('112112')\n    6\n    >>> count_Substrings('12345')\n    0\n    >>> count_Substrings('99999')\n    45\n    \"\"\"\n\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        digit_sum = 0\n        for j in range(i, n):\n            digit_sum += int(s[j])\n            if digit_sum == j - i + 1:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-10, -20, -1, -45, -99])\n        -99\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n        >>> max_difference([(1, 2), (3, 4)])\n        1\n        >>> max_difference([(1, 1), (2, 2), (3, 3)])\n        0\n    \"\"\"\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        marks (list): A list of tuples containing subject names and marks.\n\n    Returns:\n        list: A sorted list of tuples based on the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Parameters:\n    lst (list): The list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Examples:\n    >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n    21\n    >>> recursive_list_sum([1, 2, [3,4],[5,6], 7])\n    28\n    >>> recursive_list_sum([1, 2, [3,4],[5,6], [7, [8, 9]]])\n    45\n    \"\"\"\n\n    # Base case: if the input is not a list, raise a TypeError\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Base case: if the list is empty, return 0\n    if len(lst) == 0:\n        return 0\n\n    # Recursive case: if the first element is a list, recursively call the function on it\n    if isinstance(lst[0], list):\n        return recursive_list_sum(lst[0]) + recursive_list_sum(lst[1:])\n\n    # Recursive case: if the first element is not a list, add it to the sum and recursively call the function on the rest of the list\n    return lst[0] + recursive_list_sum(lst[1:])"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The number of positive numbers in the list.\n\n    Examples:\n    >>> pos_count([1,-2,3,-4])\n    2\n    >>> pos_count([-1,-2,-3,-4])\n    0\n    >>> pos_count([1,2,3,4])\n    4\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the array is increasing or decreasing\n    increasing = arr[0] <= arr[-1]\n    decreasing = arr[0] >= arr[-1]\n\n    # Iterate through the array\n    for i in range(1, len(arr)):\n        # If the array is increasing, check if the current element is less than or equal to the previous element\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        # If the array is decreasing, check if the current element is greater than or equal to the previous element\n        if decreasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 2, 4]) == False\nassert is_monotonic([1, 3, 2, 4]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublist):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list to be checked.\n    sublist (list): The sublist to be searched within the main list.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sublist) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublist) + 1):\n        if lst[i:i+len(sublist)] == sublist:\n            return True\n\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    # Get the length of the first tuple\n    length = len(tuples_list[0])\n\n    # Check if all tuples have equal length\n    for t in tuples_list:\n        if len(t) != length:\n            return False\n\n    return True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n\n    # Check if the number is negative\n    if num < 0:\n        return False\n\n    # Check if the number is a perfect square\n    if int(num ** 0.5) ** 2 == num:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(num ** 0.5) + 1):\n        j = int(num - i ** 2)\n        if int(j ** 0.5) ** 2 == j:\n            return True\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the given sequence follows the patterns in the array.\n\n    Args:\n        patterns (list): A list of patterns to be checked.\n        sequence (list): A list of elements to be checked against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n\n    Examples:\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n        True\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"])\n        False\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] not in pattern_dict:\n            pattern_dict[patterns[i]] = sequence[i]\n        elif pattern_dict[patterns[i]] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n        >>> find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3)\n        [(1, 2, 3), (4, 5, 6), (7, 8, 9)]\n        >>> find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2)\n        []\n    \"\"\"\n    return [t for t in tuples_list if all(x % k == 0 for x in t)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of odd-indexed digits and even-indexed digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through the digits of the number\n    for i, digit in enumerate(number_str):\n        # Add the digit to the appropriate sum based on its index\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Check if the difference between odd_sum and even_sum is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to be checked.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    A tetrahedral number is the sum of the first n natural numbers,\n    where n is the position of the number in the sequence.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    return (n * (n + 1) * (n + 2)) // 6"}
{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(0)\n    0.0\n    >>> volume_sphere(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The index of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first three numbers\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(0)\n    0.0\n    >>> surfacearea_sphere(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    surface_area = 4 * math.pi * radius ** 2\n    return surface_area"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculate the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hexagonal_number(3)\n    19\n    >>> centered_hexagonal_number(4)\n    37\n    >>> centered_hexagonal_number(5)\n    61\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: The merged dictionary.\n\n    Raises:\n        TypeError: If any of the arguments is not a dictionary.\n\n    Examples:\n        >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n        {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    \"\"\"\n    # Check if all arguments are dictionaries\n    if not all(isinstance(d, dict) for d in (dict1, dict2, dict3)):\n        raise TypeError(\"All arguments must be dictionaries.\")\n\n    # Merge dictionaries\n    merged_dict = {**dict1, **dict2, **dict3}\n\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency count of each element in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n\n    Example:\n    >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n    {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Parameters:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> closest_num(11)\n    10\n    >>> closest_num(10)\n    9\n    >>> closest_num(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    # Iterate from n-1 downwards until a number is found that is divisible by 10\n    for i in range(n-1, 0, -1):\n        if i % 10 == 0:\n            return i\n\n    return None"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n        >>> len_log([])\n        ValueError: List is empty.\n        >>> len_log(\"not a list\")\n        TypeError: Input must be a list.\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(words) == 0:\n        raise ValueError(\"List is empty.\")\n\n    max_len = 0\n    for word in words:\n        max_len = max(max_len, len(word))\n\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to be checked.\n\n    Returns:\n        bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for string in lst:\n        if substring in string:\n            return True\n    return False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that alternates between even and odd digits.\n    For example, 1212121 is an undulating number as it alternates between even and odd digits.\n\n    Args:\n        number (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    number_str = str(number)\n\n    # Check if the length of the number is less than 3\n    if len(number_str) < 3:\n        return False\n\n    # Get the first two digits\n    first_digit = int(number_str[0])\n    second_digit = int(number_str[1])\n\n    # Check if the first two digits are even or odd\n    if first_digit % 2 == 0 and second_digit % 2 == 0:\n        return False\n    elif first_digit % 2 != 0 and second_digit % 2 != 0:\n        return False\n\n    # Check if the remaining digits alternate between even and odd\n    for i in range(2, len(number_str), 2):\n        current_digit = int(number_str[i])\n        if current_digit % 2 == first_digit % 2:\n            return False\n        first_digit = current_digit\n\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' raised to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of 'a' raised to the power 'b'.\n\n    Raises:\n    TypeError: If 'a' is not a number or 'b' is not an integer.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2.5, 3)\n    15.625\n    >>> power(-2, 5)\n    -32\n    \"\"\"\n\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"'a' must be a number.\")\n    if not isinstance(b, int):\n        raise TypeError(\"'b' must be an integer.\")\n\n    return a ** b"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    str: The first value of the tuple with the smallest second value.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    >>> index_minimum([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list is empty.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    min_value = min(lst, key=lambda x: x[1])\n    return min_value[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> find_min_length([[1], [1, 2]])\n    1\n    >>> find_min_length([[1, 2, 3], [4, 5], [6]])\n    1\n    >>> find_min_length([[1, 2], [3, 4, 5, 6]])\n    2\n    \"\"\"\n\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Calculate the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which divisors need to be calculated.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(24)\n    8\n    >>> divisor(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 2\n            if i == int(n**0.5):\n                count -= 1\n\n    return count"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a flattened list of lists as input and returns a dictionary with the frequency of each element.\n\n    Parameters:\n    lst (list): A flattened list of lists.\n\n    Returns:\n    dict: A dictionary with elements as keys and their frequencies as values.\n\n    Example:\n    >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n    {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n\n    # Initialize an empty dictionary to store the frequencies\n    freq_dict = {}\n\n    # Iterate over each sublist in the input list\n    for sublist in lst:\n        # Iterate over each element in the sublist\n        for element in sublist:\n            # If the element is already in the dictionary, increment its frequency by 1\n            if element in freq_dict:\n                freq_dict[element] += 1\n            # If the element is not in the dictionary, add it with a frequency of 1\n            else:\n                freq_dict[element] = 1\n\n    return freq_dict"}
{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([])\n        ValueError: List is empty.\n        >>> multiply_num(\"not a list\")\n        TypeError: Input must be a list.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"List is empty.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert a decimal number to its binary equivalent.\n\n    Parameters:\n    decimal (int): The decimal number to be converted.\n\n    Returns:\n    str: The binary equivalent of the decimal number as a string with no leading zeros.\n\n    Raises:\n    ValueError: If the input is not a non-negative integer.\n\n    Examples:\n    >>> decimal_to_binary(8)\n    '1000'\n    >>> decimal_to_binary(10)\n    '1010'\n    >>> decimal_to_binary(0)\n    '0'\n    \"\"\"\n\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if decimal == 0:\n        return '0'\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    if n < 10:\n        return n + 1\n\n    # Increment the number by 1 and check if it is a palindrome\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n\n    return n"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    IndexError: If the index is out of range.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([12, 3, 5, 7, 19], 5)\n    19\n    >>> kth_element([12, 3, 5, 7, 19], 6)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    \"\"\"\n\n    if k < 1 or k > len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('hello_world')\n    'HelloWorld'\n    >>> snake_to_camel('')\n    ''\n    \"\"\"\n\n    # Split the snake case string into words\n    words = snake_str.split('_')\n\n    # Capitalize the first letter of each word except the first word\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n\n    return camel_str"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m), which represents the number of permutations of n objects taken m at a time.\n\n    Parameters:\n    n (int): The total number of objects.\n    m (int): The number of objects to be chosen.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    12\n    >>> eulerian_num(5, 3)\n    30\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n\n    if n == 0:\n        return 0\n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True booleans in the given list.\n\n    Parameters:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The number of True booleans in the list.\n\n    Examples:\n    >>> count_true_booleans([True, False, True])\n    2\n    >>> count_true_booleans([False, False, False])\n    0\n    >>> count_true_booleans([True, True, True])\n    3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Testing the function\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A new list containing all the elements from the input lists in sorted order.\n\n    Raises:\n        TypeError: If any of the input arguments is not a list.\n\n    Examples:\n        >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n        [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n    # Check if all input arguments are lists\n    if not all(isinstance(lst, list) for lst in [list1, list2, list3]):\n        raise TypeError(\"All input arguments must be lists.\")\n\n    # Merge the three lists into a single list\n    merged_list = list1 + list2 + list3\n\n    # Sort the merged list\n    merged_list.sort()\n\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of rotations to perform.\n\n    Returns:\n    int: The number of numbers with an odd value after the rotations.\n\n    Example:\n    >>> odd_Equivalent(\"011001\", 6)\n    3\n    \"\"\"\n\n    def rotate_string(string, num_rotations):\n        \"\"\"\n        Rotate a binary string the given number of times.\n\n        Parameters:\n        string (str): The binary string to be rotated.\n        num_rotations (int): The number of rotations to perform.\n\n        Returns:\n        str: The rotated binary string.\n\n        Example:\n        >>> rotate_string(\"011001\", 3)\n        '100101'\n        \"\"\"\n        return string[-num_rotations:] + string[:-num_rotations]\n\n    def is_odd(num):\n        \"\"\"\n        Check if a number is odd.\n\n        Parameters:\n        num (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is odd, False otherwise.\n\n        Example:\n        >>> is_odd(5)\n        True\n        >>> is_odd(4)\n        False\n        \"\"\"\n        return num % 2 != 0\n\n    count = 0\n    for i in range(num_rotations):\n        rotated_string = rotate_string(binary_string, i)\n        rotated_number = int(rotated_string, 2)\n        if is_odd(rotated_number):\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists.\n\n    Returns:\n        list: A list of common elements found in all the nested lists.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n    if not isinstance(nested_lists, list) or not all(isinstance(lst, list) for lst in nested_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Parameters:\n    t (tuple): The input tuple of positive integers.\n\n    Returns:\n    int: The converted single integer.\n\n    Raises:\n    ValueError: If the input tuple contains non-positive integers.\n\n    Examples:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    >>> tuple_to_int((4, 5, 6))\n    456\n    >>> tuple_to_int((7, 8, 9))\n    789\n    \"\"\"\n\n    # Check if the input tuple contains non-positive integers\n    if any(x <= 0 for x in t):\n        raise ValueError(\"Input tuple must contain only positive integers.\")\n\n    # Convert the tuple to a single integer\n    return int(''.join(map(str, t)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    list: A list of strings split on the space character.\n\n    Example:\n    >>> string_to_list(\"python programming\")\n    ['python', 'programming']\n    \"\"\"\n    return string.split()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (right - mid) % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    if left == right:\n        return arr[left]\n\n    raise ValueError(\"More than one element appears only once in the array\")"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or contains tuples of different lengths.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(1, 2, 3), (4, 5, 6)])\n        Traceback (most recent call last):\n            ...\n        ValueError: All tuples must have the same length.\n        >>> max_product_tuple([])\n        Traceback (most recent call last):\n            ...\n        ValueError: The input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    tuple_length = len(lst[0])\n    for tup in lst:\n        if len(tup) != tuple_length:\n            raise ValueError(\"All tuples must have the same length.\")\n\n    max_product = float('-inf')\n    for i in range(tuple_length):\n        for j in range(i + 1, tuple_length):\n            product = abs(lst[0][i]) * abs(lst[0][j])\n            for tup in lst[1:]:\n                product *= max(abs(tup[i]), abs(tup[j]))\n            max_product = max(max_product, product)\n\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n\n    Parameters:\n    n (int): The upper limit of the range.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to n.\n\n    \"\"\"\n\n    def sum_of_divisors(num):\n        \"\"\"\n        Calculate the sum of divisors of a given number.\n\n        Parameters:\n        num (int): The number for which divisors sum is to be calculated.\n\n        Returns:\n        int: The sum of divisors of the given number.\n\n        \"\"\"\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(1, n+1):\n        sum_of_divisors_num = sum_of_divisors(num)\n        if sum_of_divisors_num != num and sum_of_divisors(sum_of_divisors_num) == num:\n            amicable_sum += num\n\n    return amicable_sum"}
{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number for which the angle is to be calculated.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    1.1071487177940904\n    >>> angle_complex(1-1j)\n    -0.4636476090008061\n    \"\"\"\n\n    if not isinstance(z, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    angle = math.atan2(z.imag, z.real)\n    return angle"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):"}
{"task_id": "Mbpp/126", "solution": "def sum_of_common_divisors(a, b):\n    \"\"\"\n    Calculates the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    Raises:\n    ValueError: If either a or b is negative.\n\n    Examples:\n    >>> sum_of_common_divisors(10, 15)\n    6\n    >>> sum_of_common_divisors(2, 4)\n    3\n    >>> sum_of_common_divisors(0, 10)\n    0\n    \"\"\"\n\n    if a < 0 or b < 0:\n        raise ValueError(\"Both numbers must be non-negative.\")\n\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n\n    return sum(common_divisors)\n\n# Testing the function\nassert sum_of_common_divisors(10, 15) == 6\nassert sum_of_common_divisors(2, 4) == 3\nassert sum_of_common_divisors(0, 10) == 0"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(0, 10)\n    0\n    >>> multiply_int(-5, -5)\n    25\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both arguments must be integers.\")\n    return a * b"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        sentence (str): The input sentence.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Parameters:\n    matrix (list of lists): The matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Calculate the expected sum of each row, column, and diagonal\n    expected_sum = n * (n ** 2 + 1) // 2\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    column_sums = [sum(matrix[i][j] for i in range(n)) for j in range(n)]\n\n    # Calculate the sum of the main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    secondary_diag_sum = sum(matrix[i][n - i - 1] for i in range(n))\n\n    # Check if all sums are equal to the expected sum\n    if all(sums == expected_sum for sums in row_sums + column_sums + [main_diag_sum, secondary_diag_sum]):\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n        >>> max_occurrences([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    i, j = 0, len(s) - 1\n\n    while i < j:\n        if s[i].lower() in vowels:\n            while j > i:\n                if s[j].lower() in vowels:\n                    s[i], s[j] = s[j], s[i]\n                    i += 1\n                    j -= 1\n                    break\n                j -= 1\n        i += 1\n\n    return ''.join(s)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n        >>> tup_string(('h', 'e', 'l', 'l', 'o'))\n        'hello'\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    return ''.join(tup)"}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of negative numbers in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list contains non-numeric values.\n\n    Examples:\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    >>> sum_negativenum([-1, -2, -3])\n    -6\n    >>> sum_negativenum([1, 2, 3])\n    0\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    negative_sum = 0\n    for num in numbers:\n        if not isinstance(num, (int, float)):\n            raise ValueError(\"List must contain only numeric values.\")\n        if num < 0:\n            negative_sum += num\n\n    return negative_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculate the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    6\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)"}
{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    Calculates the ratio of zeroes to non-zeroes in an array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input list contains non-integer elements.\n\n    Examples:\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.181818\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if not isinstance(num, int):\n            raise ValueError(\"Input list must contain only integers.\")\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n\n    return zero_count / non_zero_count"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(num):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n\n    # Base case: If the number is 0, it can be represented as sum of non-zero powers of 2\n    if num == 0:\n        return True\n\n    # Iterate through all possible powers of 2 from 1 to the given number\n    for i in range(1, num + 1):\n        # Check if the current power of 2 is equal to the given number\n        if 2 ** i == num:\n            return True\n\n        # Check if the current power of 2 is less than the given number\n        if 2 ** i < num:\n            # Recursively check if the remaining part of the number can be represented as sum of non-zero powers of 2\n            if is_sum_of_powers_of_two(num - 2 ** i):\n                return True\n\n    # If no match is found, return False\n    return False\n\n# Test cases\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(15) == False\nassert is_sum_of_powers_of_two(0) == True\nassert is_sum_of_powers_of_two(1) == True\nassert is_sum_of_powers_of_two(2) == True\nassert is_sum_of_powers_of_two(3) == True\nassert is_sum_of_powers_of_two(4) == True\nassert is_sum_of_powers_of_two(5) == True\nassert is_sum_of_powers_of_two(6) == True\nassert is_sum_of_powers_of_two(7) == True\nassert is_sum_of_powers_of_two(8) == True\nassert is_sum_of_powers_of_two(9) == True\nassert is_sum_of_powers_of_two(16) == True\nassert is_sum_of_powers_of_two(31) == True\nassert is_sum_of_powers_of_two(32) == True\nassert is_sum_of_powers_of_two(33) == False\nassert is_sum_of_powers_of_two(63) == True\nassert is_sum_of_powers_of_two(64) == True\nassert is_sum_of_powers_of_two(65) == False"}
{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(0)\n    0.0\n    >>> circle_circumference(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    circumference = 2 * math.pi * radius\n    return circumference"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Extracts a single list of numbers from a list of lists.\n\n    Args:\n        lst (list): A list of lists containing numbers.\n\n    Returns:\n        list: A single list containing all the numbers from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        [3, 4, 5, 7, 1]\n    \"\"\"\n    return [num for sublist in lst for num in sublist]"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n\n    def flip(lst, i):\n        \"\"\"\n        Flips the list from index 0 to i.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        i (int): The index up to which the list should be flipped.\n\n        Returns:\n        list: The flipped list.\n\n        \"\"\"\n        start = 0\n        while start < i:\n            lst[start], lst[i] = lst[i], lst[start]\n            start += 1\n            i -= 1\n        return lst\n\n    def find_max(lst, n):\n        \"\"\"\n        Finds the index of the maximum element in the list up to index n.\n\n        Parameters:\n        lst (list): The list to search for the maximum element.\n        n (int): The index up to which the search should be performed.\n\n        Returns:\n        int: The index of the maximum element.\n\n        \"\"\"\n        max_idx = 0\n        for i in range(1, n):\n            if lst[i] > lst[max_idx]:\n                max_idx = i\n        return max_idx\n\n    n = len(lst)\n    while n > 1:\n        max_idx = find_max(lst, n)\n        if max_idx != n - 1:\n            lst = flip(lst, max_idx)\n            lst = flip(lst, n - 1)\n        n -= 1\n\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(*lists):\n    \"\"\"\n    Counts the number of items that are identical in the same position of the given lists.\n\n    Args:\n        *lists: Variable number of lists.\n\n    Returns:\n        int: The number of items that are identical in the same position of the given lists.\n\n    Raises:\n        ValueError: If the lengths of the lists are not equal.\n\n    Examples:\n        >>> count_samepair([1, 2, 3, 4], [2, 2, 3, 1], [2, 1, 3, 1])\n        2\n        >>> count_samepair([1, 2, 3, 4], [2, 2, 3, 1], [2, 1, 3, 1], [1, 2, 3, 4])\n        3\n        >>> count_samepair([1, 2, 3, 4], [2, 2, 3, 1], [2, 1, 3, 1], [1, 2, 3, 5])\n        2\n    \"\"\"\n    # Check if all lists have the same length\n    if len(set(len(lst) for lst in lists)) != 1:\n        raise ValueError(\"All lists must have the same length.\")\n\n    # Count the number of items that are identical in the same position\n    count = 0\n    for i in range(len(lists[0])):\n        if all(lists[j][i] == lists[0][i] for j in range(1, len(lists))):\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains non-integer elements.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((-2, -1, -5, -3))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    \"\"\"\n\n    # Check if the input array is empty\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    # Check if the input array contains non-integer elements\n    if not all(isinstance(x, int) for x in arr):\n        raise ValueError(\"Input array contains non-integer elements\")\n\n    # Find the minimum and maximum values in the array\n    min_val = min(arr)\n    max_val = max(arr)\n\n    # Calculate the maximum absolute difference\n    max_diff = max_val - min_val\n\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    n (int): The target value.\n\n    Returns:\n    tuple: A tuple containing x and y, or None if no solution exists.\n\n    \"\"\"\n    # Check if n is divisible by both a and b\n    if n % a == 0 and n % b == 0:\n        # Find the integer multiples of a and b that sum up to n\n        x = n // a\n        y = n // b\n        return (x, y)\n    else:\n        return None"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst (list): The list from which elements will be removed.\n        elements (list): The list of elements to be removed.\n\n    Returns:\n        list: The modified list with the elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The upper limit of the series.\n\n    Returns:\n    int: The sum of the series.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(0)\n    0\n    >>> sum_series(1)\n    0\n    >>> sum_series(2)\n    0\n    >>> sum_series(3)\n    0\n    >>> sum_series(4)\n    4\n    >>> sum_series(5)\n    4\n    >>> sum_series(10)\n    30\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    sum_value = 0\n    for i in range(n // 2):\n        sum_value += n - 2 * i\n\n    return sum_value"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefg\")\n        7\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(ord('a') + i):\n            count += 1\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The number of pairs of integers that xor to an even number.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> find_even_pair([5, 4, 7, 2, 1])\n        4\n        >>> find_even_pair([1, 2, 3, 4, 5])\n        0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> next_power_of_2(0)\n    1\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(10)\n    16\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n\n    if n == 0:\n        return 1\n\n    # Find the highest set bit in n\n    highest_bit = n.bit_length() - 1\n\n    # Set all bits below the highest bit to 1\n    next_power_of_2 = 1 << highest_bit\n\n    return next_power_of_2"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n\n    Examples:\n        >>> frequency([1, 2, 3, 4, 4, 5], 4)\n        2\n        >>> frequency([1, 2, 3, 4, 4, 5], 6)\n        0\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculates the sum of numbers in a list within a specified range.\n\n    Parameters:\n    lst (list): The list of numbers.\n    start (int): The starting index of the range.\n    end (int): The ending index of the range.\n\n    Returns:\n    int: The sum of numbers in the specified range.\n\n    Raises:\n    IndexError: If the start or end index is out of range.\n\n    Examples:\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    29\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 12)\n    135\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 0)\n    2\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 13, 15)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    \"\"\"\n    if start < 0 or end >= len(lst) or start > end:\n        raise IndexError(\"Invalid range\")\n\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n\n    Examples:\n        >>> count_occurance(\"letstdlenstdporstd\")\n        3\n        >>> count_occurance(\"std\")\n        1\n        >>> count_occurance(\"abc\")\n        0\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Parameters:\n    t (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    # Check if the input is a tuple\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    # Check if the tuple is empty\n    if len(t) == 0:\n        return True\n\n    # Get the data type of the first element\n    data_type = type(t[0])\n\n    # Check if all elements have the same data type\n    for element in t:\n        if type(element) != data_type:\n            return False\n\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n    n (int): The length of the array.\n    element: The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n    \"\"\"\n\n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(arr, n, element)\n\n    # If the element is not present, it cannot be the majority\n    if first_occurrence == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == element:\n        return True\n\n    return False\ndef find_first_occurrence(arr, n, element):\n    \"\"\"\n    Find the first occurrence of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n    n (int): The length of the array.\n    element: The element to find.\n\n    Returns:\n    int: The index of the first occurrence of the element, or -1 if not found.\n    \"\"\"\n\n    # Perform binary search to find the first occurrence\n    low = 0\n    high = n - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] < element:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number to count the set bits in.\n\n    Returns:\n    int: The number of set bits in the given number.\n\n    Examples:\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(0)\n    0\n    \"\"\"\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Testing the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Remove characters with odd index values from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with characters removed.\n\n    Examples:\n    >>> odd_values_string('abcdef')\n    'ace'\n    >>> odd_values_string('123456789')\n    '2468'\n    >>> odd_values_string('')\n    ''\n    \"\"\"\n    return string[::2]"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    int: The minimum of the three numbers.\n\n    Raises:\n    TypeError: If any of the input arguments are not integers.\n\n    Examples:\n    >>> min_of_three(10, 20, 0)\n    0\n    >>> min_of_three(10, 20, 30)\n    10\n    >>> min_of_three(10, 10, 10)\n    10\n    \"\"\"\n\n    # Check if the input arguments are integers\n    if not isinstance(a, int) or not isinstance(b, int) or not isinstance(c, int):\n        raise TypeError(\"All input arguments must be integers.\")\n\n    # Find the minimum of the three numbers\n    minimum = min(a, b, c)\n\n    return minimum"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a specified character.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    return string.replace(\" \", character)"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Raises:\n    ValueError: If n is greater than the length of the input list.\n\n    Examples:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([1, 2, 3, 4, 5], 3)\n    [5, 4, 3]\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 10)\n    [100, 90, 80, 70, 60, 50, 50, 40, 20, 20]\n    \"\"\"\n\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the input list.\")\n\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> volume_cube(3)\n    27.0\n    >>> volume_cube(0)\n    0.0\n    >>> volume_cube(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be positive.\n    \"\"\"\n\n    if side_length < 0:\n        raise ValueError(\"Side length must be positive.\")\n\n    return side_length ** 3"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Parameters:\n    num (int): The number for which even bits need to be set.\n\n    Returns:\n    int: The number with even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(15)\n    14\n    \"\"\"\n\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits\n    return num | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Example:\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n    {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n\n    # Create an empty dictionary to store the occurrences\n    occurrences = {}\n\n    # Iterate over each tuple in the list\n    for tup in lst:\n        # Check if the tuple is already in the dictionary\n        if tup in occurrences:\n            # If it is, increment the count by 1\n            occurrences[tup] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            occurrences[tup] = 1\n\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n\n    # Initialize the count to 0\n    count = 0\n\n    # Iterate through each character in the string\n    for i in range(len(string)):\n        # Iterate through each substring starting from the current character\n        for j in range(i+1, len(string)+1):\n            # Increment the count if the substring is not empty\n            if string[i:j]:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the number of possible sequences of length n, where each element is a positive integer\n    greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The maximum value of each element in the sequence.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of possible sequences.\n\n    Raises:\n    ValueError: If m or n is not a positive integer.\n\n    Examples:\n    >>> get_total_number_of_sequences(10, 4)\n    4\n    >>> get_total_number_of_sequences(10, 3)\n    2\n    >>> get_total_number_of_sequences(5, 2)\n    1\n    \"\"\"\n\n    # Check if m and n are positive integers\n    if not isinstance(m, int) or m <= 0 or not isinstance(n, int) or n <= 0:\n        raise ValueError(\"m and n must be positive integers\")\n\n    # Initialize a list to store the number of sequences for each value of m\n    sequences = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # There is only one possible sequence of length 1\n    for i in range(1, m + 1):\n        sequences[1][i] = 1\n\n    # Calculate the number of sequences for each length and value of m\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j // 2 + 1):\n                sequences[i][j] += sequences[i - 1][k]\n\n    # Return the total number of sequences\n    return sum(sequences[n])"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified list1 with the last element replaced by the elements of list2.\n\n    Raises:\n        ValueError: If either list1 or list2 is empty.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n\n        >>> replace_list([], [1, 2, 3])\n        Traceback (most recent call last):\n            ...\n        ValueError: list1 cannot be empty.\n\n        >>> replace_list([1, 2, 3], [])\n        Traceback (most recent call last):\n            ...\n        ValueError: list2 cannot be empty.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"list1 cannot be empty.\")\n    if not list2:\n        raise ValueError(\"list2 cannot be empty.\")\n\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    Examples:\n    >>> count_charac(\"python programming\")\n    18\n    >>> count_charac(\"\")\n    0\n    >>> count_charac(\"a\")\n    1\n    \"\"\"\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the input number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(0)\n    1\n    >>> next_Perfect_Square(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be non-negative.\n    \"\"\"\n\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Find the square root of the input number\n    sqrt_num = math.sqrt(num)\n\n    # Check if the square root is an integer\n    if int(sqrt_num) ** 2 == num:\n        # If the square root is an integer, return the next perfect square\n        return (int(sqrt_num) + 1) ** 2\n    else:\n        # If the square root is not an integer, find the next integer greater than the square root\n        next_int = int(sqrt_num) + 1\n        return next_int ** 2"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n    194\n    >>> max_sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n    15\n    >>> max_sum([1, 2, 3, 4, 5])\n    15\n    >>> max_sum([5, 4, 3, 2, 1])\n    15\n    >>> max_sum([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array cannot be empty.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    n = len(arr)\n    increasing = [1] * n\n    decreasing = [1] * n\n\n    # Calculate the longest increasing subsequence from left to right\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and increasing[i] < increasing[j] + 1:\n                increasing[i] = increasing[j] + 1\n\n    # Calculate the longest decreasing subsequence from right to left\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and decreasing[i] < decreasing[j] + 1:\n                decreasing[i] = decreasing[j] + 1\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = float('-inf')\n    for i in range(n):\n        max_sum = max(max_sum, increasing[i] + decreasing[i] - 1)\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCDEFG\")\n    1\n    >>> lps(\"ABBCDAB\")\n    5\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All individual characters are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Fill the dp table diagonally\n    for length in range(1, n):\n        for i in range(n - length):\n            j = i + length\n\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_data, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        element: The element to count.\n\n    Returns:\n        int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    return tuple_data.count(element)"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    return [element] + [element + item for item in lst]"}
{"task_id": "Mbpp/252", "solution": "import math\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the complex number in polar coordinates.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2+3j)\n    (3.605551275463989, 0.982793723247329)\n    >>> convert(0)\n    (0.0, 0.0)\n    \"\"\"\n\n    if not isinstance(complex_number, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    magnitude = abs(complex_number)\n    angle = math.phase(complex_number)\n\n    return magnitude, angle"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n\n    Examples:\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([1, 2, 3, 4])\n    4\n    >>> count_integer([])\n    0\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of a list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list of tuples representing all combinations of length n.\n\n    Examples:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n    return list(combinations_with_replacement(lst, n))"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than n.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative number\")\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n\n    return sum(primes)"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    Swaps the order of two numbers and returns a tuple with the second number first and then the first number.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    tuple: A tuple containing the second number first and then the first number.\n\n    Example:\n    >>> swap_numbers(10, 20)\n    (20, 10)\n    \"\"\"\n    return b, a"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is the maximum of the corresponding elements from the input tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple where each element is the maximum of the corresponding elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements((1, 2), (3, 4))\n        (3, 4)\n        >>> maximize_elements((1, 2, 3), (4, 5, 6))\n        (4, 5, 6)\n        >>> maximize_elements((1, 2), (3, 4, 5))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division operation on two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n        ValueError: If the lengths of the input tuples are not equal.\n        ZeroDivisionError: If any element in tuple2 is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n        >>> division_elements((1, 2, 3), (1, 2, 0))\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n        >>> division_elements((1, 2, 3), (1, 2, 3, 4))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have equal lengths.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have equal lengths.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"division by zero\")\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is L.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n        >>> split_two_parts([1, 2, 3, 4, 5], 6)\n        ValueError: L is greater than the length of the input list.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L is greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the human_age is less than zero.\n\n    Examples:\n    >>> dog_age(12)\n    61\n    >>> dog_age(0)\n    0\n    >>> dog_age(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Human age cannot be negative.\n    \"\"\"\n\n    if human_age < 0:\n        raise ValueError(\"Human age cannot be negative.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements to skip between each split.\n\n    Returns:\n        list: A list of lists, where each sublist contains the elements from the input list split at every nth element.\n\n    Raises:\n        ValueError: If the input list is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\n        >>> list_split(['apple', 'banana', 'cherry', 'date', 'elderberry'], 2)\n        [['apple', 'cherry', 'elderberry'], ['banana', 'date']]\n\n        >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n        [[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateral_surface_cube(5)\n    100.0\n    >>> lateral_surface_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 4 * side_length ** 2\n\n\n# Testing the function\nassert lateral_surface_cube(5) == 100.0"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    10\n    >>> square_sum(3)\n    36\n    >>> square_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    odd_number = 1\n\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    299\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    star_nums = []\n    num = 1\n\n    while len(star_nums) < n:\n        if is_star_num(num):\n            star_nums.append(num)\n        num += 1\n\n    return star_nums[n - 1]\ndef is_star_num(num):\n    \"\"\"\n    Check if a number is a star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is a star number, False otherwise.\n    \"\"\"\n\n    digit_factorials = [1, 1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n\n    digit_sum = sum(digit_factorials[int(digit)] for digit in str(num))\n\n    return digit_sum == num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the input character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('1')\n    49\n    >>> ascii_value('$')\n    36\n    \"\"\"\n\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character.\")\n\n    return ord(char)"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculates the sum of even numbers at even positions in a list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If any element in the list is not an integer.\n\n    Examples:\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    >>> sum_even_and_even_index([1, 2, 3, 4, 5])\n    6\n    >>> sum_even_and_even_index([10, 20, 30, 40, 50])\n    0\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in lst):\n        raise ValueError(\"All elements in the list must be integers\")\n\n    # Calculate the sum of even numbers at even positions\n    sum_even = 0\n    for i, num in enumerate(lst):\n        if i % 2 == 0 and num % 2 == 0:\n            sum_even += num\n\n    return sum_even"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the even natural numbers raised to the fifth power.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    31396\n    >>> even_Power_Sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    even_number = 2\n\n    for _ in range(n):\n        sum_of_powers += even_number ** 5\n        even_number += 2\n\n    return sum_of_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list and returns a new list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Raises:\n        TypeError: If the input is not a list of tuples.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    if not isinstance(tuples_list, list) or not all(isinstance(t, tuple) for t in tuples_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    return [t[-1] for t in tuples_list]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n        >>> subtract_elements((1, 2, 3), (4, 5, 6))\n        (-3, -3, -3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    return tuple(x - y for x, y in zip(tuple1, tuple2))\n\n\n# Testing the function\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which the sum of even index binomial coefficients is to be calculated.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(5)\n    10\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the sum to 0\n    sum_even_coeffs = 0\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    for i in range(n + 1):\n        coeff = binomial_coefficient(n, i)\n        if i % 2 == 0:\n            sum_even_coeffs += coeff\n\n    return sum_even_coeffs\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to be chosen.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If k is greater than n or either n or k is negative.\n\n    Examples:\n    >>> binomial_coefficient(5, 2)\n    10\n    >>> binomial_coefficient(10, 3)\n    120\n    \"\"\"\n\n    if k > n or k < 0 or n < 0:\n        raise ValueError(\"Invalid input: k must be less than or equal to n and both n and k must be non-negative.\")\n\n    if k == 0 or k == n:\n        return 1\n\n    return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)"}
{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Examples:\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(0, 5)\n    0.0\n    >>> volume_cylinder(10, -5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n\n    volume = math.pi * radius**2 * height\n    return volume"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to a given integer n.\n\n    Args:\n        dictionary (dict): The dictionary to be filtered.\n        n (int): The minimum value for filtering.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple_data):\n    \"\"\"\n    Counts the number of elements that occur before the tuple element in the given tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n\n    Returns:\n        int: The number of elements that occur before the tuple element.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> count_first_elements((1, 5, 7, (4, 6), 10))\n        3\n        >>> count_first_elements(('a', 'b', 'c', ('d', 'e'), 'f'))\n        2\n        >>> count_first_elements((1, 2, 3))\n        0\n    \"\"\"\n    if not isinstance(tuple_data, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    count = 0\n    for element in tuple_data:\n        if isinstance(element, tuple):\n            break\n        count += 1\n\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculate the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    1256\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Sequential search algorithm to find an element in an array.\n\n    Parameters:\n    arr (list): The array to search in.\n    element: The element to search for.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is found and the index position of the element (or -1 if not found).\n\n    Examples:\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    (True, 3)\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 45)\n    (False, -1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [1, 2])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Args:\n        num (int): The integer to be validated.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert the integer to a string\n    num_str = str(num)\n\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Count the frequency of each digit\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if int(digit) > freq:\n            return False\n\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list to be checked.\n    element: The element to compare with the list items.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    import re\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous subarray in a modified array.\n\n    Parameters:\n    arr (list): The original array.\n    k (int): The number of times the original array is repeated.\n    n (int): The length of the modified array.\n\n    Returns:\n    int: The largest sum of a contiguous subarray.\n\n    Raises:\n    ValueError: If the length of the original array is zero.\n\n    Examples:\n    >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n    30\n    >>> max_sub_array_sum_repeated([-2, -3, 4, -1, -2, 1, 5, -3], 3, 7)\n    7\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"Original array cannot be empty.\")\n\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i % len(arr)]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    # when the original array is repeated k times\n    max_sum_repeated = max_sum * k\n\n    # If the total sum of the original array is positive,\n    # subtract the minimum sum of a contiguous subarray of length len(arr)\n    if total_sum > 0:\n        min_sum_subarray = float('inf')\n\n        for i in range(len(arr)):\n            current_sum += arr[i]\n\n            if current_sum < min_sum_subarray:\n                min_sum_subarray = current_sum\n\n            if current_sum > 0:\n                current_sum = 0\n\n        max_sum_repeated -= min_sum_subarray\n\n    return max_sum_repeated"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    20\n    >>> square_sum(3)\n    120\n    >>> square_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        sum_of_squares += num ** 2\n        count += 1\n        num += 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum length list and the maximum length list itself.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_len = 0\n    max_list = []\n\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the division of the dividend by the divisor, rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division rounded down to the nearest integer.\n\n    Raises:\n    ZeroDivisionError: If the divisor is zero.\n\n    Examples:\n    >>> find(10, 3)\n    3\n    >>> find(10, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n\n    if divisor == 0:\n        raise ZeroDivisionError(\"division by zero\")\n\n    quotient = dividend // divisor\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is negative.\n\n    \"\"\"\n\n    if side1 < 0 or side2 < 0:\n        raise ValueError(\"Side lengths cannot be negative.\")\n\n    side3 = math.sqrt(side1**2 + side2**2)\n    return side3"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or float: The maximum value in the list.\n\n    Raises:\n        TypeError: If the list is empty or contains non-numeric values.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n        >>> max_val([1, 2, 3, 4, 5])\n        5\n        >>> max_val([-1, -2, -3, -4, -5])\n        -1\n        >>> max_val([])\n        Traceback (most recent call last):\n            ...\n        TypeError: List is empty.\n        >>> max_val(['a', 'b', 'c'])\n        Traceback (most recent call last):\n            ...\n        TypeError: List contains non-numeric values.\n    \"\"\"\n    if not lst:\n        raise TypeError(\"List is empty.\")\n\n    max_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_val is None or item > max_val:\n                max_val = item\n        else:\n            raise TypeError(\"List contains non-numeric values.\")\n\n    if max_val is None:\n        raise TypeError(\"List contains non-numeric values.\")\n\n    return max_val"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    An inversion occurs when for any two indices i and j, if i < j and arr[i] > arr[j].\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n\n    Examples:\n    >>> get_Inv_Count([1, 20, 6, 4, 5])\n    5\n    >>> get_Inv_Count([5, 4, 3, 2, 1])\n    10\n    >>> get_Inv_Count([1, 2, 3, 4, 5])\n    0\n    \"\"\"\n\n    def merge(arr, temp_arr, left, mid, right):\n        \"\"\"\n        Helper function to merge two sorted subarrays and count inversions.\n\n        Parameters:\n        arr (list): The input array.\n        temp_arr (list): The temporary array to store the merged result.\n        left (int): The starting index of the left subarray.\n        mid (int): The ending index of the left subarray.\n        right (int): The ending index of the right subarray.\n\n        Returns:\n        int: The number of inversions in the merged subarrays.\n        \"\"\"\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp_arr[k] = arr[i]\n                i += 1\n            else:\n                temp_arr[k] = arr[j]\n                j += 1\n                inv_count += (mid - i + 1)\n            k += 1\n\n        while i <= mid:\n            temp_arr[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp_arr[k] = arr[j]\n            j += 1\n            k += 1\n\n        for i in range(left, right + 1):\n            arr[i] = temp_arr[i]\n\n        return inv_count\n\n    def merge_sort(arr, temp_arr, left, right):\n        \"\"\"\n        Recursive function to perform merge sort and count inversions.\n\n        Parameters:\n        arr (list): The input array.\n        temp_arr (list): The temporary array to store the merged result.\n        left (int): The starting index of the subarray.\n        right (int): The ending index of the subarray.\n\n        Returns:\n        int: The number of inversions in the subarray.\n        \"\"\"\n        inv_count = 0\n\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort(arr, temp_arr, left, mid)\n            inv_count += merge_sort(arr, temp_arr, mid + 1, right)\n            inv_count += merge(arr, temp_arr, left, mid, right)\n\n        return inv_count\n\n    n = len(arr)\n    temp_arr = [0] * n"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        nested_list (list): The nested list structure to be flattened.\n\n    Returns:\n        list: The flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples where each tuple contains a name and an aggregate score.\n\n    Returns:\n        tuple: A tuple containing the name and the maximum aggregate score.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Initialize variables to store the maximum aggregate and its corresponding name\n    max_aggregate = float('-inf')\n    max_name = None\n\n    # Create a dictionary to store the aggregate scores for each name\n    name_aggregates = {}\n\n    # Iterate over the list of tuples\n    for name, aggregate in lst:\n        # If the name is not already in the dictionary, add it with the current aggregate score\n        if name not in name_aggregates:\n            name_aggregates[name] = aggregate\n        # If the name is already in the dictionary, update its aggregate score\n        else:\n            name_aggregates[name] += aggregate\n\n        # Update the maximum aggregate and its corresponding name if necessary\n        if name_aggregates[name] > max_aggregate:\n            max_aggregate = name_aggregates[name]\n            max_name = name\n\n    return max_name, max_aggregate"}
{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence divided by 2.\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    4.0\n    >>> count_binary_seq(3)\n    8.0\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Base case: If n is 0, there is only one possible sequence (00)\n    if n == 0:\n        return 1.0\n\n    # Recursive case: Count the number of sequences with n-1 bits\n    count = count_binary_seq(n - 1)\n\n    # Calculate the count of sequences with n bits by multiplying the count with 2\n    count *= 2\n\n    # Return the final count\n    return count"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursively finds the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    depths = []\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depths.append(dict_depth(value))\n\n    if depths:\n        return max(depths) + 1\n    else:\n        return 1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list that start with the letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words from the list that start with the letter 'p'.\n\n    Raises:\n        ValueError: If the list does not contain any words starting with 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.startswith('p') or word.startswith('P')]\n    if len(p_words) >= 2:\n        return tuple(p_words[:2])\n    else:\n        raise ValueError(\"The list does not contain any words starting with 'p'.\")"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n    i (int): The index up to which the prefix is considered.\n    k (int): The index of the element to be included after i.\n\n    Returns:\n    int: The maximum sum of increasing subsequence.\n\n    Raises:\n    ValueError: If i or k is out of range.\n\n    Examples:\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n    11\n    \"\"\"\n\n    if i < 0 or i >= n or k < 0 or k >= n:\n        raise ValueError(\"i or k is out of range\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = arr[i]\n\n    # Initialize the current sum of increasing subsequence\n    curr_sum = arr[i]\n\n    # Iterate from i+1 to k-1\n    for j in range(i + 1, k):\n        # If the current element is greater than the previous element, add it to the current sum\n        if arr[j] > arr[j - 1]:\n            curr_sum += arr[j]\n        else:\n            # If the current element is not greater, update the maximum sum and reset the current sum\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = arr[j]\n\n    # Update the maximum sum with the current sum after the loop\n    max_sum = max(max_sum, curr_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the input lists are empty or if the specified number is greater than the total number of products.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if not list1 or not list2:\n        raise ValueError(\"Input lists cannot be empty.\")\n\n    if num > len(list1) * len(list2):\n        raise ValueError(\"Specified number is greater than the total number of products.\")\n\n    products = [x * y for x in list1 for y in list2]\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n\n    Examples:\n    >>> maximum(5, 10)\n    10\n    >>> maximum(10, 5)\n    10\n    >>> maximum(5, 5)\n    5\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    tuple: A tuple containing the characters of the input string.\n\n    Example:\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer as input and returns the number with the leftmost unset bit set to 1.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    int: The number with the leftmost unset bit set to 1.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(0)\n    1\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n\n    # Find the leftmost unset bit\n    mask = 1\n    while num & mask:\n        mask <<= 1\n\n    # Set the leftmost unset bit to 1\n    num |= mask\n\n    return num"}
{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Examples:\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(0, 12)\n    0.0\n    >>> volume_cone(5, 0)\n    0.0\n    \"\"\"\n\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1.\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    power = 0\n    while 2 ** power <= n:\n        power += 1\n\n    return 2 ** (power - 1)"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers form a sequence where each number is the sum of the two preceding ones.\n    The sequence starts with 2 and 1, so the first few Lucas numbers are: 2, 1, 3, 4, 7, 11, 18, ...\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_lucas(1)\n    2\n    >>> find_lucas(5)\n    11\n    >>> find_lucas(9)\n    76\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas_sequence = [2, 1]\n        for i in range(2, n):\n            lucas_sequence.append(lucas_sequence[i-1] + lucas_sequence[i-2])\n        return lucas_sequence[-1]"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to each element.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n\n        >>> add_string(['apple', 'banana', 'cherry'], 'fruit{0}')\n        ['fruitapple', 'fruitbanana', 'fruitcherry']\n    \"\"\"\n    return [format_str.format(element) for element in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    \"\"\"\n    Convert three lists into a nested dictionary.\n\n    Args:\n        keys (list): A list of keys.\n        values (list): A list of values.\n        scores (list): A list of scores.\n\n    Returns:\n        list: A list of nested dictionaries.\n\n    Raises:\n        ValueError: If the lengths of keys, values, and scores are not equal.\n\n    Examples:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(keys) != len(values) or len(keys) != len(scores):\n        raise ValueError(\"Lengths of keys, values, and scores must be equal.\")\n\n    nested_dict = []\n    for i in range(len(keys)):\n        inner_dict = {keys[i]: {values[i]: scores[i]}}\n        nested_dict.append(inner_dict)\n\n    return nested_dict"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    \"\"\"\n    Calculates the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Parameters:\n    n (int): The input number for which the maximum sum is to be calculated.\n\n    Returns:\n    int: The maximum sum possible.\n\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum recursively for the given equation\n    max_sum = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\n    return max_sum"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Parameters:\n    t (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Find the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character, or None if no non-repeated character is found.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        'a'\n        >>> first_non_repeating_character(\"aabbcdef\")\n        'c'\n        >>> first_non_repeating_character(\"aabbcc\")\n        None\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Raises:\n    TypeError: If any of the input parameters are not a number.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(100, 200, 300)\n    200.0\n    \"\"\"\n\n    # Check if the input parameters are numbers\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"All input parameters must be numbers.\")\n\n    # Find the median\n    median = sorted([a, b, c])[1]\n\n    return median"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the sum of digits for each number.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If any element in the list is not an integer.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n        >>> sum_of_digits([])\n        []\n        >>> sum_of_digits([123, 456, 789])\n        [6, 15, 24]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    result = []\n    for num in numbers:\n        if not isinstance(num, int):\n            raise ValueError(\"List must contain only integers.\")\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n\n    return result"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The minimum of the two numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(3, 1)\n    1\n    >>> minimum(2, 2)\n    2\n    \"\"\"\n    if a <= b:\n        return a\n    else:\n        return b"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The input tuple.\n    element: The element to check for existence in the tuple.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number for which parity needs to be checked.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-tuple elements.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([(3, 4), (5, 6), (7, 8)])\n        24\n        >>> min_product_tuple([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n        >>> min_product_tuple([(1, 2), (3,)])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list must contain tuples with exactly two elements.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n\n    for pair in lst:\n        if len(pair) != 2:\n            raise ValueError(\"Input list must contain tuples with exactly two elements.\")\n\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or str: The minimum value in the list.\n\n    Raises:\n        TypeError: If the list is empty or contains non-numeric values.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n        >>> min_val([10, 20, 30, 40])\n        10\n        >>> min_val([])\n        Traceback (most recent call last):\n            ...\n        TypeError: List is empty\n        >>> min_val(['Python', 'version'])\n        Traceback (most recent call last):\n            ...\n        TypeError: List contains non-numeric values\n    \"\"\"\n    if not lst:\n        raise TypeError(\"List is empty\")\n\n    min_val = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_val is None or item < min_val:\n                min_val = item\n        else:\n            raise TypeError(\"List contains non-numeric values\")\n\n    if min_val is None:\n        raise TypeError(\"List contains non-numeric values\")\n\n    return min_val"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with odd numbers removed.\n\n    Examples:\n    >>> remove_odd([1, 2, 3])\n    [2]\n    >>> remove_odd([1, 2, 3, 4, 5])\n    [2, 4]\n    >>> remove_odd([2, 4, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n        [99, 96, 94, 98]\n    \"\"\"\n    return [t[n] for t in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n    ValueError: If the input list is empty or contains less than two integers.\n\n    Examples:\n    >>> max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n    (7, 8)\n    >>> max_Product([-1, -2, -3, -4, -7, -8])\n    (-3, -4)\n    >>> max_Product([1, 2])\n    (1, 2)\n    >>> max_Product([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> max_Product([1])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list must contain at least two integers.\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must contain at least two integers.\")\n\n    max_product = float('-inf')\n    pair = ()\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the element of a list with the maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The element of the list with the maximum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n        >>> Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D']])\n        ['A', 'B', 'C', 'D']\n        >>> Find_Max([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    max_length = max(len(sublist) for sublist in lst)\n    max_element = [sublist for sublist in lst if len(sublist) == max_length]\n\n    return max_element[0]"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds each number in the given list and returns the sum multiplied by the length of the list.\n\n    Parameters:\n    numbers (list): A list of numbers to be rounded.\n\n    Returns:\n    int: The sum of the rounded numbers multiplied by the length of the list.\n\n    Examples:\n    >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n    243\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = 0\n    even_number = 2\n\n    for _ in range(n):\n        sum_of_cubes += even_number ** 3\n        even_number += 2\n\n    return sum_of_cubes"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_data, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by the given delimiter.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to concatenate the elements. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_')\n        'ID_is_4_UTS'\n    \"\"\"\n    if not isinstance(tuple_data, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return delimiter.join(str(element) for element in tuple_data)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    9.0\n    >>> find_Average_Of_Cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n\n    average = sum_of_cubes / n\n    return average"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(strings):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        strings (tuple): A tuple of strings.\n\n    Returns:\n        list: A list containing the rear index elements of the strings.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    if not isinstance(strings, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    rear_elements = []\n    for string in strings:\n        rear_elements.append(string[-1])\n\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count in the sublists.\n\n    Returns:\n        int: The number of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2)\n        0\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters odd numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date_str (str): The date string in yyyy-mm-dd format.\n\n    Returns:\n        str: The date string in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date string is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2026-12-31\")\n        '31-12-2026'\n        >>> change_date_format(\"2026-02-30\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid date format.\n    \"\"\"\n    try:\n        year, month, day = date_str.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format.\")"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using the Shell sort algorithm.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    \"\"\"\n\n    # Start with a large gap size\n    gap = len(arr) // 2\n\n    # Do a step of insertion sort for the current gap size\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n\n            # Compare elements that are 'gap' distance apart\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            arr[j] = temp\n\n        # Reduce the gap size for the next iteration\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise and of the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n        >>> and_tuples((1, 2, 3), (4, 5, 6))\n        (0, 0, 2)\n        >>> and_tuples((1, 2, 3), (4, 5))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(x & y for x, y in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculate the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: The y-intercept of the directrix.\n\n    Raises:\n    ValueError: If the parabola is not defined by the given coefficients.\n\n    \"\"\"\n\n    # Check if the parabola is defined by the given coefficients\n    if a == 0:\n        raise ValueError(\"The parabola is not defined by the given coefficients.\")\n\n    # Calculate the directrix y-intercept\n    directrix = -b / (2 * a)\n\n    return directrix"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the first parallel side of the trapezium.\n    b (float): Length of the second parallel side of the trapezium.\n    c (float): Length of the non-parallel side of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values is negative.\n\n    \"\"\"\n\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Input values must be non-negative.\")\n\n    # Calculate the height of the trapezium\n    height = (a + b - c) / 2\n\n    # Calculate the median length of the trapezium\n    median = (a + b) / 2\n\n    return median"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The array of numbers.\n    num (int or float): The number to compare against the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The number for which the last digit needs to be found.\n\n    Returns:\n    int: The last digit of the input number.\n\n    Examples:\n    >>> last_digit(123)\n    3\n    >>> last_digit(987654321)\n    1\n    >>> last_digit(0)\n    0\n    \"\"\"\n    return abs(number) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A list containing negative numbers from the input list.\n\n    Examples:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    >>> neg_nos([1, 2, 3, 4])\n    []\n    >>> neg_nos([-1, -2, -3, -4])\n    [-1, -2, -3, -4]\n    \"\"\"\n    return [num for num in lst if num < 0]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n        >>> remove_odd(\"hello\")\n        'el'\n        >>> remove_odd(\"123456\")\n        '246'\n    \"\"\"\n    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])"}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n        >>> multiple_to_single([1, 2, 3])\n        123\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"List must contain only integers.\")\n\n    return int(''.join(str(num) for num in numbers))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the starting position, ending position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n        >>> find_adverb_position(\"I am walking on the street\")\n        (10, 18, 'on')\n        >>> find_adverb_position(\"The cat is sleeping\")\n        Traceback (most recent call last):\n            ...\n        ValueError: No adverb found in the sentence.\n    \"\"\""}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The length of one side of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive integer.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Size must be a positive integer.\n    \"\"\"\n\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Size must be a positive integer.\")\n\n    return 6 * size * size"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the result of index wise multiplication of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n\n    Examples:\n        >>> index_multiplication((1, 3), (4, 5))\n        (4, 15)\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(x * y for x, y in zip(tuple1[i], tuple2[i])))\n\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_elements):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        list_elements (list): The list of elements to count.\n\n    Returns:\n        int: The total count of occurrences.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct type.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd'])\n        4\n    \"\"\"\n    if not isinstance(tuple_data, tuple) or not isinstance(list_elements, list):\n        raise TypeError(\"Input arguments must be of type tuple and list respectively.\")\n\n    count = 0\n    for element in list_elements:\n        count += tuple_data.count(element)\n\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of each number.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with the cubes of each number in the input list.\n\n    Examples:\n    >>> cube_nums([1, 2, 3, 4, 5])\n    [1, 8, 27, 64, 125]\n    >>> cube_nums([-2, 0, 2])\n    [8, 0, 8]\n    >>> cube_nums([])\n    []\n    \"\"\"\n    return [num ** 3 for num in nums]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    >>> cal_sum(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a non-negative integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    perrin_numbers = [3, 0, 2]  # Initialize the Perrin numbers list\n\n    if n <= 2:\n        return sum(perrin_numbers[:n])\n\n    for i in range(3, n):\n        perrin_numbers.append(perrin_numbers[i-1] + perrin_numbers[i-2])\n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Args:\n        strings (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Raises:\n        TypeError: If the input `strings` is not a list.\n        ValueError: If the input `size` is not a positive integer.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10)\n        []\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input 'strings' must be a list.\")\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Input 'size' must be a positive integer.\")\n\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n\n    Examples:\n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    >>> remove_whitespaces('Hello, World!')\n    'Hello,World!'\n    >>> remove_whitespaces('')\n    ''\n    \"\"\"\n    return ''.join(string.split())"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    Calculates the sum of even factors of a given number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Raises:\n    ValueError: If the input number is not a positive integer.\n\n    Examples:\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(21)\n    0\n    >>> sumofFactors(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input number must be a positive integer.\")\n\n    factors = [i for i in range(1, n+1) if n % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    sum_of_factors = sum(even_factors)\n\n    return sum_of_factors"}
{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if a given text contains a word with 'z'.\n\n    Parameters:\n    text (str): The text to be checked.\n\n    Returns:\n    bool: True if the text contains a word with 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    if match:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The number representing the month.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n\n    Raises:\n    ValueError: If the month number is not in the range 1-12.\n\n    Examples:\n    >>> check_month_number(5)\n    True\n    >>> check_month_number(2)\n    False\n    >>> check_month_number(13)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid month number. Month number should be in the range 1-12.\n    \"\"\"\n\n    if month_number < 1 or month_number > 12:\n        raise ValueError(\"Invalid month number. Month number should be in the range 1-12.\")\n\n    # Create a dictionary mapping month numbers to the number of days in each month\n    days_in_month = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    return days_in_month[month_number] == 31"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n\n    return reversed_list"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n        >>> Find_Min([[1,2,3],[4,5],[6]])\n        [6]\n        >>> Find_Min([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    return [sublist for sublist in lst if len(sublist) == min_length][0]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(0, 20)\n    0\n    >>> rectangle_area(10, -20)\n    Traceback (most recent call last):\n        ...\n    ValueError: Width cannot be negative.\n    \"\"\"\n\n    if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n    if width < 0:\n        raise ValueError(\"Width cannot be negative.\")\n\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n    \"\"\"\n    result = \"\"\n    current_substring = \"\"\n\n    for char in string:\n        if char.isupper():\n            current_substring += char\n        else:\n            if not current_substring.isupper():\n                result += current_substring\n            current_substring = \"\"\n\n    if not current_substring.isupper():\n        result += current_substring\n\n    return result"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element of each sublist.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Raises:\n        TypeError: If the input is not a list of sublists.\n\n    Examples:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    if not isinstance(sublists, list):\n        raise TypeError(\"Input must be a list of sublists.\")\n\n    return [sublist[0] for sublist in sublists]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n\n    Examples:\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n\n    def helper(lst, index, current_combination, all_combinations):\n        # Add the current combination to the list of all combinations\n        all_combinations.append(current_combination)\n\n        # Explore all possible choices for the next element\n        for i in range(index, len(lst)):\n            # Include the current element in the combination\n            helper(lst, i + 1, current_combination + [lst[i]], all_combinations)\n\n    # Initialize an empty list to store all combinations\n    all_combinations = []\n\n    # Start the recursive helper function\n    helper(lst, 0, [], all_combinations)\n\n    return all_combinations"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product of any subarray.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    >>> max_subarray_product([-2, -3, 0, -2, -4])\n    8\n    >>> max_subarray_product([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input array is empty.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty.\")\n\n    max_product = arr[0]\n    min_product = arr[0]\n    result = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        result = max(result, max_product)\n\n    return result"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items removed.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The maximum product of an increasing subsequence.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    >>> max_product([1, 2, 3, 4, 5])\n    60\n    >>> max_product([5, 4, 3, 2, 1])\n    60\n    >>> max_product([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    n = len(arr)\n    max_product_ending_at = [1] * n\n    min_product_ending_at = [1] * n\n\n    for i in range(1, n):\n        if arr[i] > arr[i-1]:\n            max_product_ending_at[i] = max(max_product_ending_at[i-1] * arr[i], arr[i])\n            min_product_ending_at[i] = min(min_product_ending_at[i-1] * arr[i], arr[i])\n        else:\n            max_product_ending_at[i] = max(min_product_ending_at[i-1] * arr[i], arr[i])\n            min_product_ending_at[i] = min(max_product_ending_at[i-1] * arr[i], arr[i])\n\n    return max(max_product_ending_at)"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    This function takes a tuple as input and returns a new tuple where each element is the sum of its neighboring elements.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple where each element is the sum of its neighboring elements.\n\n    Raises:\n    TypeError: If the input is not a tuple.\n\n    Examples:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise(())\n    ()\n    >>> add_pairwise((1,))\n    (1,)\n    \"\"\"\n\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    result = []\n    for i in range(len(tup)):\n        if i == 0:\n            result.append(tup[i] + tup[i+1])\n        elif i == len(tup) - 1:\n            result.append(tup[i] + tup[i-1])\n        else:\n            result.append(tup[i] + tup[i-1] + tup[i+1])\n\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculates the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Raises:\n    ValueError: If the modulo value is not positive.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    >>> find_remainder([1, 2, 3, 4, 5], 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Modulo value must be positive.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"Modulo value must be positive.\")\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n    return True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are common to both tuple lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    # Convert the tuple lists to sets of frozensets\n    set1 = set(frozenset(t) for t in tuple_list1)\n    set2 = set(frozenset(t) for t in tuple_list2)\n\n    # Find the intersection of the sets\n    intersection = set1.intersection(set2)\n\n    # Convert the frozensets back to tuples\n    intersection_tuples = set(tuple(s) for s in intersection)\n\n    return intersection_tuples"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with another character.\n\n    Parameters:\n    string (str): The input string.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace the old character with.\n\n    Returns:\n    str: The modified string with replaced characters.\n\n    Example:\n    >>> replace_char(\"polygon\",'y','l')\n    'pollgon'\n    \"\"\"\n    return string.replace(old_char, new_char)"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in descending order.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Calculates the sum of the largest and smallest values in a given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([-1, -2, -3])\n    -4\n    >>> big_sum([10, 20, 30, 40, 50])\n    90\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    if len(arr) == 0:\n        raise ValueError(\"List cannot be empty\")\n\n    return max(arr) + min(arr)"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The converted string in lower case.\n\n    Examples:\n    >>> convert_to_lower(\"InValid\")\n    'invalid'\n    >>> convert_to_lower(\"LOWER\")\n    'lower'\n    >>> convert_to_lower(\"lower\")\n    'lower'\n    \"\"\"\n    return string.lower()\n\n# Testing the function\nassert convert_to_lower(\"InValid\") == \"invalid\"\nassert convert_to_lower(\"LOWER\") == \"lower\"\nassert convert_to_lower(\"lower\") == \"lower\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n        >>> remove_lowercase(\"lowercase\")\n        ''\n        >>> remove_lowercase(\"UPPERCASE\")\n        'UPPERCASE'\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            j = i + 1\n            while j < len(string) and string[j].islower():\n                j += 1\n            i = j\n        else:\n            result += string[i]\n            i += 1\n    return result"}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    number (int): The number for which the first digit needs to be found.\n\n    Returns:\n    int: The first digit of the given number.\n\n    Raises:\n    TypeError: If the input is not an integer.\n\n    Examples:\n    >>> first_digit(123)\n    1\n    >>> first_digit(987654321)\n    9\n    >>> first_digit(-12345)\n    1\n    >>> first_digit(0)\n    0\n    \"\"\"\n\n    # Check if the input is an integer\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Handle negative numbers\n    if number < 0:\n        number = abs(number)\n\n    # Handle the case when the number is 0\n    if number == 0:\n        return 0\n\n    # Find the first digit by repeatedly dividing the number by 10\n    while number >= 10:\n        number //= 10\n\n    return number"}
{"task_id": "Mbpp/554", "solution": "def split_odd(lst):\n    \"\"\"\n    Split a list of integers into a new list containing only the odd integers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd integers from the input list.\n\n    Examples:\n        >>> split_odd([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n        >>> split_odd([2, 4, 6, 8])\n        []\n        >>> split_odd([1, 3, 5, 7, 9])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in lst if num % 2 != 0]\n\n# Testing the function\nassert split_odd([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert split_odd([2, 4, 6, 8]) == []\nassert split_odd([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> difference(3)\n    30\n    >>> difference(5)\n    225\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n\n    return sum_of_cubes - sum_of_numbers"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    \"\"\"\n    This function counts the number of pairs in an array whose XOR value is odd.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The size of the input list.\n\n    Returns:\n    int: The number of pairs whose XOR value is odd.\n\n    \"\"\"\n\n    # Initialize a count variable to keep track of the number of odd pairs\n    count = 0\n\n    # Iterate through each element in the array\n    for i in range(n):\n        # Iterate through each element after the current element\n        for j in range(i+1, n):\n            # Calculate the XOR value of the current pair\n            xor_val = arr[i] ^ arr[j]\n\n            # Check if the XOR value is odd\n            if xor_val % 2 != 0:\n                # Increment the count if the XOR value is odd\n                count += 1\n\n    # Return the count of odd pairs\n    return count"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Hello World\")\n    'hELLO wORLD'\n    >>> toggle_string(\"12345\")\n    '12345'\n    \"\"\"\n\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n\n    return toggled_string"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n\n    Raises:\n    TypeError: If either num1 or num2 is not an integer.\n\n    Examples:\n    >>> digit_distance_nums(1, 2)\n    1\n    >>> digit_distance_nums(123, 321)\n    2\n    >>> digit_distance_nums(1234, 4321)\n    6\n    \"\"\"\n\n    # Check if num1 and num2 are integers\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both num1 and num2 must be integers.\")\n\n    # Convert num1 and num2 to strings\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Calculate the per-digit difference\n    distance = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance += abs(int(digit1) - int(digit2))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): The input list.\n    n (int): The length of the sublist.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    Raises:\n    ValueError: If the length of the sublist is greater than the length of the input list.\n\n    Examples:\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    7\n    >>> max_sub_array_sum([1, 2, 3, 4, 5], 3)\n    12\n    >>> max_sub_array_sum([-1, -2, -3, -4, -5], 2)\n    -3\n    \"\"\"\n\n    if n > len(arr):\n        raise ValueError(\"Length of sublist cannot be greater than the length of the input list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n, len(arr)):\n        current_sum += arr[i] - arr[i - n]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements from tuple1 and tuple2, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n        >>> union_elements((), (1, 2, 3))\n        (1, 2, 3)\n        >>> union_elements((1, 2, 3), ())\n        (1, 2, 3)\n    \"\"\"\n    # Combine the two input tuples\n    combined_tuple = tuple1 + tuple2\n\n    # Remove duplicates and sort the resulting tuple in ascending order\n    sorted_union = tuple(sorted(set(combined_tuple)))\n\n    return sorted_union"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Finds the length of the longest sublist in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the longest sublist.\n\n    Examples:\n    >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n    4\n    >>> Find_Max_Length([[1,2,3],[4,5],[6,7,8,9,10]])\n    5\n    >>> Find_Max_Length([[1,2,3],[4,5],[6]])\n    3\n    \"\"\"\n\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values extracted from the string.\n\n    Raises:\n        ValueError: If the string is not in the correct format.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n        >>> extract_values('\"Python\", \"PHP\"')\n        ['Python', 'PHP']\n        >>> extract_values('\"Python\"')\n        ['Python']\n        >>> extract_values('\"Python\", \"PHP\", \"Java\",')\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid string format.\n\n    \"\"\"\n    values = []\n    start_index = None\n    end_index = None\n    in_quotes = False\n\n    for i, char in enumerate(string):\n        if char == '\"':\n            if in_quotes:\n                end_index = i\n                values.append(string[start_index+1:end_index])\n                in_quotes = False\n            else:\n                start_index = i\n                in_quotes = True\n\n    if in_quotes:\n        raise ValueError(\"Invalid string format.\")\n\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The number of possible unordered pairs.\n\n    Raises:\n    ValueError: If the list size is less than 2 or greater than 100.\n\n    Examples:\n    >>> count_Pairs([1, 2, 1], 3)\n    2\n    >>> count_Pairs([1, 2, 3, 4, 5], 5)\n    10\n    >>> count_Pairs([1, 1, 1, 1], 4)\n    0\n    \"\"\"\n\n    if n < 2 or n > 100:\n        raise ValueError(\"List size should be between 2 and 100.\")\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Split a string into characters.\n\n    Parameters:\n    string (str): The string to be split into characters.\n\n    Returns:\n    list: A list of characters from the input string.\n\n    Example:\n    >>> split_string('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Testing the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer for which the sum of digits is to be calculated.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input integer is negative.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(9)\n    9\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input integer must be non-negative.\")\n\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    return digit_sum"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted in ascending order, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test cases\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 15]) == False\nassert is_sorted_list([1, 2, 3, 4, 5]) == True\nassert is_sorted_list([5, 4, 3, 2, 1]) == False\nassert is_sorted_list([1, 1, 1, 1, 1]) == True\nassert is_sorted_list([1]) == True\nassert is_sorted_list([]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is negative.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n        >>> empty_list(0)\n        []\n        >>> empty_list(-1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be a positive integer.\n        >>> empty_list('5')\n        Traceback (most recent call last):\n            ...\n        TypeError: n must be an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer.\")\n    if n < 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with the sublists sorted in lexicographical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(nums):\n    \"\"\"\n    Remove duplicate numbers from a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with duplicate numbers removed.\n\n    Examples:\n        >>> remove_duplicates([1, 2, 3, 2, 3, 4, 5])\n        [1, 4, 5]\n        >>> remove_duplicates([1, 1, 1, 1, 1])\n        [1]\n        >>> remove_duplicates([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\n# Testing the function\nassert remove_duplicates([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]\nassert remove_duplicates([1, 1, 1, 1, 1]) == [1]\nassert remove_duplicates([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    unique_numbers = list(set(numbers))\n    product = 1\n\n    for num in unique_numbers:\n        product *= num\n\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub_arr):\n    \"\"\"\n    Check whether a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to be checked.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n\n    # Check if sub_arr is empty\n    if not sub_arr:\n        return True\n\n    # Check if arr is empty\n    if not arr:\n        return False\n\n    # Iterate through arr\n    for i in range(len(arr)):\n        # Check if the first element of sub_arr matches the current element of arr\n        if arr[i] == sub_arr[0]:\n            # Check if the remaining elements of sub_arr match the subsequent elements of arr\n            if arr[i:i+len(sub_arr)] == sub_arr:\n                return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit of the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit of the factorial needs to be calculated.\n\n    Returns:\n    int: The last digit of the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    8\n    >>> last_digit_factorial(0)\n    1\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Base case: factorial of 0 is 1\n    if n == 0:\n        return 1\n\n    # Calculate the factorial using a loop\n    factorial = 1\n    for i in range(1, n + 1):\n        factorial *= i\n\n    # Return the last digit of the factorial\n    return factorial % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [10, 20, 30], [100, 200, 300])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300]\n\n        >>> interleave_lists([1, 2, 3, 4], [10, 20, 30], [100, 200, 300])\n        ValueError: Input lists must be of the same length.\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    Raises:\n        TypeError: If either input is not a tuple.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    dissimilar_elements = set1.symmetric_difference(set2)\n\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only the even elements from the nested tuple.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    even_elements = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            even_elements.append(extract_even(element))\n        elif element % 2 == 0:\n            even_elements.append(element)\n    return tuple(even_elements)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of one edge of the base of the pyramid.\n    height (float): The height of the pyramid.\n\n    Returns:\n    float: The surface area of the pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(0, 4)\n    0.0\n    >>> surface_area(3, 0)\n    0.0\n    >>> surface_area(-3, 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base edge cannot be negative.\n    >>> surface_area(3, -4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n\n    if base_edge < 0:\n        raise ValueError(\"Base edge cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge ** 2) / 2\n    total_area = base_area + lateral_area\n    surface_area = total_area * height / 3\n\n    return surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Calculate the nth Catalan number.\n\n    The Catalan numbers form a sequence of natural numbers that occur\n    quite naturally in various counting problems, often involving recursively\n    defined structures.\n\n    Parameters:\n    n (int): The index of the Catalan number to calculate.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(5)\n    42\n    >>> catalan_number(10)\n    16796\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Base case: 0th Catalan number is 1\n    if n == 0:\n        return 1\n\n    # Calculate the nth Catalan number using the recursive formula:\n    # C(n) = C(0) * C(n-1) + C(1) * C(n-2) + ... + C(n-1) * C(0)\n    catalan_num = 0\n    for i in range(n):\n        catalan_num += catalan_number(i) * catalan_number(n - i - 1)\n\n    return catalan_num"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries representing items with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is greater than the number of items in the dataset.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)\n        [{'name': 'Item-2', 'price': 555.22}]\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 2)\n        [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty.\")\n\n    if n > len(dataset):\n        raise ValueError(\"n cannot be greater than the number of items in the dataset.\")\n\n    sorted_dataset = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The input list to be split.\n    n (int): The index at which the list should be split.\n\n    Returns:\n    list: The modified list with the first part added to the end.\n\n    Raises:\n    IndexError: If the index n is out of range.\n\n    Examples:\n    >>> split_Arr([12,10,5,6,52,36],2)\n    [5, 6, 52, 36, 12, 10]\n    >>> split_Arr([1,2,3,4,5],3)\n    [4, 5, 1, 2, 3]\n    >>> split_Arr([10,20,30,40,50],5)\n    [10, 20, 30, 40, 50]\n    \"\"\"\n\n    if n >= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The list to be converted.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-integer values.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 20, 30, 40])\n        30\n        >>> big_diff([5, 5, 5, 5])\n        0\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if not all(isinstance(num, int) for num in nums):\n        raise ValueError(\"Input list must contain only integers\")\n\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Parameters:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the start and end numbers.\n\n    Raises:\n    ValueError: If the start number is greater than the end number.\n\n    Examples:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    >>> perfect_squares(10, 20)\n    [16]\n    >>> perfect_squares(20, 10)\n    []\n    \"\"\"\n\n    if start > end:\n        raise ValueError(\"Start number must be less than or equal to the end number.\")\n\n    perfect_squares_list = []\n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            perfect_squares_list.append(num)\n\n    return perfect_squares_list"}
{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n\n    return (x, y)"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> swap_list([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n\n    >>> swap_list([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial coefficients to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_of_product(3)\n    15\n    >>> sum_of_product(4)\n    40\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = 0\n    for i in range(1, n + 1):\n        product = 1\n        for j in range(1, i + 1):\n            product *= (i + j) // j\n        result += product\n\n    return result\n\n# Testing the function\nassert sum_of_product(3) == 15\nassert sum_of_product(4) == 40"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Raises:\n        ValueError: If the input IP address is not in the correct format.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n        >>> removezero_ip(\"001.002.003.004\")\n        '1.2.3.4'\n        >>> removezero_ip(\"127.0.0.1\")\n        '127.0.0.1'\n    \"\"\"\n    # Split the IP address into its components\n    components = ip_address.split('.')\n\n    # Check if the IP address has exactly 4 components\n    if len(components) != 4:\n        raise ValueError(\"Invalid IP address format\")\n\n    # Remove leading zeroes from each component\n    components = [str(int(component)) for component in components]\n\n    # Join the components back together with '.' as the separator\n    ip_address_without_zeroes = '.'.join(components)\n\n    return ip_address_without_zeroes"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The difference between the first even and first odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([2,4,6,8])\n    0\n    >>> diff_even_odd([1,3,5,7])\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif num % 2 != 0:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num - odd_num"}
{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the tuple.\n\n    Raises:\n    TypeError: If the input is not a tuple.\n\n    Examples:\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    88\n    >>> tuple_size((\"A\",))\n    24\n    >>> tuple_size(())\n    0\n    \"\"\"\n\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    size = sys.getsizeof(t)\n    return size"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The kth element to find.\n\n    Returns:\n        int: The kth element from the merged sorted arrays.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    \"\"\"\n\n    # Check if k is out of range\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n\n    # Initialize pointers for arr1 and arr2\n    i, j = 0, 0\n\n    # Iterate until we find the kth element\n    while i + j < k:\n        # If arr1 is exhausted, return the kth element from arr2\n        if i == len(arr1):\n            return arr2[j + k - i - 1]\n        # If arr2 is exhausted, return the kth element from arr1\n        if j == len(arr2):\n            return arr1[i + k - j - 1]\n\n        # Compare the elements at the current pointers\n        if arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the kth element\n    return min(arr1[i], arr2[j])"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits, each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to count the number of digits\n    num_str = str(num)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** len(num_str) for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    if sum_of_digits == num:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_average(10)\n    (55, 5.5)\n    >>> sum_average(0)\n    (0, 0.0)\n    >>> sum_average(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum_of_numbers = (n * (n + 1)) / 2\n    average = sum_of_numbers / n\n\n    return sum_of_numbers, average"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    if num % 2 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert is_even(1) == False\nassert is_even(2) == True\nassert is_even(3) == False\nassert is_even(4) == True\nassert is_even(5) == False\nassert is_even(6) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated character is found.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        None\n    \"\"\"\n    char_set = set()\n    for char in string:\n        if char in char_set:\n            return char\n        char_set.add(char)\n    return None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all Lucid numbers smaller than or equal to the given integer 'n'.\n\n    Parameters:\n    n (int): The upper limit for Lucid numbers.\n\n    Returns:\n    list: A list of Lucid numbers smaller than or equal to 'n'.\n\n    \"\"\"\n\n    def is_lucid(num):\n        \"\"\"\n        Checks if a number is a Lucid number.\n\n        Parameters:\n        num (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is a Lucid number, False otherwise.\n\n        \"\"\"\n        if num == 1:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            while num > 1:\n                if num % 2 == 0:\n                    return False\n                num = (num - 1) / 2\n            return True\n\n    lucid_numbers = []\n    for i in range(1, n + 1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\n\n# Testing the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the words in a given string.\n\n    Parameters:\n    string (str): The input string containing words separated by spaces.\n\n    Returns:\n    str: The reversed string with words in the original order.\n\n    Example:\n    >>> reverse_words(\"python program\")\n    'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = ' '.join(reversed(words))\n    return reversed_words"}
{"task_id": "Mbpp/605", "solution": "def prime_num(num):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num**0.5) + 1):\n        if num % i == 0:\n            return False\n\n    return True"}
{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    TypeError: If the input is not a number.\n\n    Examples:\n    >>> radian_degree(90)\n    1.5707963267948966\n    >>> radian_degree(0)\n    0.0\n    >>> radian_degree(360)\n    6.283185307179586\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise TypeError(\"Input must be a number.\")\n\n    return degrees * (math.pi / 180)"}
{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not a valid regular expression.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    try:\n        match = re.search(pattern, string)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error as e:\n        raise ValueError(\"Invalid regular expression: {}\".format(e))"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Calculate the nth Bell number using a recursive approach.\n\n    Parameters:\n    n (int): The index of the Bell number to calculate.\n\n    Returns:\n    int: The nth Bell number.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    bell = [[0 for _ in range(n + 1)] for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The modified list with the k'th element removed.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n        >>> remove_kth_element([1, 2, 3, 4, 5], 5)\n        [1, 2, 3, 4]\n        >>> remove_kth_element([1, 2, 3, 4, 5], 0)\n        [2, 3, 4, 5]\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"Index out of range\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix.\n\n    Parameters:\n    matrix (list of lists): The matrix represented as a list of lists.\n    n (int): The column number to find the maximum value from.\n\n    Returns:\n    int: The maximum value in the nth column.\n\n    Raises:\n    ValueError: If the matrix is empty or the column number is out of range.\n\n    Examples:\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    19\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n    8\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n    ValueError: Column number is out of range.\n    \"\"\"\n\n    if not matrix:\n        raise ValueError(\"Matrix is empty.\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column number is out of range.\")\n\n    max_value = float('-inf')\n\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    return [list(x) for x in zip(*lst)]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Raises:\n        TypeError: If the input is not a list of tuples.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n        >>> cummulative_sum([(1, 2, 3), (4, 5, 6)])\n        21\n        >>> cummulative_sum([(1,), (2,), (3,)])\n        6\n    \"\"\"\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    return sum(sum(t) for t in tuple_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculates the average value for each tuple in a given tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple of tuples.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    if not isinstance(tuples, tuple):\n        raise TypeError(\"Input must be a tuple of tuples.\")\n\n    averages = []\n    for t in tuples:\n        if not isinstance(t, tuple):\n            raise TypeError(\"Input must be a tuple of tuples.\")\n        averages.append(sum(t) / len(t))\n\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples are not of the same length.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    return tuple(a % b for a, b in zip(tuple1, tuple2))"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n        ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        [1.0, 1.0, 1.0]\n        >>> div_list([1, 2, 3], [4, 5, 6, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: The lengths of list1 and list2 must be equal.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of list1 and list2 must be equal.\")\n\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    nums = ''\n    letters = ''\n\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n\n    return letters + nums"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset of divisible pairs.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([2, 4, 6, 8, 10])\n        5\n        >>> largest_subset([1, 2, 3, 4, 5])\n        1\n    \"\"\"\n\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, max_subset):\n        \"\"\"\n        Recursive function to find the largest subset of divisible pairs.\n\n        Args:\n            numbers (list): The remaining numbers to consider.\n            current_subset (list): The current subset being built.\n            max_subset (list): The largest subset found so far.\n\n        Returns:\n            list: The largest subset of divisible pairs.\n        \"\"\"\n        if not numbers:\n            if len(current_subset) > len(max_subset):\n                return current_subset\n            else:\n                return max_subset\n\n        for i in range(len(numbers)):\n            if not current_subset or is_divisible(numbers[i], current_subset[-1]):\n                new_subset = find_subset(numbers[:i] + numbers[i+1:], current_subset + [numbers[i]], max_subset)\n                if len(new_subset) > len(max_subset):\n                    max_subset = new_subset\n\n        return max_subset\n\n    return len(find_subset(numbers, [], []))"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, size):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        size (int): The size of the lists.\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        ValueError: If the size of the lists is not the same.\n\n    \"\"\"\n    if len(list1) != size or len(list2) != size:\n        raise ValueError(\"The size of the lists must be the same.\")\n\n    merged_list = []\n    i, j = 0, 0\n\n    while i < size and j < size:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    while i < size:\n        merged_list.append(list1[i])\n        i += 1\n\n    while j < size:\n        merged_list.append(list2[j])\n        j += 1\n\n    if size % 2 == 0:\n        mid1 = merged_list[size // 2 - 1]\n        mid2 = merged_list[size // 2]\n        median = (mid1 + mid2) / 2\n    else:\n        median = merged_list[size // 2]\n\n    return median\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nsize = 5"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number in the original list.\n\n    Raises:\n        TypeError: If the input `nums` is not a list.\n        TypeError: If the input `n` is not an integer.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5], 2)\n        [1, 4, 9, 16, 25]\n        >>> nth_nums([1, 2, 3, 4, 5], 3)\n        [1, 8, 27, 64, 125]\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input 'nums' must be a list.\")\n    if not isinstance(n, int):\n        raise TypeError(\"Input 'n' must be an integer.\")\n\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The converted uppercase string.\n\n    Examples:\n    >>> is_upper(\"person\")\n    'PERSON'\n    >>> is_upper(\"Hello World\")\n    'HELLO WORLD'\n    >>> is_upper(\"123\")\n    '123'\n    \"\"\"\n    return string.upper()"}
{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    radius (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle inscribed in the semicircle.\n    None: If the radius is negative.\n\n    Raises:\n    TypeError: If the radius is not a number.\n\n    Examples:\n    >>> triangle_area(1)\n    0.5\n    >>> triangle_area(2)\n    2.0\n    >>> triangle_area(-1)\n    None\n    \"\"\"\n\n    if not isinstance(radius, (int, float)):\n        raise TypeError(\"Radius must be a number.\")\n\n    if radius < 0:\n        return None\n\n    height = math.sqrt(radius ** 2 - (radius / 2) ** 2)\n    area = 0.5 * radius * height\n    return area"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n\n    Examples:\n    >>> replace_spaces(\"My Name is Dawood\")\n    'My%20Name%20is%20Dawood'\n    >>> replace_spaces(\"Hello World\")\n    'Hello%20World'\n    >>> replace_spaces(\"Python is awesome\")\n    'Python%20is%20awesome'\n    \"\"\"\n    return string.replace(\" \", \"%20\")"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers from the input list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> find_even_numbers([1, 3, 5])\n        []\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    return [num for num in numbers if num % 2 == 0]\n\n\n# Testing the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\nassert find_even_numbers([1, 3, 5]) == []"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    \"\"\"\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        coordinate (tuple): The coordinate tuple for which adjacent coordinates are to be extracted.\n\n    Returns:\n        list: A list of adjacent coordinates.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> get_coordinates((3, 4))\n        [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    if not isinstance(coordinate, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with whitespaces replaced.\n\n    Examples:\n    >>> replace_spaces('Jumanji The Jungle')\n    'Jumanji_The_Jungle'\n    >>> replace_spaces('Hello_World')\n    'Hello World'\n    \"\"\"\n\n    # Replace underscores with whitespaces\n    modified_string = string.replace('_', ' ')\n\n    # Replace whitespaces with underscores\n    modified_string = modified_string.replace(' ', '_')\n\n    return modified_string"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1, 0, 2, 0, 3, 4])\n        [1, 2, 3, 4, 0, 0]\n        >>> move_zero([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n        >>> move_zero([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    # Create a new list to store the non-zero elements\n    result = [num for num in lst if num != 0]\n\n    # Append the required number of zeroes to the list\n    result.extend([0] * (len(lst) - len(result)))\n\n    return result"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers in the list.\n\n    Raises:\n    ValueError: If the length of the list is less than 2.\n\n    Examples:\n    >>> pair_xor_Sum([5, 9, 7, 6], 4)\n    47\n    >>> pair_xor_Sum([1, 2, 3], 3)\n    10\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"List length should be at least 2.\")\n\n    xor_sum = 0\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            xor_sum += nums[i] ^ nums[j]\n\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def heapify(arr, n, i):\n        \"\"\"\n        Builds a max heap from the given list.\n\n        Parameters:\n        arr (list): The list to be heapified.\n        n (int): The size of the heap.\n        i (int): The index of the current root node.\n\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    buy_price (float): The price at which the asset was bought.\n    sell_price (float): The price at which the asset was sold.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if buy_price < sell_price:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    wind_velocity (float): The wind velocity in km/h.\n    temperature (float): The temperature in celsius.\n\n    Returns:\n    int: The wind chill index rounded to the next integer.\n\n    Raises:\n    ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -40\u00b0C.\n\n    \"\"\"\n\n    if wind_velocity > 150:\n        raise ValueError(\"Wind velocity must be less than or equal to 150 km/h.\")\n    if temperature < -40:\n        raise ValueError(\"Temperature must be greater than or equal to -40\u00b0C.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_names_length(names):\n    \"\"\"\n    Calculates the sum of the lengths of names in a given list after removing names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of names.\n\n    Returns:\n        int: The sum of the lengths of the remaining names.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_names_length(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n        >>> sum_names_length(['Alice', 'Bob', 'Charlie'])\n        0\n    \"\"\"\n    if not isinstance(names, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Remove names that start with a lowercase letter\n    names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    return sum(len(name) for name in names)\n\n# Test the function\nassert sum_names_length(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\nassert sum_names_length(['Alice', 'Bob', 'Charlie']) == 0"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to be calculated.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    325\n    >>> is_nonagonal(4)\n    711\n    >>> is_nonagonal(5)\n    1386\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input list to be reversed.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed list upto the given position.\n\n    Raises:\n    ValueError: If the input list is empty or k is out of range.\n\n    Examples:\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 6)\n    [6, 5, 4, 3, 2, 1]\n    >>> reverse_Array_Upto_K([], 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list is empty.\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 7)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input list is empty.\")\n\n    if k > len(arr):\n        raise ValueError(\"k is out of range.\")\n\n    return arr[:k][::-1] + arr[k:]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Add a dictionary to a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        tuple: The updated tuple with the dictionary added.\n\n    Raises:\n        TypeError: If the input is not a tuple or a dictionary.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    return tup + (dictionary,)"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Finds the maximum average of a path in a square matrix.\n\n    Args:\n        matrix (list of lists): The square matrix of size N*N.\n\n    Returns:\n        float: The maximum average of a path.\n\n    Raises:\n        ValueError: If the input matrix is not a square matrix.\n\n    Examples:\n        >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        raise ValueError(\"Input matrix is not a square matrix\")\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Initialize the memoization table\n    dp = [[0] * n for _ in range(n)]\n\n    # Calculate the maximum average of a path using dynamic programming\n    for i in range(n):\n        for j in range(n):\n            # Base case: the first cell\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            # Calculate the maximum average for the rest of the cells\n            else:\n                # Calculate the maximum average from the top cell\n                top_average = dp[i - 1][j] if i > 0 else 0\n                # Calculate the maximum average from the left cell\n                left_average = dp[i][j - 1] if j > 0 else 0\n                # Choose the maximum average from the top or left cell\n                dp[i][j] = max(top_average, left_average) + matrix[i][j]\n\n    # Calculate the maximum average of a path\n    max_average = dp[n - 1][n - 1] / (n * n)\n\n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filter students that have height and weight above the minimum.\n\n    Args:\n        students (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required.\n        min_weight (float): The minimum weight required.\n\n    Returns:\n        dict: A dictionary containing the filtered students.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct type.\n        ValueError: If the input arguments are not within the valid range.\n\n    Examples:\n        >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    if not isinstance(students, dict):\n        raise TypeError(\"students must be a dictionary\")\n    if not isinstance(min_height, float) or not isinstance(min_weight, float):\n        raise TypeError(\"min_height and min_weight must be floats\")\n    if min_height < 0 or min_weight < 0:\n        raise ValueError(\"min_height and min_weight must be positive\")\n\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The number of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n        >>> count_same_pair([1, 2, 3], [4, 5, 6])\n        0\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of a number raised to a power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to raise the base to.\n\n    Returns:\n    int: The sum of all digits of the base raised to the power.\n\n    Raises:\n    ValueError: If the base or power is negative.\n\n    Examples:\n    >>> power_base_sum(2, 100)\n    115\n    >>> power_base_sum(10, 5)\n    27\n    >>> power_base_sum(5, 0)\n    1\n    \"\"\"\n\n    if base < 0 or power < 0:\n        raise ValueError(\"Base and power must be non-negative.\")\n\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n\n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    import re\n\n    # Use regular expression to find all occurrences of quotation marks and values between them\n    matches = re.findall(r'\"(.*?)\"', string)\n\n    return matches"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n    Parameters:\n    t (tuple): A tuple of numbers.\n\n    Returns:\n    tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Example:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n        >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced by colons.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':')\n    return string"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if it is not found.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        -1\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    >>> sum_Of_Subarray_Prod([4, 5, 6])\n    330\n    \"\"\"\n\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Parameters:\n    num (int): The number whose middle bits need to be toggled.\n\n    Returns:\n    int: The number with toggled middle bits.\n\n    Raises:\n    TypeError: If the input is not an integer.\n\n    Examples:\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(10)\n    14\n    >>> toggle_middle_bits(15)\n    15\n    \"\"\"\n\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Get the number of bits in the binary representation of the input\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in a sorted list.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain the sorted order.\n\n    Examples:\n    >>> left_insertion([1, 2, 4, 5], 6)\n    4\n    >>> left_insertion([1, 2, 4, 5], 3)\n    2\n    >>> left_insertion([1, 2, 4, 5], 1)\n    0\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search until left and right pointers cross each other\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the value is found, return the index\n        if arr[mid] == value:\n            return mid\n\n        # If the value is less than the middle element, update the right pointer\n        elif arr[mid] > value:\n            right = mid - 1\n\n        # If the value is greater than the middle element, update the left pointer\n        else:\n            left = mid + 1\n\n    # Return the left pointer as the insertion point\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU].*'\n    return bool(re.match(pattern, string))"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize variables\n    index = 1\n    triangular_number = 1\n\n    # Find the index of the smallest triangular number with n digits\n    while True:\n        # Check if the number of digits in the triangular number is equal to n\n        if len(str(triangular_number)) == n:\n            return index\n\n        # Increment the index and calculate the next triangular number\n        index += 1\n        triangular_number += index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert a given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n        >>> tuple_to_dict(('a', 'b', 'c', 'd'))\n        {'a': 'b', 'c': 'd'}\n        >>> tuple_to_dict(('x',))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuple must have an even length.\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length.\")\n\n    return dict(zip(t[::2], t[1::2]))"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    # Check if the string is empty or has only one character\n    if len(string) < 2:\n        return True\n\n    # Get the first character of the string\n    first_char = string[0]\n\n    # Iterate through the remaining characters in the string\n    for char in string[1:]:\n        # If any character is different from the first character, return False\n        if char != first_char:\n            return False\n\n    # If all characters are the same, return True\n    return True"}
{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    # Calculate the area of a square with side length 'side_length'\n    square_area = side_length ** 2\n\n    # Calculate the area of a triangle with side length 'side_length'\n    triangle_area = math.sqrt(3) * side_length ** 2 / 4\n\n    # Calculate the total area of the tetrahedron\n    total_area = 4 * triangle_area\n\n    return total_area"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        n (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Raises:\n        TypeError: If lst is not a list.\n        ValueError: If n is negative.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11)\n        [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    n = n % len(lst)  # Handle cases where n is larger than the length of the list\n    return lst[-n:] + lst[:-n]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tuple_to_check):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tuple_to_check (tuple): The tuple to check.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return None in tuple_to_check"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        list: A list of numbers within the given range that satisfy the condition.\n\n    Raises:\n        ValueError: If startnum is greater than endnum.\n\n    Examples:\n        >>> divisible_by_digits(1, 22)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    \"\"\"\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    This function takes a string as input and returns the string with spaces between words starting with capital letters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n    >>> capital_words_spaces(\"Python\")\n    'Python'\n    >>> capital_words_spaces(\"PythonExpert\")\n    'Python Expert'\n    >>> capital_words_spaces(\"PythonExpertProgram\")\n    'Python Expert Program'\n    \"\"\"\n\n    # Split the string into words\n    words = string.split()\n\n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i].istitle():\n            # Insert a space before the word\n            words[i] = \" \" + words[i]\n\n    # Join the words back into a string\n    modified_string = \"\".join(words)\n\n    return modified_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of numbers.\n\n    Raises:\n        TypeError: If the input is not a list of strings.\n        ValueError: If any element in the list is not a valid number.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    try:\n        sorted_numbers = sorted(numbers, key=int)\n    except ValueError:\n        raise ValueError(\"Invalid number in the list.\")\n\n    return sorted_numbers"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n        >>> add_tuple([], (1, 2, 3))\n        [1, 2, 3]\n        >>> add_tuple([1, 2, 3], ())\n        [1, 2, 3]\n    \"\"\"\n    return lst + list(tup)"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n\n    def is_min_heap(arr, i):\n        \"\"\"\n        Helper function to check if the subtree rooted at index i is a min heap.\n\n        Parameters:\n        arr (list): The input array.\n        i (int): The index of the root of the subtree.\n\n        Returns:\n        bool: True if the subtree is a min heap, False otherwise.\n        \"\"\"\n        n = len(arr)\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n\n        if left_child_index < n:\n            if not is_min_heap(arr, left_child_index):\n                return False\n\n        if right_child_index < n:\n            if not is_min_heap(arr, right_child_index):\n                return False\n\n        return True\n\n    return is_min_heap(arr, 0)"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculate the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The index of the Jacobsthal number to calculate.\n\n    Returns:\n    int: The nth Jacobsthal number.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> jacobsthal_num(0)\n    0\n    >>> jacobsthal_num(1)\n    1\n    >>> jacobsthal_num(5)\n    11\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be greater than or equal to 0\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples representing records.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than 2 elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([10, 10, 10, 10])\n        10\n        >>> second_smallest([5])\n        Traceback (most recent call last):\n            ...\n        ValueError: List must have at least 2 elements.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        int: The count of pairs of reverse strings.\n\n    Examples:\n        >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n        2\n        >>> count_reverse_pairs([\"hello\", \"world\", \"python\"])\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        dict: A dictionary where the keys are tuples representing unique sublists, and the values are the number of occurrences.\n\n    Examples:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        # Convert the string to a float\n        number = float(string)\n\n        # Check if the number has a precision of 2\n        if len(str(number).split('.')[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Create a set from the list to remove duplicate elements\n    unique_nums = set(nums)\n\n    # If the length of the set is equal to 1, it means all elements are distinct\n    if len(unique_nums) == 1:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 30 days, False otherwise.\n\n    Raises:\n    ValueError: If the month number is not in the range 1 to 12.\n\n    Examples:\n    >>> check_monthnumber_number(6)\n    True\n    >>> check_monthnumber_number(12)\n    False\n    >>> check_monthnumber_number(13)\n    Traceback (most recent call last):\n        ...\n    ValueError: Invalid month number. Month number should be in the range 1 to 12.\n    \"\"\"\n\n    if month_number < 1 or month_number > 12:\n        raise ValueError(\"Invalid month number. Month number should be in the range 1 to 12.\")\n\n    # Months with 30 days: April, June, September, and November\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than 2 elements.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((1, 2, 3, 4, 5), 5)\n    1\n    >>> find_min_diff((10, 20, 30, 40, 50), 5)\n    10\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least 2 elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n\n    min_diff = float('inf')  # Initialize minimum difference as positive infinity\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of digits in the string.\n\n    Examples:\n    >>> number_ctr('program2bedone')\n    1\n    >>> number_ctr('12345')\n    5\n    >>> number_ctr('abc')\n    0\n    \"\"\"\n\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    A polite number is a positive integer that is not divisible by any of its digits.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> is_polite(7)\n    11\n    >>> is_polite(10)\n    102\n    >>> is_polite(15)\n    1010\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    count = 0\n    num = 1\n\n    while count < n:\n        num += 1\n        if not any(digit != 0 and num % digit == 0 for digit in map(int, str(num))):\n            count += 1\n\n    return num"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of tuples representing pairs of consecutive items in the input list.\n\n    Examples:\n    >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to the target_sum.\n\n    Args:\n        numbers (list): A list of numbers.\n        target_sum (int): The target sum.\n\n    Returns:\n        int: The number of pairs whose sum is equal to the target_sum.\n\n    Raises:\n        TypeError: If the input is not a list or the target_sum is not an integer.\n\n    Examples:\n        >>> get_pairs_count([1, 2, 3, 4, 5], 5)\n        2\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 2, 3, 4, 5], 10)\n        0\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n    if not isinstance(target_sum, int):\n        raise TypeError(\"Target sum must be an integer.\")\n\n    count = 0\n    pairs = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def diff(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the elements that are present in list1 but not in list2.\n\n    Examples:\n    >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n# Testing the function\nassert diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    2026\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    odd_num = 1\n\n    for _ in range(n):\n        sum_of_powers += odd_num ** 4\n        odd_num += 2\n\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Parameters:\n    expression (str): The expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n\n    Examples:\n    >>> check_expression(\"{()}[{}]\")\n    True\n    >>> check_expression(\"{[}]\")\n    False\n    >>> check_expression(\"({[}])\")\n    False\n    \"\"\"\n\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            opening_bracket = stack.pop()\n            closing_bracket = opening_brackets[closing_brackets.index(char)]\n            if opening_bracket != closing_bracket:\n                return False\n\n    return len(stack) == 0"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The main string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n               If there is no match, returns None.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        first_occurrence = string.index(substring)\n        last_occurrence = string.rindex(substring)\n        return substring, first_occurrence, last_occurrence\n    else:\n        return None\n\n# Testing the function\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Calculate the sum of non-repeated elements in a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n\n    Examples:\n    >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n    21\n    >>> find_sum([1, 1, 1, 1, 1])\n    1\n    >>> find_sum([1, 2, 3, 4, 5])\n    15\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Initialize the sum variable\n    total_sum = 0\n\n    # Iterate over each element in the list\n    for num in lst:\n        # Check if the element is already in the set\n        if num not in unique_elements:\n            # If not, add it to the set and add it to the sum\n            unique_elements.add(num)\n            total_sum += num\n\n    return total_sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i, num in enumerate(lst):\n        if i == 0 or num != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(num)\n\n    if current_sublist:\n        result.append(current_sublist)\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Raises:\n        TypeError: If the input is not a list of tuples.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise TypeError(\"Input must be a list of tuples.\")\n\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of a given number is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays of a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    >>> odd_length_sum([1, 2, 4, 5, 6])\n    39\n    >>> odd_length_sum([1, 2, 4, 5, 6, 7])\n    50\n    \"\"\"\n\n    n = len(arr)\n    total_sum = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_length = j - i + 1\n            if subarray_length % 2 != 0:\n                subarray_sum = sum(arr[i:j+1])\n                total_sum += subarray_sum\n\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    Finds the product of the first even and odd numbers in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The product of the first even and odd numbers in the list.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([2, 4, 6, 8])\n        16\n        >>> mul_even_odd([1, 3, 5, 7])\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n        elif num % 2 != 0:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_num * odd_num"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(10)\")\n        (10,)\n        >>> tuple_str_int(\"(1, 2, 3, 4, )\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid tuple representation.\n\n    \"\"\"\n    try:\n        # Remove the leading and trailing parentheses\n        tuple_str = tuple_str.strip(\"()\")\n\n        # Split the string by commas and convert each element to integer\n        int_tuple = tuple(int(element) for element in tuple_str.split(\",\"))\n\n        return int_tuple\n\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation.\")"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted into the list.\n\n    Returns:\n    int: The index where the target should be inserted into the list.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            return mid\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    # Return the index where the target should be inserted\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Parameters:\n    text (str): The input string to be matched.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of strings.\n        string (str): The string to be included in the tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n        >>> remove_nested(('apple', 'banana', ('cherry', 'date')))\n        ('apple', 'banana')\n    \"\"\"\n    return tuple(x for x in tup if not isinstance(x, tuple))"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n        >>> count_list([[1, 2, 3], [4, 5], [6]])\n        3\n        >>> count_list([])\n        0\n    \"\"\"\n    if not isinstance(lists, list):\n        raise TypeError(\"Input must be a list.\")\n\n    return len(lists)"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of elements.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The index of the last occurrence of the target element in the array.\n         Returns -1 if the target element is not found.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n    last_index = -1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            last_index = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return last_index"}
{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function checks if a given text starts with 'a' and ends with 'b'.\n\n    Parameters:\n    text (str): The text to be checked.\n\n    Returns:\n    bool: True if the text starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculate the sum of all values in the given dictionary.\n\n    Parameters:\n    dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n\n    Raises:\n    TypeError: If the input is not a dictionary.\n\n    Examples:\n    >>> return_sum({'a': 100, 'b':200, 'c':300})\n    600\n    >>> return_sum({'x': 5, 'y': 10, 'z': 15})\n    30\n    >>> return_sum({})\n    0\n    \"\"\"\n\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    return sum(dictionary.values())"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers within the range l and r.\n\n    Raises:\n    ValueError: If l is greater than r.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    25\n    >>> sum_in_range(10, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: l must be less than or equal to r.\n    \"\"\"\n\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r.\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the numbers in the array.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the input list contains non-numeric values.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([-1, -2, -3])\n    -6\n    >>> _sum([])\n    0\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not all(isinstance(num, (int, float)) for num in arr):\n        raise ValueError(\"Input list must contain only numeric values.\")\n\n    return sum(arr)"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a given number to the left by d positions.\n\n    Parameters:\n    num (int): The number to be rotated.\n    d (int): The number of positions to rotate the bits.\n\n    Returns:\n    int: The rotated number.\n\n    Raises:\n    ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n    >>> left_rotate(16, 2)\n    64\n    >>> left_rotate(16, 4)\n    16384\n    >>> left_rotate(16, 32)\n    16\n    \"\"\"\n\n    # Check if the number is a 32-bit integer\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    # Perform the left rotation\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Parameters:\n    string (str): The input string from which whitespaces need to be removed.\n\n    Returns:\n    str: The modified string with all whitespaces removed.\n\n    Examples:\n    >>> remove_all_spaces('python  program')\n    'pythonprogram'\n    >>> remove_all_spaces('  leading and trailing spaces  ')\n    'leadingandtrailingspaces'\n    >>> remove_all_spaces('no spaces')\n    'nospaces'\n    \"\"\"\n    return string.replace(\" \", \"\")"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers.\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    2\n    \"\"\"\n\n    count = 0\n\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    if num == 0 or num == 1:\n        return True\n\n    start = 1\n    end = num // 2\n\n    while start <= end:\n        mid = (start + end) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return False"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The list in the list of lists with the highest sum of elements.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n    [10, 11, 12]\n    >>> max_sum_list([[1, 2, 3], [4, 5, 6]])\n    [1, 2, 3]\n    >>> max_sum_list([[1, 2, 3]])\n    [1, 2, 3]\n    >>> max_sum_list([])\n    []\n    \"\"\"\n\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lst:\n        return []\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The length of the maximum run of uppercase characters.\n\n    Examples:\n    >>> max_run_uppercase('GeMKSForGERksISBESt')\n    5\n    >>> max_run_uppercase('ALLCAPS')\n    7\n    >>> max_run_uppercase('lowercase')\n    0\n    \"\"\"\n\n    max_run = 0  # Initialize the maximum run length\n    current_run = 0  # Initialize the current run length\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)  # Update the maximum run if necessary\n            current_run = 0  # Reset the current run\n\n    return max(max_run, current_run)  # Return the maximum run after iterating through the string"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If no odd number is found in the list.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        ValueError: No odd number found in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd number found in the list.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple.\n        k (int): The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n\n    return True"}
