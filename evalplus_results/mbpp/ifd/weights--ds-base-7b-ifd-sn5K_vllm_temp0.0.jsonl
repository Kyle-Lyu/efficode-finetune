{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list of shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n\n# Testing the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n\n    \"\"\"\n    if n <= 1:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Testing the function\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(nums, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the input list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n        >>> heap_queue_largest([1, 2, 3, 4, 5], 5)\n        [5, 4, 3, 2, 1]\n        >>> heap_queue_largest([1, 2, 3, 4, 5], 6)\n        Traceback (most recent call last):\n            ...\n        ValueError: n cannot be greater than the length of the input list.\n    \"\"\"\n    if n > len(nums):\n        raise ValueError(\"n cannot be greater than the length of the input list.\")\n\n    # Create a min-heap using the heapq module\n    heap = []\n    for num in nums:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Reverse the heap to get the n largest integers in descending order\n    largest_nums = []\n    while heap:\n        largest_nums.append(heapq.heappop(heap))\n    largest_nums.reverse()\n\n    return largest_nums"}
{"task_id": "Mbpp/6", "solution": "def differ_at_one_bit_pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n\n    Examples:\n        >>> differ_at_one_bit_pos(13, 9)\n        True\n        >>> differ_at_one_bit_pos(10, 12)\n        False\n        >>> differ_at_one_bit_pos(1, 2)\n        True\n    \"\"\"\n    # XOR the two numbers to get the bit positions where they differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is 1, the numbers differ at one bit position only\n    return count == 1\n\n# Test the function\nassert differ_at_one_bit_pos(13, 9) == True\nassert differ_at_one_bit_pos(10, 12) == False\nassert differ_at_one_bit_pos(1, 2) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words which are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with squares of each number in the input list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([-1, -2, -3, -4, -5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    squared_nums = []\n    for num in nums:\n        squared_nums.append(num ** 2)\n\n    return squared_nums"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(s):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> find_rotations(\"aaaa\")\n        1\n        >>> find_rotations(\"abcde\")\n        5\n        >>> find_rotations(\"\")\n        0\n    \"\"\"\n\n    # Check if the input is a string\n    if not isinstance(s, str):\n        raise TypeError(\"Input must be a string\")\n\n    # If the string is empty, no rotations are required\n    if len(s) == 0:\n        return 0\n\n    # Find the length of the string\n    n = len(s)\n\n    # Create a concatenated string by appending the input string to itself\n    s_concat = s + s\n\n    # Find the index of the first occurrence of the input string in the concatenated string\n    index = s_concat.find(s)\n\n    # If the input string is not found in the concatenated string, no rotations are required\n    if index == -1:\n        return 0\n\n    # Calculate the minimum number of rotations required\n    rotations = n - index\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_first_last_occurrence(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n        ValueError: If the input string is empty or the character is not found in the string.\n\n    Examples:\n        >>> remove_first_last_occurrence(\"hello\", \"l\")\n        'heo'\n        >>> remove_first_last_occurrence(\"python\", \"p\")\n        'ython'\n        >>> remove_first_last_occurrence(\"python\", \"z\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Character 'z' not found in the string.\n        >>> remove_first_last_occurrence(\"\", \"l\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Input string is empty.\n    \"\"\"\n\n    if not string:\n        raise ValueError(\"Input string is empty.\")\n\n    if char not in string:\n        raise ValueError(f\"Character '{char}' not found in the string.\")\n\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    if first_index == last_index:\n        return string[:first_index] + string[first_index + 1:]\n\n    return string[:first_index] + string[first_index + 1:last_index] + string[last_index + 1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n        list of lists: The sorted matrix.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):\n        raise TypeError(\"Input must be a list of lists\")\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the side of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative.\n\n    Examples:\n    >>> find_volume(10, 8, 6)\n    240.0\n    >>> find_volume(0, 0, 0)\n    0.0\n    >>> find_volume(-1, 2, 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input parameters cannot be negative.\n    \"\"\"\n\n    if base < 0 or height < 0 or length < 0:\n        raise ValueError(\"Input parameters cannot be negative.\")\n\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n\n    Examples:\n        >>> text_lowercase_underscore(\"aab_cbbbc\")\n        True\n        >>> text_lowercase_underscore(\"aab_Cbbbc\")\n        False\n        >>> text_lowercase_underscore(\"Aab_cbbbc\")\n        False\n        >>> text_lowercase_underscore(\"aab_cbbbc_\")\n        True\n        >>> text_lowercase_underscore(\"aab_cbbbc_d\")\n        True\n        >>> text_lowercase_underscore(\"aab_cbbbc_d_\")\n        True\n        >>> text_lowercase_underscore(\"aab_cbbbc_d_e\")\n        False\n    \"\"\"\n    # Split the input string into a list of words\n    words = text.split(\"_\")\n\n    # Check if each word is lowercase and starts with a lowercase letter\n    for word in words:\n        if not word.islower() or not word[0].islower():\n            return False\n\n    return True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Args:\n        side_length (float or int): The length of one side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n\n    Raises:\n        ValueError: If the side_length is not a positive number.\n\n    Examples:\n        >>> square_perimeter(10)\n        40\n        >>> square_perimeter(5.5)\n        22.0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40\nassert square_perimeter(5.5) == 22.0"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n        >>> remove_dirty_chars(\"hello\", \"world\")\n        'heo'\n    \"\"\"\n    # Create a set of characters from string2\n    dirty_chars = set(string2)\n\n    # Use list comprehension to filter out characters from string1 that are present in dirty_chars\n    cleaned_string = ''.join([char for char in string1 if char not in dirty_chars])\n\n    return cleaned_string"}
{"task_id": "Mbpp/19", "solution": "def has_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate element, False otherwise.\n\n    Examples:\n        >>> has_duplicate([1, 2, 3, 4, 5])\n        False\n        >>> has_duplicate([1, 2, 3, 4, 2])\n        True\n        >>> has_duplicate([1, 1, 2, 3, 4])\n        True\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate over each element in the array\n    for element in arr:\n        # If the element is already in the set, it means it is a duplicate\n        if element in unique_elements:\n            return True\n        # Add the element to the set\n        unique_elements.add(element)\n\n    # If no duplicates are found, return False\n    return False\n\n# Test the function\nassert has_duplicate([1, 2, 3, 4, 5]) == False\nassert has_duplicate([1, 2, 3, 4, 2]) == True\nassert has_duplicate([1, 1, 2, 3, 4]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer that can be represented as the product of two consecutive integers.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n\n    Examples:\n        >>> is_woodall(383)\n        True\n        >>> is_woodall(42)\n        False\n    \"\"\"\n    for i in range(1, n):\n        if n == i * (i + 1):\n            return True\n    return False\n\n# Testing the function\nassert is_woodall(383) == True\nassert is_woodall(42) == False"}
{"task_id": "Mbpp/56", "solution": "def is_one_less_than_twice_reverse(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n\n    Examples:\n        >>> is_one_less_than_twice_reverse(70)\n        False\n        >>> is_one_less_than_twice_reverse(121)\n        True\n        >>> is_one_less_than_twice_reverse(123)\n        False\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_num = str(num)[::-1]\n\n    # Convert the reversed number back to an integer\n    reversed_num = int(reversed_num)\n\n    # Check if the number is one less than twice its reverse\n    return num == reversed_num * 2 - 1\n\n\n# Test the function\nassert is_one_less_than_twice_reverse(70) == False\nassert is_one_less_than_twice_reverse(121) == True\nassert is_one_less_than_twice_reverse(123) == False"}
{"task_id": "Mbpp/57", "solution": "def find_max_num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of integers representing the digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_max_num([1, 2, 3])\n        321\n        >>> find_max_num([4, 2, 4, 5, 3, 7])\n        754432\n        >>> find_max_num([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n\n    if not digits:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(num1, num2):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite signs, False otherwise.\n\n    Examples:\n        >>> opposite_signs(1, -2)\n        True\n        >>> opposite_signs(1, 2)\n        False\n        >>> opposite_signs(0, 0)\n        False\n    \"\"\"\n    return (num1 < 0 and num2 > 0) or (num1 > 0 and num2 < 0)\n\n# Test the function\nassert opposite_signs(1, -2) == True\nassert opposite_signs(1, 2) == False\nassert opposite_signs(0, 0) == False"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculates the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> is_octagonal(1)\n    1\n    >>> is_octagonal(2)\n    9\n    >>> is_octagonal(3)\n    27\n    >>> is_octagonal(4)\n    65\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (3 * n - 2)\n\n\n# Testing the function\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 9\nassert is_octagonal(3) == 27\nassert is_octagonal(4) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    \"\"\"\n    Count the number of substrings with the sum of digits equal to their length.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The count of substrings with the sum of digits equal to their length.\n\n    Examples:\n        >>> count_substrings('112112')\n        6\n        >>> count_substrings('12345')\n        0\n        >>> count_substrings('123456')\n        21\n    \"\"\"\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n# Testing the function\nassert count_substrings('112112') == 6\nassert count_substrings('12345') == 0\nassert count_substrings('123456') == 21"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        ValueError: List is empty.\n        >>> smallest_num('not a list')\n        ValueError: Input must be a list.\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"List is empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n        ValueError: If the input list is empty.\n        ValueError: If any tuple in the input list does not have exactly two integers.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n        >>> max_difference([(1, 2), (3, 4), (5, 6)])\n        3\n        >>> max_difference([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n        >>> max_difference([(1, 2, 3)])\n        Traceback (most recent call last):\n            ...\n        ValueError: Each tuple in the input list must have exactly two integers.\n    \"\"\"\n\n    # Check if the input is a list of tuples\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    # Check if the input list is empty\n    if len(tuple_list) == 0:\n        raise ValueError(\"Input list is empty.\")\n\n    # Check if each tuple in the input list has exactly two integers\n    if not all(len(t) == 2 for t in tuple_list):\n        raise ValueError(\"Each tuple in the input list must have exactly two integers.\")\n\n    # Find the maximum difference between available pairs\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples_by_second_value(lst):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: A new list of tuples sorted by the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\n# Testing the function\nassert sort_tuples_by_second_value([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all of its elements.\n\n    Args:\n        lst (list): The list to be flattened and summed.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n        >>> recursive_list_sum([1, 2, [3,4],[5,6], 7])\n        28\n        >>> recursive_list_sum([1, 2, [3,4],[5,6], 7, [8, 9]])\n        36\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Initialize the sum variable\n    total_sum = 0\n\n    # Iterate over each element in the list\n    for item in lst:\n        # If the element is a list, recursively call the function to flatten it\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        # If the element is not a list, add it to the sum\n        else:\n            total_sum += item\n\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Examples:\n        >>> pos_count([1, -2, 3, -4])\n        2\n        >>> pos_count([-1, -2, -3, -4])\n        0\n        >>> pos_count([1, 2, 3, 4])\n        4\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Testing the function\nassert pos_count([1, -2, 3, -4]) == 2\nassert pos_count([-1, -2, -3, -4]) == 0\nassert pos_count([1, 2, 3, 4]) == 4"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n\n    # Initialize the Bell number array\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    # Fill the Bell number array\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    # Return the number of ways to partition the set of Bell numbers\n    return bell[n][0]\n\n\n# Test the function\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic.\n\n    A monotonic array is an array where the elements are either non-increasing or non-decreasing.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n\n    Examples:\n        >>> is_monotonic([6, 5, 4, 4])\n        True\n        >>> is_monotonic([1, 2, 3, 4])\n        True\n        >>> is_monotonic([4, 3, 2, 1])\n        True\n        >>> is_monotonic([1, 2, 1, 4])\n        False\n        >>> is_monotonic([1, 1, 1, 1])\n        True\n    \"\"\"\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the array is non-increasing or non-decreasing\n    increasing = arr[0] <= arr[-1]\n    decreasing = arr[0] >= arr[-1]\n\n    # Iterate through the array and check if the elements are in the correct order\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i - 1]:\n            return False\n        if decreasing and arr[i] > arr[i - 1]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublist):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n        lst (list): The list to be checked.\n        sublist (list): The sublist to be searched for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n\n    Examples:\n        >>> is_sublist([2, 4, 3, 5, 7], [3, 7])\n        True\n        >>> is_sublist([2, 4, 3, 5, 7], [3, 8])\n        False\n    \"\"\"\n    # Check if the sublist is empty\n    if not sublist:\n        return True\n\n    # Check if the list is empty\n    if not lst:\n        return False\n\n    # Iterate through the list\n    for i in range(len(lst)):\n        # Check if the first element of the sublist matches the current element in the list\n        if lst[i] == sublist[0]:\n            # Check if the remaining elements of the sublist match the remaining elements in the list\n            if lst[i:i+len(sublist)] == sublist:\n                return True\n\n    return False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples in a list have equal length.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n\n    Examples:\n        >>> get_equal([(11, 22, 33), (44, 55, 66)])\n        True\n        >>> get_equal([(11, 22, 33), (44, 55)])\n        False\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Testing the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55)]) == False"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n\n    Examples:\n        >>> dif_Square(5)\n        True\n        >>> dif_Square(10)\n        False\n        >>> dif_Square(17)\n        True\n    \"\"\"\n    # Check if the number is a perfect square\n    if int(n ** 0.5) ** 2 == n:\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n ** 0.5) + 1):\n        if int((n - i ** 2) ** 0.5) ** 2 == n - i ** 2:\n            return True\n\n    return False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the sequence follows the patterns given in the patterns array.\n\n    Args:\n        patterns (list): A list of patterns to be checked against the sequence.\n        sequence (list): A list of elements to be checked against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n\n    Raises:\n        ValueError: If the lengths of patterns and sequence are not equal.\n\n    Examples:\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n        True\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"])\n        False\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\"])\n        ValueError: Length of patterns and sequence must be equal.\n    \"\"\"\n\n    if len(patterns) != len(sequence):\n        raise ValueError(\"Length of patterns and sequence must be equal.\")\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples from a given list of tuples that have all elements divisible by k.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n        >>> find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2)\n        []\n    \"\"\"\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of odd-positioned digits and the sum of even-positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through the digits of the number\n    for i in range(len(number_str)):\n        # If the current digit is at an odd position, add it to the odd_sum\n        if i % 2 == 0:\n            odd_sum += int(number_str[i])\n        # If the current digit is at an even position, add it to the even_sum\n        else:\n            even_sum += int(number_str[i])\n\n    # Calculate the difference between the odd_sum and even_sum\n    diff = abs(odd_sum - even_sum)\n\n    # Check if the difference is divisible by 11\n    if diff % 11 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nassert is_divisible_by_11(12345) == False\nassert is_divisible_by_11(1111111111) == True\nassert is_divisible_by_11(121) == True"}
{"task_id": "Mbpp/79", "solution": "def is_odd_length(word):\n    \"\"\"\n    Check if the length of a word is odd.\n\n    Args:\n        word (str): The word to check.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n\n    Examples:\n        >>> is_odd_length(\"Hadoop\")\n        False\n        >>> is_odd_length(\"Python\")\n        True\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Testing the function\nassert is_odd_length(\"Hadoop\") == False\nassert is_odd_length(\"Python\") == True"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is defined as the sum of the first n natural numbers,\n    where n is a positive integer.\n\n    Args:\n        n (int): The position of the tetrahedral number to calculate.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> tetrahedral_number(5)\n        35\n        >>> tetrahedral_number(10)\n        225\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (n + 1) * (n + 2) // 6\n\n\n# Test the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(10) == 225"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(0)\n    0.0\n    >>> volume_sphere(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return (4/3) * math.pi * radius**3\n\n# Testing the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    The Newman-Conway sequence is a sequence of numbers defined recursively as follows:\n    - The first two numbers in the sequence are 1 and 1.\n    - Each subsequent number is the sum of the previous two numbers.\n\n    Args:\n        n (int): The position of the number in the sequence to find.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> newman_conway(1)\n        1\n        >>> newman_conway(2)\n        1\n        >>> newman_conway(3)\n        2\n        >>> newman_conway(4)\n        2\n        >>> newman_conway(5)\n        3\n        >>> newman_conway(6)\n        3\n        >>> newman_conway(7)\n        4\n        >>> newman_conway(8)\n        4\n        >>> newman_conway(9)\n        5\n        >>> newman_conway(10)\n        5\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [1, 1]\n    for i in range(2, n):\n        sequence.append(sequence[sequence[i - 1] - 1] + sequence[i - sequence[i - 1] - 1])\n\n    return sequence[n - 1]"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(0)\n    0.0\n    >>> surfacearea_sphere(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 4 * math.pi * radius ** 2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input n must be a positive integer.\")\n\n    return n * (2 * n - 1)\n\n\n# Testing the function\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(1) == 1\n\ntry:\n    centered_hexagonal_number(0)\nexcept ValueError as e:\n    assert str(e) == \"Input n must be a positive integer.\""}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: A new dictionary containing the merged key-value pairs from the input dictionaries.\n\n    Examples:\n        >>> merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"})\n        {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    \"\"\"\n    merged_dict = {}\n\n    # Merge the first dictionary\n    merged_dict.update(dict1)\n\n    # Merge the second dictionary\n    merged_dict.update(dict2)\n\n    # Merge the third dictionary\n    merged_dict.update(dict3)\n\n    return merged_dict\n\n\n# Test the function\nassert merge_dictionaries_three({\"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\"}, {\"G\": \"Green\", \"W\": \"White\"}, {\"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\"}) == {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    Returns a dictionary with the frequency of all elements in the input list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values.\n\n    Examples:\n        >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n        {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 1.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(1)\n        Traceback (most recent call last):\n            ...\n        ValueError: n must be greater than 1.\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1.\")\n\n    # Convert the number to a list of digits\n    digits = list(str(n))\n\n    # Find the index of the first digit that is smaller than the previous digit\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i] < digits[i - 1]:\n            break\n\n    # Swap the digit at the found index with the digit immediately before it\n    digits[i - 1], digits[i] = digits[i], digits[i - 1]\n\n    # Reverse the digits after the found index\n    digits[i:] = digits[i:][::-1]\n\n    # Convert the modified list of digits back to an integer\n    return int(\"\".join(digits))"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of strings representing words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n        >>> len_log([\"apple\", \"banana\", \"cherry\"])\n        6\n    \"\"\"\n\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(words) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    longest_word_length = len(words[0])\n\n    for word in words:\n        if len(word) > longest_word_length:\n            longest_word_length = len(word)\n\n    return longest_word_length"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values, False otherwise.\n\n    Examples:\n        >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\")\n        True\n        >>> find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\")\n        False\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False\n\n# Testing the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    \"\"\"\n    Check if a given number is undulating.\n\n    An undulating number is a number that alternates between even and odd digits.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n\n    Examples:\n        >>> is_undulating(1212121)\n        True\n        >>> is_undulating(1212122)\n        False\n        >>> is_undulating(12121212)\n        True\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(number)\n\n    # Check if the length of the number is less than 3\n    if len(num_str) < 3:\n        return False\n\n    # Check if the first and second digits are the same\n    if num_str[0] == num_str[1]:\n        return False\n\n    # Check if the remaining digits alternate between even and odd\n    for i in range(2, len(num_str)):\n        if int(num_str[i]) % 2 == int(num_str[i-2]) % 2:\n            return False\n\n    return True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of raising 'a' to the power 'b'.\n\n    Raises:\n    ValueError: If 'b' is negative.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2.5, 3)\n    15.625\n    >>> power(5, 0)\n    1\n    >>> power(0, 5)\n    0\n    >>> power(0, 0)\n    1\n    >>> power(-2, 3)\n    -8\n    \"\"\"\n\n    if b < 0:\n        raise ValueError(\"Exponent must be non-negative.\")\n\n    result = 1\n    for _ in range(b):\n        result *= a\n\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(t, tuple) for t in lst):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = lst[0]\n    for t in lst:\n        if t[1] < min_tuple[1]:\n            min_tuple = t\n\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_length([[1], [1, 2]])\n        1\n        >>> find_min_length([[1, 2], [1, 2, 3]])\n        2\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4]])\n        3\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"Input must be a list of lists.\")\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(25)\n    3\n    >>> divisor(1)\n    1\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Testing the function\nassert divisor(15) == 4\nassert divisor(25) == 3\nassert divisor(1) == 1"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    \"\"\"\n    Finds the frequency of each element in a flattened list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        dict: A dictionary where the keys are the unique elements in the flattened list,\n              and the values are the frequencies of those elements.\n\n    Example:\n        >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n        {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([1, 2, 3])\n        2.0\n        >>> multiply_num([])\n        ValueError: Input list is empty.\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"Input list is empty.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)\n\n\n# Testing the function\nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)\nassert math.isclose(multiply_num([1, 2, 3]), 2.0, rel_tol=0.001)\n\ntry:\n    multiply_num([])\nexcept ValueError as e:\n    assert str(e) == \"Input list is empty.\"\n\ntry:\n    multiply_num(\"not a list\")\nexcept TypeError as e:\n    assert str(e) == \"Input must be a list.\""}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n        decimal (int): The decimal number to convert.\n\n    Returns:\n        str: The binary equivalent of the decimal number, represented as a string with no leading zeros.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n\n    Examples:\n        >>> decimal_to_binary(8)\n        '1000'\n        >>> decimal_to_binary(10)\n        '1010'\n        >>> decimal_to_binary(0)\n        '0'\n    \"\"\"\n\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    # Convert the number to a string and reverse it\n    reversed_n = str(n)[::-1]\n\n    # Check if the reversed number is equal to the original number\n    return str(n) == reversed_n\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n        int: The next smallest palindrome of the specified integer.\n\n    Raises:\n        ValueError: If the input integer is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input integer must be non-negative.\")\n\n    # Increment the input integer until a palindrome is found\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        ValueError: If the kth element is not found in the array.\n\n    Examples:\n        >>> kth_element([12, 3, 5, 7, 19], 2)\n        3\n        >>> kth_element([12, 3, 5, 7, 19], 5)\n        19\n        >>> kth_element([12, 3, 5, 7, 19], 6)\n        Traceback (most recent call last):\n            ...\n        ValueError: kth element not found in the array\n    \"\"\"\n\n    # Check if k is within the valid range\n    if k < 1 or k > len(arr):\n        raise ValueError(\"kth element not found in the array\")\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the kth element\n    return arr[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to convert.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n        >>> snake_to_camel('hello_world')\n        'HelloWorld'\n    \"\"\"\n    # Split the snake case string into words\n    words = snake_str.split('_')\n\n    # Capitalize the first letter of each word except the first word\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('hello_world') == 'HelloWorld'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using the recursive formula:\n    a(n, m) = a(n-1, m) + m * a(n-1, m-1)\n\n    Parameters:\n    n (int): The number of vertices in the graph\n    m (int): The number of edges in the graph\n\n    Returns:\n    int: The Eulerian number a(n, m)\n\n    Raises:\n    ValueError: If n or m is negative\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    10\n    >>> eulerian_num(5, 3)\n    35\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers\")\n\n    if n == 0:\n        return 1\n\n    if m == 0:\n        return 0\n\n    return eulerian_num(n - 1, m) + m * eulerian_num(n - 1, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n\n    Args:\n        lst (list): A list of boolean values.\n\n    Returns:\n        int: The count of True values in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True])\n        3\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list will be appended.\n\n    Returns:\n        tuple: The resulting tuple after appending the list.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n        >>> add_lists([], (1, 2, 3))\n        (1, 2, 3)\n        >>> add_lists([1, 2, 3], ())\n        (1, 2, 3)\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(tpl, tuple):\n        raise TypeError(\"tpl must be a tuple\")\n\n    return tpl + tuple(lst)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A new sorted list containing all elements from the input lists.\n\n    Raises:\n        TypeError: If any of the input lists is not a list.\n\n    Examples:\n        >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])\n        [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n\n    # Check if the input lists are valid\n    if not isinstance(list1, list) or not isinstance(list2, list) or not isinstance(list3, list):\n        raise TypeError(\"Input lists must be of type list.\")\n\n    # Initialize an empty list to store the merged result\n    merged_list = []\n\n    # Initialize three pointers to track the current position in each list\n    i, j, k = 0, 0, 0\n\n    # Merge the lists until one of them is exhausted\n    while i < len(list1) and j < len(list2) and k < len(list3):\n        # Compare the current elements from each list\n        if list1[i] <= list2[j] and list1[i] <= list3[k]:\n            merged_list.append(list1[i])\n            i += 1\n        elif list2[j] <= list1[i] and list2[j] <= list3[k]:\n            merged_list.append(list2[j])\n            j += 1\n        else:\n            merged_list.append(list3[k])\n            k += 1\n\n    # Append the remaining elements from the non-exhausted lists\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n\n    while k < len(list3):\n        merged_list.append(list3[k])\n        k += 1\n\n    return merged_list"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of times to rotate the binary string.\n\n    Returns:\n        int: The number of numbers with an odd value when rotating the binary string the given number of times.\n\n    Examples:\n        >>> odd_Equivalent(\"011001\", 6)\n        3\n        >>> odd_Equivalent(\"101010\", 3)\n        4\n    \"\"\"\n\n    # Convert the binary string to a list of integers\n    binary_list = [int(bit) for bit in binary_string]\n\n    # Count the number of odd values in the original binary string\n    odd_count = sum(1 for bit in binary_list if bit % 2 != 0)\n\n    # Perform the rotations\n    for _ in range(num_rotations):\n        # Rotate the binary list by one position to the right\n        binary_list = binary_list[-1:] + binary_list[:-1]\n\n        # Count the number of odd values in the rotated binary string\n        rotated_odd_count = sum(1 for bit in binary_list if bit % 2 != 0)\n\n        # Update the total odd count by subtracting the number of odd values in the previous rotation\n        odd_count += rotated_odd_count - odd_count\n\n    return odd_count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists, where each inner list contains unique elements.\n\n    Returns:\n        list: A list of common elements found in all the inner lists.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n\n    # Check if the input is a list of lists\n    if not isinstance(nested_lists, list) or not all(isinstance(lst, list) for lst in nested_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    # Find the common elements in the first inner list\n    common_elements = set(nested_lists[0])\n\n    # Iterate over the remaining inner lists and find common elements\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n\n    Examples:\n        >>> check_integer(\"python\")\n        False\n        >>> check_integer(\"123\")\n        True\n        >>> check_integer(\"-123\")\n        True\n        >>> check_integer(\"123.45\")\n        False\n        >>> check_integer(\"123e4\")\n        False\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Testing the function\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123e4\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        tup (tuple): A tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the tuple.\n\n    Raises:\n        ValueError: If the input is not a tuple or if any element is not a positive integer.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise ValueError(\"Input must be a tuple.\")\n\n    for num in tup:\n        if not isinstance(num, int) or num < 0:\n            raise ValueError(\"Tuple elements must be positive integers.\")\n\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n        >>> string_to_list(\"\")\n        []\n        >>> string_to_list(\"python\")\n        ['python']\n    \"\"\"\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"\") == []\nassert string_to_list(\"python\") == ['python']"}
{"task_id": "Mbpp/119", "solution": "def find_element_once(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    Examples:\n        >>> find_element_once([1, 1, 2, 2, 3])\n        3\n        >>> find_element_once([1, 1, 2, 2, 3, 3, 4, 4, 5])\n        5\n        >>> find_element_once([])\n        ValueError: Input array is empty.\n        >>> find_element_once([1, 1, 2, 2, 3, 3, 4, 4, 5, 5])\n        ValueError: More than one element appears only once.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list or if any element in the list is not a tuple.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8, 9)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8, 9), (10, 11)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8, 9), (10, 11), (12, 13)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8, 9), (10, 11), (12, 13), (14, 15), (16, 17)])\n        50\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (5, 10), (3, 4), (6, 7), (8"}
{"task_id": "Mbpp/123", "solution": "def sum_proper_divisors(n):\n    \"\"\"\n    Calculate the sum of proper divisors of a number.\n\n    Parameters:\n    n (int): The number for which to calculate the sum of proper divisors.\n\n    Returns:\n    int: The sum of proper divisors of the given number.\n    \"\"\"\n    divisors_sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            divisors_sum += i\n    return divisors_sum\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers from 1 to a specified number.\n\n    Parameters:\n    limit (int): The upper limit for the range of numbers to consider.\n\n    Returns:\n    int: The sum of all amicable numbers from 1 to the specified limit.\n    \"\"\"\n    amicable_numbers_sum = 0\n    for i in range(1, limit + 1):\n        sum_i = sum_proper_divisors(i)\n        sum_sum_i = sum_proper_divisors(sum_i)\n        if i == sum_sum_i and i != sum_i:\n            amicable_numbers_sum += i\n    return amicable_numbers_sum\n\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    ValueError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    >>> angle_complex(1+0j)\n    0.0\n    >>> angle_complex(0+0j)\n    ValueError: Cannot calculate the angle of a complex number with both real and imaginary parts equal to zero.\n    \"\"\"\n    if isinstance(z, complex):\n        if z.real == 0 and z.imag == 0:\n            raise ValueError(\"Cannot calculate the angle of a complex number with both real and imaginary parts equal to zero.\")\n        return math.atan2(z.imag, z.real)\n    else:\n        raise ValueError(\"Input must be a complex number.\")\n\n# Testing the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): A binary string consisting of only 0s and 1s.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Raises:\n        ValueError: If the input string is not a valid binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n        >>> find_length(\"10101010101\")\n        0\n        >>> find_length(\"01010101010\")\n        0\n        >>> find_length}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    Examples:\n    >>> sum_common_divisors(10, 15)\n    6\n    >>> sum_common_divisors(24, 36)\n    18\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\n# Testing the function\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(24, 36) == 18"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n\n    Raises:\n    TypeError: If either a or b is not an integer.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(5, 0)\n    0\n    >>> multiply_int(1.5, 2)\n    Traceback (most recent call last):\n        ...\n    TypeError: a and b must be integers\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"a and b must be integers\")\n    return a * b\n\n# Testing the function\nassert multiply_int(10, 20) == 200\nassert multiply_int(5, 0) == 0\n\ntry:\n    multiply_int(1.5, 2)\nexcept TypeError:\n    print(\"Test passed: TypeError raised as expected\")"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be included in the result.\n        words (str): A string of words separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    # Split the input string into a list of words\n    word_list = words.split()\n\n    # Filter the list of words to include only those that are longer than n characters\n    long_words_list = [word for word in word_list if len(word) > n]\n\n    return long_words_list"}
{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of each row, column, and diagonal is the same.\n\n    Args:\n        matrix (list of lists): The matrix to be checked.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n\n    Raises:\n        ValueError: If the input matrix is not a square matrix.\n\n    Examples:\n        >>> is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])\n        True\n        >>> is_magic_square([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        False\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        raise ValueError(\"Input matrix must be a square matrix\")\n\n    # Calculate the expected sum of each row, column, and diagonal\n    n = len(matrix)\n    expected_sum = n * (n ** 2 + 1) // 2\n\n    # Check if the sum of each row, column, and diagonal is equal to the expected sum\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        diag_sum1 = sum(matrix[i][i])\n        diag_sum2 = sum(matrix[i][n - i - 1])\n\n        if row_sum != expected_sum or col_sum != expected_sum or diag_sum1 != expected_sum or diag_sum2 != expected_sum:\n            return False\n\n    return True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int or None: The item with maximum frequency, or None if the list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n        >>> max_occurrences([])\n        None\n    \"\"\"\n    if not lst:\n        return None\n\n    # Count the occurrences of each item in the list\n    counts = {}\n    for item in lst:\n        counts[item] = counts.get(item, 0) + 1\n\n    # Find the item with maximum frequency\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    \"\"\"\n    Reverse only the vowels of a given string (where y is not a vowel).\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with only the vowels reversed.\n\n    Examples:\n        >>> reverse_vowels(\"Python\")\n        'Pothnoy'\n        >>> reverse_vowels(\"Hello\")\n        'Holle'\n        >>> reverse_vowels(\"aeiou\")\n        'uoiea'\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [c for c in s if c in vowels]\n    vowel_list.reverse()\n    result = \"\"\n    index = 0\n    for c in s:\n        if c in vowels:\n            result += vowel_list[index]\n            index += 1\n        else:\n            result += c\n    return result"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Converts a tuple to a string.\n\n    Args:\n        tup (tuple): The tuple to be converted.\n\n    Returns:\n        str: The string representation of the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n    return ''.join(tup)\n\n# Testing the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(nums):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n        >>> sum_negativenum([-1, -2, -3])\n        -6\n        >>> sum_negativenum([1, 2, 3])\n        0\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Initialize the sum variable\n    neg_sum = 0\n\n    # Iterate over the list and add the negative numbers to the sum\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n\n    return neg_sum"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculates the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    6\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input n must be a positive integer.\")\n\n    return n * (2 * n - 1)\n\n\n# Testing the function\nassert hexagonal_num(1) == 1\nassert hexagonal_num(2) == 6\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n        0.181818\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(arr) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count\n\n    return ratio\n\n# Testing the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check if a given number can be represented as the sum of non-zero powers of 2.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n\n    Examples:\n        >>> is_sum_of_powers_of_two(10)\n        True\n        >>> is_sum_of_powers_of_two(12)\n        True\n        >>> is_sum_of_powers_of_two(14)\n        False\n    \"\"\"\n    # Base case: if n is 0, it can be represented as the sum of non-zero powers of 2\n    if n == 0:\n        return True\n\n    # Initialize a variable to keep track of the current power of 2\n    power = 1\n\n    # Iterate until the current power of 2 is greater than or equal to n\n    while power <= n:\n        # Check if the difference between n and the current power of 2 is a sum of non-zero powers of 2\n        if is_sum_of_powers_of_two(n - power):\n            return True\n\n        # Increase the power of 2 by multiplying it by 2\n        power *= 2\n\n    # If the loop completes without finding a match, the number cannot be represented as the sum of non-zero powers of 2\n    return False\n\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(12) == True\nassert is_sum_of_powers_of_two(14) == False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(0)\n    0.0\n    >>> circle_circumference(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists of numbers.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4), (1, 2, 3)])\n        {1, 2, 3, 3, 4, 5, 7}\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        flattened_set.update(sublist)\n    return flattened_set\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    # Helper function to flip the elements in the list\n    def flip(lst, start, end):\n        while start < end:\n            lst[start], lst[end] = lst[end], lst[start]\n            start += 1\n            end -= 1\n\n    # Helper function to find the index of the maximum element in the list\n    def find_max_index(lst, end):\n        max_index = 0\n        for i in range(1, end + 1):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    # Sort the list using the pancake sorting algorithm\n    n = len(lst)\n    for i in range(n - 1, 0, -1):\n        # Find the index of the maximum element in the unsorted part of the list\n        max_index = find_max_index(lst, i)\n\n        # Flip the maximum element to the beginning of the unsorted part\n        flip(lst, 0, max_index)\n\n        # Flip the maximum element to its correct position in the sorted part\n        flip(lst, 0, i)\n\n    return lst\n\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n        3\n        >>> count_samepair([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        0\n    \"\"\"\n\n    # Check if the input lists have the same length\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    # Initialize a counter to keep track of the number of identical items\n    count = 0\n\n    # Iterate over the indices of the lists\n    for i in range(len(list1)):\n        # Check if the items at the same index are identical\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): A tuple of integers.\n\n    Returns:\n        int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the input is not a tuple or if the tuple is empty.\n\n    Examples:\n        >>> max_Abs_Diff((2, 1, 5, 3))\n        4\n        >>> max_Abs_Diff((-2, -1, -5, -3))\n        2\n        >>> max_Abs_Diff((1, 1, 1, 1))\n        0\n    \"\"\"\n\n    if not isinstance(arr, tuple):\n        raise ValueError(\"Input must be a tuple.\")\n\n    if len(arr) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    max_diff = abs(arr[0] - arr[1])\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target value.\n\n    Returns:\n        tuple: A tuple containing x and y, or None if no solution exists.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(2, 3, 8)\n        None\n    \"\"\"\n\n    # Check if the equation has a solution\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Find the greatest common divisor (gcd) of a and b\n    g = gcd(a, b)\n\n    # Find the multiplicative inverse of b modulo a\n    inverse_b = mod_inverse(b // g, a // g)\n\n    # Calculate x and y using the extended Euclidean algorithm\n    x = (n // g) * inverse_b\n    y = (n - a * x) // b\n\n    return x, y\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor (gcd) of two integers using the Euclidean algorithm.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The greatest common divisor.\n    \"\"\"\n\n    while b != 0:\n        a, b = b, a % b\n\n    return a\n\n\ndef mod_inverse(a, m):\n    \"\"\"\n    Calculates the multiplicative inverse of a modulo m using the extended Euclidean algorithm.\n\n    Args:\n        a (int): The integer to find the inverse of.\n        m (int): The modulus.\n\n    Returns:\n        int: The multiplicative inverse of a modulo m.\n    \"\"\"\n\n    if gcd(a, m) != 1:\n        raise ValueError(\"a and m must be coprime\")\n\n    x, y, _ = extended_gcd(a, m)\n\n    return x % m\n\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculates the extended Euclidean algorithm to find the greatest common divisor (gcd) and Bezout coefficients.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        tuple: A tuple containing the gcd, x, and y.\n    \"\"\"\n\n    if b == 0:\n        return a, 1, 0\n\n    gcd, x1, y1 = extended_gcd(b, a % b)\n\n    x = y1\n    y = x1 - (a // b) * y1\n\n    return gcd, x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst (list): The list from which elements need to be removed.\n        elements_to_remove (list): The list of elements to be removed from the given list.\n\n    Returns:\n        list: The modified list with the elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]\n\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The upper limit of the series.\n\n    Returns:\n    int: The sum of the series.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    20\n    >>> sum_series(15)\n    30\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate from 0 to n//2\n    for i in range(n//2 + 1):\n        # Calculate the term (n - 2*i) and add it to the sum\n        term = n - 2*i\n        total_sum += term\n\n    return total_sum\n\n# Test the function\nassert sum_series(6) == 12\nassert sum_series(10) == 20\nassert sum_series(15) == 30"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefg\")\n        7\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    # Convert the string to lowercase for case-insensitive comparison\n    string = string.lower()\n\n    # Initialize a counter to keep track of the count\n    count = 0\n\n    # Iterate over the characters in the string\n    for i, char in enumerate(string):\n        # Check if the character is in the English alphabet\n        if char.isalpha():\n            # Check if the character is at the same position as its alphabetical position\n            if char == chr(ord('a') + i):\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The number of pairs of integers that xor to an even number.\n\n    Examples:\n        >>> find_even_pair([5, 4, 7, 2, 1])\n        4\n        >>> find_even_pair([1, 2, 3, 4, 5])\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] ^ nums[j] % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n        >>> next_power_of_2(0)\n        1\n        >>> next_power_of_2(1)\n        1\n        >>> next_power_of_2(2)\n        2\n        >>> next_power_of_2(3)\n        4\n        >>> next_power_of_2(4)\n        4\n        >>> next_power_of_2(5)\n        8\n        >>> next_power_of_2(6)\n        8\n        >>> next_power_of_2(7)\n        8\n        >>> next_power_of_2(8)\n        8\n        >>> next_power_of_2(9)\n        16\n    \"\"\"\n    if n <= 0:\n        return 1\n\n    # Find the position of the most significant bit\n    msb_pos = n.bit_length() - 1\n\n    # Set all bits below the most significant bit to 1\n    return 1 << msb_pos\n\n\n# Test the function\nassert next_power_of_2(0) == 1\nassert next_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(6) == 8\nassert next_power_of_2(7) == 8\nassert next_power_of_2(8) == 8\nassert next_power_of_2(9) == 16"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for the number.\n        num: The number to count the occurrences of.\n\n    Returns:\n        int: The number of occurrences of the number in the list.\n\n    Examples:\n        >>> frequency([1, 2, 3, 4, 4, 4], 4)\n        3\n        >>> frequency([1, 2, 3], 4)\n        0\n    \"\"\"\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculate the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The list of numbers.\n        start (int): The starting index of the range (inclusive).\n        end (int): The ending index of the range (inclusive).\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        ValueError: If the start index is greater than the end index.\n        IndexError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 10)\n        55\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 12)\n        70\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 13)\n        Traceback (most recent call last):\n            ...\n        IndexError: list index out of range\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 13, 14)\n        Traceback (most recent call last):\n            ...\n        IndexError: list index out of range\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 10, 8)\n        Traceback (most recent call last):\n            ...\n        ValueError: start index must be less than or equal to end index\n    \"\"\"\n\n    # Check if start index is greater than end index\n    if start > end:\n        raise ValueError(\"start index must be less than or equal to end index\")\n\n    # Check if start index is within the list range\n    if start < 0 or start >= len(lst):\n        raise IndexError(\"list index out of range\")\n\n    # Check if end index is within the list range\n    if end < 0 or end >= len(lst):\n        raise IndexError(\"list index out of range\")\n\n    # Calculate the sum of numbers within the specified range\n    return sum(lst[start:end+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float or int): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25.0\n    >>> perimeter_pentagon(10)\n    50.0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 5 * side_length\n\n# Testing the function\nassert perimeter_pentagon(5) == 25\nassert perimeter_pentagon(10) == 50"}
{"task_id": "Mbpp/172", "solution": "def count_occurrences(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for the occurrences of 'std'.\n\n    Returns:\n        int: The count of occurrences of 'std' in the input string.\n\n    Examples:\n        >>> count_occurrences(\"letstdlenstdporstd\")\n        3\n        >>> count_occurrences(\"std\")\n        1\n        >>> count_occurrences(\"abc\")\n        0\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == \"std\":\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Testing the function\nassert count_occurrences(\"letstdlenstdporstd\") == 3\nassert count_occurrences(\"std\") == 1\nassert count_occurrences(\"abc\") == 0"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        tup (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n\n    Examples:\n        >>> check_type((5, 6, 7, 3, 5, 6))\n        True\n        >>> check_type((5, 6, 7, 3, 5, '6'))\n        False\n    \"\"\"\n    # Check if the tuple is empty\n    if len(tup) == 0:\n        return True\n\n    # Get the data type of the first element\n    data_type = type(tup[0])\n\n    # Check if all elements have the same data type\n    for element in tup:\n        if type(element) != data_type:\n            return False\n\n    return True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    n (int): The length of the array.\n    element: The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n\n    \"\"\"\n    # Find the first occurrence of the element\n    first_occurrence = binary_search(arr, 0, n - 1, element)\n\n    # If the element is not present in the array, it cannot be the majority\n    if first_occurrence == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == element:\n        return True\n\n    return False\n\n\ndef binary_search(arr, low, high, element):\n    \"\"\"\n    Perform binary search to find the first occurrence of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    low (int): The starting index of the search range.\n    high (int): The ending index of the search range.\n    element: The element to search for.\n\n    Returns:\n    int: The index of the first occurrence of the element, or -1 if not found.\n\n    \"\"\"\n    if high >= low:\n        mid = (low + high) // 2\n\n        # If the element is present at the middle index or the previous index, return it\n        if (mid == 0 or arr[mid - 1] < element) and arr[mid] == element:\n            return mid\n\n        # If the element is smaller than the middle element, search in the left half\n        if arr[mid] > element:\n            return binary_search(arr, low, mid - 1, element)\n\n        # If the element is greater than the middle element, search in the right half\n        return binary_search(arr, mid + 1, high, element)\n\n    return -1\n\n\n# Test the function\narr = [1, 2, 3, 3, 3, 3, 10]\nn = len(arr)\nelement = 3\n"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        num (int): The number to count the set bits in.\n\n    Returns:\n        int: The number of set bits in the given number.\n\n    Examples:\n        >>> count_set_bits(2)\n        1\n        >>> count_set_bits(7)\n        3\n        >>> count_set_bits(0)\n        0\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Testing the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def remove_odd_index_chars(string):\n    \"\"\"\n    Remove the characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters with odd index values removed.\n\n    Examples:\n        >>> remove_odd_index_chars('abcdef')\n        'ace'\n        >>> remove_odd_index_chars('python')\n        'pto'\n    \"\"\"\n    # Create an empty string to store the modified string\n    modified_string = ''\n\n    # Iterate over the characters in the input string\n    for i in range(len(string)):\n        # Check if the current index is even (0-based indexing)\n        if i % 2 == 0:\n            # Append the character to the modified string\n            modified_string += string[i]\n\n    return modified_string\n\n\n# Test the function\nassert remove_odd_index_chars('abcdef') == 'ace'\nassert remove_odd_index_chars('python') == 'pto'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n        c (int or float): The third number.\n\n    Returns:\n        int or float: The minimum of the three numbers.\n\n    Raises:\n        TypeError: If any of the arguments is not a number.\n\n    Examples:\n        >>> min_of_three(10, 20, 0)\n        0\n        >>> min_of_three(10, 20, 30)\n        10\n        >>> min_of_three(10, 10, 10)\n        10\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)) or not isinstance(c, (int, float)):\n        raise TypeError(\"All arguments must be numbers.\")\n\n    return min(a, b, c)"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, char):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the given character.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct type.\n\n    Examples:\n        >>> replace_blank(\"hello people\", '@')\n        'hello@people'\n        >>> replace_blank(\"hello@people\", ' ')\n        'hello@people'\n    \"\"\"\n\n    # Check if the input arguments are of the correct type\n    if not isinstance(string, str) or not isinstance(char, str):\n        raise TypeError(\"Input arguments must be strings.\")\n\n    # Replace blank spaces in the string with the given character\n    modified_string = string.replace(\" \", char)\n\n    return modified_string"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)\n        [100, 90, 80, 70, 60]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 10)\n        [100, 90, 80, 70, 60, 50, 40, 20, 20, 10]\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> lateral_surface_cylinder(10, 5)\n    314.15000000000003\n    >>> lateral_surface_cylinder(0, 10)\n    0.0\n    >>> lateral_surface_cylinder(10, 0)\n    0.0\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    lateral_area = 2 * math.pi * radius * height\n    return lateral_area\n\n# Testing the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(1.5)\n    3.375\n    >>> volume_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return side_length ** 3\n\n# Testing the function\nassert volume_cube(3) == 27\nassert volume_cube(1.5) == 3.375\ntry:\n    volume_cube(0)\nexcept ValueError:\n    pass\nelse:\n    raise AssertionError(\"Expected ValueError for side_length=0\")"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Parameters:\n    num (int): The number to set even bits for.\n\n    Returns:\n    int: The number with all even bits set.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(11)\n    10\n    >>> even_bit_set_number(12)\n    12\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits\n    return num & mask\n\n# Test the function\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(11) == 10\nassert even_bit_set_number(12) == 12"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    \"\"\"\n    Function to count the occurrences of each unique tuple in a list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    occurrences = {}\n    for tup in tuples_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(s):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of non-empty substrings.\n\n    Examples:\n        >>> number_of_substrings(\"abc\")\n        6\n        >>> number_of_substrings(\"abcd\")\n        10\n        >>> number_of_substrings(\"\")\n        0\n    \"\"\"\n    n = len(s)\n    return n * (n + 1) // 2\n\n\n# Testing the function\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"\") == 0"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The maximum value of each element in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n\n    Raises:\n        ValueError: If m or n is negative or if n is greater than m.\n\n    Examples:\n        >>> get_total_number_of_sequences(10, 4)\n        4\n        >>> get_total_number_of_sequences(10, 3)\n        2\n        >>> get_total_number_of_sequences(10, 2)\n        1\n        >>> get_total_number_of_sequences(10, 1)\n        1\n        >>> get_total_number_of_sequences(10, 0)\n        1\n    \"\"\"\n\n    # Check if m or n is negative\n    if m < 0 or n < 0:\n        raise ValueError(\"m and n must be positive integers.\")\n\n    # Check if n is greater than m\n    if n > m:\n        raise ValueError(\"n cannot be greater than m.\")\n\n    # Initialize the table to store the number of sequences\n    table = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base case: There is only one sequence of length 1\n    for i in range(1, m + 1):\n        table[1][i] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j + 1):\n                table[i][j] += table[i - 1][k]\n\n    # Return the number of sequences of length n\n    return table[n][m]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list.\n\n    Raises:\n        ValueError: If the first list is empty.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n        >>> replace_list([], [2, 4, 6, 8])\n        ValueError: The first list cannot be empty.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"The first list cannot be empty.\")\n\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_characters(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The total number of characters in the string.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> count_characters(\"python programming\")\n        18\n        >>> count_characters(\"\")\n        0\n        >>> count_characters(123)\n        Traceback (most recent call last):\n            ...\n        TypeError: Input must be a string.\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    return len(string)"}
{"task_id": "Mbpp/244", "solution": "def next_perfect_square(n):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        n (int): The given number.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Raises:\n        ValueError: If the given number is negative.\n\n    Examples:\n        >>> next_perfect_square(35)\n        36\n        >>> next_perfect_square(100)\n        121\n        >>> next_perfect_square(0)\n        1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"The given number must be non-negative.\")\n\n    # Find the square root of the given number\n    sqrt_n = int(n ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt_n ** 2 == n:\n        # If it is, return the next perfect square\n        return (sqrt_n + 1) ** 2\n    else:\n        # If it is not, find the next perfect square greater than the square root\n        return (sqrt_n + 1) ** 2\n\n# Test the function\nassert next_perfect_square(35) == 36\nassert next_perfect_square(100) == 121\nassert next_perfect_square(0) == 1"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    A bitonic subsequence is a sequence of elements that is first increasing and then decreasing.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n        >>> max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        25\n        >>> max_sum([9, 8, 7, 6, 5, 4, 3, 2, 1])\n        25\n        >>> max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        36\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    increasing = [0] * n\n    decreasing = [0] * n\n\n    # Calculate the maximum sum of increasing subsequences\n    for i in range(n):\n        increasing[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and increasing[i] < increasing[j] + arr[i]:\n                increasing[i] = increasing[j] + arr[i]\n\n    # Calculate the maximum sum of decreasing subsequences\n    for i in range(n - 1, -1, -1):\n        decreasing[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and decreasing[i] < decreasing[j] + arr[i]:\n                decreasing[i] = decreasing[j] + arr[i]\n\n    # Find the maximum sum of bitonic subsequences\n    max_sum = max(increasing[i] + decreasing[i] - arr[i] for i in range(n))\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The length of the longest palindromic subsequence.\n\n    Examples:\n        >>> lps(\"TENS FOR TENS\")\n        5\n        >>> lps(\"ABCDEFG\")\n        1\n        >>> lps(\"ABBCDDBB\")\n        4\n    \"\"\"\n\n    # Create a 2D table to store the lengths of palindromic subsequences\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Check for palindromes of length 2\n    for i in range(n - 1):\n        if s[i] == s[i + 1]:\n            dp[i][i + 1] = 2\n        else:\n            dp[i][i + 1] = 1\n\n    # Check for palindromes of length greater than 2\n    for length in range(3, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        element: The element to count.\n\n    Returns:\n        int: The count of occurrences of the element in the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n        0\n        >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n        4\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in a list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, theta) of the complex number.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2+3j)\n    (3.605551275463989, 0.982793723247329)\n    >>> convert(0)\n    (0.0, 0.0)\n    \"\"\"\n    if not isinstance(complex_number, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    r = abs(complex_number)\n    theta = math.atan2(complex_number.imag, complex_number.real)\n\n    return r, theta"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of integer elements in the list.\n\n    Examples:\n        >>> count_integer([1, 2, 'abc', 1.2])\n        2\n        >>> count_integer([])\n        0\n        >>> count_integer(['abc', 'def'])\n        0\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Testing the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([]) == 0\nassert count_integer(['abc', 'def']) == 0"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of a list and returns a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list of elements.\n        n (int): The length of each combination.\n\n    Returns:\n        list: A list of tuples, where each tuple represents a combination of elements from the input list.\n\n    Examples:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n        [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    if n == 0:\n        return [()]\n\n    combinations = []\n    for i in range(len(lst)):\n        element = lst[i]\n        smaller_combinations = combinations_colors(lst, n - 1)\n        for combination in smaller_combinations:\n            combinations.append((element,) + combination)\n\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given non-negative number.\n\n    Args:\n        n (int): The non-negative number.\n\n    Returns:\n        int: The number of prime numbers less than the given non-negative number.\n\n    Raises:\n        ValueError: If the input number is negative.\n\n    Examples:\n        >>> count_Primes_nums(5)\n        2\n        >>> count_Primes_nums(10)\n        4\n        >>> count_Primes_nums(100)\n        25\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Initialize a list to store the prime numbers\n    primes = []\n\n    # Iterate from 2 to the given number\n    for num in range(2, n):\n        # Assume the number is prime\n        is_prime = True\n\n        # Check if the number is divisible by any previous prime number\n        for prime in primes:\n            if num % prime == 0:\n                is_prime = False\n                break\n\n        # If the number is prime, add it to the list of primes\n        if is_prime:\n            primes.append(num)\n\n    # Return the count of prime numbers\n    return len(primes)\n\n\n# Test the function\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the positions of two numbers and returns a tuple with the second number first and the first number second.\n\n    Args:\n        num1 (int or float): The first number.\n        num2 (int or float): The second number.\n\n    Returns:\n        tuple: A tuple containing the second number first and the first number second.\n\n    Examples:\n        >>> swap_numbers(10, 20)\n        (20, 10)\n        >>> swap_numbers(5.5, 10.5)\n        (10.5, 5.5)\n    \"\"\"\n    return num2, num1\n\n# Testing the function\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(5.5, 10.5) == (10.5, 5.5)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Function to maximize the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The maximized tuple.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n\n    # Check if the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Initialize an empty list to store the maximized elements\n    maximized_elements = []\n\n    # Iterate over the elements of the input tuples\n    for i in range(len(tuple1)):\n        # Get the elements from both tuples at the same index\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n\n        # Find the maximum element from both elements\n        maximized_element = max(element1, element2)\n\n        # Append the maximized element to the list\n        maximized_elements.append(maximized_element)\n\n    # Convert the list of maximized elements to a tuple\n    maximized_tuple = tuple(maximized_elements)\n\n    return maximized_tuple"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n\ndef newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Args:\n        n (int): The position of the prime number to find.\n\n    Returns:\n        int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n        ValueError: If the input is not a positive integer.\n\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n\n    return num - 1\n\n\n# Testing the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division operation on two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n        ValueError: If the length of the tuples are not equal.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3))\n        Traceback (most recent call last):\n            ...\n        ValueError: The length of the tuples must be equal.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The length of the tuples must be equal.\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is L.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1, 2, 3, 4, 5], 2)\n        ([1, 2], [3, 4, 5])\n\n        >>> split_two_parts([1, 2, 3, 4, 5], 3)\n        ([1, 2, 3], [4, 5])\n\n        >>> split_two_parts([1, 2, 3, 4, 5], 6)\n        ValueError: L cannot be greater than the length of the input list.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return first_part, second_part"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> dog_age(12)\n    61\n    >>> dog_age(0)\n    0\n    >>> dog_age(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer.\n    \"\"\"\n\n    if not isinstance(human_age, int) or human_age < 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n\n# Testing the function\nassert dog_age(12) == 61\nassert dog_age(0) == 0\n\ntry:\n    dog_age(-1)\nexcept ValueError:\n    pass\nelse:\n    raise AssertionError(\"Expected ValueError for negative input.\")"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list into sublists every nth element.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements in each sublist.\n\n    Returns:\n        list: A list of sublists, where each sublist contains n elements from the input list.\n\n    Raises:\n        ValueError: If the input list is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n        >>> list_split(['apple', 'banana', 'cherry', 'date', 'elderberry'], 2)\n        [['apple', 'cherry', 'elderberry'], ['banana', 'date']]\n        >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n        [[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    Examples:\n    >>> lateral_surface_cube(5)\n    100\n    >>> lateral_surface_cube(0)\n    0\n    >>> lateral_surface_cube(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length ** 2\n\n# Testing the function\nassert lateral_surface_cube(5) == 100\nassert lateral_surface_cube(0) == 0\n\ntry:\n    lateral_surface_cube(-1)\nexcept ValueError:\n    print(\"Test passed: ValueError raised for negative side length.\")"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the squares of the first n odd natural numbers.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> square_sum(2)\n        10\n        >>> square_sum(3)\n        35\n        >>> square_sum(4)\n        80\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the sum of the squares of the first n odd natural numbers\n    sum_of_squares = 0\n    for i in range(1, n + 1, 2):\n        sum_of_squares += i ** 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n    For example, 145 is a star number because 1 + 4 + 5 = 15 = 1 + 2 + 3 + 4 + 5 = 120.\n\n    Args:\n        n (int): The position of the star number to find.\n\n    Returns:\n        int: The n'th star number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> find_star_num(3)\n        37\n        >>> find_star_num(5)\n        210\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize the list of star numbers\n    star_nums = [1, 2, 12, 24, 120, 720, 5040, 40320, 362880, 3628800]\n\n    # If n is less than or equal to the length of the list, return the n'th star number\n    if n <= len(star_nums):\n        return star_nums[n - 1]\n\n    # If n is greater than the length of the list, generate the remaining star numbers\n    while len(star_nums) < n:\n        # Find the next star number by adding the factorial of its digits\n        next_star_num = sum(factorial(int(digit)) for digit in str(len(star_nums) + 1))\n        star_nums.append(next_star_num)\n\n    return star_nums[n - 1]\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a number.\n\n    Args:\n        n (int): The number to calculate the factorial of.\n\n    Returns:\n        int: The factorial of the number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> factorial(5)\n        120\n        >>> factorial(0)\n        1\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    if n == 0:\n        return 1\n\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result\n\n\n# Test the function\nassert find_star_num(3) == 37\nassert find_star_num(5) == 210"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    Parameters:\n    char (str): The character to find the ASCII value of.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('C')\n    67\n    \"\"\"\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character.\")\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65\nassert ascii_value('B') == 66\nassert ascii_value('C') == 67"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculate the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n        >>> sum_even_and_even_index([1, 2, 3, 4, 5, 6])\n        12\n        >>> sum_even_and_even_index([1, 3, 5, 7, 9, 11])\n        0\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    # Initialize the sum variable\n    even_sum = 0\n\n    # Iterate through the list starting from the second element (index 1)\n    for i in range(1, len(lst), 2):\n        # Check if the number at the current index is even\n        if lst[i] % 2 == 0:\n            # Add the even number to the sum\n            even_sum += lst[i]\n\n    return even_sum"}
{"task_id": "Mbpp/271", "solution": "def even_power_sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Args:\n        n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> even_power_sum(2)\n        1056\n        >>> even_power_sum(3)\n        2536\n        >>> even_power_sum(4)\n        5104\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    return sum(num ** 5 for num in even_numbers)"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Raises:\n        TypeError: If the input is not a list.\n        TypeError: If any element in the list is not a tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19), (4, 'John', 22)])\n        [21, 20, 19, 22]\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19), (4, 'John', 22), (5, 'Jane', 23)])\n        [21, 20, 19, 22, 23]\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if each element in the list is a tuple\n    for element in tuples_list:\n        if not isinstance(element, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n\n    # Extract the rear element of each tuple and store it in a new list\n    rear_elements = [tup[2] for tup in tuples_list]\n\n    return rear_elements"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the length of the tuples are not equal.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n        >>> subtract_elements((1, 2, 3), (4, 5, 6))\n        (-3, -3, -3)\n        >>> subtract_elements((1, 2, 3), (4, 5))\n        Traceback (most recent call last):\n            ...\n        ValueError: The length of the tuples are not equal.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The length of the tuples are not equal.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients up to a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer up to which the sum of even index binomial coefficients is calculated.\n\n    Returns:\n    int: The sum of even index binomial coefficients up to n.\n\n    Example:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate from 0 to n\n    for i in range(n + 1):\n        # Calculate the binomial coefficient using the formula (n choose k)\n        coeff = factorial(n) // (factorial(i) * factorial(n - i))\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the even index binomial coefficient to the sum\n            sum += coeff\n\n    return sum\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which the factorial is calculated.\n\n    Returns:\n    int: The factorial of n.\n\n    Example:\n    >>> factorial(5)\n    120\n    \"\"\"\n\n    # Initialize the factorial to 1\n    fact = 1\n\n    # Iterate from 1 to n\n    for i in range(1, n + 1):\n        # Multiply the current factorial by i\n        fact *= i\n\n    return fact\n\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Examples:\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(0, 10)\n    0.0\n    >>> volume_cylinder(10, -5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Height cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    if height < 0:\n        raise ValueError(\"Height cannot be negative.\")\n    return math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to a given integer n.\n\n    Args:\n        dictionary (dict): The input dictionary to be filtered.\n        n (int): The minimum value to filter the dictionary entries.\n\n    Returns:\n        dict: A new dictionary containing only the entries with values greater than or equal to n.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    \"\"\"\n    Counts the number of elements that occur before the tuple element in the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        int: The number of elements that occur before the tuple element.\n\n    Examples:\n        >>> count_first_elements((1, 5, 7, (4, 6), 10))\n        3\n        >>> count_first_elements((1, 5, 7, (4, 6), 10, (1, 2)))\n        4\n        >>> count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3))\n        5\n    \"\"\"\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculates the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(1)\n    1\n    >>> is_num_decagonal(2)\n    11\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (3 * n - 2)\n\n\n# Testing the function\nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 11\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Sequential search algorithm to find an element in an array.\n\n    Parameters:\n    arr (list): The input array to search in.\n    element: The element to search for.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is found and the index position of the element (or -1 if not found).\n\n    Example:\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    (True, 3)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n# Testing the function\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a given list are unique.\n\n    Args:\n        lst (list): The list to check for uniqueness.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n\n    Examples:\n        >>> all_unique([1, 2, 3])\n        True\n        >>> all_unique([1, 2, 2])\n        False\n        >>> all_unique([])\n        True\n    \"\"\"\n    return len(lst) == len(set(lst))"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the element-wise difference between list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n\n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check if the frequency of each digit in the given integer is less than or equal to the digit itself.\n\n    Args:\n        num (int): The integer to be checked.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n\n    Examples:\n        >>> validate(1234)\n        True\n        >>> validate(1223)\n        False\n        >>> validate(1111)\n        True\n    \"\"\"\n    # Convert the integer to a string to iterate over each digit\n    num_str = str(num)\n\n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n\n    # Count the frequency of each digit\n    for digit in num_str:\n        if digit in digit_freq:\n            digit_freq[digit] += 1\n        else:\n            digit_freq[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, freq in digit_freq.items():\n        if int(digit) < freq:\n            return False\n\n    return True"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in a list are equal to a given element.\n\n    Args:\n        lst (list): The list to check.\n        element: The element to compare with.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n\n    Examples:\n        >>> check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue')\n        False\n        >>> check_element([\"green\", \"green\", \"green\", \"green\"], 'green')\n        True\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Testing the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([\"green\", \"green\", \"green\", \"green\"], 'green') == True"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Check if a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n\n    Examples:\n        >>> text_match_two_three(\"ac\")\n        False\n        >>> text_match_two_three(\"abc\")\n        True\n        >>> text_match_two_three(\"abbb\")\n        True\n        >>> text_match_two_three(\"abbbb\")\n        True\n        >>> text_match_two_three(\"abbbbb\")\n        False\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array of integers.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the original array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Raises:\n        ValueError: If the length of the original array is not equal to the length of the repeated array.\n\n    Examples:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n        30\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 2, 3)\n        30\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 3, 3)\n        30\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 4)\n        30\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 2)\n        Traceback (most recent call last):\n            ...\n        ValueError: The length of the original array must be equal to the length of the repeated array.\n    \"\"\"\n\n    if n != len(arr):\n        raise ValueError(\"The length of the original array must be equal to the length of the repeated array.\")\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the sum of the modified array by repeating the original array k times\n    modified_sum = original_sum * k\n\n    # Initialize variables to keep track of the maximum sum and the current sum\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the modified array\n    for i in range(n * k):\n        # Add the current element to the current sum\n        current_sum += arr[i % n]\n\n        # Update the maximum sum if the current sum is greater\n        max_sum = max(max_sum, current_sum)\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    # Return the maximum sum of a contiguous array in the modified array\n    return max_sum"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> square_sum(2)\n        20\n        >>> square_sum(3)\n        45\n        >>> square_sum(4)\n        90\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the sum of squares of the first n even natural numbers\n    sum_of_squares = sum(i**2 for i in range(2, 2*n+1, 2))\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum length list and the list itself.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len]\n\n    return max_len, max_list[0]"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n        dividend (int or float): The number to be divided.\n        divisor (int or float): The number to divide by.\n\n    Returns:\n        int: The quotient of the division.\n\n    Raises:\n        ValueError: If the divisor is zero.\n\n    Examples:\n        >>> find_quotient(10, 3)\n        3\n        >>> find_quotient(10.5, 3)\n        3\n        >>> find_quotient(10, 3.5)\n        2\n        >>> find_quotient(10.5, 3.5)\n        2\n        >>> find_quotient(10, 0)\n        Traceback (most recent call last):\n            ...\n        ValueError: Division by zero is not allowed.\n    \"\"\"\n    if divisor == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    quotient = dividend // divisor\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either a or b is negative or if the triangle is not right-angled.\n\n    Example:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    \"\"\"\n\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Sides of the triangle must be positive.\")\n\n    c_squared = a**2 + b**2\n    c = math.sqrt(c_squared)\n\n    return c\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The list of heterogeneous values.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n        >>> max_val([1, 2, 3, 4, 5])\n        5\n        >>> max_val([])\n        ValueError: The list is empty.\n        >>> max_val(1)\n        TypeError: Input must be a list.\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(lst) == 0:\n        raise ValueError(\"The list is empty.\")\n\n    max_value = lst[0]\n\n    for item in lst:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n\n    return max_value"}
{"task_id": "Mbpp/296", "solution": "def get_inv_count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_inv_count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n        nested_list (list): A nested list structure.\n\n    Returns:\n        list: A flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        tuples (list): A list of tuples, where each tuple contains a name and an aggregate value.\n\n    Returns:\n        tuple: The tuple with the maximum aggregate value.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n\n    if not isinstance(tuples, list) or not all(isinstance(t, tuple) for t in tuples):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_aggregate_value = float('-inf')\n    max_aggregate_tuple = None\n\n    for name, aggregate in tuples:\n        if aggregate > max_aggregate_value:\n            max_aggregate_value = aggregate\n            max_aggregate_tuple = (name, aggregate)\n\n    return max_aggregate_tuple"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Args:\n        n (int): The length of the binary sequence.\n\n    Returns:\n        float: The count of binary sequences.\n\n    Raises:\n        ValueError: If the input n is negative.\n\n    Examples:\n        >>> count_binary_seq(1)\n        2.0\n        >>> count_binary_seq(2)\n        4.0\n        >>> count_binary_seq(3)\n        8.0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input n cannot be negative.\")\n\n    # Initialize the count of binary sequences\n    count = 0\n\n    # Recursive function to generate binary sequences\n    def generate_binary_seq(seq, i):\n        nonlocal count\n\n        # Base case: If the length of the sequence is 2n, check if the sum of first n bits is equal to the sum of last n bits\n        if i == 2 * n:\n            if sum(seq[:n]) == sum(seq[n:]):\n                count += 1\n            return\n\n        # Recursive case: Generate binary sequences by appending 0 and 1 to the current sequence\n        generate_binary_seq(seq + [0], i + 1)\n        generate_binary_seq(seq + [1], i + 1)\n\n    # Start the recursive function with an empty sequence and an initial index of 0\n    generate_binary_seq([], 0)\n\n    # Calculate the count of binary sequences as 2^(2n)\n    count = math.pow(2, 2 * n)\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 4.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 8.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    Examples:\n    >>> dict_depth({'a': 1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a': 1, 'b': {'c': {'d': {'e': {}}}}})\n    5\n    >>> dict_depth({'a': 1})\n    1\n    >>> dict_depth({})\n    0\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    if not dictionary:\n        return 0\n\n    depths = [1 + dict_depth(value) for value in dictionary.values()]\n    return max(depths)"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n\n    Args:\n        words (list): A list of strings.\n\n    Returns:\n        tuple: A tuple containing two words starting with letter 'p'.\n\n    Raises:\n        ValueError: If the list does not contain at least two words starting with letter 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n        >>> start_withp([\"Java JavaScript\", \"c c++\"])\n        ValueError: The list does not contain at least two words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if word.lower().startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"The list does not contain at least two words starting with letter 'p'.\")\n    return p_words[:2]"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        arr (list): The input array of integers.\n        n (int): The length of the input array.\n        i (int): The index up to which the prefix sum is calculated.\n        k (int): The index of the element to be included in the subsequence.\n\n    Returns:\n        int: The maximum sum of increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty or the given index i is out of range.\n\n    Examples:\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n        11\n        >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4)\n        10\n        >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 2)\n        7\n    \"\"\"\n\n    # Check if the input array is empty\n    if n == 0:\n        raise ValueError(\"Input array is empty\")\n\n    # Check if the given index i is out of range\n    if i < 0 or i >= n:\n        raise ValueError(\"Index i is out of range\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Initialize the current sum of increasing subsequence\n    curr_sum = 0\n\n    # Iterate from the given index i to the end of the array\n    for j in range(i, n):\n        # If the current element is greater than the previous element, add it to the current sum\n        if arr[j] > arr[j - 1]:\n            curr_sum += arr[j]\n        # If the current element is less than or equal to the previous element, reset the current sum\n        else:\n            curr_sum = arr[j]\n\n        # Update the maximum sum if the current sum is greater\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n\n    # Add the value of the kth element to the maximum sum\n    max_sum += arr[k]\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the number of products to find is greater than the number of elements in the lists.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)\n        [60, 54, 50]\n        >>> large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 7)\n        Traceback (most recent call last):\n            ...\n        ValueError: The number of products to find is greater than the number of elements in the lists.\n    \"\"\"\n\n    # Check if the number of products to find is greater than the number of elements in the lists\n    if num > len(list1) or num > len(list2):\n        raise ValueError(\"The number of products to find is greater than the number of elements in the lists.\")\n\n    # Initialize an empty list to store the largest products\n    largest_products = []\n\n    # Iterate over the first list\n    for i in range(len(list1)):\n        # Iterate over the second list\n        for j in range(len(list2)):\n            # Calculate the product of the current elements from the two lists\n            product = list1[i] * list2[j]\n\n            # If the list of largest products is not full, add the product to the list\n            if len(largest_products) < num:\n                largest_products.append(product)\n            # If the list of largest products is full, replace the smallest product with the current product if it is larger\n            else:\n                if product > min(largest_products):\n                    largest_products[largest_products.index(min(largest_products))] = product\n\n    # Sort the list of largest products in descending order\n    largest_products.sort(reverse=True)\n\n    return largest_products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    Finds the maximum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n\n    Raises:\n    TypeError: If either a or b is not a number.\n\n    Examples:\n    >>> maximum(5, 10)\n    10\n    >>> maximum(10, 5)\n    10\n    >>> maximum(-5, -10)\n    -5\n    >>> maximum(5.5, 10.5)\n    10.5\n    \"\"\"\n    if not isinstance(a, (int, float)) or not isinstance(b, (int, float)):\n        raise TypeError(\"Both arguments must be numbers.\")\n    return max(a, b)\n\n# Testing the function\nassert maximum(5, 10) == 10\nassert maximum(10, 5) == 10\nassert maximum(-5, -10) == -5\nassert maximum(5.5, 10.5) == 10.5"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple of characters.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    return tuple(string)"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Set the left most unset bit in a given number.\n\n    Args:\n        num (int): The number to modify.\n\n    Returns:\n        int: The modified number with the left most unset bit set.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        14\n        >>> set_left_most_unset_bit(15)\n        15\n        >>> set_left_most_unset_bit(0)\n        1\n    \"\"\"\n    # Find the leftmost unset bit\n    bit_index = 0\n    while num & (1 << bit_index):\n        bit_index += 1\n\n    # Set the leftmost unset bit\n    modified_num = num | (1 << bit_index)\n\n    return modified_num"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either the radius or height is negative.\n\n    Examples:\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(0, 10)\n    0.0\n    >>> volume_cone(10, 0)\n    0.0\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(32)\n    32\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Testing the function\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers in which each number is the sum of the two preceding ones.\n    The first two numbers in the sequence are 2 and 1.\n\n    Args:\n        n (int): The index of the Lucas number to find.\n\n    Returns:\n        int: The n'th Lucas number.\n\n    Raises:\n        ValueError: If the input n is negative.\n\n    Examples:\n        >>> find_lucas(0)\n        2\n        >>> find_lucas(1)\n        1\n        >>> find_lucas(2)\n        3\n        >>> find_lucas(3)\n        4\n        >>> find_lucas(4)\n        7\n        >>> find_lucas(5)\n        11\n        >>> find_lucas(6)\n        18\n        >>> find_lucas(7)\n        29\n        >>> find_lucas(8)\n        47\n        >>> find_lucas(9)\n        76\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input n must be non-negative.\")\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Applies a given format string to all elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply to each element.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n        >>> add_string(['a', 'b', 'c'], '{0}')\n        ['a', 'b', 'c']\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input argument 'lst' must be a list.\")\n    if not isinstance(format_str, str):\n        raise TypeError(\"Input argument 'format_str' must be a string.\")\n\n    return [format_str.format(item) for item in lst]"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    \"\"\"\n    Convert more than one list to nested dictionary.\n\n    Args:\n        keys (list): List of keys.\n        values (list): List of values.\n        scores (list): List of scores.\n\n    Returns:\n        list: List of dictionaries with keys and values.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(keys) != len(values) or len(keys) != len(scores):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(keys)):\n        inner_dict = {keys[i]: {values[i]: scores[i]}}\n        result.append(inner_dict)\n\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    \"\"\"\n    Calculates the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The maximum sum.\n\n    Examples:\n        >>> get_max_sum(60)\n        106\n    \"\"\"\n    if n <= 1:\n        return n\n\n    # Calculate the maximum sum for each of the four possible divisions\n    max_sum_2 = get_max_sum(n // 2)\n    max_sum_3 = get_max_sum(n // 3)\n    max_sum_4 = get_max_sum(n // 4)\n    max_sum_5 = get_max_sum(n // 5)\n\n    # Calculate the maximum sum using the given equation\n    max_sum = max(max_sum_2 + max_sum_3 + max_sum_4 + max_sum_5, n)\n\n    return max_sum\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n\n    Examples:\n        >>> check_distinct((1, 4, 5, 6, 1, 4))\n        False\n        >>> check_distinct((1, 2, 3, 4, 5))\n        True\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n# Testing the function\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 2, 3, 4, 5)) == True"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character in the string, or None if no such character exists.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        'c'\n        >>> first_non_repeating_character(\"abab\")\n        None\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate through each character in the string\n    for char in string:\n        # Increment the count of the character in the dictionary\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Iterate through each character in the string again\n    for char in string:\n        # If the count of the character is 1, it is the first non-repeated character\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None\n\n# Test the function\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abab\") == None\nassert first_non_repeating_character(\"abc\") == \"c\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    num3 (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(100, 200, 300)\n    200.0\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([num1, num2, num3])\n\n    # Find the median\n    median = sorted_numbers[1]\n\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(10, 20, 30) == 20.0\nassert median_numbers(100, 200, 300) == 200.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of integers representing the sum of digits of each number in the input list.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n        >>> sum_of_digits([123, 456, 789])\n        [6, 15, 24]\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if all elements in the list are integers\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers.\")\n\n    # Compute the sum of digits for each number in the list\n    result = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n\n    return result"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Finds the minimum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(2, 1)\n    1\n    >>> minimum(-1, 0)\n    -1\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\n# Testing the function\nassert minimum(1, 2) == 1\nassert minimum(2, 1) == 1\nassert minimum(-1, 0) == -1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to search for the element.\n        element: The element to search for in the tuple.\n\n    Returns:\n        bool: True if the element is found in the tuple, False otherwise.\n\n    Examples:\n        >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r')\n        True\n        >>> check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'x')\n        False\n    \"\"\"\n    return element in tuplex\n\n# Testing the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'x') == False"}
{"task_id": "Mbpp/406", "solution": "def find_parity(number):\n    \"\"\"\n    Check if the parity of a given number is odd.\n\n    Parameters:\n    number (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n\n    Examples:\n    >>> find_parity(12)\n    False\n    >>> find_parity(13)\n    True\n    >>> find_parity(0)\n    False\n    \"\"\"\n    return number % 2 != 0\n\n# Testing the function\nassert find_parity(12) == False\nassert find_parity(13) == True\nassert find_parity(0) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n        >>> min_product_tuple(1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Input is not a list.\n    \"\"\"\n\n    if not isinstance(tuples_list, list):\n        raise ValueError(\"Input is not a list.\")\n\n    if len(tuples_list) == 0:\n        raise ValueError(\"Input list is empty.\")\n\n    min_product = float('inf')\n\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            product = tuples_list[i][0] * tuples_list[j][1]\n            if product < min_product:\n                min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The list of values.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n        >>> min_val([1, 2, 3, 4, 5])\n        1\n        >>> min_val([])\n        ValueError: The list is empty.\n        >>> min_val(1)\n        TypeError: Input must be a list.\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(lst) == 0:\n        raise ValueError(\"The list is empty.\")\n\n    min_value = lst[0]\n\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list with only the even numbers.\n\n    Examples:\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([2, 4, 6, 8])\n        [2, 4, 6, 8]\n        >>> remove_odd([1, 3, 5, 7, 9])\n        []\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n\n# Testing the function\nassert remove_odd([1, 2, 3]) == [2]\nassert remove_odd([1, 2, 3, 4, 5]) == [2, 4]\nassert remove_odd([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert remove_odd([1, 3, 5, 7, 9]) == []"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n        [99, 96, 94, 98]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 3)\n        Traceback (most recent call last):\n            ...\n        IndexError: list index out of range\n    \"\"\"\n    try:\n        return [tup[n] for tup in lst]\n    except IndexError:\n        raise IndexError(\"list index out of range\")"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list or tuple): The first sequence.\n        seq2 (list or tuple): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n\n    Examples:\n        >>> overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])\n        False\n        >>> overlapping([1, 2, 3, 4, 5], [3, 4, 5, 6, 7])\n        True\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False\n\n# Testing the function\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input list has less than two integers.\n\n    Examples:\n        >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n        (7, 8)\n        >>> max_product([-1, -2, -3, -4, -7, 0, -8, -4])\n        (-7, -8)\n        >>> max_product([1, 2, 3, 4, 7, 0, 8, 4, 10])\n        (10, 8)\n        >>> max_product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11])\n        (11, 10)\n        >>> max_product([1, 2, 3, 4, 7, 0, 8, 4, 10, 11, 12])\n        (12, 11)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must have at least two integers.\")\n\n    # Initialize variables to store the two integers with the highest product\n    max_product = float('-inf')\n    pair = None\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n\n            # Update the maximum product and pair if a higher product is found\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def find_max_length_element(lst):\n    \"\"\"\n    Finds the element of a list with the maximum length.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The element of the list with the maximum length.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_max_length_element([['A'], ['A', 'B'], ['A', 'B', 'C']])\n        ['A', 'B', 'C']\n        >>> find_max_length_element([['A', 'B'], ['A'], ['A', 'B', 'C']])\n        ['A', 'B', 'C']\n        >>> find_max_length_element([['A', 'B'], ['A', 'B', 'C'], ['A']])\n        ['A', 'B', 'C']\n        >>> find_max_length_element([['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'C', 'D']])\n        ['A', 'B', 'C', 'D']\n        >>> find_max_length_element([['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'C'], ['A', 'B', 'C', 'D']])\n        ['A', 'B', 'C', 'D']\n        >>> find_max_length_element([['A', 'B'], ['A', 'B', 'C'], ['A', 'B', 'C'], ['A', 'B', 'C', 'D'], ['A', 'B', 'C', 'D', 'E']])\n        ['A', 'B', 'C', 'D', 'E']\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_length = 0\n    max_element = []\n\n    for element in lst:\n        if not isinstance(element, list):\n            raise ValueError(\"Each element of the input list must be a list.\")\n\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds every number in the given list of numbers and returns the sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): A list of numbers to be rounded.\n\n    Returns:\n        int: The sum of the rounded numbers multiplied by the length of the list.\n\n    Examples:\n        >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n        243\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(numbers)\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(4)\n    408\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the cube sum using the formula (2 * n^3 + n) / 3\n    cube_sum = (2 * n ** 3 + n) // 3\n\n    return cube_sum\n\n\n# Test the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216\nassert cube_sum(4) == 408"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenate each element of a tuple into a string using a delimiter.\n\n    Args:\n        tup (tuple): The tuple to be concatenated.\n        delimiter (str, optional): The delimiter to be used between elements. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_')\n        'ID_is_4_UTS'\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return delimiter.join(str(item) for item in tup)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculates the average of cubes of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to include in the calculation.\n\n    Returns:\n        float: The average of cubes of the first n natural numbers.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> find_Average_Of_Cube(2)\n        4.5\n        >>> find_Average_Of_Cube(3)\n        14.0\n        >>> find_Average_Of_Cube(4)\n        36.5\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): A tuple of strings.\n\n    Returns:\n        list: A list of rear index elements.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers'))\n        ['s', 'r', 's']\n        >>> extract_rear(('Mers', 'for', 'Vers', ''))\n        ['s', 'r', 's', '']\n        >>> extract_rear(('Mers', 'for', 'Vers', '123'))\n        ['s', 'r', 's', '3']\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    rear_elements = []\n    for string in tup:\n        if string:\n            rear_elements.append(string[-1])\n        else:\n            rear_elements.append('')\n\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The list of sublists.\n        element: The element to count.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7)\n        2\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 15)\n        1\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters odd numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Testing the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date_str (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date_str.split(\"-\")\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format. Please provide a date in yyyy-mm-dd format.\")\n\n# Testing the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    \"\"\"\n    # Initialize the gap\n    gap = len(arr) // 2\n\n    # Repeat the process until the gap becomes 1\n    while gap > 0:\n        # Perform insertion sort for this gap size\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n\n            # Shift elements larger than temp to the right\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n\n            # Insert the temp value at the correct position\n            arr[j] = temp\n\n        # Reduce the gap for the next iteration\n        gap //= 2\n\n    return arr\n\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the elementwise and tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n        >>> and_tuples((1, 2, 3), (4, 5, 6))\n        (0, 0, 2)\n        >>> and_tuples((1, 2, 3), (4, 5))\n        ValueError: Input tuples have different lengths.\n    \"\"\"\n\n    # Check if the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples have different lengths.\")\n\n    # Initialize an empty list to store the elementwise and tuples\n    and_tuples_list = []\n\n    # Iterate over the elements of the input tuples\n    for i in range(len(tuple1)):\n        # Perform the elementwise and operation on the corresponding elements\n        and_result = tuple1[i] & tuple2[i]\n\n        # Convert the result to a tuple and append it to the list\n        and_tuples_list.append(tuple([and_result]))\n\n    # Convert the list of tuples to a single tuple\n    and_tuples_tuple = tuple(and_tuples_list)\n\n    return and_tuples_tuple"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculates the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Raises:\n    ValueError: If the parabola is not defined.\n\n    Example:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n\n    # Check if the parabola is defined\n    if b**2 - 4*a*c < 0:\n        raise ValueError(\"The parabola is not defined.\")\n\n    # Calculate the directrix\n    directrix = -b / (2*a)\n\n    return directrix"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values are negative.\n\n    Examples:\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    >>> median_trapezium(10, 20, 30)\n    15.0\n    >>> median_trapezium(5, 10, 15)\n    8.333333333333334\n    \"\"\"\n\n    # Check if any of the input values are negative\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Input values cannot be negative.\")\n\n    # Calculate the median length using the formula\n    median = (a + b) / 2 + c\n\n    return median\n\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20.0\nassert median_trapezium(10, 20, 30) == 15.0\nassert median_trapezium(5, 10, 15) == 8.333333333333334"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array of numbers.\n        num (int): The number to compare with the elements of the array.\n\n    Returns:\n        bool: True if the number is greater than all the elements of the array, False otherwise.\n\n    Examples:\n        >>> check_greater([1, 2, 3, 4, 5], 4)\n        False\n        >>> check_greater([1, 2, 3, 4, 5], 6)\n        True\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    Returns the last digit of a given number.\n\n    Args:\n        number (int): The number to find the last digit of.\n\n    Returns:\n        int: The last digit of the given number.\n\n    Raises:\n        TypeError: If the input is not an integer.\n\n    Examples:\n        >>> last_digit(123)\n        3\n        >>> last_digit(1000)\n        0\n        >>> last_digit(-123)\n        3\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    return abs(number) % 10\n\n\n# Testing the function\nassert last_digit(123) == 3\nassert last_digit(1000) == 0\nassert last_digit(-123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        list: A list of negative numbers from the input list.\n\n    Examples:\n        >>> neg_nos([-1, 4, 5, -6])\n        [-1, -6]\n        >>> neg_nos([1, 2, 3, 4])\n        []\n        >>> neg_nos([-1, -2, -3, -4])\n        [-1, -2, -3, -4]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Testing the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([1, 2, 3, 4]) == []\nassert neg_nos([-1, -2, -3, -4]) == [-1, -2, -3, -4]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n        >>> remove_odd(\"hello\")\n        'hlo'\n    \"\"\"\n    return ''.join([char for i, char in enumerate(string) if i % 2 == 0])\n\n# Testing the function\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"hello\") == \"hlo\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list or if the list contains non-integer values.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n        >>> multiple_to_single([1, 2, 3, 4, 5])\n        12345\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the list contains non-integer values\n    if any(not isinstance(num, int) for num in numbers):\n        raise TypeError(\"List must contain only integers.\")\n\n    # Join the integers in the list into a single integer\n    joined_num = int(''.join(str(num) for num in numbers))\n\n    return joined_num"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n        >>> find_adverb_position(\"I am walking on the beach\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\"I am walking on the beach.\")\n        (10, 14, 'on')\n        >>> find_adverb_position(\""}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculates the surface area of a cube of a given size.\n\n    Parameters:\n    size (int or float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive number.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(0)\n    0\n    >>> surfacearea_cube(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Size must be a positive number.\n    \"\"\"\n\n    if size <= 0:\n        raise ValueError(\"Size must be a positive number.\")\n\n    return 6 * size ** 2\n\n\n# Testing the function\nassert surfacearea_cube(5) == 150\nassert surfacearea_cube(0) == 0\n\ntry:\n    surfacearea_cube(-1)\nexcept ValueError as e:\n    assert str(e) == \"Size must be a positive number.\""}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the result of index wise multiplication of elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication((1, 3), (4, 5))\n        (4, 15)\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n\n    # Check if the input tuples have the same length\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    # Perform index wise multiplication of elements\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n\n    return result"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        list_input (list): The list of elements to count the occurrence of.\n\n    Returns:\n        int: The total count of occurrences of the elements in the list.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c'])\n        4\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b', 'c', 'd'])\n        5\n    \"\"\"\n\n    # Check if the input arguments are of the correct types\n    if not isinstance(tuple_input, tuple) or not isinstance(list_input, list):\n        raise TypeError(\"Input arguments must be of type tuple and list, respectively.\")\n\n    # Initialize the count variable\n    count = 0\n\n    # Iterate over each element in the list\n    for element in list_input:\n        # Count the occurrences of the element in the tuple\n        count += tuple_input.count(element)\n\n    return count"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with cubes of the input numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5])\n        [1, 8, 27, 64, 125]\n        >>> cube_nums([-2, -1, 0, 1, 2])\n        [8, 1, 0, 1, 8]\n        >>> cube_nums([])\n        []\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Create an empty list to store the cubes\n    cubes = []\n\n    # Iterate over each number in the input list\n    for num in nums:\n        # Calculate the cube of the number and append it to the cubes list\n        cubes.append(num ** 3)\n\n    # Return the list of cubes\n    return cubes"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(10)\n    70\n    >>> cal_sum(11)\n    109\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Initialize the first three Perrin numbers\n    a, b, c = 3, 0, 2\n\n    # Calculate the sum of the first n Perrin numbers\n    perrin_sum = a + b + c\n\n    # Calculate the remaining Perrin numbers\n    for _ in range(3, n):\n        a, b, c = b, c, a + b\n        perrin_sum += c\n\n    return perrin_sum"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n\n    Returns:\n        list: A new list containing the specified size of strings from the input list.\n\n    Raises:\n        TypeError: If the input is not a list or the size is not an integer.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10)\n        []\n    \"\"\"\n    if not isinstance(string_list, list):\n        raise TypeError(\"Input must be a list\")\n    if not isinstance(size, int):\n        raise TypeError(\"Size must be an integer\")\n\n    result = []\n    for string in string_list:\n        if len(string) == size:\n            result.append(string)\n\n    return result"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n\n    Examples:\n        >>> remove_whitespaces(' Google    Flutter ')\n        'GoogleFlutter'\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(n):\n    \"\"\"\n    Calculate the sum of even factors of a number.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Examples:\n    >>> sum_of_even_factors(18)\n    26\n    >>> sum_of_even_factors(24)\n    42\n    >>> sum_of_even_factors(1)\n    0\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, n + 1):\n        if n % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n\n# Testing the function\nassert sum_of_even_factors(18) == 26\nassert sum_of_even_factors(24) == 42\nassert sum_of_even_factors(1) == 0"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Args:\n        text (str): The input text to search for the word containing 'z'.\n\n    Returns:\n        bool: True if a word containing 'z' is found, False otherwise.\n\n    Examples:\n        >>> text_match_wordz(\"pythonz.\")\n        True\n        >>> text_match_wordz(\"python.\")\n        False\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Testing the function\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"python.\") == False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n\n    Raises:\n        ValueError: If the month_number is not a valid month number (1-12).\n\n    Examples:\n        >>> check_month_number(5)\n        True\n        >>> check_month_number(2)\n        False\n        >>> check_month_number(13)\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid month number.\n    \"\"\"\n    if month_number < 1 or month_number > 12:\n        raise ValueError(\"Invalid month number.\")\n\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n        >>> find_min_sublist([[1, 2], [1, 2, 3], [1]])\n        [1]\n        >>> find_min_sublist([[1, 2], [1, 2, 3], [1, 2, 3, 4]])\n        [1, 2]\n        >>> find_min_sublist([[1, 2, 3], [1, 2, 3, 4], [1, 2]])\n        [1, 2]\n        >>> find_min_sublist([[1, 2, 3, 4], [1, 2], [1, 2, 3]])\n        [1, 2]\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float or int): The length of the rectangle.\n    width (float or int): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(5, 5)\n    25\n    >>> rectangle_area(0, 10)\n    0\n    >>> rectangle_area(-1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length and width must be positive numbers.\n    \"\"\"\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be positive numbers.\")\n    return length * width\n\n# Testing the function\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(5, 5) == 25\nassert rectangle_area(0, 10) == 0\n\ntry:\n    rectangle_area(-1, 5)\nexcept ValueError as e:\n    assert str(e) == \"Length and width must be positive numbers.\""}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n        >>> remove_uppercase('HelloWorld')\n        'Helloworld'\n        >>> remove_uppercase('')\n        ''\n    \"\"\"\n    modified_string = ''\n    current_substring = ''\n\n    for char in string:\n        if char.isupper():\n            current_substring += char\n        else:\n            if current_substring.isupper():\n                modified_string += current_substring.lower()\n            else:\n                modified_string += current_substring\n            current_substring = char\n\n    if current_substring.isupper():\n        modified_string += current_substring.lower()\n    else:\n        modified_string += current_substring\n\n    return modified_string"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(lst):\n    \"\"\"\n    Extract the first element of each sublist in a list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: A new list containing the first elements of each sublist.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If any element in the input list is not a list.\n\n    Examples:\n        >>> extract_first_elements([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n        >>> extract_first_elements([[1], [2, 3], [4, 5, 6]])\n        [1, 2, 4]\n        >>> extract_first_elements([[1, 2, 3], [4, 5], [6]])\n        [1, 4, 6]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    result = []\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"Each element in the input list must be a list.\")\n        result.append(sublist[0])\n\n    return result"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n\n    Examples:\n        >>> combinations_list(['orange', 'red', 'green', 'blue'])\n        [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    # Base case: if the input list is empty, return an empty list\n    if not lst:\n        return [[]]\n\n    # Recursive case: generate all combinations of the input list by removing the first element\n    first_element = lst[0]\n    remaining_elements = lst[1:]\n    combinations_without_first = combinations_list(remaining_elements)\n\n    # Generate all combinations of the input list by including the first element\n    combinations_with_first = []\n    for combination in combinations_without_first:\n        combinations_with_first.append([first_element] + combination)\n\n    # Combine the combinations without and with the first element\n    return combinations_without_first + combinations_with_first"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(nums):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The maximum product subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n        >>> max_subarray_product([-2, -3, 0, -2, -4])\n        12\n        >>> max_subarray_product([-2, 0, -1])\n        0\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_product = nums[0]\n    current_max = nums[0]\n    current_min = nums[0]\n\n    for num in nums[1:]:\n        if num < 0:\n            current_max, current_min = current_min, current_max\n\n        current_max = max(num, current_max * num)\n        current_min = min(num, current_min * num)\n\n        max_product = max(max_product, current_max)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items removed.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n        >>> max_product([1, 2, 3, 4, 5])\n        60\n        >>> max_product([5, 4, 3, 2, 1])\n        60\n    \"\"\"\n\n    # Initialize variables to store the maximum product and the current product\n    max_prod = 0\n    curr_prod = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update the current product by multiplying it with the current number\n        curr_prod *= num\n\n        # If the current product is greater than the maximum product, update the maximum product\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n\n        # If the current number is negative, reset the current product to 1\n        if num < 0:\n            curr_prod = 1\n\n    return max_prod"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: A new tuple with the pairwise addition of the neighboring elements.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n        >>> add_pairwise((1, 2, 3))\n        (3, 5)\n        >>> add_pairwise((1,))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuple must have at least two elements.\n    \"\"\"\n\n    # Check if the input is a tuple\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    # Check if the input tuple has at least two elements\n    if len(tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    # Create a new tuple with the pairwise addition of the neighboring elements\n    new_tup = tuple(tup[i] + tup[i+1] for i in range(len(tup)-1))\n\n    return new_tup"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculates the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulus value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Raises:\n    ValueError: If the modulus value is less than or equal to 0.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    >>> find_remainder([1, 2, 3, 4, 5], 10)\n    0\n    >>> find_remainder([1, 2, 3, 4, 5], 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Modulus value must be greater than 0.\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"Modulus value must be greater than 0.\")\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product"}
{"task_id": "Mbpp/472", "solution": "def check_consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n\n    Examples:\n        >>> check_consecutive([1, 2, 3, 4, 5])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 6])\n        False\n        >>> check_consecutive([1, 2, 3, 4, 5, 6])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n        True\n        >>> check_consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): A list of tuples.\n        tuple_list2 (list): A list of tuples.\n\n    Returns:\n        set: A set of tuples representing the intersection of the two input lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    # Convert the tuples in the first list to sets\n    set1 = set(map(tuple, tuple_list1))\n\n    # Convert the tuples in the second list to sets\n    set2 = set(map(tuple, tuple_list2))\n\n    # Find the intersection of the two sets\n    intersection = set1.intersection(set2)\n\n    # Convert the intersection set back to a list of tuples\n    intersection_list = list(intersection)\n\n    # Return the intersection as a set\n    return set(intersection_list)"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a given character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character with.\n\n    Returns:\n        str: The modified string with all occurrences of the old character replaced with the new character.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct type.\n\n    Examples:\n        >>> replace_char(\"polygon\", 'y', 'l')\n        'pollgon'\n        >>> replace_char(\"polygon\", 'g', 'z')\n        'polozon'\n        >>> replace_char(\"polygon\", 'p', 'x')\n        'xoloxon'\n    \"\"\"\n\n    # Check if the input arguments are of the correct type\n    if not isinstance(string, str) or not isinstance(old_char, str) or not isinstance(new_char, str):\n        raise TypeError(\"Input arguments must be of type str.\")\n\n    # Replace all occurrences of the old character with the new character\n    modified_string = string.replace(old_char, new_char)\n\n    return modified_string"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a key-value pair from the input dictionary,\n              sorted by value in descending order.\n\n    Example:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n\n# Test the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest values in a given array.\n\n    Args:\n        arr (list): A list of numbers.\n\n    Returns:\n        int: The sum of the largest and smallest values in the array.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_sum([1, 2, 3])\n        4\n        >>> big_sum([5, 10, 15, 20])\n        25\n        >>> big_sum([-10, -5, 0, 5, 10])\n        15\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the list is empty\n    if len(arr) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Find the largest and smallest values in the array\n    largest = max(arr)\n    smallest = min(arr)\n\n    # Calculate the sum of the largest and smallest values\n    sum_of_largest_and_smallest = largest + smallest\n\n    return sum_of_largest_and_smallest"}
{"task_id": "Mbpp/477", "solution": "def to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The lower case version of the input string.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> to_lower(\"Hello\")\n        'hello'\n        >>> to_lower(\"HELLO\")\n        'hello'\n        >>> to_lower(\"Hello World\")\n        'hello world'\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n    return string.lower()\n\n\n# Testing the function\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(s):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n        >>> remove_lowercase(\"Python\")\n        'Python'\n        >>> remove_lowercase(\"python\")\n        'python'\n    \"\"\"\n    # Initialize an empty list to store the non-lowercase characters\n    result = []\n\n    # Iterate over each character in the input string\n    for char in s:\n        # If the character is uppercase, append it to the result list\n        if char.isupper():\n            result.append(char)\n\n    # Join the characters in the result list to form the modified string\n    return ''.join(result)\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"\nassert remove_lowercase(\"Python\") == \"Python\"\nassert remove_lowercase(\"python\") == \"python\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Returns the first digit of a given number.\n\n    Args:\n        number (int): The number to extract the first digit from.\n\n    Returns:\n        int: The first digit of the given number.\n\n    Raises:\n        TypeError: If the input is not an integer.\n\n    Examples:\n        >>> first_digit(123)\n        1\n        >>> first_digit(9001)\n        9\n        >>> first_digit(0)\n        0\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer\n    return int(first_digit)"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    Returns a list of odd numbers from the given list of integers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n        >>> get_odd_numbers([2, 4, 6, 8, 10])\n        []\n        >>> get_odd_numbers([1, 3, 5, 7, 9])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\n# Testing the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert get_odd_numbers([2, 4, 6, 8, 10]) == []\nassert get_odd_numbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Raises:\n        ValueError: If the input n is not a positive integer.\n\n    Examples:\n        >>> difference(3)\n        30\n        >>> difference(5)\n        225\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input n must be a positive integer.\")\n\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = sum(i for i in range(1, n+1))\n\n    # Calculate the difference between the sum of cubes and the sum of the first n natural numbers\n    difference = sum_of_cubes - sum_of_numbers\n\n    return difference"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    \"\"\"\n    Count the number of pairs whose xor value is odd.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The number of pairs whose xor value is odd.\n\n    Example:\n    >>> find_Odd_Pair([5, 4, 7, 2, 1], 5)\n    6\n    \"\"\"\n\n    # Initialize count variable to 0\n    count = 0\n\n    # Iterate through each element in the list\n    for i in range(n):\n        # Iterate from the next element to the end of the list\n        for j in range(i + 1, n):\n            # Calculate the xor value of the current pair\n            xor_value = arr[i] ^ arr[j]\n\n            # Check if the xor value is odd\n            if xor_value % 2 != 0:\n                # Increment the count if the xor value is odd\n                count += 1\n\n    # Return the count of pairs whose xor value is odd\n    return count\n\n\n# Test the function\narr = [5, 4, 7, 2, 1]\nn = len(arr)\nresult = find_Odd_Pair(arr, n)"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with toggled case.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"JavaScript\")\n    'jAVASCRIPT'\n    >>> toggle_string(\"12345\")\n    '12345'\n    \"\"\"\n    modified_string = \"\"\n    for char in string:\n        if char.isupper():\n            modified_string += char.lower()\n        elif char.islower():\n            modified_string += char.upper()\n        else:\n            modified_string += char\n    return modified_string"}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Raises:\n        TypeError: If either num1 or num2 is not an integer.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        12\n        >>> digit_distance_nums(100, 200)\n        0\n    \"\"\"\n\n    # Check if the input arguments are integers\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both input arguments must be integers.\")\n\n    # Convert the integers to strings for easier processing\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Pad the shorter string with leading zeros to make them the same length\n    if len(num1_str) < len(num2_str):\n        num1_str = num1_str.zfill(len(num2_str))\n    elif len(num2_str) < len(num1_str):\n        num2_str = num2_str.zfill(len(num1_str))\n\n    # Calculate the sum of the per-digit difference\n    distance_sum = 0\n    for i in range(len(num1_str)):\n        distance_sum += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    return distance_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        arr (list): The input list of integers.\n        n (int): The length of the input list.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n\n    Examples:\n        >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n        7\n        >>> max_sub_array_sum([1, 2, 3, 4, 5], 5)\n        15\n        >>> max_sub_array_sum([-1, -2, -3, -4, -5], 5)\n        -1\n    \"\"\"\n\n    # Initialize variables\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    # Iterate through the list\n    for i in range(n):\n        # Update the maximum ending here value\n        max_ending_here = max_ending_here + arr[i]\n\n        # If the maximum ending here value becomes negative, reset it to 0\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n        # Update the maximum so far value if necessary\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n\n    return max_so_far"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements of the input tuples, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n        >>> union_elements((1, 2, 3), (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    # Convert the input tuples to sets to remove duplicates\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    # Perform the union operation on the sets\n    union_set = set1.union(set2)\n\n    # Convert the union set back to a tuple and sort it\n    union_tuple = tuple(sorted(union_set))\n\n    return union_tuple"}
{"task_id": "Mbpp/562", "solution": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Examples:\n        >>> find_max_length([[1], [1, 4], [5, 6, 7, 8]])\n        4\n        >>> find_max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n        4\n        >>> find_max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]])\n        5\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Testing the function\nassert find_max_length([[1], [1, 4], [5, 6, 7, 8]]) == 4\nassert find_max_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4\nassert find_max_length([[1, 2], [3, 4, 5], [6, 7, 8, 9, 10]]) == 5"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Raises:\n        ValueError: If the input string is not properly formatted.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        if end_index == -1:\n            raise ValueError(\"Invalid input string format\")\n        value = string[start_index + 1:end_index]\n        values.append(value)\n        start_index = string.find('\"', end_index + 1)\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_pairs(nums, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        nums (list): A list of integers.\n        n (int): The size of the list.\n\n    Returns:\n        int: The number of possible unordered pairs.\n\n    Raises:\n        ValueError: If the length of the list is not equal to n.\n\n    Examples:\n        >>> count_pairs([1, 2, 1], 3)\n        2\n        >>> count_pairs([1, 2, 3, 4, 5], 5)\n        10\n        >>> count_pairs([1, 1, 1, 1], 4)\n        0\n    \"\"\"\n\n    # Check if the length of the list is equal to n\n    if len(nums) != n:\n        raise ValueError(\"Length of the list must be equal to n.\")\n\n    # Initialize a dictionary to store the count of each element\n    counts = {}\n\n    # Count the occurrences of each element in the list\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n\n    # Calculate the number of possible unordered pairs\n    pairs = 0\n    for count in counts.values():\n        pairs += count * (count - 1)\n\n    return pairs"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters.\n\n    Args:\n        string (str): The string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n        >>> split_string('')\n        []\n        >>> split_string(123)\n        Traceback (most recent call last):\n            ...\n        TypeError: Input must be a string.\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    return list(string)"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Args:\n        num (int): The non-negative integer.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n\n    Raises:\n        ValueError: If the input is negative.\n\n    Examples:\n        >>> sum_digits(345)\n        12\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(12345)\n        15\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be non-negative.\")\n\n    # Convert the integer to a string and sum the digits\n    return sum(int(digit) for digit in str(num))"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n\n    Examples:\n        >>> is_sorted_list([1, 2, 3, 4, 5])\n        True\n        >>> is_sorted_list([5, 4, 3, 2, 1])\n        False\n        >>> is_sorted_list([1, 2, 2, 4, 5])\n        False\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Testing the function\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True\nassert is_sorted_list([5, 4, 3, 2, 1]) == False\nassert is_sorted_list([1, 2, 2, 4, 5]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Raises:\n        TypeError: If the input is not an integer.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with only the unique numbers.\n\n    Examples:\n        >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n        [1, 4, 5]\n        >>> two_unique_nums([1, 1, 1, 2, 2, 2, 3, 3, 3])\n        [1, 2, 3]\n        >>> two_unique_nums([1, 2, 3, 4, 5])\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums"}
{"task_id": "Mbpp/573", "solution": "def unique_product(nums):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n        >>> unique_product([])\n        1\n        >>> unique_product([1])\n        1\n        >>> unique_product([1, 2, 3, 4, 5])\n        120\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(nums, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Create a set to store unique numbers\n    unique_nums = set()\n\n    # Iterate over the list and add unique numbers to the set\n    for num in nums:\n        unique_nums.add(num)\n\n    # Calculate the product of the unique numbers\n    product = 1\n    for num in unique_nums:\n        product *= num\n\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n        arr (list): The main list.\n        sub_arr (list): The sublist to check.\n\n    Returns:\n        bool: True if the sublist is a sublist of the main list, False otherwise.\n\n    Examples:\n        >>> is_sub_array([1, 2, 3, 4, 5], [2, 3])\n        True\n        >>> is_sub_array([1, 2, 3, 4, 5], [3, 4, 5, 6])\n        False\n        >>> is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n        True\n    \"\"\"\n    # Check if the sublist is empty\n    if not sub_arr:\n        return True\n\n    # Check if the main list is empty or the sublist is longer than the main list\n    if not arr or len(sub_arr) > len(arr):\n        return False\n\n    # Iterate through the main list and check if the sublist is present\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n\n    return False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit of the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the factorial is to be calculated.\n\n    Returns:\n    int: The last digit of the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(15)\n    0\n    >>> last_digit_factorial(20)\n    0\n    >>> last_digit_factorial(25)\n    0\n    >>> last_digit_factorial(30)\n    0\n    >>> last_digit_factorial(35)\n    0\n    >>> last_digit_factorial(40)\n    0\n    >>> last_digit_factorial(45)\n    0\n    >>> last_digit_factorial(50)\n    0\n    >>> last_digit_factorial(55)\n    0\n    >>> last_digit_factorial(60)\n    0\n    >>> last_digit_factorial(65)\n    0\n    >>> last_digit_factorial(70)\n    0\n    >>> last_digit_factorial(75)\n    0\n    >>> last_digit_factorial(80)\n    0\n    >>> last_digit_factorial(85)\n    0\n    >>> last_digit_factorial(90)\n    0\n    >>> last_digit_factorial(95)\n    0\n    >>> last_digit_factorial(100)\n    0\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Initialize the result with 1\n    result = 1\n\n    # Multiply the result by the numbers from 2 to n\n    for i in range(2, n + 1):\n        result *= i\n\n    # Return the last digit of the result\n    return result % 10"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list to be interleaved.\n        list2 (list): The second list to be interleaved.\n        list3 (list): The third list to be interleaved.\n\n    Returns:\n        list: A flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\n\n        >>> interleave_lists([1, 2, 3, 4], [5, 6, 7], [8, 9, 10])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must be of the same length.\n    \"\"\"\n\n    # Check if the input lists are of the same length\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    # Create an empty list to store the interleaved elements\n    interleaved_list = []\n\n    # Iterate over the indices of the input lists\n    for i in range(len(list1)):\n        # Append the elements from list1, list2, and list3 at the current index\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements from both input tuples.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple to process.\n\n    Returns:\n        tuple: A new tuple with only the even elements from the input tuple.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n        >>> extract_even((1, 2, 3, 4, 5))\n        (2, 4)\n        >>> extract_even((1, 3, 5, 7, 9))\n        ()\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float or int): The length of the base edge of the square pyramid.\n    height (float or int): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(5, 6)\n    60.0\n    \"\"\"\n\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be non-negative.\")\n\n    # Calculate the area of the base\n    base_area = base_edge ** 2\n\n    # Calculate the area of the square pyramid\n    surface_area = base_area + (4 * base_edge * height)\n\n    return surface_area"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    The Catalan numbers are defined as follows:\n    C(0) = 1\n    C(n) = (2n)! / (n+1)!n!)\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> catalan_number(0)\n    1\n    >>> catalan_number(5)\n    42\n    >>> catalan_number(10)\n    16796\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    # Calculate the factorial of 2n\n    factorial_2n = 1\n    for i in range(1, 2 * n + 1):\n        factorial_2n *= i\n\n    # Calculate the factorial of n+1\n    factorial_n_plus_1 = 1\n    for i in range(1, n + 2):\n        factorial_n_plus_1 *= i\n\n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= i\n\n    # Calculate the Catalan number\n    catalan_number = factorial_2n // (factorial_n_plus_1 * factorial_n)\n\n    return catalan_number\n\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        items (list): A list of dictionaries, where each dictionary represents an item with a 'name' and 'price' key.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the input 'items' is not a list or if the input 'n' is not a positive integer.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)\n        [{'name': 'Item-2', 'price': 555.22}]\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 2)\n        [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n    \"\"\"\n\n    # Check if the input 'items' is a list\n    if not isinstance(items, list):\n        raise ValueError(\"Input 'items' must be a list.\")\n\n    # Check if the input 'n' is a positive integer\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input 'n' must be a positive integer.\")\n\n    # Sort the items based on their prices in descending order\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The list to be split.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        ValueError: If the index n is out of range.\n\n    Examples:\n        >>> split_arr([12, 10, 5, 6, 52, 36], 2)\n        [5, 6, 52, 36, 12, 10]\n        >>> split_arr([1, 2, 3, 4, 5], 0)\n        [1, 2, 3, 4, 5]\n        >>> split_arr([1, 2, 3, 4, 5], 5)\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    if n < 0 or n >= len(arr):\n        raise ValueError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_to_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> list_to_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n        >>> list_to_tuple([])\n        ()\n        >>> list_to_tuple([1, 'a', 3.14])\n        (1, 'a', 3.14)\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    return tuple(lst)\n\n\n# Testing the function\nassert list_to_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_to_tuple([]) == ()\nassert list_to_tuple([1, 'a', 3.14]) == (1, 'a', 3.14)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty or contains only one element.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([4, 3, 2, 1])\n        3\n        >>> big_diff([1, 1, 1, 1])\n        0\n        >>> big_diff([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list must contain at least two elements.\n        >>> big_diff([1])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list must contain at least two elements.\n    \"\"\"\n    if len(nums) < 2:\n        raise ValueError(\"Input list must contain at least two elements.\")\n\n    min_num = float('inf')\n    max_num = float('-inf')\n\n    for num in nums:\n        if num < min_num:\n            min_num = num\n        if num > max_num:\n            max_num = num\n\n    return max_num - min_num"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    Raises:\n        ValueError: If the starting number is greater than the ending number.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n        >>> perfect_squares(10, 1)\n        []\n    \"\"\"\n\n    # Check if the starting number is greater than the ending number\n    if start > end:\n        raise ValueError(\"Starting number must be less than or equal to the ending number.\")\n\n    # Initialize an empty list to store the perfect squares\n    squares = []\n\n    # Iterate through the numbers from the starting number to the ending number\n    for num in range(start, end + 1):\n        # Check if the square root of the number is an integer\n        if (num ** 0.5).is_integer():\n            # If it is, add it to the list of perfect squares\n            squares.append(num)\n\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), (r * math.cos(theta), r * math.sin(theta))\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The list to be modified.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n        >>> swap_list([])\n        []\n        >>> swap_list([1])\n        [1]\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the list is empty or has only one element\n    if len(lst) < 2:\n        return lst\n\n    # Swap the first and last elements\n    lst[0], lst[-1] = lst[-1], lst[0]\n\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient (n choose k).\n\n    Raises:\n    ValueError: If k is greater than n.\n\n    \"\"\"\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n\n    # Calculate the factorial of n\n    factorial_n = 1\n    for i in range(1, n + 1):\n        factorial_n *= i\n\n    # Calculate the factorial of k\n    factorial_k = 1\n    for i in range(1, k + 1):\n        factorial_k *= i\n\n    # Calculate the factorial of (n - k)\n    factorial_n_minus_k = 1\n    for i in range(1, n - k + 1):\n        factorial_n_minus_k *= i\n\n    # Calculate the binomial coefficient (n choose k)\n    binomial_coefficient = factorial_n // (factorial_k * factorial_n_minus_k)\n\n    return binomial_coefficient\n\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial co-efficients to sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    # Initialize the sum of the product\n    sum_of_product = 0\n\n    # Calculate the product of consecutive binomial co-efficients\n    for i in range(1, n + 1):\n        binomial_coefficient_i = binomial_coefficient(n + i - 1, i)\n        binomial_coefficient_i_plus_1 = binomial_coefficient(n + i, i + 1)\n        product = binomial_coefficient_i * binomial_coefficient_i_plus_1\n        sum_of_product += product\n\n    return sum_of_product\n\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to be processed.\n\n    Returns:\n        str: The processed IP address with leading zeroes removed.\n\n    Raises:\n        ValueError: If the input is not a valid IP address.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n        >>> removezero_ip(\"127.0.0.1\")\n        '127.0.0.1'\n        >>> removezero_ip(\"0.0.0.0\")\n        '0.0.0.0'\n        >>> removezero_ip(\"256.0.0.1\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid IP address\n\n    \"\"\"\n\n    # Split the IP address into four parts\n    parts = ip_address.split('.')\n\n    # Check if the IP address has four parts\n    if len(parts) != 4:\n        raise ValueError(\"Invalid IP address\")\n\n    # Remove leading zeroes from each part\n    processed_parts = [str(int(part)) for part in parts]\n\n    # Join the processed parts with a dot\n    processed_ip = '.'.join(processed_parts)\n\n    return processed_ip"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(nums):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list is empty or does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8, 10])\n        0\n        >>> diff_even_odd([1, 3, 5, 7, 9])\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n\n    # Check if the list is empty or does not contain any even or odd numbers\n    if not nums or all(num % 2 == 0 for num in nums) or all(num % 2 != 0 for num in nums):\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    # Find the first even and first odd numbers\n    first_even = next((num for num in nums if num % 2 == 0), None)\n    first_odd = next((num for num in nums if num % 2 != 0), None)\n\n    # Calculate the difference\n    diff = first_even - first_odd\n\n    return diff"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n\n    Args:\n        t (tuple): The tuple to calculate the size of.\n\n    Returns:\n        int: The size in bytes of the given tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n        80\n        >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n        True\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    size = sys.getsizeof(t)\n    for item in t:\n        size += sys.getsizeof(item)\n\n    return size"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted arrays.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n        >>> find_kth([1, 2, 3], [4, 5, 6], 2)\n        3\n        >>> find_kth([1, 2, 3], [4, 5, 6], 7)\n        Traceback (most recent call last):\n            ...\n        ValueError: k is out of range\n    \"\"\"\n\n    # Check if k is within the range of the merged arrays\n    if k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n\n    # Initialize pointers for arr1 and arr2\n    i, j = 0, 0\n\n    # Initialize the merged array\n    merged = []\n\n    # Merge the arrays until the kth element is found\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n        # Check if the kth element is found\n        if len(merged) == k:\n            return merged[-1]\n\n    # Append the remaining elements from arr1 or arr2\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n\n    # Return the kth element\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def is_armstrong_number(number):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Args:\n        number (int): The number to check.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n\n    Examples:\n        >>> is_armstrong_number(153)\n        True\n        >>> is_armstrong_number(123)\n        False\n    \"\"\"\n    # Convert the number to a string to get the number of digits\n    num_str = str(number)\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum of the digits is equal to the original number\n    return sum_of_digits == number\n\n# Test the function\nassert is_armstrong_number(153) == True\nassert is_armstrong_number(123) == False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to sum and average.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_average(10)\n    (55, 5.5)\n    >>> sum_average(0)\n    (0, 0.0)\n    >>> sum_average(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Calculate the sum of the first n natural numbers\n    sum_n = n * (n + 1) // 2\n\n    # Calculate the average of the first n natural numbers\n    average_n = sum_n / n\n\n    return sum_n, average_n"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    \"\"\"\n    Check if a number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n\n    Examples:\n    >>> is_even(2)\n    True\n    >>> is_even(3)\n    False\n    >>> is_even(0)\n    True\n    \"\"\"\n    return num % 2 == 0\n\n# Testing the function\nassert is_even(1) == False\nassert is_even(2) == True\nassert is_even(0) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string, or an empty string if no repeated characters are found.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        ''\n    \"\"\"\n    # Create an empty set to store the characters we have seen so far\n    seen = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it is a repeated character\n        if char in seen:\n            return char\n        # Add the character to the set\n        seen.add(char)\n\n    # If no repeated characters are found, return an empty string\n    return \"\""}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all Lucid numbers smaller than or equal to the given integer.\n\n    A Lucid number is a number that can be expressed as the sum of two distinct Lucid numbers.\n\n    Args:\n        n (int): The upper limit for the Lucid numbers.\n\n    Returns:\n        list: A list of Lucid numbers smaller than or equal to the given integer.\n\n    Examples:\n        >>> get_lucid(10)\n        [1, 2, 3, 5, 7]\n        >>> get_lucid(20)\n        [1, 2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n\n    # Initialize an empty list to store the Lucid numbers\n    lucid_numbers = []\n\n    # Iterate from 1 to the given integer\n    for i in range(1, n + 1):\n        # Check if the current number is a Lucid number\n        if is_lucid(i):\n            # Add the Lucid number to the list\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\n\ndef is_lucid(n):\n    \"\"\"\n    Checks if a number is a Lucid number.\n\n    A Lucid number is a number that can be expressed as the sum of two distinct Lucid numbers.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Lucid number, False otherwise.\n    \"\"\"\n\n    # Initialize a set to store the Lucid numbers found so far\n    lucid_set = set()\n\n    # Iterate from 1 to the given number\n    for i in range(1, n + 1):\n        # Check if the current number is a Lucid number\n        if is_prime(i) and n - i in lucid_set:\n            return True\n\n        # Add the current number to the set of Lucid numbers\n        lucid_set.add(i)\n\n    return False\n\n\ndef is_prime(n):\n    \"\"\"\n    Checks if a number is prime.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is prime, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]\nassert get_lucid(20) == [1, 2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Args:\n        string (str): The input string containing words separated by spaces.\n\n    Returns:\n        str: The string with the words in reverse order.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n        >>> reverse_words(\"hello world\")\n        'world hello'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def is_prime(n):\n    \"\"\"\n    Check if a given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the integer is prime, False otherwise.\n\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Testing the function\nassert is_prime(13) == True\nassert is_prime(15) == False\nassert is_prime(1) == False\nassert is_prime(2) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    TypeError: If the input is not a number.\n\n    Examples:\n    >>> radian_degree(90)\n    1.5707963267948966\n    >>> radian_degree(180)\n    3.141592653589793\n    >>> radian_degree(360)\n    6.283185307179586\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise TypeError(\"Input must be a number.\")\n    return degrees * math.pi / 180\n\n# Testing the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(180) == 3.141592653589793\nassert radian_degree(360) == 6.283185307179586"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not a valid regular expression.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'cat')\n        (None, None, None)\n    \"\"\"\n    try:\n        match = re.search(pattern, string)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None, None, None\n    except re.error:\n        raise ValueError(\"Invalid regular expression pattern\")\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'cat') == (None, None, None)"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number using dynamic programming.\n\n    Parameters:\n    n (int): The index of the Bell number to calculate.\n\n    Returns:\n    int: The nth Bell number.\n\n    \"\"\"\n    # Create a 2D table to store the Bell numbers\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Base case: Bell(0, 0) = 1\n    bell[0][0] = 1\n\n    # Fill the table using dynamic programming\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    # Return the nth Bell number\n    return bell[n][0]\n\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the k'th element from a list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The list with the k'th element removed.\n\n    Raises:\n        IndexError: If the k'th element does not exist in the list.\n\n    Examples:\n        >>> remove_kth_element([1, 2, 3, 4, 5], 2)\n        [1, 2, 4, 5]\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 2, 3, 4, 4, 1]\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 8)\n        Traceback (most recent call last):\n            ...\n        IndexError: list index out of range\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"list index out of range\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix represented as a list of lists.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The index of the column to find the maximum value for.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the nth column does not exist in the matrix.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n        8\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n        Traceback (most recent call last):\n            ...\n        IndexError: nth column does not exist in the matrix\n    \"\"\"\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"nth column does not exist in the matrix\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists, where the first list has the first element of each sublist,\n              and the second list has the second element of each sublist.\n\n    Raises:\n        ValueError: If the input list is not a list of lists, or if any sublist does not have exactly two elements.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q']])\n        [['x', 'a', 'm', 'p'], ['y', 'b', 'n', 'q']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's']])\n        [['x', 'a', 'm', 'p', 'r'], ['y', 'b', 'n', 'q', 's']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u']])\n        [['x', 'a', 'm', 'p', 'r', 't'], ['y', 'b', 'n', 'q', 's', 'u']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w']])\n        [['x', 'a', 'm', 'p', 'r', 't', 'v'], ['y', 'b', 'n', 'q', 's', 'u', 'w']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['x', 'y']])\n        [['x', 'a', 'm', 'p', 'r', 't', 'v', 'x'], ['y', 'b', 'n', 'q', 's', 'u', 'w', 'y']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['x', 'y'], ['a', 'b']])\n        [['x', 'a', 'm', 'p', 'r', 't', 'v', 'x', 'a'], ['y', 'b', 'n', 'q', 's', 'u', 'w', 'y', 'b']]\n\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n'], ['p', 'q'], ['r', 's'], ['t', 'u'], ['v', 'w'], ['x', 'y'], ['a', 'b"}
{"task_id": "Mbpp/614", "solution": "def cumulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        TypeError: If any element in the list is not a tuple.\n\n    Examples:\n        >>> cumulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n        >>> cumulative_sum([(1, 2, 3), (4, 5, 6)])\n        21\n        >>> cumulative_sum([(1, 2), (3, 4), (5, 6)])\n        21\n    \"\"\"\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list.\")\n\n    for element in tuple_list:\n        if not isinstance(element, tuple):\n            raise TypeError(\"All elements in the list must be tuples.\")\n\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n\n    return total_sum"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculates the average value for each tuple in a given tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple of tuples.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    if not isinstance(tuples, tuple):\n        raise TypeError(\"Input must be a tuple of tuples.\")\n\n    averages = []\n    for t in tuples:\n        if not isinstance(t, tuple):\n            raise TypeError(\"Each element in the input must be a tuple.\")\n        if len(t) == 0:\n            raise ValueError(\"Each tuple must have at least one element.\")\n        average = sum(t) / len(t)\n        averages.append(average)\n\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5, 8))\n        Traceback (most recent call last):\n          ...\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result"}
{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        lst1 (list): The first list.\n        lst2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of lst1 and lst2.\n\n    Raises:\n        ValueError: If the length of lst1 and lst2 are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        Traceback (most recent call last):\n            ...\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"The length of lst1 and lst2 must be equal.\")\n\n    result = []\n    for i in range(len(lst1)):\n        try:\n            result.append(lst1[i] / lst2[i])\n        except ZeroDivisionError:\n            raise\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all the numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    num_str = ''\n    char_str = ''\n\n    for char in string:\n        if char.isdigit():\n            num_str += char\n        else:\n            char_str += char\n\n    return char_str + num_str"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([1, 2, 3, 4, 5, 6])\n        3\n        >>> largest_subset([1, 2, 4, 8, 16, 32])\n        6\n    \"\"\"\n\n    # Sort the list in descending order\n    nums.sort(reverse=True)\n\n    # Initialize the size of the largest subset\n    subset_size = 1\n\n    # Iterate through the sorted list\n    for i in range(1, len(nums)):\n        # Check if the current number is divisible by the previous number\n        if nums[i] % nums[i-1] == 0:\n            # If it is, increment the size of the subset\n            subset_size += 1\n\n    return subset_size"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two lists.\n\n    Raises:\n        ValueError: If the size of the lists is not the same.\n\n    Examples:\n        >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n        16.0\n        >>> get_median([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5)\n        5.0\n    \"\"\"\n\n    # Check if the size of the lists is the same\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"The size of the lists must be the same.\")\n\n    # Initialize variables\n    i = 0  # Index for list1\n    j = 0  # Index for list2\n    count = 0  # Count of elements considered\n    median = 0.0\n\n    # Traverse both lists simultaneously\n    while count < n:\n        # If the current element of list1 is smaller than the current element of list2\n        if list1[i] < list2[j]:\n            # Increment the count and update the median\n            count += 1\n            median = list1[i]\n            i += 1\n        else:\n            # Increment the count and update the median\n            count += 1\n            median = list2[j]\n            j += 1\n\n    # If the number of elements considered is even, take the average of the two middle elements\n    if count % 2 == 0:\n        median = (median + list1[i - 1]) / 2\n\n    return median"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number in the input list.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct type.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5], 2)\n        [1, 4, 9, 16, 25]\n        >>> nth_nums([2, 4, 6, 8, 10], 3)\n        [8, 64, 216, 512, 1000]\n    \"\"\"\n\n    # Check if the input arguments are of the correct type\n    if not isinstance(nums, list) or not isinstance(n, int):\n        raise TypeError(\"Input arguments must be of type list and int, respectively.\")\n\n    # Compute the n-th power of each number in the list\n    result = [num ** n for num in nums]\n\n    return result"}
{"task_id": "Mbpp/624", "solution": "def to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The uppercase version of the input string.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> to_uppercase(\"person\")\n        'PERSON'\n        >>> to_uppercase(\"Hello World\")\n        'HELLO WORLD'\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n    return string.upper()\n\n# Testing the function\nassert to_uppercase(\"person\") == \"PERSON\"\nassert to_uppercase(\"Hello World\") == \"HELLO WORLD\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Args:\n        radius (float): The radius of the semicircle.\n\n    Returns:\n        float: The area of the largest triangle.\n\n    Raises:\n        ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    # Calculate the length of the base of the triangle\n    base = radius * 2\n\n    # Calculate the height of the triangle using the Pythagorean theorem\n    height = math.sqrt(radius**2 - (base/2)**2)\n\n    # Calculate the area of the triangle\n    area = (base * height) / 2\n\n    return area\n\n# Test the function\nassert triangle_area(-1) == None"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n\n    Examples:\n        >>> replace_spaces(\"My Name is Dawood\")\n        'My%20Name%20is%20Dawood'\n        >>> replace_spaces(\"Hello World\")\n        'Hello%20World'\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"Hello World\") == 'Hello%20World'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Finds even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> find_even_numbers([1, 3, 5])\n        []\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n\n    return even_numbers"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    \"\"\"\n    Extract all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        coordinate (tuple): The coordinate tuple to extract adjacent coordinates from.\n\n    Returns:\n        list: A list of adjacent coordinates.\n\n    Examples:\n        >>> get_coordinates((3, 4))\n        [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    for i in range(x - 1, x + 2):\n        for j in range(y - 1, y + 2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n        >>> replace_spaces('Hello_World')\n        'Hello World'\n    \"\"\"\n    return string.replace(' ', '_').replace('_', ' ')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('Hello_World') == 'Hello World'"}
{"task_id": "Mbpp/632", "solution": "def move_zeroes(nums):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        list: A new list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zeroes([1, 0, 2, 0, 3, 4])\n        [1, 2, 3, 4, 0, 0]\n        >>> move_zeroes([0, 0, 1, 2, 0, 3])\n        [1, 2, 3, 0, 0, 0]\n        >>> move_zeroes([0, 0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0, 0]\n    \"\"\"\n    # Create a new list to store the non-zero elements\n    non_zero_list = [num for num in nums if num != 0]\n\n    # Create a new list to store the zero elements\n    zero_list = [num for num in nums if num == 0]\n\n    # Combine the non-zero and zero lists\n    result = non_zero_list + zero_list\n\n    return result"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): A list of integers.\n        n (int): The number of elements in the list.\n\n    Returns:\n        int: The sum of XOR of all pairs of numbers in the list.\n\n    Raises:\n        ValueError: If the length of the list is not equal to the given n.\n\n    Examples:\n        >>> pair_xor_Sum([5, 9, 7, 6], 4)\n        47\n        >>> pair_xor_Sum([1, 2, 3], 3)\n        2\n    \"\"\"\n\n    # Check if the length of the list is equal to the given n\n    if len(nums) != n:\n        raise ValueError(\"Length of the list is not equal to the given n.\")\n\n    # Initialize the sum of XOR to 0\n    xor_sum = 0\n\n    # Iterate through each pair of numbers in the list\n    for i in range(n):\n        for j in range(i + 1, n):\n            # Calculate the XOR of the current pair and add it to the sum\n            xor_sum += nums[i] ^ nums[j]\n\n    return xor_sum"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    # Build the max heap\n    heapify(arr)\n\n    # Extract elements from the heap one by one\n    for i in range(len(arr) - 1, 0, -1):\n        # Swap the root (maximum element) with the last element\n        arr[0], arr[i] = arr[i], arr[0]\n\n        # Heapify the reduced heap\n        heapify(arr, i, 0)\n\n    return arr\n\n\ndef heapify(arr, n=None, i=0):\n    \"\"\"\n    Builds a max heap from the given list.\n\n    Parameters:\n    arr (list): The list to be heapified.\n    n (int): The size of the heap.\n    i (int): The index of the current node.\n\n    \"\"\"\n\n    if n is None:\n        n = len(arr)\n\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    # If left child is larger than the root\n    if left < n and arr[i] < arr[left]:\n        largest = left\n\n    # If right child is larger than the largest so far\n    if right < n and arr[largest] < arr[right]:\n        largest = right\n\n    # If the largest is not the root\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n\n        # Recursively heapify the affected sub-tree\n        heapify(arr, n, largest)\n\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        buy_price (float): The price at which the stock was bought.\n        sell_price (float): The price at which the stock was sold.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n\n    Examples:\n        >>> noprofit_noloss(1500, 1200)\n        False\n        >>> noprofit_noloss(1200, 1500)\n        True\n    \"\"\"\n    return buy_price == sell_price\n\n# Testing the function\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(1200, 1500) == True"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): The wind velocity in km/h.\n        temperature (float): The temperature in celsius.\n\n    Returns:\n        int: The wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is less than 0 or the temperature is less than -273.15.\n\n    Formula:\n        Wind Chill Index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity ** 0.16 + 0.3965 * temperature * wind_velocity ** 0.16\n\n    Example:\n        >>> wind_chill(120, 35)\n        40\n    \"\"\"\n\n    if wind_velocity < 0:\n        raise ValueError(\"Wind velocity must be greater than or equal to 0.\")\n    if temperature < -273.15:\n        raise ValueError(\"Temperature must be greater than or equal to -273.15.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * wind_velocity ** 0.16 + 0.3965 * temperature * wind_velocity ** 0.16\n    return round(wind_chill_index)"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of strings representing the names.\n\n    Returns:\n        int: The sum of the lengths of the remaining names.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n        >>> sum_name_lengths(['John', 'Jane', 'Bob'])\n        10\n    \"\"\"\n    if not isinstance(names, list):\n        raise TypeError(\"Input must be a list of strings.\")\n\n    # Remove names that start with a lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculate the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to be calculated.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    21\n    >>> is_nonagonal(4)\n    32\n    >>> is_nonagonal(5)\n    45\n    >>> is_nonagonal(6)\n    59\n    >>> is_nonagonal(7)\n    75\n    >>> is_nonagonal(8)\n    93\n    >>> is_nonagonal(9)\n    113\n    >>> is_nonagonal(10)\n    135\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    return n * (3 * n - 2)\n\n\n# Testing the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 11\nassert is_nonagonal(3) == 21\nassert is_nonagonal(4) == 32\nassert is_nonagonal(5) == 45\nassert is_nonagonal(6) == 59\nassert is_nonagonal(7) == 75\nassert is_nonagonal(8) == 93\nassert is_nonagonal(9) == 113\nassert is_nonagonal(10) == 135"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n\n    Examples:\n        >>> text_match_wordz_middle(\"pythonzabc.\")\n        True\n        >>> text_match_wordz_middle(\"pythonzabc\")\n        False\n        >>> text_match_wordz_middle(\"pythonz\")\n        False\n    \"\"\"\n    # Split the string into words\n    words = text.split()\n\n    # Iterate over each word\n    for word in words:\n        # Check if the word starts with 'z' or ends with 'z'\n        if word.startswith('z') or word.endswith('z'):\n            return False\n\n        # Check if the word contains 'z' except at the start and end\n        if 'z' in word[1:-1]:\n            return True\n\n    # If no 'z' is found in the middle of a word, return False\n    return False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array upto the given position.\n\n    Raises:\n    ValueError: If the given position is out of range.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6)\n    [6, 5, 4, 3, 2, 1]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0)\n    [1, 2, 3, 4, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 7)\n    Traceback (most recent call last):\n        ...\n    ValueError: Position is out of range.\n    \"\"\"\n\n    # Check if the given position is within the range of the array\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"Position is out of range.\")\n\n    # Reverse the array upto the given position\n    arr[:k+1] = arr[:k+1][::-1]\n\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        dictionary (dict): The dictionary to be added to the tuple.\n\n    Returns:\n        tuple: The resulting tuple with the dictionary added.\n\n    Raises:\n        TypeError: If the input is not a tuple or a dictionary.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3})\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary\")\n\n    return tup + (dictionary,)\n\n# Testing the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def max_average_of_path(matrix):\n    \"\"\"\n    Calculates the maximum average of a path in a square matrix.\n\n    Args:\n        matrix (list of lists): The square matrix of size N*N, where each cell is associated with a specific cost.\n\n    Returns:\n        float: The maximum average of a path in the matrix.\n\n    Raises:\n        ValueError: If the input matrix is not square or empty.\n\n    Example:\n        >>> max_average_of_path([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n    \"\"\"\n\n    # Check if the matrix is empty or not\n    if not matrix or not matrix[0]:\n        raise ValueError(\"Input matrix is empty or not square\")\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Initialize the dp matrix with the same size as the input matrix\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the first row and first column of the dp matrix\n    dp[0][0] = matrix[0][0]\n    for i in range(1, n):\n        dp[0][i] = dp[0][i - 1] + matrix[0][i]\n        dp[i][0] = dp[i - 1][0] + matrix[i][0]\n\n    # Fill the remaining cells of the dp matrix\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    # Calculate the maximum average of a path\n    max_average = dp[n - 1][n - 1] / (n * n)\n\n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    \"\"\"\n    Filters students based on their height and weight.\n\n    Args:\n        student_data (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required for a student to be included.\n        min_weight (float): The minimum weight required for a student to be included.\n\n    Returns:\n        dict: A new dictionary containing only the students with height and weight above the minimum.\n\n    Example:\n        >>> student_data = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\n        >>> min_height = 6.0\n        >>> min_weight = 70\n        >>> filter_data(student_data, min_height, min_weight)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    filtered_students = {}\n    for student, (height, weight) in student_data.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the values in two lists are the same.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        int: The number of indices where the values in the lists are the same.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])\n        4\n        >>> count_same_pair([1, 2, 3], [4, 5, 6])\n        0\n    \"\"\"\n\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to which the base is raised.\n\n    Returns:\n        int: The sum of all digits of the base to the specified power.\n\n    Raises:\n        ValueError: If the base or power is negative.\n\n    Examples:\n        >>> power_base_sum(2, 100)\n        115\n        >>> power_base_sum(3, 4)\n        81\n    \"\"\"\n\n    if base < 0 or power < 0:\n        raise ValueError(\"Base and power must be non-negative integers.\")\n\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n\n    return digit_sum"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings containing the values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        if end_index != -1:\n            value = string[start_index + 1:end_index]\n            values.append(value)\n            start_index = string.find('\"', end_index + 1)\n        else:\n            break\n    return values"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    Function to multiply adjacent elements in a tuple.\n\n    Parameters:\n    t (tuple): Input tuple of numbers.\n\n    Returns:\n    tuple: Tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Raises:\n    ValueError: If the input tuple has less than 2 elements.\n\n    Examples:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    >>> multiply_elements((1, 2, 3))\n    (2, 6)\n    >>> multiply_elements((1,))\n    Traceback (most recent call last):\n        ...\n    ValueError: Input tuple must have at least 2 elements.\n    \"\"\"\n    if len(t) < 2:\n        raise ValueError(\"Input tuple must have at least 2 elements.\")\n\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n\n    return tuple(result)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the sum of corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list with the sum of corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n        >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n\n    # Check if the input lists have the same length\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    # Create a new list to store the sum of corresponding elements\n    result = []\n\n    # Iterate over the elements of the input lists\n    for i in range(len(list1)):\n        # Add the corresponding elements and append the sum to the result list\n        result.append(list1[i] + list2[i])\n\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    prev = None\n    for item in lst:\n        if item != prev:\n            result.append(item)\n        prev = item\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateral_surface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either r or h is negative.\n\n    Examples:\n    >>> lateral_surface_cone(5, 12)\n    204.20352248333654\n    >>> lateral_surface_cone(0, 10)\n    0.0\n    >>> lateral_surface_cone(10, 0)\n    0.0\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    lateral_area = math.pi * r * slant_height\n\n    return lateral_area"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all spaces, commas, and dots replaced with colons.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n        >>> replace_specialchar('Hello, world.')\n        'Hello::world:'\n    \"\"\"\n    # Replace spaces, commas, and dots with colons\n    modified_string = string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_string\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\nassert replace_specialchar('Hello, world.') == 'Hello::world:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target: The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n\n    Raises:\n        ValueError: If the target number is not found in the array.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9)\n        7\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        Traceback (most recent call last):\n            ...\n        ValueError: Target number not found in the array.\n    \"\"\"\n\n    # Perform binary search to find the first occurrence of the target number\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            # Check if the current element is the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                # Move to the left half of the array\n                right = mid - 1\n        elif arr[mid] < target:\n            # Move to the right half of the array\n            left = mid + 1\n        else:\n            # Move to the left half of the array\n            right = mid - 1\n\n    # If the target number is not found, raise a ValueError\n    raise ValueError(\"Target number not found in the array.\")\n\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 4\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9) == 7\n\ntry:\n    find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n    assert False, \"Expected ValueError was not raised\"\nexcept ValueError:\n    pass"}
{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_of_subarray_prod([1, 2, 3])\n        20\n        >>> sum_of_subarray_prod([1, 2, 3, 4])\n        50\n        >>> sum_of_subarray_prod([1, 2, 3, 4, 5])\n        130\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n\n    # Iterate through each element in the list\n    for i in range(n):\n        # Calculate the product of all elements from the current element to the end\n        prod = 1\n        for j in range(i, n):\n            prod *= lst[j]\n\n        # Add the product to the total sum\n        total_sum += prod\n\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number to toggle bits.\n\n    Returns:\n        int: The number with toggled bits.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(15)\n        9\n        >>> toggle_middle_bits(0)\n        0\n        >>> toggle_middle_bits(1)\n        1\n    \"\"\"\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Find the number of bits in the number\n    num_bits = num.bit_length()\n\n    # Create a mask to toggle all bits except the first and the last bit\n    mask = (1 << (num_bits - 1)) - 1\n\n    # Toggle the bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    Examples:\n    >>> left_insertion([1, 2, 4, 5], 6)\n    4\n    >>> left_insertion([1, 2, 4, 5], 3)\n    2\n    >>> left_insertion([1, 2, 4, 5], 1)\n    0\n    \"\"\"\n    # Initialize the left and right indices\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the value is less than or equal to the middle element,\n        # move the right index to the left\n        if value <= arr[mid]:\n            right = mid - 1\n        # If the value is greater than the middle element,\n        # move the left index to the right\n        else:\n            left = mid + 1\n\n    # Return the left index as the left insertion point\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regular expressions.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n\n    Examples:\n        >>> check_str(\"annie\")\n        True\n        >>> check_str(\"bob\")\n        False\n        >>> check_str(\"apple\")\n        True\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Testing the function\nassert check_str(\"annie\")\nassert not check_str(\"bob\")\nassert check_str(\"apple\")"}
{"task_id": "Mbpp/739", "solution": "def find_index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> find_index(2)\n    4\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Initialize variables\n    index = 1\n    triangular_number = 1\n\n    # Generate triangular numbers until the number of digits is equal to n\n    while len(str(triangular_number)) < n:\n        index += 1\n        triangular_number += index\n\n    return index"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the length of the tuple is not even.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n        >>> tuple_to_dict((1, 5, 7, 10, 13))\n        ValueError: The length of the tuple must be even.\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"The length of the tuple must be even.\")\n\n    result = {}\n    for i in range(0, len(tup), 2):\n        result[tup[i]] = tup[i + 1]\n\n    return result"}
{"task_id": "Mbpp/741", "solution": "def all_characters_same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n\n    Examples:\n        >>> all_characters_same(\"python\")\n        False\n        >>> all_characters_same(\"aaaaaa\")\n        True\n    \"\"\"\n    # Convert the string to a set to remove duplicates\n    unique_chars = set(string)\n\n    # If the set has only one element, all characters are the same\n    return len(unique_chars) == 1\n\n# Test the function\nassert all_characters_same(\"python\") == False\nassert all_characters_same(\"aaaaaa\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the edge_length is not a positive number.\n\n    \"\"\"\n    if edge_length <= 0:\n        raise ValueError(\"Edge length must be a positive number.\")\n\n    # Calculate the area of a tetrahedron using Heron's formula\n    area = math.sqrt(3) * edge_length ** 2\n\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the number of items to rotate is greater than the length of the list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 11)\n        Traceback (most recent call last):\n            ...\n        ValueError: Number of items to rotate cannot be greater than the length of the list.\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Check if the number of items to rotate is greater than the length of the list\n    if num_items > len(lst):\n        raise ValueError(\"Number of items to rotate cannot be greater than the length of the list.\")\n\n    # Rotate the list by slicing and concatenating\n    rotated_lst = lst[-num_items:] + lst[:-num_items]\n\n    return rotated_lst"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tup (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n\n    Examples:\n        >>> check_none((10, 4, 5, 6, None))\n        True\n        >>> check_none((10, 4, 5, 6, 7))\n        False\n    \"\"\"\n    return any(value is None for value in tup)\n\n\n# Testing the function\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        list: A list of numbers within the range that are divisible by every digit they contain.\n\n    Raises:\n        ValueError: If startnum is greater than endnum.\n\n    Examples:\n        >>> divisible_by_digits(1, 22)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n        >>> divisible_by_digits(10, 100)\n        [12, 15, 24, 30, 36, 45, 54, 60, 63, 72, 80, 81, 84, 90, 99]\n    \"\"\"\n\n    # Check if startnum is greater than endnum\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n\n    # Initialize an empty list to store the numbers that meet the criteria\n    result = []\n\n    # Iterate through each number in the range\n    for num in range(startnum, endnum + 1):\n        # Convert the number to a string to access its digits\n        num_str = str(num)\n\n        # Check if every digit is divisible by the number\n        if all(int(digit) != 0 and num % int(digit) == 0 for digit in num_str):\n            result.append(num)\n\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonProgramming\")\n        'Python Programming'\n        >>> capital_words_spaces(\"PythonProgrammingLanguage\")\n        'Python Programming Language'\n    \"\"\"\n    # Split the string into words\n    words = string.split()\n\n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # Insert a space before the word\n            words[i] = \" \" + words[i]\n\n    # Join the modified words back into a string\n    modified_string = \"\".join(words)\n\n    return modified_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings of numbers.\n\n    Returns:\n        list: A new list of strings sorted numerically.\n\n    Raises:\n        ValueError: If the input list contains non-numeric strings.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n        >>> sort_numeric_strings(['abc', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list contains non-numeric strings.\n    \"\"\"\n    try:\n        # Convert the strings to integers and sort the list\n        sorted_lst = sorted(int(num) for num in lst)\n        return sorted_lst\n    except ValueError:\n        raise ValueError(\"Input list contains non-numeric strings.\")\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Raises:\n        TypeError: If the input arguments are not of the correct types.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n        >>> add_tuple([], (1, 2, 3))\n        [1, 2, 3]\n        >>> add_tuple([1, 2, 3], ())\n        [1, 2, 3]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"lst must be a list\")\n    if not isinstance(tup, tuple):\n        raise TypeError(\"tup must be a tuple\")\n\n    lst.extend(tup)\n    return lst"}
{"task_id": "Mbpp/751", "solution": "def is_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n\n    \"\"\"\n    n = len(arr)\n\n    # Check if the array is empty or has only one element\n    if n == 0 or n == 1:\n        return True\n\n    # Check if the array satisfies the min heap property\n    for i in range(1, n):\n        parent_index = (i - 1) // 2\n        if arr[i] < arr[parent_index]:\n            return False\n\n    return True\n\n\n# Test the function\nassert is_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert is_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert is_min_heap([5, 4, 3, 2, 1]) == True\nassert is_min_heap([1, 2, 3, 4, 5]) == True\nassert is_min_heap([5, 4, 3, 2, 1]) == False\nassert is_min_heap([]) == True\nassert is_min_heap([1]) == True"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculates the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The position of the Jacobsthal number to be calculated.\n\n    Returns:\n    int: The nth Jacobsthal number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> jacobsthal_num(0)\n    0\n    >>> jacobsthal_num(1)\n    1\n    >>> jacobsthal_num(5)\n    11\n    >>> jacobsthal_num(10)\n    127\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n - 1) + 1\n\n\n# Testing the function\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(10) == 127"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples, where each tuple contains a name and a value.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of tuples representing the minimum k records.\n\n    Raises:\n        ValueError: If the number of records is less than k.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4)\n        [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5)\n        Traceback (most recent call last):\n            ...\n        ValueError: Number of records is less than k.\n    \"\"\"\n\n    if len(records) < k:\n        raise ValueError(\"Number of records is less than k.\")\n\n    # Sort the records based on the values in descending order\n    sorted_records = sorted(records, key=lambda x: x[1], reverse=True)\n\n    # Return the first k records\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Extracts common elements from three lists.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n        l3 (list): The third list.\n\n    Returns:\n        list: A list of common elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n        [1, 7]\n        >>> extract_index_list([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        []\n    \"\"\"\n\n    # Check if the input lists have the same length\n    if len(l1) != len(l2) or len(l2) != len(l3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    # Initialize an empty list to store the common elements\n    common_elements = []\n\n    # Iterate over the indices of the input lists\n    for i in range(len(l1)):\n        # Check if the element at the current index is common for all three lists\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(nums):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1, 1, 1, 1])\n        ValueError: List must have at least two distinct numbers.\n    \"\"\"\n\n    # Check if the list has at least two distinct numbers\n    if len(set(nums)) < 2:\n        raise ValueError(\"List must have at least two distinct numbers.\")\n\n    # Find the smallest and second smallest numbers\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for num in nums:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        int: The number of pairs of reverse strings.\n\n    Examples:\n        >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n        2\n        >>> count_reverse_pairs([\"abc\", \"def\", \"ghi\", \"jkl\"])\n        0\n        >>> count_reverse_pairs([\"abc\", \"cba\", \"def\", \"fed\"])\n        2\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in a given list.\n\n    Args:\n        lst (list): The input list containing sublists.\n\n    Returns:\n        dict: A dictionary where the keys are tuples representing unique sublists,\n              and the values are the number of occurrences of each sublist.\n\n    Example:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    sublist_counts = {}\n\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n\n    return sublist_counts"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n\n    Examples:\n        >>> is_decimal('123.11')\n        True\n        >>> is_decimal('123.111')\n        False\n        >>> is_decimal('123')\n        True\n        >>> is_decimal('123.')\n        False\n        >>> is_decimal('123.1')\n        True\n        >>> is_decimal('123.111')\n        False\n    \"\"\"\n    try:\n        # Convert the string to a float\n        float_value = float(string)\n\n        # Check if the float value has a precision of 2\n        if abs(float_value - round(float_value, 2)) < 1e-2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n# Test the function\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == False\nassert is_decimal('123.1') == True\nassert is_decimal('123.111') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_element(nums):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n\n    Examples:\n        >>> unique_element([1, 2, 3, 4, 5])\n        True\n        >>> unique_element([1, 1, 1, 1, 1])\n        False\n        >>> unique_element([])\n        True\n    \"\"\"\n    # Check if the list is empty\n    if len(nums) == 0:\n        return True\n\n    # Check if the list contains only one element\n    if len(set(nums)) == 1:\n        return True\n\n    return False"}
{"task_id": "Mbpp/762", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check if the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to check.\n\n    Returns:\n        bool: True if the month number contains 30 days, False otherwise.\n\n    Raises:\n        ValueError: If the month number is not between 1 and 12.\n\n    Examples:\n        >>> check_month_number(6)\n        True\n        >>> check_month_number(12)\n        False\n        >>> check_month_number(13)\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid month number.\n    \"\"\"\n    if month_number < 1 or month_number > 12:\n        raise ValueError(\"Invalid month number.\")\n\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than two elements.\n\n    Example:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least two elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference as infinity\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]  # Calculate the difference between adjacent elements\n        min_diff = min(min_diff, diff)  # Update the minimum difference if necessary\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def count_digits(string):\n    \"\"\"\n    Count the number of digits in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n\n    Examples:\n        >>> count_digits('program2bedone')\n        1\n        >>> count_digits('12345')\n        5\n        >>> count_digits('abcdefg')\n        0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Testing the function\nassert count_digits('program2bedone') == 1\nassert count_digits('12345') == 5\nassert count_digits('abcdefg') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n\n    A polite number is a number that is divisible by the sum of its digits.\n\n    Args:\n        n (int): The position of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> is_polite(7)\n        11\n        >>> is_polite(10)\n        12\n        >>> is_polite(15)\n        18\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    polite_numbers = []\n    i = 1\n    while len(polite_numbers) < n:\n        if i % sum(int(digit) for digit in str(i)) == 0:\n            polite_numbers.append(i)\n        i += 1\n\n    return polite_numbers[n - 1]"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of tuples, where each tuple contains two consecutive items from the input list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n        >>> pair_wise([])\n        []\n        >>> pair_wise([1])\n        []\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n\n    return pairs"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    Count the number of pairs in a list whose sum is equal to a given target sum.\n\n    Args:\n        nums (list): A list of integers.\n        target_sum (int): The target sum for which pairs need to be counted.\n\n    Returns:\n        int: The count of pairs whose sum is equal to the target sum.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 2, 3, 4, 5], 5)\n        2\n        >>> get_pairs_count([1, 2, 3, 4, 5], 10)\n        0\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def get_difference(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the elements that are present in list1 but not in list2.\n\n    Example:\n    >>> get_difference([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n\n# Testing the function\nassert get_difference([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> odd_num_sum(2)\n        82\n        >>> odd_num_sum(3)\n        202\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the sum of the fourth power of the first n odd natural numbers\n    sum_of_fourth_powers = sum(i ** 4 for i in range(1, 2 * n, 2))\n\n    return sum_of_fourth_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n\n    Examples:\n        >>> check_expression(\"{()}[{}]\")\n        True\n        >>> check_expression(\"{()}[{]\")\n        False\n        >>> check_expression(\"{()}[{}]\")\n        True\n    \"\"\"\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            if opening_brackets.index(stack[-1]) == closing_brackets.index(char):\n                stack.pop()\n            else:\n                return False\n\n    return not stack"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n    \"\"\"\n    words = string.split()\n    modified_words = [word for word in words if len(word) != k]\n    modified_string = ' '.join(modified_words)\n    return modified_string"}
{"task_id": "Mbpp/773", "solution": "def find_occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, the starting index, and the ending index of the first occurrence.\n              If no match is found, returns None.\n\n    Examples:\n        >>> find_occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> find_occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    start_index = string.find(substring)\n    if start_index == -1:\n        return None\n    end_index = start_index + len(substring)\n    return substring, start_index, end_index"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n\n    Examples:\n        >>> odd_position([2,1,4,3,6,7,6,3])\n        True\n        >>> odd_position([2,1,4,3,6,7,6,3,2])\n        False\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): A list of integers.\n\n    Returns:\n        int: The sum of non-repeated elements in the list.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n        >>> find_sum([1, 1, 1, 1, 1, 1, 1, 1])\n        1\n        >>> find_sum([])\n        0\n    \"\"\"\n    # Create a set to store the unique elements\n    unique_set = set()\n\n    # Initialize the sum variable\n    sum_of_non_repeated = 0\n\n    # Iterate over each element in the list\n    for num in lst:\n        # If the element is not already in the set, add it to the set and add it to the sum\n        if num not in unique_set:\n            unique_set.add(num)\n            sum_of_non_repeated += num\n\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            # If the current element is different from the previous element,\n            # or if it's the first element, start a new sublist.\n            current_sublist = [lst[i]]\n            result.append(current_sublist)\n        else:\n            # If the current element is the same as the previous element,\n            # append it to the current sublist.\n            current_sublist.append(lst[i])\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds all possible combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Example:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n\n    Examples:\n    >>> count_divisors(10)\n    True\n    >>> count_divisors(15)\n    False\n    >>> count_divisors(25)\n    True\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Testing the function\nassert count_divisors(10)\nassert not count_divisors(15)\nassert count_divisors(25)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd length subarrays in a given list.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n        >>> odd_length_sum([1, 2, 4, 5, 6])\n        32\n        >>> odd_length_sum([1, 2, 4, 5, 6, 7])\n        40\n    \"\"\"\n    n = len(arr)\n    total_sum = 0\n\n    # Iterate through each element in the list\n    for i in range(n):\n        # Calculate the number of subarrays that can be formed with the current element\n        num_subarrays = (i + 1) * (n - i)\n\n        # Calculate the sum of all subarrays with the current element\n        subarray_sum = (num_subarrays // 2) * arr[i]\n\n        # Add the subarray sum to the total sum\n        total_sum += subarray_sum\n\n    return total_sum"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    \"\"\"\n    Find the product of the first even and odd numbers in a given list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The product of the first even and odd numbers in the list.\n\n    Raises:\n        ValueError: If the list does not contain at least one even and one odd number.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list does not contain at least one even and one odd number.\n    \"\"\"\n\n    # Initialize variables to store the first even and odd numbers\n    first_even = None\n    first_odd = None\n\n    # Iterate over the list\n    for num in lst:\n        # Check if the number is even\n        if num % 2 == 0:\n            # If the first even number is not set, set it to the current number\n            if first_even is None:\n                first_even = num\n            # If the first even number is already set, break the loop\n            else:\n                break\n        # Check if the number is odd\n        else:\n            # If the first odd number is not set, set it to the current number\n            if first_odd is None:\n                first_odd = num\n            # If the first odd number is already set, break the loop\n            else:\n                break\n\n    # Check if both even and odd numbers are found\n    if first_even is not None and first_odd is not None:\n        # Return the product of the first even and odd numbers\n        return first_even * first_odd\n    else:\n        # Raise a ValueError if either the even or odd number is not found\n        raise ValueError(\"The list does not contain at least one even and one odd number.\")\n\n# Test the function\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([1, 3, 5, 7]) == 15"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple, e.g., \"(7, 8, 9)\".\n\n    Returns:\n        tuple: An integer tuple representation of the input string.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4)\")\n        (1, 2, 3, 4)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5)\")\n        (1, 2, 3, 4, 5)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6)\")\n        (1, 2, 3, 4, 5, 6)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7)\")\n        (1, 2, 3, 4, 5, 6, 7)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8)\")\n        (1, 2, 3, 4, 5, 6, 7, 8)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9)\")\n        (1, 2, 3, 4, 5, 6, 7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\")\n        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\")\n        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\")\n        (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)\")\n        (1, 2, 3, 4, 5, 6, "}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index of the right insertion point.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Check if a string has an 'a' followed by three 'b's.\n\n    Args:\n        text (str): The string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n\n    Examples:\n        >>> text_match_three(\"abbb\")\n        True\n        >>> text_match_three(\"ac\")\n        False\n        >>> text_match_three(\"abbbb\")\n        True\n        >>> text_match_three(\"abbbbb\")\n        False\n    \"\"\"\n    pattern = r'a(b{3})'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Testing the function\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): A list of strings.\n        str (str): A string.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst) + (str,)\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n\n    Examples:\n        >>> even_position([3,2,1])\n        False\n        >>> even_position([2,4,6,8])\n        True\n        >>> even_position([2,4,6,8,10])\n        False\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n        >>> remove_nested((1, 5, 7, (4, 6), (10, 11)))\n        (1, 5, 7, (10, 11))\n    \"\"\"\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/792", "solution": "def count_lists(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list.\n\n    Examples:\n        >>> count_lists([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n        >>> count_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        3\n        >>> count_lists([[1], [2], [3], [4], [5]])\n        5\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array, or -1 if the element is not found.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 3)\n    2\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the element is found, update the left pointer to search for the last position\n        if arr[mid] == target:\n            left = mid + 1\n        # If the element is less than the middle element, search the left half\n        elif arr[mid] < target:\n            left = mid + 1\n        # If the element is greater than the middle element, search the right half\n        else:\n            right = mid - 1\n\n    # If the element is not found, return -1\n    if left == 0:\n        return -1\n\n    # Return the last position of the element\n    return left - 1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Check if a string has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n\n    Examples:\n        >>> text_starta_endb(\"aabbbb\")\n        True\n        >>> text_starta_endb(\"abbbb\")\n        False\n        >>> text_starta_endb(\"aabbb\")\n        True\n        >>> text_starta_endb(\"abbb\")\n        False\n    \"\"\"\n    pattern = r\"^a.*b$\"\n    return bool(re.match(pattern, text))\n\n# Testing the function\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"abbbb\")\nassert text_starta_endb(\"aabbb\")\nassert not text_starta_endb(\"abbb\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculates the sum of all values in a dictionary.\n\n    Args:\n        dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n        int: The sum of all values in the dictionary.\n\n    Raises:\n        TypeError: If the input is not a dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b': 200, 'c': 300})\n        600\n        >>> return_sum({'x': 1, 'y': 2, 'z': 3})\n        6\n        >>> return_sum({})\n        0\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    return sum(dictionary.values())\n\n\n# Testing the function\nassert return_sum({'a': 100, 'b': 200, 'c': 300}) == 600\nassert return_sum({'x': 1, 'y': 2, 'z': 3}) == 6\nassert return_sum({}) == 0"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the given range.\n\n    Args:\n        l (int): The lower bound of the range (inclusive).\n        r (int): The upper bound of the range (inclusive).\n\n    Returns:\n        int: The sum of all odd natural numbers within the given range.\n\n    Raises:\n        ValueError: If l is greater than r.\n\n    Examples:\n        >>> sum_in_range(2, 5)\n        8\n        >>> sum_in_range(1, 10)\n        25\n        >>> sum_in_range(10, 1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Lower bound must be less than or equal to upper bound.\n    \"\"\"\n\n    if l > r:\n        raise ValueError(\"Lower bound must be less than or equal to upper bound.\")\n\n    odd_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculates the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([4, 5, 6])\n    15\n    \"\"\"\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list.\")\n\n    total = 0\n    for num in arr:\n        total += num\n\n    return total\n\n# Testing the function\nassert _sum([1, 2, 3]) == 6\nassert _sum([4, 5, 6]) == 15"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a given number to the left by a given number of positions.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of positions to rotate the bits.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number of positions to rotate is greater than 32.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(16, 4)\n        64\n        >>> left_rotate(16, 8)\n        16\n    \"\"\"\n    if d > 32:\n        raise ValueError(\"Number of positions to rotate cannot be greater than 32.\")\n\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n\n    Examples:\n        >>> remove_all_spaces('python  program')\n        'pythonprogram'\n        >>> remove_all_spaces('pythonprogram')\n        'pythonprogram'\n        >>> remove_all_spaces('pythonprogram')\n        'pythonprogram'\n    \"\"\"\n    return string.replace(' ', '')\n\n# Testing the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('pythonprogram') == 'pythonprogram'\nassert remove_all_spaces('pythonprogram') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(n):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    A perfect square is a number that can be expressed as the product of two equal integers.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n\n    Examples:\n        >>> is_perfect_square(16)\n        True\n        >>> is_perfect_square(10)\n        False\n    \"\"\"\n    if n < 0:\n        return False\n\n    # Check if the square root of n is an integer\n    sqrt_n = int(n ** 0.5)\n    return sqrt_n ** 2 == n\n\n# Test the function\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> is_product_even([1, 2, 3])\n        False\n        >>> is_product_even([2, 4, 6])\n        True\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product % 2 == 0\n\n\n# Testing the function\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists of integers.\n\n    Returns:\n        list: The list in the list of lists with the highest sum of elements.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n        [10, 11, 12]\n        >>> max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [7, 8, 9]\n        >>> max_sum_list([[1, 2, 3], [4, 5, 6]])\n        [1, 2, 3]\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n        >>> max_run_uppercase('ABCDEFG')\n        7\n        >>> max_run_uppercase('abcdefg')\n        0\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains only even numbers.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        ValueError: The list must contain at least one odd number.\n    \"\"\"\n\n    # Check if the list is empty or contains only even numbers\n    if not numbers or all(num % 2 == 0 for num in numbers):\n        raise ValueError(\"The list must contain at least one odd number.\")\n\n    # Find the first odd number in the list\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n\n# Test the function\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == 3"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tup (tuple): The input tuple.\n        k: The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n\n    Examples:\n        >>> check_K((10, 4, 5, 6, 8), 6)\n        True\n        >>> check_K((10, 4, 5, 6, 8), 7)\n        False\n    \"\"\"\n    return k in tup\n\n# Testing the function\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((10, 4, 5, 6, 8), 7) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of the second tuple is smaller than its corresponding element in the first tuple,\n              False otherwise.\n\n    Raises:\n        TypeError: If either tuple1 or tuple2 is not a tuple.\n        ValueError: If the length of tuple1 and tuple2 are not equal.\n\n    Examples:\n        >>> check_smaller((1, 2, 3), (2, 3, 4))\n        False\n        >>> check_smaller((1, 2, 3), (0, 1, 2))\n        True\n        >>> check_smaller((1, 2, 3), (1, 2, 3))\n        True\n    \"\"\"\n\n    # Check if tuple1 and tuple2 are tuples\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both tuple1 and tuple2 must be tuples.\")\n\n    # Check if the length of tuple1 and tuple2 are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The length of tuple1 and tuple2 must be equal.\")\n\n    # Check if each element of tuple2 is smaller than its corresponding element in tuple1\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n\n    return True"}
