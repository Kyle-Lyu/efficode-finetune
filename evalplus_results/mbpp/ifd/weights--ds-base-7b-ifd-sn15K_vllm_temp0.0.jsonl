{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        set: A set containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        {4, 5}\n        >>> similar_elements((1, 2, 3), (4, 5, 6))\n        set()\n    \"\"\"\n    return set(list1).intersection(list2)\n\n# Testing the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))\nassert set(similar_elements((1, 2, 3), (4, 5, 6))) == set()"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if n < 2:\n        return True\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n\n    return False\n\n# Testing the function\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers, in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n        >>> heap_queue_largest([1, 2, 3, 4, 5], 5)\n        [5, 4, 3, 2, 1]\n        >>> heap_queue_largest([10, 20, 30, 40, 50], 1)\n        [50]\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n cannot be greater than the length of the numbers list.\")\n\n    # Create a min-heap using heapq module\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Return the n largest integers in descending order\n    return sorted(heap, reverse=True)"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position, False otherwise.\n    \"\"\"\n    # XOR the two numbers to get the bit difference\n    bit_difference = num1 ^ num2\n\n    # Count the number of set bits in the bit difference\n    set_bit_count = bin(bit_difference).count('1')\n\n    # If the count is 1, the numbers differ at one bit position\n    return set_bit_count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(10, 10) == False\nassert differ_At_One_Bit_Pos(7, 15) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words that are at least 4 characters long in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Testing the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the squares of each number in the input list.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([-1, -2, -3, -4, -5])\n        [1, 4, 9, 16, 25]\n        >>> square_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Testing the function\nassert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\nassert square_nums([-1, -2, -3, -4, -5]) == [1, 4, 9, 16, 25]\nassert square_nums([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"}
{"task_id": "Mbpp/9", "solution": "def find_rotations(string):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> find_rotations(\"aaaa\")\n        1\n        >>> find_rotations(\"abcde\")\n        5\n        >>> find_rotations(\"\")\n        0\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string\")\n\n    if len(string) == 0:\n        return 0\n\n    rotations = 1\n    while string != string[1:] + string[0]:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from a string.\n\n    Args:\n        string (str): The input string from which the character needs to be removed.\n        char (str): The character to be removed from the string.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n        ValueError: If the character is not found in the string.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"python\", \"o\")\n        'python'\n        >>> remove_Occ(\"hello\", \"x\")\n        Traceback (most recent call last):\n        ...\n        ValueError: Character not found in the string.\n    \"\"\"\n    # Find the first and last occurrence of the character\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    # If the character is not found, raise a ValueError\n    if first_index == -1:\n        raise ValueError(\"Character not found in the string.\")\n\n    # Remove the first occurrence of the character\n    string = string[:first_index] + string[first_index+1:]\n\n    # Remove the last occurrence of the character\n    string = string[:last_index] + string[last_index+1:]\n\n    return string"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): A 2D matrix represented as a list of lists.\n\n    Returns:\n        list: The sorted matrix.\n\n    Raises:\n        TypeError: If the input is not a 2D matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Check if the input is a 2D matrix\n    if not all(isinstance(row, list) for row in matrix) or not all(isinstance(element, (int, float)) for row in matrix for element in row):\n        raise TypeError(\"Input must be a 2D matrix of numbers\")\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative or zero.\n\n    Examples:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    >>> find_Volume(0, 8, 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base length cannot be zero or negative.\n    \"\"\"\n\n    if base <= 0:\n        raise ValueError(\"Base length cannot be zero or negative.\")\n    if height <= 0:\n        raise ValueError(\"Height cannot be zero or negative.\")\n    if length <= 0:\n        raise ValueError(\"Length cannot be zero or negative.\")\n\n    volume = (base * height * length) / 2\n    return volume"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(text):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the string into words using underscore as the delimiter\n    words = text.split('_')\n\n    # Check if each word is lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    return True\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"aab_Cbbbc\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d\") == True\nassert text_lowercase_underscore(\"Aab_cbbbc\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_\") == False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(0)\n    0.0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40.0\nassert square_perimeter(0) == 0.0\nassert square_perimeter(-5)"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string from which characters will be removed.\n        string2 (str): The second string containing characters to be removed.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n        >>> remove_dirty_chars(\"hello\", \"world\")\n        'hello'\n        >>> remove_dirty_chars(\"\", \"\")\n        ''\n    \"\"\"\n    # Convert both strings to sets for efficient membership testing\n    set1 = set(string1)\n    set2 = set(string2)\n\n    # Use set difference to remove characters from string1 that are present in string2\n    clean_string = ''.join(set1.difference(set2))\n\n    return clean_string"}
{"task_id": "Mbpp/19", "solution": "def has_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate over each element in the array\n    for element in arr:\n        # Check if the element is already in the set\n        if element in unique_elements:\n            # If the element is already in the set, it is a duplicate\n            return True\n        else:\n            # If the element is not in the set, add it to the set\n            unique_elements.add(element)\n\n    # If no duplicate is found, return False\n    return False\n\n# Test the function\nassert has_duplicate([1, 2, 3, 4, 5]) == False\nassert has_duplicate([1, 2, 2, 3, 4, 5]) == True\nassert has_duplicate([1, 1, 2, 3, 4, 5]) == True\nassert has_duplicate([1, 2, 3, 3, 4, 5]) == True\nassert has_duplicate([1, 2, 3, 4, 4, 5]) == True\nassert has_duplicate([1, 2, 3, 4, 5, 5]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is a Woodall number.\n\n    A Woodall number is a positive integer that is the product of two consecutive composite numbers.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a Woodall number, False otherwise.\n    \"\"\"\n    def is_composite(num):\n        \"\"\"\n        Check if the given number is composite.\n\n        A composite number is a positive integer that has at least two positive divisors other than 1 and itself.\n\n        Args:\n            num (int): The number to check.\n\n        Returns:\n            bool: True if the number is composite, False otherwise.\n        \"\"\"\n        if num < 4:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return True\n        return False\n\n    if n < 4:\n        return False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0 and is_composite(i) and is_composite(n // i):\n            return True\n\n    return False\n\n# Testing the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Reverse the string\n    reversed_str = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_num = int(reversed_str)\n\n    # Check if the number is one less than twice its reverse\n    if num == (reversed_num * 2) - 1:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of integers representing the digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-integer elements.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n        >>> find_Max_Num([4, 2, 4, 9, 1])\n        94421\n        >>> find_Max_Num([5, 5, 5])\n        555\n    \"\"\"\n    if not digits:\n        raise ValueError(\"Input list cannot be empty\")\n\n    for digit in digits:\n        if not isinstance(digit, int):\n            raise ValueError(\"Input list must contain only integers\")\n\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))"}
{"task_id": "Mbpp/58", "solution": "def opposite_signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0\n\n# Test cases\nassert opposite_signs(1, -2) == True\nassert opposite_signs(-3, 4) == False\nassert opposite_signs(0, 0) == False"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Calculates the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_octagonal(1)\n    1\n    >>> is_octagonal(2)\n    3\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Testing the function\nassert is_octagonal(1) == 1\nassert is_octagonal(2) == 3\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_substrings(s):\n    \"\"\"\n    Count the number of substrings with the sum of digits equal to their length.\n\n    Args:\n        s (str): The input string.\n\n    Returns:\n        int: The number of substrings with the sum of digits equal to their length.\n\n    Examples:\n        >>> count_substrings('112112')\n        6\n        >>> count_substrings('12345')\n        0\n        >>> count_substrings('123123')\n        9\n    \"\"\"\n    count = 0\n    n = len(s)\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n\n    return count\n\n# Testing the function\nassert count_substrings('112112') == 6\nassert count_substrings('12345') == 0\nassert count_substrings('123123') == 9"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-10, -20, -1, -45, -99])\n        -99\n        >>> smallest_num([5])\n        5\n        >>> smallest_num([])\n        ValueError: The input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"The input list is empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Finds the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the tuple list is empty or contains tuples with less than 2 elements.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n        >>> max_difference([(1, 1), (2, 2), (3, 3)])\n        0\n        >>> max_difference([])\n        ValueError: The tuple list cannot be empty.\n        >>> max_difference([(1,), (2, 2), (3, 3)])\n        ValueError: Tuples must contain at least 2 elements.\n    \"\"\"\n    if not tuple_list:\n        raise ValueError(\"The tuple list cannot be empty.\")\n\n    max_diff = float('-inf')\n\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) < 2:\n            raise ValueError(\"Tuples must contain at least 2 elements.\")\n\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples_by_second_value(lst):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: A new list of tuples sorted by the second value of each tuple.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n\n# Testing the function\nassert sort_tuples_by_second_value([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The list to be flattened and summed.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n        >>> recursive_list_sum([1, [2, [3, [4]]], 5])\n        15\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n\n    return total_sum"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> pos_count([1,-2,3,-4])\n        2\n        >>> pos_count([-1,-2,-3,-4])\n        0\n        >>> pos_count([1,2,3,4])\n        4\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Calculates the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n\n    # Check if the array is empty or has only one element\n    if len(arr) <= 1:\n        return True\n\n    # Check if the array is increasing or decreasing\n    increasing = arr[0] <= arr[-1]\n    decreasing = arr[0] >= arr[-1]\n\n    # Iterate through the array and check if it is monotonic\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        if decreasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 1, 1, 1]) == True\nassert is_monotonic([1, 2, 1, 3]) == False\nassert is_monotonic([4, 2, 1, 3]) == False\nassert is_monotonic([1, 3, 2, 4]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        lst (list): The main list to be checked.\n        sublst (list): The sublist to be searched in the main list.\n\n    Returns:\n        bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sublst) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n\n    return False\n\n# Test cases\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7]) == True\nassert is_sublist([2, 4, 3, 5, 7], [2, 4]) == True\nassert is_sublist([2, 4, 3, 5, 7], [4, 3, 5]) == True\nassert is_sublist([2, 4, 3, 5, 7], [3, 5, 7]) == True\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False\nassert is_sublist([2, 4, 3, 5, 7], [2, 4, 3, 5, 7, 9]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if not tuples_list:\n        return False\n\n    # Get the length of the first tuple\n    length = len(tuples_list[0])\n\n    # Check if all tuples have the same length\n    for tup in tuples_list:\n        if len(tup) != length:\n            return False\n\n    return True\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55)]) == False\nassert get_equal([]) == False"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    >>> comb_sort([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    >>> comb_sort([5, 4, 3, 2, 1])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap < 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n\n    # Check if the number is a perfect square\n    if is_perfect_square(n):\n        return True\n\n    # Check if the number can be represented as the difference of two squares\n    for i in range(1, int(n/2) + 1):\n        if is_perfect_square(n - i**2) or is_perfect_square(n + i**2):\n            return True\n\n    return False\n\ndef is_perfect_square(n):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n\n    # Check if the square root of the number is an integer\n    return int(n**0.5)**2 == n\n\n# Test the function\nassert dif_Square(5) == True\nassert dif_Square(10) == True\nassert dif_Square(15) == False\nassert dif_Square(20) == True\nassert dif_Square(25) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the given sequence follows the patterns.\n\n    Args:\n        patterns (list): A list of patterns to be checked.\n        sequence (list): A list of elements to be checked against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n\n    Examples:\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"])\n        True\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"])\n        False\n        >>> is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"c\"])\n        False\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n        >>> find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2)\n        []\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        if all(element % k == 0 for element in t):\n            result.append(t)\n    return result"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of odd and even digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through each digit in the number\n    for i, digit in enumerate(number_str):\n        # Add odd digits to odd_sum and even digits to even_sum\n        if i % 2 == 0:\n            odd_sum += int(digit)\n        else:\n            even_sum += int(digit)\n\n    # Calculate the difference between odd_sum and even_sum\n    difference = odd_sum - even_sum\n\n    # Check if the difference is divisible by 11\n    if difference % 11 == 0:\n        return True\n    else:\n        return False\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n        word (str): The word to be checked.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == True\nassert word_len(\"Java\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to be calculated.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    225\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6\n\n\n# Testing the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(10) == 225"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(0)\n    0.0\n    >>> volume_sphere(-5)\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume\n\n# Testing the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Returns the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The index of the number to be calculated.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first three numbers\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(0)\n    0.0\n    >>> surfacearea_sphere(-5)\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 4 * math.pi * radius**2\n\n# Testing the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Calculates the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(2)\n    7\n    >>> centered_hexagonal_number(3)\n    19\n    >>> centered_hexagonal_number(4)\n    37\n    >>> centered_hexagonal_number(5)\n    61\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Testing the function\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(3) == 19\nassert centered_hexagonal_number(4) == 37\nassert centered_hexagonal_number(5) == 61"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    \"\"\"\n    Merge three dictionaries into a single dictionary.\n\n    Args:\n        dict1 (dict): The first dictionary.\n        dict2 (dict): The second dictionary.\n        dict3 (dict): The third dictionary.\n\n    Returns:\n        dict: The merged dictionary.\n\n    Raises:\n        TypeError: If any of the input arguments is not a dictionary.\n\n    Examples:\n        >>> merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })\n        {'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\n    \"\"\"\n    if not isinstance(dict1, dict) or not isinstance(dict2, dict) or not isinstance(dict3, dict):\n        raise TypeError(\"All input arguments must be dictionaries.\")\n\n    merged_dict = {}\n    for dictionary in [dict1, dict2, dict3]:\n        merged_dict.update(dictionary)\n\n    return merged_dict"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    \"\"\"\n    This function takes a list as input and returns a dictionary with the frequency count of each element in the list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequency count as values.\n\n    Examples:\n        >>> freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30])\n        {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\n    \"\"\"\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict\n\n# Testing the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(0)\n        ValueError: n must be greater than 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    # Convert n to a string to access individual digits\n    n_str = str(n)\n\n    # Find the index of the rightmost digit that is smaller than the next digit\n    for i in range(len(n_str) - 1, 0, -1):\n        if int(n_str[i]) < int(n_str[i - 1]):\n            # Replace the digit at index i with the next smaller digit\n            n_str = n_str[:i - 1] + str(int(n_str[i - 1]) - 1) + n_str[i + 1:]\n\n            # Append '9's to the right of the replaced digit\n            n_str = n_str[:i] + '9' * (len(n_str) - i)\n\n            # Convert the modified string back to an integer\n            return int(n_str)\n\n    # If no smaller number is found, return None\n    return None"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Finds the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n        >>> len_log([])\n        0\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found, False otherwise.\n    \"\"\"\n    for item in lst:\n        if substring in item:\n            return True\n    return False\n\n# Test cases\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"\") == True\nassert find_substring([], \"\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(number):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that has alternating digits,\n    where each digit is repeated twice in a row.\n\n    Args:\n        number (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    number_str = str(number)\n    if len(number_str) < 6:\n        return False\n\n    for i in range(2, len(number_str), 2):\n        if number_str[i] != number_str[i-2]:\n            return False\n\n    return True\n\n# Testing the function\nassert is_undulating(1212121) == True\nassert is_undulating(1212123) == False\nassert is_undulating(123456789) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of raising 'a' to the power 'b'.\n\n    Raises:\n    ValueError: If 'b' is negative.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2.5, 3)\n    15.625\n    >>> power(-2, 3)\n    -8\n    \"\"\"\n\n    if b < 0:\n        raise ValueError(\"Exponent must be non-negative\")\n\n    result = 1\n    for _ in range(b):\n        result *= a\n\n    return result"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n        >>> index_minimum([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_length([[1], [1, 2]])\n        1\n        >>> find_min_length([[1, 2, 3], [4, 5], [6]])\n        1\n        >>> find_min_length([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        2\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists\")\n\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for sublist in lst:\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Calculates the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which the number of divisors is to be calculated.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(24)\n    8\n    >>> divisor(1)\n    1\n    \"\"\"\n\n    # Initialize the count of divisors to 0\n    count = 0\n\n    # Loop through all numbers from 1 to the given integer\n    for i in range(1, n + 1):\n        # If the given integer is divisible by the current number, increment the count\n        if n % i == 0:\n            count += 1\n\n    return count\n\n# Test the function\nassert divisor(15) == 4\nassert divisor(24) == 8\nassert divisor(1) == 1"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    \"\"\"\n    This function takes a flattened list of lists and returns a dictionary with the frequency of each element.\n\n    Args:\n        lst (list): A flattened list of lists.\n\n    Returns:\n        dict: A dictionary with elements as keys and their frequencies as values.\n\n    Examples:\n        >>> frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])\n        {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\n    \"\"\"\n    frequency_dict = {}\n    for sublist in lst:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict\n\n# Testing the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a number.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([1, 2, 3])\n        2.0\n        >>> multiply_num([])\n        0.0\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not all(isinstance(num, (int, float)) for num in numbers):\n        raise TypeError(\"All elements in the list must be numbers\")\n\n    if len(numbers) == 0:\n        return 0.0\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)\n\n# Testing the function\nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Converts a decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n        decimal (int): The decimal number to be converted.\n\n    Returns:\n        str: The binary equivalent of the decimal number.\n\n    Raises:\n        ValueError: If the input is not a non-negative integer.\n\n    Examples:\n        >>> decimal_to_binary(8)\n        '1000'\n        >>> decimal_to_binary(10)\n        '1010'\n        >>> decimal_to_binary(0)\n        '0'\n    \"\"\"\n    if not isinstance(decimal, int) or decimal < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if decimal == 0:\n        return '0'\n\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The integer to find the next smallest palindrome for.\n\n    Returns:\n        int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if is_palindrome(n):\n        return n\n\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n\n# Testing the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Finds the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    IndexError: If the index is out of range.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([1, 2, 3, 4, 5], 5)\n    5\n    >>> kth_element([10, 20, 30], 3)\n    30\n    \"\"\"\n\n    if not 1 <= k <= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return sorted(arr)[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to be converted.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n        >>> snake_to_camel('hello_world')\n        'HelloWorld'\n        >>> snake_to_camel('')\n        ''\n    \"\"\"\n    if not snake_str:\n        return ''\n\n    words = snake_str.split('_')\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_str\n\n# Testing the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('hello_world') == 'HelloWorld'\nassert snake_to_camel('') == ''"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of m objects taken n at a time,\n    without repetition. It is also known as the rising factorial.\n\n    Parameters:\n    n (int): The number of objects taken at a time.\n    m (int): The number of objects to be permuted.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    15\n    >>> eulerian_num(0, 5)\n    1\n    >>> eulerian_num(5, 0)\n    1\n    \"\"\"\n\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative integers\")\n\n    if n == 0 or m == 0:\n        return 1\n\n    return eulerian_num(n - 1, m) + eulerian_num(n, m - 1)"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in ascending order.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Testing the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True booleans in the given list.\n\n    Args:\n        lst (list): A list of booleans.\n\n    Returns:\n        int: The number of True booleans in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True])\n        3\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n        >>> add_lists([], (1, 2, 3))\n        (1, 2, 3)\n        >>> add_lists([10, 20, 30], ())\n        (10, 20, 30)\n    \"\"\"\n    return tpl + tuple(lst)\n\n# Testing the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([], (1, 2, 3)) == (1, 2, 3)\nassert add_lists([10, 20, 30], ()) == (10, 20, 30)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    \"\"\"\n    Merge three sorted lists into a single sorted list.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        list3 (list): The third sorted list.\n\n    Returns:\n        list: A new list containing all the elements from the input lists, sorted in ascending order.\n\n    Examples:\n        >>> merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])\n        [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n    \"\"\"\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Testing the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Finds the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n        int: The number of numbers with an odd value after the rotations.\n\n    Examples:\n        >>> odd_Equivalent(\"011001\", 6)\n        3\n        >>> odd_Equivalent(\"101010\", 3)\n        0\n        >>> odd_Equivalent(\"111111\", 1)\n        6\n    \"\"\"\n\n    def rotate_binary_string(binary_string):\n        \"\"\"\n        Rotates a binary string by one position to the left.\n\n        Args:\n            binary_string (str): The binary string to be rotated.\n\n        Returns:\n            str: The rotated binary string.\n\n        Examples:\n            >>> rotate_binary_string(\"011001\")\n            '110010'\n            >>> rotate_binary_string(\"101010\")\n            '010101'\n            >>> rotate_binary_string(\"111111\")\n            '111111'\n        \"\"\"\n        return binary_string[1:] + binary_string[0]\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string)\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        set: A set containing the common elements found in the nested lists.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        {18, 12}\n    \"\"\"\n    if not isinstance(nested_lists, list) or not all(isinstance(lst, list) for lst in nested_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return common_elements"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"12.34\") == False\nassert check_integer(\"123abc\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n\n    Args:\n        tup (tuple): The input tuple of positive integers.\n\n    Returns:\n        int: The converted single integer.\n\n    Raises:\n        TypeError: If the input is not a tuple or if any element in the tuple is not a positive integer.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    for num in tup:\n        if not isinstance(num, int) or num < 0:\n            raise TypeError(\"Elements of the tuple must be positive integers\")\n\n    return int(''.join(map(str, tup)))"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n        >>> string_to_list(\"Hello World\")\n        ['Hello', 'World']\n        >>> string_to_list(\"\")\n        []\n    \"\"\"\n    return string.split()\n\n# Testing the function\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"Hello World\") == ['Hello', 'World']\nassert string_to_list(\"\") == []"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    Examples:\n    >>> search([1,1,2,2,3])\n    3\n    >>> search([1,1,2,2,3,3,4,4,5])\n    5\n    >>> search([1,2,2,3,3,4,4])\n    ValueError: More than one element appears only once.\n    >>> search([])\n    ValueError: Input array is empty.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array is empty.\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if mid % 2 == 0:\n            if arr[mid] == arr[mid + 1]:\n                left = mid + 2\n            else:\n                right = mid\n        else:\n            if arr[mid] == arr[mid - 1]:\n                left = mid + 1\n            else:\n                right = mid - 1\n\n    if left == right:\n        return arr[left]\n\n    raise ValueError(\"More than one element appears only once.\")"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples containing two integers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or if any tuple in the list does not contain exactly two integers.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(1, 2), (3, 4), (5, 6)])\n        30\n        >>> max_product_tuple([(1, 2), (3, 4)])\n        ValueError: The input list must contain at least two tuples.\n        >>> max_product_tuple([])\n        ValueError: The input list cannot be empty.\n        >>> max_product_tuple([(1, 2), (3, 4, 5)])\n        ValueError: Each tuple in the list must contain exactly two integers.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list cannot be empty.\")\n\n    if len(lst) < 2:\n        raise ValueError(\"The input list must contain at least two tuples.\")\n\n    max_product = float('-inf')\n\n    for i in range(len(lst)):\n        if len(lst[i]) != 2:\n            raise ValueError(\"Each tuple in the list must contain exactly two integers.\")\n\n        for j in range(i + 1, len(lst)):\n            if len(lst[j]) != 2:\n                raise ValueError(\"Each tuple in the list must contain exactly two integers.\")\n\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            max_product = max(max_product, product)\n\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def sum_of_divisors(n):\n    \"\"\"\n    Calculate the sum of proper divisors of a number.\n\n    Parameters:\n    n (int): The number for which to calculate the sum of divisors.\n\n    Returns:\n    int: The sum of proper divisors of the given number.\n    \"\"\"\n    divisors = [1]\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n // i)\n    return sum(divisors)\n\n\ndef amicable_numbers_sum(limit):\n    \"\"\"\n    Calculate the sum of all amicable numbers up to a specified limit.\n\n    Parameters:\n    limit (int): The upper limit for the range of numbers to consider.\n\n    Returns:\n    int: The sum of all amicable numbers up to the specified limit.\n    \"\"\"\n    amicable_sum = 0\n    for num in range(1, limit + 1):\n        sum_of_divisors_num = sum_of_divisors(num)\n        if sum_of_divisors_num != num and sum_of_divisors(sum_of_divisors_num) == num:\n            amicable_sum += num\n    return amicable_sum\n\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculates the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number for which to calculate the angle.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    >>> angle_complex(1-1j)\n    -0.7853981633974483\n    >>> angle_complex(1+0j)\n    0.0\n    >>> angle_complex(0+0j)\n    0.0\n    \"\"\"\n    if not isinstance(z, complex):\n        raise TypeError(\"Input must be a complex number.\")\n\n    if z.real == 0:\n        if z.imag > 0:\n            return math.pi / 2\n        elif z.imag < 0:\n            return -math.pi / 2\n        else:\n            return 0\n\n    angle = math.atan(z.imag / z.real)\n\n    if z.real < 0:\n        if z.imag >= 0:\n            angle += math.pi\n        else:\n            angle -= math.pi\n\n    return angle\n\n# Testing the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): The binary string to be processed.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string.\n\n    Raises:\n        ValueError: If the input binary_string is not a valid binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n        >>> find_length}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Calculates the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    Examples:\n    >>> sum_common_divisors(10, 15)\n    6\n    >>> sum_common_divisors(24, 36)\n    18\n    >>> sum_common_divisors(1, 1)\n    1\n    \"\"\"\n\n    # Find the common divisors of a and b\n    divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n\n    # Calculate the sum of the common divisors\n    divisor_sum = sum(divisors)\n\n    return divisor_sum\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(24, 36) == 18\nassert sum_common_divisors(1, 1) == 1"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiplies two integers and returns the result.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n\n    Raises:\n    TypeError: If either `a` or `b` is not an integer.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(-5, 3)\n    -15\n    >>> multiply_int(0, 10)\n    0\n    \"\"\"\n    if not isinstance(a, int) or not isinstance(b, int):\n        raise TypeError(\"Both arguments must be integers.\")\n    return a * b\n\n# Testing the function\nassert multiply_int(10, 20) == 200\nassert multiply_int(-5, 3) == -15\nassert multiply_int(0, 10) == 0"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        sentence (str): The input sentence from which to find the long words.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\n# Testing the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    Args:\n        matrix (list): A square matrix represented as a list of lists.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Calculate the expected sum of each row, column, and diagonal\n    expected_sum = n * (n ** 2 + 1) // 2\n\n    # Calculate the sum of each row, column, and diagonal\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sums = [sum(matrix[i][i] for i in range(n)), sum(matrix[i][n - i - 1] for i in range(n))]\n\n    # Check if all sums are equal to the expected sum\n    if all(sums == expected_sum for sums in row_sums + col_sums + diag_sums):\n        return True\n    else:\n        return False\n\n# Test the function\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n        >>> max_occurrences([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    counts = {}\n    for item in lst:\n        if item in counts:\n            counts[item] += 1\n        else:\n            counts[item] = 1\n\n    max_item = None\n    max_count = 0\n    for item, count in counts.items():\n        if count > max_count:\n            max_item = item\n            max_count = count\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    \"\"\"\n    Reverse only the vowels of a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with reversed vowels.\n\n    Examples:\n        >>> reverse_vowels(\"Python\")\n        'Pothon'\n        >>> reverse_vowels(\"Hello World\")\n        'Hollo Werld'\n        >>> reverse_vowels(\"Python\") == \"Python\"\n        True\n    \"\"\"\n    vowels = \"aeiouAEIOU\"\n    string_list = list(string)\n    left, right = 0, len(string_list) - 1\n\n    while left < right:\n        if string_list[left] in vowels and string_list[right] in vowels:\n            string_list[left], string_list[right] = string_list[right], string_list[left]\n            left += 1\n            right -= 1\n        elif string_list[left] in vowels:\n            right -= 1\n        elif string_list[right] in vowels:\n            left += 1\n        else:\n            left += 1\n            right -= 1\n\n    return ''.join(string_list)"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Converts a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    return ''.join(tup)\n\n# Testing the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n        >>> sum_negativenum([-1, -2, -3, -4, -5])\n        -15\n        >>> sum_negativenum([1, 2, 3, 4, 5])\n        0\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n\n    return negative_sum\n\n# Testing the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32\nassert sum_negativenum([-1, -2, -3, -4, -5]) == -15\nassert sum_negativenum([1, 2, 3, 4, 5]) == 0"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Calculates the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(2)\n    6\n    >>> hexagonal_num(10)\n    190\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Testing the function\nassert hexagonal_num(1) == 1\nassert hexagonal_num(2) == 6\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    \"\"\"\n    Calculates the ratio of zeroes to non-zeroes in an array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    Raises:\n    TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.181818\n    >>> zero_count([1, 2, 3, 4, 5])\n    0.0\n    >>> zero_count([0, 0, 0, 0, 0])\n    1.0\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not all(isinstance(x, int) for x in arr):\n        raise TypeError(\"All elements in the list must be integers\")\n\n    zero_count = sum(1 for x in arr if x == 0)\n    non_zero_count = len(arr) - zero_count\n\n    if non_zero_count == 0:\n        return 0.0\n\n    return zero_count / non_zero_count\n\n# Testing the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as the sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n\n    # Base case: 0 can be represented as the sum of non-zero powers of 2\n    if n == 0:\n        return True\n\n    # Check if the number is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if the number can be represented as the sum of non-zero powers of 2\n    for i in range(1, n):\n        if is_sum_of_powers_of_two(n - 2**i):\n            return True\n\n    return False\n\n# Test cases\nassert is_sum_of_powers_of_two(0) == True\nassert is_sum_of_powers_of_two(1) == True\nassert is_sum_of_powers_of_two(2) == True\nassert is_sum_of_powers_of_two(3) == False\nassert is_sum_of_powers_of_two(4) == True\nassert is_sum_of_powers_of_two(5) == False\nassert is_sum_of_powers_of_two(6) == False\nassert is_sum_of_powers_of_two(7) == False\nassert is_sum_of_powers_of_two(8) == True\nassert is_sum_of_powers_of_two(9) == False\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(11) == False\nassert is_sum_of_powers_of_two(12) == False\nassert is_sum_of_powers_of_two(13) == False\nassert is_sum_of_powers_of_two(14) == False\nassert is_sum_of_powers_of_two(15) == False\nassert is_sum_of_powers_of_two(16) == True\nassert is_sum_of_powers_of_two(17) == False\nassert is_sum_of_powers_of_two(18) == False\nassert is_sum_of_powers_of_two(19) == False\nassert is_sum_of_powers_of_two(20) == False\nassert is_sum_of_powers_of_two(21) == False\nassert is_sum_of_powers_of_two(22) == False\nassert is_sum_of_powers_of_two(23) == False\nassert is_sum_of_powers_of_two(24) == True\nassert is_sum_of_powers_of_two(25) == False\nassert is_sum_of_powers_of_two(26) == False\nassert is_sum_of_powers"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> circle_circumference(10)\n    62.83185307179586\n    >>> circle_circumference(0)\n    0.0\n    >>> circle_circumference(-5)\n    ValueError: Radius cannot be negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 2 * math.pi * radius\n\n# Testing the function\nassert math.isclose(circle_circumference(10), 62.83185307179586, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Extracts all the numbers from a list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists containing numbers.\n\n    Returns:\n        set: A set containing all the numbers from the input list of lists.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n\n        >>> extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        {1, 2, 3, 4, 5, 6, 7, 8, 9}\n\n        >>> extract_singly([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]])\n        {1, 2, 3, 4, 5, 6, 7, 8, 9}\n    \"\"\"\n    return set([num for sublist in lst for num in sublist])\n\n# Testing the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    >>> pancake_sort([5, 2, 8, 1, 3])\n    [1, 2, 3, 5, 8]\n    >>> pancake_sort([1, 2, 3, 4, 5])\n    [1, 2, 3, 4, 5]\n    \"\"\"\n\n    def flip(lst, end):\n        \"\"\"\n        Flips the elements in the list from the start to the end index.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        end (int): The index up to which the list should be flipped.\n\n        Returns:\n        list: The flipped list.\n        \"\"\"\n        start = 0\n        while start < end:\n            lst[start], lst[end] = lst[end], lst[start]\n            start += 1\n            end -= 1\n        return lst\n\n    def find_max(lst, end):\n        \"\"\"\n        Finds the index of the maximum element in the list up to the end index.\n\n        Parameters:\n        lst (list): The list to be searched.\n        end (int): The index up to which the maximum element should be searched.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(1, end + 1):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max(lst, i)\n        if max_index != i:\n            lst = flip(lst, max_index)\n            lst = flip(lst, i)\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n        >>> count_samepair([1,2,3],[4,5,6],[7,8,9])\n        0\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must have the same length\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of numbers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains less than two elements.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((-2, -1, -5, -3))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    >>> max_Abs_Diff((1, 2, 3, 4))\n    3\n    >>> max_Abs_Diff((4, 3, 2, 1))\n    3\n    >>> max_Abs_Diff((1, 2, 3, 4, 5))\n    4\n    >>> max_Abs_Diff((5, 4, 3, 2, 1))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1, 1))\n    0\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6))\n    5\n    >>> max_Abs_Diff((6, 5, 4, 3, 2, 1))\n    5\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7))\n    6\n    >>> max_Abs_Diff((7, 6, 5, 4, 3, 2, 1))\n    6\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8))\n    7\n    >>> max_Abs_Diff((8, 7, 6, 5, 4, 3, 2, 1))\n    7\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9))\n    8\n    >>> max_Abs_Diff((9, 8, 7, 6, 5, 4, 3, 2, 1))\n    8\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\n    9\n    >>> max_Abs_Diff((10, 9, 8, 7, 6, 5, 4, 3, 2, 1))\n    9\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\n    10\n    >>> max_Abs_Diff((11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))\n    10\n    >>> max_Abs_Diff((1, 2, 3, 4, 5, 6, 7, 8"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target value.\n\n    Returns:\n        tuple: A tuple containing x and y, or None if no solution exists.\n\n    Raises:\n        ValueError: If a, b, or n is not a positive integer.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(4, 6, 12)\n        (1, 0)\n        >>> find_solution(2, 3, 10)\n        None\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in (a, b, n)):\n        raise ValueError(\"a, b, and n must be positive integers\")\n\n    if n % gcd(a, b) != 0:\n        return None\n\n    x, y, d = extended_gcd(a, b)\n    k = n // d\n    return x * k, y * k\n\n\ndef gcd(a, b):\n    \"\"\"\n    Calculates the greatest common divisor (GCD) of two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The GCD of a and b.\n\n    Raises:\n        ValueError: If a or b is not a positive integer.\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in (a, b)):\n        raise ValueError(\"a and b must be positive integers\")\n\n    while b != 0:\n        a, b = b, a % b\n    return a\n\n\ndef extended_gcd(a, b):\n    \"\"\"\n    Calculates the extended Euclidean algorithm to find integers x and y such that ax + by = gcd(a, b).\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        tuple: A tuple containing x, y, and gcd(a, b).\n\n    Raises:\n        ValueError: If a or b is not a positive integer.\n    \"\"\"\n    if not all(isinstance(x, int) and x > 0 for x in (a, b)):\n        raise ValueError(\"a and b must be positive integers\")\n\n    x, y, u, v = 0, 1, 1, 0\n    while a != 0:\n        q, r = b // a, b % a\n        m, n = x - u * q, y - v * q\n        b, a, x, y, u, v = a, r, u, v, m, n\n    return x, y, b"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements):\n    \"\"\"\n    Removes all elements from a given list present in another list.\n\n    Args:\n        lst (list): The list from which elements are to be removed.\n        elements (list): The list of elements to be removed.\n\n    Returns:\n        list: The modified list with the specified elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements]\n\n# Testing the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculates the sum of the series (n - 2*i) from i=0 to n//2.\n\n    Parameters:\n    n (int): The upper limit of the series.\n\n    Returns:\n    int: The sum of the series.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    20\n    >>> sum_series(0)\n    0\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n\n    return sum"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefg\")\n        7\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    string = string.lower()\n\n    for i in range(len(string)):\n        if i < len(alphabet) and string[i] == alphabet[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(numbers):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The number of pairs of integers that xor to an even number.\n\n    Examples:\n        >>> find_even_pair([5, 4, 7, 2, 1])\n        4\n        >>> find_even_pair([1, 2, 3, 4, 5])\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i + 1, len(numbers)):\n            if (numbers[i] ^ numbers[j]) % 2 == 0:\n                count += 1\n    return count"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n    >>> next_power_of_2(0)\n    1\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    4\n    >>> next_power_of_2(5)\n    8\n    >>> next_power_of_2(6)\n    8\n    >>> next_power_of_2(7)\n    8\n    >>> next_power_of_2(8)\n    8\n    >>> next_power_of_2(9)\n    16\n    \"\"\"\n\n    if n <= 0:\n        return 1\n\n    # Find the next power of 2 using bitwise operations\n    next_power = 1\n    while next_power < n:\n        next_power <<= 1\n\n    return next_power"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n\n    Examples:\n        >>> frequency([1, 2, 3, 4, 4, 4], 4)\n        3\n        >>> frequency([1, 2, 3], 4)\n        0\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count\n\n# Testing the function\nassert frequency([1, 2, 3, 4, 4, 4], 4) == 3\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start_index, end_index):\n    \"\"\"\n    Calculates the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The input list of numbers.\n        start_index (int): The starting index of the range (inclusive).\n        end_index (int): The ending index of the range (inclusive).\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        IndexError: If the start_index or end_index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n        >>> sum_range_list([1, 2, 3, 4, 5], 0, 4)\n        15\n        >>> sum_range_list([1, 2, 3, 4, 5], 0, 5)\n        15\n        >>> sum_range_list([1, 2, 3, 4, 5], 1, 4)\n        14\n        >>> sum_range_list([1, 2, 3, 4, 5], 1, 5)\n        14\n    \"\"\"\n    if start_index < 0 or end_index < 0:\n        raise IndexError(\"Index cannot be negative\")\n\n    if start_index >= len(lst) or end_index >= len(lst):\n        raise IndexError(\"Index out of range\")\n\n    if start_index > end_index:\n        raise ValueError(\"Start index cannot be greater than end index\")\n\n    return sum(lst[start_index:end_index+1])"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter\n\n# Testing the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurrences(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for occurrences of 'std'.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n\n    Examples:\n        >>> count_occurrences(\"letstdlenstdporstd\")\n        3\n        >>> count_occurrences(\"abcdefg\")\n        0\n        >>> count_occurrences(\"stdstdstd\")\n        3\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == \"std\":\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Testing the function\nassert count_occurrences(\"letstdlenstdporstd\") == 3\nassert count_occurrences(\"abcdefg\") == 0\nassert count_occurrences(\"stdstdstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(tuple_data):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        tuple_data (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if not isinstance(tuple_data, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    if len(tuple_data) == 0:\n        return True\n\n    data_type = type(tuple_data[0])\n    for element in tuple_data:\n        if not isinstance(element, data_type):\n            return False\n\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((\"apple\", \"banana\", \"orange\")) == True\nassert check_type((1, 2, 3, \"four\")) == False\nassert check_type(()) == True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n    n (int): The length of the array.\n    element: The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n    \"\"\"\n\n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(arr, n, element)\n\n    # If the element is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n\n    # Check if the element occurs more than n/2 times\n    if (first_occurrence + n // 2) < n and arr[first_occurrence + n // 2] == element:\n        return True\n\n    return False\n\n\ndef find_first_occurrence(arr, n, element):\n    \"\"\"\n    Find the first occurrence of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted array.\n    n (int): The length of the array.\n    element: The element to find.\n\n    Returns:\n    int: The index of the first occurrence of the element, or -1 if not found.\n    \"\"\"\n\n    # Initialize the search range\n    start = 0\n    end = n - 1\n\n    # Perform binary search\n    while start <= end:\n        mid = (start + end) // 2\n\n        # Check if the middle element is the first occurrence\n        if arr[mid] == element and (mid == 0 or arr[mid - 1] < element):\n            return mid\n\n        # If the middle element is less than the target, search in the right half\n        elif arr[mid] < element:\n            start = mid + 1\n\n        # If the middle element is greater than the target, search in the left half\n        else:\n            end = mid - 1\n\n    # Element not found\n    return -1\n\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == False"}
{"task_id": "Mbpp/224", "solution": "def count_set_bits(number):\n    \"\"\"\n    Counts the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        number (int): The number for which set bit count needs to be calculated.\n\n    Returns:\n        int: The number of set bits in the given number.\n\n    Examples:\n        >>> count_set_bits(2)\n        1\n        >>> count_set_bits(7)\n        3\n        >>> count_set_bits(0)\n        0\n    \"\"\"\n    count = 0\n    while number > 0:\n        count += number & 1\n        number >>= 1\n    return count\n\n# Testing the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Removes characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string from which characters with odd index values will be removed.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n        >>> odd_values_string('python')\n        'pto'\n        >>> odd_values_string('123456')\n        '135'\n    \"\"\"\n    return string[::2]\n\n# Testing the function\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('123456') == '135'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n\n    Examples:\n    >>> min_of_three(10, 20, 0)\n    0\n    >>> min_of_three(1.5, 2.5, 3.5)\n    1.5\n    >>> min_of_three(-10, -20, -30)\n    -30\n    \"\"\"\n    return min(a, b, c)\n\n# Testing the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(1.5, 2.5, 3.5) == 1.5\nassert min_of_three(-10, -20, -30) == -30"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced.\n\n    Examples:\n        >>> replace_blank(\"hello people\", '@')\n        'hello@people'\n        >>> replace_blank(\"hello  world\", '#')\n        'hello#world'\n    \"\"\"\n    return string.replace(\" \", character)\n\n# Testing the function\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"hello  world\", '#')==(\"hello#world\")"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to return.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Raises:\n        ValueError: If n is greater than the length of the input list.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n        >>> larg_nnum([1, 2, 3, 4, 5], 3)\n        [5, 4, 3]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 10)\n        [10, 20, 20, 30, 40, 50, 50, 60, 70, 80, 90, 100]\n    \"\"\"\n    if n > len(lst):\n        raise ValueError(\"n cannot be greater than the length of the input list.\")\n\n    sorted_lst = sorted(lst, reverse=True)\n    return sorted_lst[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> lateral_surface_cylinder(10, 5)\n    314.15000000000003\n    >>> lateral_surface_cylinder(0, 10)\n    0.0\n    >>> lateral_surface_cylinder(10, 0)\n    0.0\n    \"\"\"\n\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive\")\n\n    lateral_area = 2 * math.pi * radius * height\n    return lateral_area\n\n# Testing the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> volume_cube(3)\n    27.0\n    >>> volume_cube(0)\n    0.0\n    >>> volume_cube(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be positive.\n    \"\"\"\n\n    if side_length < 0:\n        raise ValueError(\"Side length must be positive.\")\n\n    return side_length ** 3\n\n# Testing the function\nassert volume_cube(3) == 27.0\nassert volume_cube(0) == 0.0\n\ntry:\n    volume_cube(-5)\nexcept ValueError as e:\n    assert str(e) == \"Side length must be positive.\""}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Sets all even bits of a given number.\n\n    Args:\n        num (int): The number for which even bits need to be set.\n\n    Returns:\n        int: The number with even bits set.\n\n    Examples:\n        >>> even_bit_set_number(10)\n        10\n        >>> even_bit_set_number(15)\n        14\n        >>> even_bit_set_number(20)\n        20\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits\n    return num | mask\n\n# Test the function\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(15) == 14\nassert even_bit_set_number(20) == 20"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (6, 3): 1}\n    \"\"\"\n    # Create an empty dictionary to store the occurrences\n    occurrences = {}\n\n    # Iterate over each tuple in the list\n    for tup in lst:\n        # Convert the tuple to a sorted tuple for uniqueness\n        sorted_tup = tuple(sorted(tup))\n\n        # Check if the sorted tuple is already in the dictionary\n        if sorted_tup in occurrences:\n            # If it is, increment its count by 1\n            occurrences[sorted_tup] += 1\n        else:\n            # If it is not, add it to the dictionary with a count of 1\n            occurrences[sorted_tup] = 1\n\n    return occurrences\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (6, 3): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n\n    # Calculate the length of the string\n    n = len(string)\n\n    # Initialize the count of non-empty substrings\n    count = 0\n\n    # Iterate through all possible substrings\n    for i in range(n):\n        for j in range(i+1, n+1):\n            # Check if the substring is non-empty\n            if string[i:j]:\n                count += 1\n\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"\") == 0"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the number of possible sequences of length n, where each element is a positive integer\n    greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The upper limit for each element in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n\n    Raises:\n        ValueError: If m or n is not a positive integer.\n\n    Examples:\n        >>> get_total_number_of_sequences(10, 4)\n        4\n        >>> get_total_number_of_sequences(5, 3)\n        2\n        >>> get_total_number_of_sequences(10, 1)\n        1\n    \"\"\"\n    if not isinstance(m, int) or not isinstance(n, int) or m <= 0 or n <= 0:\n        raise ValueError(\"m and n must be positive integers\")\n\n    # Initialize a 2D list to store the number of sequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # There is only one way to form a sequence of length 1\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Calculate the number of sequences for each length and upper limit\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - 1][k]\n\n    # Return the number of sequences for the given length and upper limit\n    return dp[n][m]"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified list.\n\n    Raises:\n        ValueError: If either list1 or list2 is empty.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n        >>> replace_list([], [1, 2, 3])\n        ValueError: List1 cannot be empty.\n        >>> replace_list([1, 2, 3], [])\n        ValueError: List2 cannot be empty.\n    \"\"\"\n    if not list1:\n        raise ValueError(\"List1 cannot be empty.\")\n    if not list2:\n        raise ValueError(\"List2 cannot be empty.\")\n\n    list1[-1] = list2\n    return list1"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    Examples:\n    >>> count_charac(\"python programming\")\n    18\n    >>> count_charac(\"\")\n    0\n    >>> count_charac(\"Hello, World\u00a0km\")\n    14\n    \"\"\"\n    return len(string)\n\n# Testing the function\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"\") == 0\nassert count_charac(\"Hello, World\u00a0km\") == 14"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_perfect_square(num):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    Args:\n        num (int): The number to find the next perfect square for.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Raises:\n        ValueError: If the given number is negative.\n\n    Examples:\n        >>> next_perfect_square(35)\n        36\n        >>> next_perfect_square(100)\n        121\n        >>> next_perfect_square(0)\n        1\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be non-negative.\")\n\n    # Find the square root of the given number\n    sqrt = math.isqrt(num)\n\n    # Check if the square root is a perfect square\n    if sqrt * sqrt == num:\n        # If the square root is a perfect square, increment it by 1\n        sqrt += 1\n    else:\n        # If the square root is not a perfect square, increment it by 1 and square it\n        sqrt += 1\n        sqrt = sqrt * sqrt\n\n    return sqrt"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n        >>> max_sum([1, 2, 3, 4, 5, 4, 3, 2, 1])\n        15\n        >>> max_sum([1, 2, 3, 4, 5])\n        15\n        >>> max_sum([5, 4, 3, 2, 1])\n        15\n        >>> max_sum([1, 2, 1, 2, 1])\n        5\n        >>> max_sum([1])\n        1\n        >>> max_sum([])\n        ValueError: Input array cannot be empty.\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    n = len(arr)\n    increasing_dp = [0] * n\n    decreasing_dp = [0] * n\n\n    # Calculate the maximum sum of increasing subsequence\n    for i in range(n):\n        increasing_dp[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and increasing_dp[i] < increasing_dp[j] + arr[i]:\n                increasing_dp[i] = increasing_dp[j] + arr[i]\n\n    # Calculate the maximum sum of decreasing subsequence\n    for i in range(n - 1, -1, -1):\n        decreasing_dp[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and decreasing_dp[i] < decreasing_dp[j] + arr[i]:\n                decreasing_dp[i] = decreasing_dp[j] + arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max(max(increasing_dp), max(decreasing_dp))\n\n    return max_sum"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Finds the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCDEFG\")\n    1\n    >>> lps(\"ABBCDAB\")\n    5\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Checking all substrings of length 2 and above\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n\n            if s[i] == s[j]:\n                dp[i][j] = 2 + dp[i + 1][j - 1]\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        element: The element to count in the tuple.\n\n    Returns:\n        int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tuple_input:\n        if item == element:\n            count += 1\n    return count\n\n# Testing the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts an element before each element in the given list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n        >>> insert_element([1, 2, 3], 0)\n        [0, 1, 0, 2, 0, 3]\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Testing the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']\nassert insert_element([1, 2, 3], 0) == [0, 1, 0, 2, 0, 3]"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_number):\n    \"\"\"\n    Converts a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and the angle of the polar coordinates.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2+3j)\n    (3.605551275463989, 0.982793723247329)\n    >>> convert(-1j)\n    (1.0, 3.141592653589793)\n    \"\"\"\n\n    if not isinstance(complex_number, complex):\n        raise TypeError(\"Input must be a complex number\")\n\n    magnitude = abs(complex_number)\n    angle = math.phase(complex_number)\n\n    return magnitude, angle"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of integer elements in the list.\n\n    Examples:\n        >>> count_integer([1, 2, 'abc', 1.2])\n        2\n        >>> count_integer([1, 2, 3, 4, 5])\n        5\n        >>> count_integer(['a', 'b', 'c'])\n        0\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n\n# Testing the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3, 4, 5]) == 5\nassert count_integer(['a', 'b', 'c']) == 0"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of a list and returns a list with tuples for each combination.\n\n    Parameters:\n    lst (list): The input list of elements.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list of tuples representing the combinations.\n\n    Examples:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n    [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 3)\n    [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]\n    \"\"\"\n\n    def backtrack(combination, start):\n        if len(combination) == n:\n            combinations.append(tuple(combination))\n            return\n\n        for i in range(start, len(lst)):\n            combination.append(lst[i])\n            backtrack(combination, i)\n            combination.pop()\n\n    combinations = []\n    backtrack([], 0)\n    return combinations"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number to check for prime numbers.\n\n    Returns:\n    int: The number of prime numbers less than the given non-negative number.\n\n    \"\"\"\n\n    # Initialize a list to store prime numbers\n    primes = []\n\n    # Iterate through numbers from 2 to n\n    for num in range(2, n):\n        # Check if the number is prime\n        if is_prime(num):\n            primes.append(num)\n\n    # Return the count of prime numbers\n    return len(primes)\n\n\ndef is_prime(num):\n    \"\"\"\n    This helper function checks if a number is prime.\n\n    Parameters:\n    num (int): The number to check for primality.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n\n    \"\"\"\n\n    # Check if the number is less than 2\n    if num < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return False\n\n    # If the number is not divisible by any number, it is prime\n    return True\n\n\n# Test the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    Swaps the order of two numbers and returns a tuple with the second number first and then the first number.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        tuple: A tuple with the second number first and then the first number.\n\n    Examples:\n        >>> swap_numbers(10, 20)\n        (20, 10)\n        >>> swap_numbers(5.5, 10.5)\n        (10.5, 5.5)\n    \"\"\"\n    return b, a\n\n# Testing the function\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(5.5, 10.5) == (10.5, 5.5)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is the maximum of the corresponding elements from the input tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple where each element is the maximum of the corresponding elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements((1, 3), (4, 5))\n        (4, 5)\n        >>> maximize_elements((1, 3), (4, 5, 6))\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\n\n# Testing the function\nassert maximize_elements((1, 3), (4, 5)) == (4, 5)\nassert maximize_elements((1, 3), (4, 5, 6)) == ValueError(\"Input tuples must have the same length.\")\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Finds the nth Newman-Shanks-Williams prime number.\n\n    Parameters:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth Newman-Shanks-Williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    primes = [2, 3]  # Start with the first two Newman-Shanks-Williams primes\n\n    while len(primes) < n:\n        next_prime = primes[-1] + 2  # Start checking for primes from the next odd number\n\n        while True:\n            is_prime = True\n\n            for prime in primes:\n                if next_prime % prime == 0:\n                    is_prime = False\n                    break\n\n            if is_prime:\n                primes.append(next_prime)\n                break\n\n            next_prime += 2\n\n    return primes[n - 1]\n\n\n# Testing the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division operation on two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n        ValueError: If the lengths of the input tuples are not equal.\n        ZeroDivisionError: If any element in the second tuple is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n        >>> division_elements((1, 2, 3), (1, 2, 3, 4))\n        ValueError: The lengths of the input tuples are not equal.\n        >>> division_elements((1, 2, 3), (1, 0, 3))\n        ZeroDivisionError: Division by zero is not allowed.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the input tuples are not equal.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits a given list into two parts where the length of the first part is L.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The desired length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n        >>> split_two_parts([1, 2, 3, 4, 5], 6)\n        ValueError: L cannot be greater than the length of the input list.\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"L cannot be greater than the length of the input list.\")\n\n    return lst[:L], lst[L:]"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the human_age is negative.\n\n    Examples:\n    >>> dog_age(12)\n    61\n    >>> dog_age(0)\n    0\n    >>> dog_age(1)\n    10\n    \"\"\"\n\n    if human_age < 0:\n        raise ValueError(\"Human age cannot be negative.\")\n\n    if human_age <= 2:\n        return human_age * 10\n    else:\n        return 20 + (human_age - 2) * 5\n\n# Testing the function\nassert dog_age(12) == 61\nassert dog_age(0) == 0\nassert dog_age(1) == 10"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements to skip before including the next element in the resulting list.\n\n    Returns:\n        list: A list of lists, where each sublist contains the elements from the input list at every nth position.\n\n    Raises:\n        ValueError: If the input list is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n\n        >>> list_split(['apple', 'banana', 'orange', 'grape', 'mango'], 2)\n        [['apple', 'orange', 'mango'], ['banana', 'grape']]\n\n        >>> list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4)\n        [[1, 5, 9], [2, 6, 10], [3, 7], [4, 8]]\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = []\n    sublist = []\n    for i, item in enumerate(lst, start=1):\n        sublist.append(item)\n        if i % n == 0:\n            result.append(sublist)\n            sublist = []\n\n    if sublist:\n        result.append(sublist)\n\n    return result"}
{"task_id": "Mbpp/266", "solution": "def lateral_surface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateral_surface_cube(5)\n    100\n    >>> lateral_surface_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 4 * side_length ** 2\n\n# Testing the function\nassert lateral_surface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    10\n    >>> square_sum(3)\n    36\n    >>> square_sum(4)\n    91\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    count = 0\n    number = 1\n\n    while count < n:\n        if number % 2 != 0:\n            sum_of_squares += number ** 2\n            count += 1\n        number += 1\n\n    return sum_of_squares"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n\n    A star number is a triangular number that is also a pentagonal number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    125\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Generate the first n triangular numbers\n    triangular_numbers = [(i * (i + 1)) // 2 for i in range(1, n + 1)]\n\n    # Generate the first n pentagonal numbers\n    pentagonal_numbers = [(i * (3 * i - 1)) // 2 for i in range(1, n + 1)]\n\n    # Find the intersection of the two sets\n    star_numbers = set(triangular_numbers) & set(pentagonal_numbers)\n\n    # Return the n'th star number\n    return sorted(star_numbers)[n - 1]"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    Parameters:\n    char (str): The character for which the ASCII value is to be determined.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('a')\n    97\n    >>> ascii_value('1')\n    49\n    \"\"\"\n\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character.\")\n\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65\nassert ascii_value('a') == 97\nassert ascii_value('1') == 49"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Calculates the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): A list of numbers.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n        >>> sum_even_and_even_index([1, 2, 3, 4, 5])\n        6\n        >>> sum_even_and_even_index([1, 3, 5, 7, 9])\n        0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 == 0)"}
{"task_id": "Mbpp/271", "solution": "def even_power_sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> even_power_sum(2)\n    1056\n    >>> even_power_sum(3)\n    31336\n    >>> even_power_sum(4)\n    795076\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        if num % 2 == 0:\n            sum_of_powers += num ** 5\n            count += 1\n        num += 1\n\n    return sum_of_powers"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element from each tuple in the given list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n        >>> rear_extract([(1,), (2,), (3,)])\n        [1, 2, 3]\n        >>> rear_extract([])\n        []\n    \"\"\"\n    if not isinstance(tuples_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    rear_list = []\n    for tup in tuples_list:\n        if not isinstance(tup, tuple):\n            raise TypeError(\"Elements of the list must be tuples\")\n        rear_list.append(tup[-1])\n\n    return rear_list"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the lengths of the input tuples are not equal.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n        >>> subtract_elements((1, 2, 3), (4, 5, 6))\n        (-3, -3, -3)\n        >>> subtract_elements((1, 2, 3), (4, 5))\n        ValueError: The lengths of the input tuples are not equal.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the input tuples are not equal.\")\n\n    subtracted_elements = []\n    for i in range(len(tuple1)):\n        subtracted_elements.append(tuple1[i] - tuple2[i])\n\n    return tuple(subtracted_elements)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients up to the given positive integer n.\n\n    Parameters:\n    n (int): The positive integer up to which the sum of even index binomial coefficients is calculated.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(5)\n    10\n    >>> even_binomial_Coeff_Sum(10)\n    120\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Initialize the sum to 0\n    sum_even_coeff = 0\n\n    # Iterate through the even indices\n    for k in range(0, n + 1, 2):\n        # Calculate the binomial coefficient using the formula C(n, k) = n!/((n-k)!*k!)\n        coeff = factorial(n) // (factorial(n - k) * factorial(k))\n        sum_even_coeff += coeff\n\n    return sum_even_coeff\n\n\ndef factorial(n):\n    \"\"\"\n    Calculates the factorial of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer for which the factorial is calculated.\n\n    Returns:\n    int: The factorial of the input integer.\n\n    Raises:\n    ValueError: If the input n is not a non-negative integer.\n\n    Examples:\n    >>> factorial(0)\n    1\n    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    >>> volume_cylinder(0, 10)\n    0.0\n    >>> volume_cylinder(10, 0)\n    0.0\n    \"\"\"\n\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    volume = math.pi * radius**2 * height\n    return volume\n\n# Testing the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to include only entries with values greater than or equal to a given number.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter the dictionary.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}\n\n# Testing the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tuple_input):\n    \"\"\"\n    Counts the number of elements that occur before the tuple element in the given tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n\n    Returns:\n        int: The number of elements that occur before the tuple element.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> count_first_elements((1, 5, 7, (4, 6), 10))\n        3\n        >>> count_first_elements((1, 2, 3, 4, 5))\n        0\n        >>> count_first_elements((1, 2, 3, (4, 5), 6))\n        3\n    \"\"\"\n    if not isinstance(tuple_input, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    count = 0\n    for element in tuple_input:\n        if isinstance(element, tuple):\n            break\n        count += 1\n\n    return count"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Calculates the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to be calculated.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(1)\n    1\n    >>> is_num_decagonal(2)\n    11\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Testing the function\nassert is_num_decagonal(1) == 1\nassert is_num_decagonal(2) == 11\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    Sequential search algorithm to find an element in an array.\n\n    Parameters:\n    arr (list): The array to search in.\n    element: The element to search for.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is found and the index position of the element (or -1 if not found).\n\n    Examples:\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)\n    (True, 3)\n    >>> sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 45)\n    (False, -1)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n# Testing the function\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 45) == (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a given list are unique.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Testing the function\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 1, 2, 3]) == False\nassert all_unique([]) == True\nassert all_unique([1]) == True\nassert all_unique([1, 1]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [1, 2])\n        ValueError: The lengths of the input lists are not equal.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of the input lists are not equal.\")\n\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(number):\n    \"\"\"\n    Check whether the frequency of each digit in the given number is less than or equal to the digit itself.\n\n    Args:\n        number (int): The number to be validated.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access each digit\n    number_str = str(number)\n\n    # Create a dictionary to store the frequency of each digit\n    digit_frequency = {}\n\n    # Count the frequency of each digit\n    for digit in number_str:\n        if digit in digit_frequency:\n            digit_frequency[digit] += 1\n        else:\n            digit_frequency[digit] = 1\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit, frequency in digit_frequency.items():\n        if int(digit) < frequency:\n            return False\n\n    return True\n\n# Test the function\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(122) == False\nassert validate(123456789) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to be checked.\n        element: The element to compare with.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Testing the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\nassert check_element([],'blue')==True\nassert check_element([\"blue\", \"blue\", \"blue\", \"blue\"],'blue')==True"}
{"task_id": "Mbpp/285", "solution": "def text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    import re\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous subarray in a modified array.\n\n    Parameters:\n    arr (list): The original array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the original array.\n\n    Returns:\n    int: The largest sum of a contiguous subarray.\n\n    \"\"\"\n\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = kadane_algorithm(arr, n)\n\n    # If the maximum sum is positive, we can repeat the array to increase the sum\n    if max_sum > 0:\n        max_sum = max_sum * ((k - 1) // n + 1)\n\n    # If the maximum sum is negative, we can repeat the array only if the total sum is positive\n    if max_sum <= 0 and total_sum > 0:\n        max_sum = max_sum * ((k - 1) // n + 1) + total_sum * (k % n)\n\n    return max_sum\n\n\ndef kadane_algorithm(arr, n):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray using Kadane's algorithm.\n\n    Parameters:\n    arr (list): The array.\n    n (int): The length of the array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_sum(2)\n    20\n    >>> square_sum(3)\n    50\n    >>> square_sum(4)\n    110\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_squares = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        sum_of_squares += num ** 2\n        count += 1\n        num += 2\n\n    return sum_of_squares"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Finds the list with maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with maximum length.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len][0]\n\n    return max_len, max_list"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n        dividend (int): The number to be divided.\n        divisor (int): The number to divide by.\n\n    Returns:\n        int: The quotient of the division.\n\n    Raises:\n        ZeroDivisionError: If the divisor is zero.\n\n    Examples:\n        >>> find_quotient(10, 3)\n        3\n        >>> find_quotient(10, 0)\n        ZeroDivisionError: division by zero\n    \"\"\"\n    if divisor == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is negative or zero.\n\n    \"\"\"\n    if side1 <= 0 or side2 <= 0:\n        raise ValueError(\"Side lengths must be positive numbers.\")\n\n    return math.sqrt(side1**2 + side2**2)\n\n# Testing the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value found in the list.\n\n    Raises:\n        ValueError: If the list is empty or contains only non-numeric values.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n        >>> max_val([1, 2, 3, 4, 5])\n        5\n        >>> max_val([-1, -2, -3, -4, -5])\n        -1\n        >>> max_val(['a', 'b', 'c'])\n        'c'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty\")\n\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n\n    if max_value is None:\n        raise ValueError(\"List contains only non-numeric values\")\n\n    return max_value"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n\n    Examples:\n    >>> get_Inv_Count([1,20,6,4,5])\n    5\n    >>> get_Inv_Count([5,4,3,2,1])\n    10\n    >>> get_Inv_Count([1,2,3,4,5])\n    0\n    \"\"\"\n\n    def merge_sort(arr):\n        \"\"\"\n        Sorts the array using merge sort algorithm and counts the inversions.\n\n        Parameters:\n        arr (list): The input array.\n\n        Returns:\n        tuple: A tuple containing the sorted array and the number of inversions.\n\n        \"\"\"\n        if len(arr) <= 1:\n            return arr, 0\n\n        mid = len(arr) // 2\n        left_arr, left_inv = merge_sort(arr[:mid])\n        right_arr, right_inv = merge_sort(arr[mid:])\n\n        merged_arr, inv_count = merge(left_arr, right_arr)\n\n        return merged_arr, left_inv + right_inv + inv_count\n\n    def merge(left_arr, right_arr):\n        \"\"\"\n        Merges two sorted arrays and counts the inversions.\n\n        Parameters:\n        left_arr (list): The left sorted array.\n        right_arr (list): The right sorted array.\n\n        Returns:\n        tuple: A tuple containing the merged array and the number of inversions.\n\n        \"\"\"\n        merged_arr = []\n        inv_count = 0\n        i, j = 0, 0\n\n        while i < len(left_arr) and j < len(right_arr):\n            if left_arr[i] <= right_arr[j]:\n                merged_arr.append(left_arr[i])\n                i += 1\n            else:\n                merged_arr.append(right_arr[j])\n                j += 1\n                inv_count += len(left_arr) - i\n\n        merged_arr.extend(left_arr[i:])\n        merged_arr.extend(right_arr[j:])\n\n        return merged_arr, inv_count\n\n    _, inv_count = merge_sort(arr)\n    return inv_count"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Recursively flattens a given nested list structure.\n\n    Args:\n        nested_list (list): The nested list to be flattened.\n\n    Returns:\n        list: The flattened list.\n\n    Examples:\n        >>> flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])\n        [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\n    \"\"\"\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples containing names and corresponding scores.\n\n    Returns:\n        tuple: A tuple containing the name and the maximum aggregate.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    # Initialize a dictionary to store the aggregates for each name\n    aggregates = {}\n\n    # Iterate over each tuple in the list\n    for name, score in lst:\n        # If the name is not in the dictionary, add it with the score as the initial aggregate\n        if name not in aggregates:\n            aggregates[name] = score\n        # If the name is already in the dictionary, add the score to its existing aggregate\n        else:\n            aggregates[name] += score\n\n    # Find the name with the maximum aggregate\n    max_name = max(aggregates, key=aggregates.get)\n\n    # Return the name and the maximum aggregate as a tuple\n    return max_name, aggregates[max_name]"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits for first and last n bits).\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    4.0\n    >>> count_binary_seq(3)\n    8.0\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Base case: for n = 0, there is only one sequence with sum of first and last bits as 0\n    if n == 0:\n        return 1.0\n\n    # Recursive case: for n > 0, count the number of sequences with sum of first and last bits as 0 and 1\n    count_zero = count_binary_seq(n - 1)\n    count_one = count_binary_seq(n - 1)\n\n    # The total count is the sum of the counts with sum of first and last bits as 0 and 1\n    return count_zero + count_one\n\n# Testing the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 4.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 8.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursively finds the depth of a dictionary.\n\n    Args:\n        dictionary (dict): The dictionary to find the depth of.\n\n    Returns:\n        int: The depth of the dictionary.\n\n    Raises:\n        TypeError: If the input is not a dictionary.\n\n    Examples:\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n        4\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {}}}}})\n        5\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {}}}}, 'i': {'j': {'k': {'l': {}}}}})\n        6\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary\")\n\n    if not dictionary:\n        return 1\n\n    depths = [dict_depth(value) for value in dictionary.values()]\n    return max(depths) + 1\n\n# Testing the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}}) == 4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {}}}}}) == 5\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {}}}}, 'i': {'j': {'k': {'l': {}}}}}) == 6"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words starting with letter 'p'.\n\n    Raises:\n        ValueError: If there are less than two words starting with letter 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n        >>> start_withp([\"Java JavaScript\", \"c c++\"])\n        ValueError: There are less than two words starting with letter 'p'.\n    \"\"\"\n    p_words = [word for word in words if word.lower().startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"There are less than two words starting with letter 'p'.\")\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n    i (int): The index up to which the prefix is considered.\n    k (int): The index of the element to be included after i.\n\n    Returns:\n    int: The maximum sum of increasing subsequence.\n\n    Raises:\n    ValueError: If i or k is out of range, or if the input list is empty.\n\n    Examples:\n    >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6)\n    11\n    >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 4)\n    12\n    >>> max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 0, 4)\n    15\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if i < 0 or i >= n or k < 0 or k >= n:\n        raise ValueError(\"i and k should be within the range of the input list\")\n\n    if i >= k:\n        raise ValueError(\"i should be less than k\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = float('-inf')\n\n    # Initialize the dynamic programming table\n    dp = [0] * n\n\n    # Calculate the maximum sum of increasing subsequence\n    for j in range(i + 1, n):\n        if arr[j] > arr[i]:\n            dp[j] = arr[j]\n        else:\n            dp[j] = dp[i] + arr[j]\n\n        if j > k and dp[j] > max_sum:\n            max_sum = dp[j]\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the number of products to find is greater than the total number of possible products.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num > len(list1) * len(list2):\n        raise ValueError(\"Number of products to find is greater than the total number of possible products.\")\n\n    products = []\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            products.append(list1[i] * list2[j])\n\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n\n    Examples:\n    >>> maximum(5, 10)\n    10\n    >>> maximum(-5, -10)\n    -5\n    >>> maximum(5.5, 5.5)\n    5.5\n    \"\"\"\n    return max(a, b)\n\n# Testing the function\nassert maximum(5, 10) == 10\nassert maximum(-5, -10) == -5\nassert maximum(5.5, 5.5) == 5.5"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple containing the characters of the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)\n\n# Testing the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Parameters:\n    num (int): The number for which the left most unset bit needs to be set.\n\n    Returns:\n    int: The number with the left most unset bit set.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(0)\n    1\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n\n    # Find the left most unset bit\n    bit_index = 0\n    while num & (1 << bit_index):\n        bit_index += 1\n\n    # Set the left most unset bit\n    num |= (1 << bit_index)\n\n    return num\n\n\n# Testing the function\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(0) == 1\nassert set_left_most_unset_bit(15) == 15"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(0, 10)\n    0.0\n    >>> volume_cone(3, 0)\n    0.0\n    \"\"\"\n\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Testing the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(32)\n    32\n    >>> highest_power_of_2(1)\n    1\n    >>> highest_power_of_2(0)\n    0\n    \"\"\"\n\n    # Initialize the result to 1\n    result = 1\n\n    # Keep doubling the result until it becomes greater than n\n    while result <= n:\n        result *= 2\n\n    # Return the previous result, which is the highest power of 2 less than or equal to n\n    return result // 2\n\n\n# Test the function\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(32) == 32\nassert highest_power_of_2(1) == 1\nassert highest_power_of_2(0) == 0"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Finds the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> find_lucas(0)\n    2\n    >>> find_lucas(1)\n    1\n    >>> find_lucas(2)\n    3\n    >>> find_lucas(3)\n    4\n    >>> find_lucas(4)\n    7\n    >>> find_lucas(5)\n    11\n    >>> find_lucas(6)\n    18\n    >>> find_lucas(7)\n    29\n    >>> find_lucas(8)\n    47\n    >>> find_lucas(9)\n    76\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)\n\n\n# Testing the function\nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\nassert find_lucas(4) == 7\nassert find_lucas(5) == 11\nassert find_lucas(6) == 18\nassert find_lucas(7) == 29\nassert find_lucas(8) == 47\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Applies a given format string to all elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n        >>> add_string(['a', 'b', 'c'], '{0}')\n        ['a', 'b', 'c']\n        >>> add_string([], 'temp{0}')\n        []\n    \"\"\"\n    return [format_str.format(item) for item in lst]\n\n# Testing the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a', 'b', 'c'], '{0}') == ['a', 'b', 'c']\nassert add_string([], 'temp{0}') == []"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    \"\"\"\n    Convert three lists into a nested dictionary.\n\n    Args:\n        keys (list): A list of keys.\n        values (list): A list of values.\n        scores (list): A list of scores.\n\n    Returns:\n        list: A list of dictionaries with keys and values from the input lists.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])\n        [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n    \"\"\"\n    if len(keys) != len(values) or len(keys) != len(scores):\n        raise ValueError(\"Input lists must have equal lengths\")\n\n    result = []\n    for i in range(len(keys)):\n        inner_dict = {values[i]: scores[i]}\n        outer_dict = {keys[i]: inner_dict}\n        result.append(outer_dict)\n\n    return result"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    \"\"\"\n    Calculates the maximum sum possible using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n\n    Parameters:\n    n (int): The input number for which the maximum sum is to be calculated.\n\n    Returns:\n    int: The maximum sum possible.\n\n    Examples:\n    >>> get_max_sum(60)\n    106\n    >>> get_max_sum(10)\n    10\n    >>> get_max_sum(0)\n    0\n    \"\"\"\n\n    # Base case: If n is less than or equal to 0, return 0\n    if n <= 0:\n        return 0\n\n    # Recursive case: Calculate the maximum sum using the given equation\n    max_sum = max(get_max_sum(n // 2) + get_max_sum(n // 3) + get_max_sum(n // 4) + get_max_sum(n // 5), n)\n\n    return max_sum\n\n# Testing the function\nassert get_max_sum(60) == 106\nassert get_max_sum(10) == 10\nassert get_max_sum(0) == 0"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 2, 3, 4, 5)) == True\nassert check_distinct(()) == True\nassert check_distinct((1,)) == True\nassert check_distinct((1, 1, 1, 1, 1)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character, or None if there are no non-repeated characters.\n    \"\"\"\n    char_count = {}\n\n    # Count the occurrences of each character in the string\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Find the first non-repeated character\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated characters found, return None\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabbcdef\") == \"c\"\nassert first_non_repeating_character(\"aabbcc\") == None\nassert first_non_repeating_character(\"aabbccddeeff\") == \"a\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Raises:\n    TypeError: If any of the input arguments are not numeric.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(1.5, 2.5, 3.5)\n    2.5\n    \"\"\"\n\n    # Check if the input arguments are numeric\n    if not all(isinstance(num, (int, float)) for num in [a, b, c]):\n        raise TypeError(\"All input arguments must be numeric.\")\n\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([a, b, c])\n\n    # Return the middle number as the median\n    return sorted_numbers[1]\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(10, 20, 30) == 20.0\nassert median_numbers(1.5, 2.5, 3.5) == 2.5"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of the sums of digits for each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n        >>> sum_of_digits([123, 456, 789])\n        [6, 15, 24]\n    \"\"\"\n    result = []\n    for number in numbers:\n        digit_sum = 0\n        while number > 0:\n            digit_sum += number % 10\n            number //= 10\n        result.append(digit_sum)\n    return result\n\n# Testing the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]\nassert sum_of_digits([123, 456, 789]) == [6, 15, 24]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(3.5, 2.5)\n    2.5\n    >>> minimum(-1, -2)\n    -2\n    \"\"\"\n    return min(a, b)\n\n# Testing the function\nassert minimum(1, 2) == 1\nassert minimum(3.5, 2.5) == 2.5\nassert minimum(-1, -2) == -2"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to be checked.\n        element: The element to be searched within the tuple.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Testing the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check for parity.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n\n    Examples:\n    >>> find_Parity(12)\n    False\n    >>> find_Parity(11)\n    True\n    >>> find_Parity(0)\n    False\n    \"\"\"\n\n    # Check if the number is odd by checking if its binary representation has an odd number of 1s\n    binary_rep = bin(num)[2:]  # Convert the number to binary representation\n    count_ones = binary_rep.count('1')  # Count the number of 1s in the binary representation\n\n    return count_ones % 2 != 0  # Return True if the parity is odd, False otherwise\n\n# Test the function\nassert find_Parity(12) == False\nassert find_Parity(11) == True\nassert find_Parity(0) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or if any tuple within the list has less than 2 elements.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([(1, 2, 3), (4, 5, 6)])\n        10\n        >>> min_product_tuple([(1, 2), (3, 4, 5)])\n        ValueError: All tuples within the list should have exactly 2 elements.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n\n    for pair in lst:\n        if len(pair) != 2:\n            raise ValueError(\"All tuples within the list should have exactly 2 elements.\")\n\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value found in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n        >>> min_val([10, 20, 30, 40, 50])\n        10\n        >>> min_val([])\n        ValueError: The input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"The input list is empty.\")\n\n    min_value = lst[0]\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_value:\n            min_value = item\n\n    return min_value"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Removes odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([2, 4, 6, 8])\n        [2, 4, 6, 8]\n        >>> remove_odd([1, 3, 5, 7, 9])\n        []\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Testing the function\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n        [99, 96, 94, 98]\n    \"\"\"\n    return [t[n] for t in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Testing the function\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], [5, 6, 7, 8, 9]) == True\nassert overlapping([1, 2, 3, 4, 5], [5, 4, 3, 2, 1]) == True\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Args:\n        arr (list): A list of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input list has less than two integers.\n\n    Examples:\n        >>> max_product([1, 2, 3, 4, 7, 0, 8, 4])\n        (7, 8)\n        >>> max_product([-1, -2, -3, -4, -7, -8])\n        (-1, -2)\n        >>> max_product([1, 2])\n        (1, 2)\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input list must have at least two integers.\")\n\n    max_product = float('-inf')\n    pair = ()\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def find_max(lst):\n    \"\"\"\n    Finds the element of a list with the maximum length.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: The element with the maximum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_max([['A'], ['A', 'B'], ['A', 'B', 'C']])\n        ['A', 'B', 'C']\n        >>> find_max([['A'], ['A', 'B']])\n        ['A', 'B']\n        >>> find_max([['A']])\n        ['A']\n        >>> find_max([])\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    max_length = max(len(item) for item in lst)\n    max_item = [item for item in lst if len(item) == max_length][0]\n\n    return max_item"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    \"\"\"\n    Rounds every number in the given list and returns the sum multiplied by the length of the list.\n\n    Args:\n        numbers (list): A list of numbers to be rounded.\n\n    Returns:\n        int: The sum of the rounded numbers multiplied by the length of the list.\n\n    Examples:\n        >>> round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])\n        243\n    \"\"\"\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n\n# Testing the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculates the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(4)\n    496\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 3\n\n    return sum\n\n# Testing the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216\nassert cube_sum(4) == 496"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tuple_elements, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by a delimiter.\n\n    Args:\n        tuple_elements (tuple): The tuple containing elements to be concatenated.\n        delimiter (str, optional): The delimiter used to separate the elements. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_')\n        'ID_is_4_UTS'\n    \"\"\"\n    if not isinstance(tuple_elements, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return delimiter.join(str(element) for element in tuple_elements)"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    >>> find_Average_Of_Cube(3)\n    10.0\n    >>> find_Average_Of_Cube(4)\n    22.5\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = 0\n    for i in range(1, n + 1):\n        sum_of_cubes += i ** 3\n\n    average = sum_of_cubes / n\n    return average\n\n# Testing the function\nassert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 10.0\nassert find_Average_Of_Cube(4) == 22.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tuple_of_strings (tuple): A tuple of strings.\n\n    Returns:\n        list: A list containing the rear index elements of each string in the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple or if any element in the tuple is not a string.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n        >>> extract_rear(('Python', 'is', 'fun') )\n        ['n', 's', 'n']\n    \"\"\"\n    if not isinstance(tuple_of_strings, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    rear_elements = []\n    for string in tuple_of_strings:\n        if not isinstance(string, str):\n            raise TypeError(\"All elements in the tuple must be strings\")\n        rear_elements.append(string[-1])\n\n    return rear_elements"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count in the sublists.\n\n    Returns:\n        int: The number of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2)\n        0\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7)\n        2\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Testing the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2) == 0\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7) == 2"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filters odd numbers from a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Testing the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_str):\n    \"\"\"\n    Converts a date string in yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date_str (str): The date string in yyyy-mm-dd format.\n\n    Returns:\n        str: The date string in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date string is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n        >>> change_date_format(\"2026-12-31\")\n        '31-12-2026'\n        >>> change_date_format(\"2026-02-30\")\n        ValueError: Invalid date format.\n\n    \"\"\"\n    try:\n        year, month, day = date_str.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format.\")\n\n# Testing the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2026-12-31\") == '31-12-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Parameters:\n    arr (list): The array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    Examples:\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    \"\"\"\n\n    # Start with a large gap size and reduce it until it becomes 1\n    gap = len(arr) // 2\n    while gap > 0:\n        # Perform insertion sort for each gap size\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            # Compare elements that are 'gap' distance apart\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise and of the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n        >>> and_tuples((1, 2, 3), (4, 5, 6))\n        (0, 0, 2)\n        >>> and_tuples((1, 2, 3), (4, 5))\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] & tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Calculates the directrix of a parabola given its coefficients a, b, and c.\n\n    Parameters:\n    a (float): Coefficient of x^2 term\n    b (float): Coefficient of x term\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola\n\n    Raises:\n    ValueError: If the parabola is not defined (i.e., a=0)\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is not defined (a=0)\")\n\n    # Calculate the directrix using the formula y = ax^2 + bx + c\n    directrix = -b / (2 * a)\n\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the base parallel to the longer side of the trapezium.\n    b (float): Length of the base parallel to the shorter side of the trapezium.\n    c (float): Length of the non-parallel side of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values is negative or if the trapezium is not valid.\n\n    \"\"\"\n\n    # Check if the trapezium is valid\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"All input values must be positive.\")\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Invalid trapezium. The sum of the lengths of the parallel sides must be greater than the length of the non-parallel side.\")\n\n    # Calculate the median length\n    median = (a + b - c) / 2\n\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array.\n    num (int or float): The number to compare with the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([1, 2, 3, 4, 5], 0) == False\nassert check_greater([1, 2, 3, 4, 5], 1) == False\nassert check_greater([1, 2, 3, 4, 5], 5) == False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The number for which the last digit needs to be found.\n\n    Returns:\n    int: The last digit of the given number.\n\n    Examples:\n    >>> last_digit(123)\n    3\n    >>> last_digit(987654321)\n    1\n    >>> last_digit(-12345)\n    5\n    \"\"\"\n    return abs(number) % 10"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A list of negative numbers from the given list.\n\n    Examples:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    >>> neg_nos([1, 2, 3, 4])\n    []\n    >>> neg_nos([-1, -2, -3, -4])\n    [-1, -2, -3, -4]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Testing the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([1, 2, 3, 4]) == []\nassert neg_nos([-1, -2, -3, -4]) == [-1, -2, -3, -4]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters from a given string.\n\n    Args:\n        string (str): The input string from which odd characters are to be removed.\n\n    Returns:\n        str: The modified string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n        >>> remove_odd(\"hello\")\n        'hlo'\n        >>> remove_odd(\"123456789\")\n        '2468'\n    \"\"\"\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])\n\n# Testing the function\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"hello\") == \"hlo\"\nassert remove_odd(\"123456789\") == \"2468\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Joins a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n        >>> multiple_to_single([1, 2, 3])\n        123\n        >>> multiple_to_single([100, 200, 300])\n        100200300\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n\n    return int(''.join(map(str, numbers)))"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n        >>> find_adverb_position(\"I am walking in the park\")\n        (10, 15, 'in')\n        >>> find_adverb_position(\"The quick brown fox jumps over the lazy dog.\")\n        (10, 14, 'quickly')\n    \"\"\"\n    adverbs = [\"very\", \"extremely\", \"quite\", \"fairly\", \"hardly\", \"rarely\", \"seldom\", \"occasionally\", \"often\", \"usually\", \"always\", \"never\", \"sometimes\", \"nowhere\", \"here\", \"there\", \"everywhere\", \"now\", \"then\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already\", \"already"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(side_length):\n    \"\"\"\n    Calculates the surface area of a cube.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150.0\n    >>> surfacearea_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 6 * side_length ** 2\n\n# Testing the function\nassert surfacearea_cube(5) == 150.0"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the result of index wise multiplication.\n\n    Raises:\n        ValueError: If the lengths of the input tuples are not equal.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(x * y for x, y in zip(tuple1[i], tuple2[i])))\n\n    return tuple(result)"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_data):\n    \"\"\"\n    Count the occurrence of all elements of a list in a tuple.\n\n    Args:\n        tuple_data (tuple): The input tuple.\n        list_data (list): The list of elements to count.\n\n    Returns:\n        int: The total count of occurrences.\n\n    Examples:\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c'])\n        3\n        >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd'])\n        4\n    \"\"\"\n    count = 0\n    for element in list_data:\n        count += tuple_data.count(element)\n    return count\n\n# Testing the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c']) == 3\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd']) == 4"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the cubes of each number in the input list.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5])\n        [1, 8, 27, 64, 125]\n        >>> cube_nums([-2, -1, 0, 1, 2])\n        [-8, -1, 0, 1, 8]\n        >>> cube_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Testing the function\nassert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\nassert cube_nums([-2, -1, 0, 1, 2]) == [-8, -1, 0, 1, 8]\nassert cube_nums([0, 0, 0, 0, 0]) == [0, 0, 0, 0, 0]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    >>> cal_sum(1)\n    1\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    perrin_numbers = [3, 0, 2]\n    if n <= 2:\n        return sum(perrin_numbers[:n])\n\n    for i in range(3, n):\n        perrin_numbers.append(perrin_numbers[i - 1] + perrin_numbers[i - 2])\n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(strings, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Args:\n        strings (list): A list of string values.\n        size (int): The desired size of the strings to extract.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Raises:\n        TypeError: If the input `strings` is not a list or `size` is not an integer.\n        ValueError: If the input `size` is negative.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10)\n        []\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0)\n        []\n    \"\"\"\n    if not isinstance(strings, list):\n        raise TypeError(\"Input 'strings' must be a list.\")\n    if not isinstance(size, int):\n        raise TypeError(\"Input 'size' must be an integer.\")\n    if size < 0:\n        raise ValueError(\"Input 'size' cannot be negative.\")\n\n    return [s for s in strings if len(s) == size]"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string from which whitespaces need to be removed.\n\n    Returns:\n        str: The string with all whitespaces removed.\n\n    Examples:\n        >>> remove_whitespaces(' Google    Flutter ')\n        'GoogleFlutter'\n        >>> remove_whitespaces('Hello World')\n        'HelloWorld'\n        >>> remove_whitespaces('   ')\n        ''\n    \"\"\"\n    return ''.join(string.split())\n\n# Testing the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces('Hello World') == 'HelloWorld'\nassert remove_whitespaces('   ') == ''"}
{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(n):\n    \"\"\"\n    Calculates the sum of even factors of a given number.\n\n    Parameters:\n    n (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Examples:\n    >>> sum_of_even_factors(18)\n    26\n    >>> sum_of_even_factors(24)\n    42\n    >>> sum_of_even_factors(10)\n    10\n    \"\"\"\n\n    # Initialize the sum to 0\n    sum_of_factors = 0\n\n    # Iterate through all numbers from 1 to n\n    for i in range(1, n + 1):\n        # Check if i is a factor of n and if it is even\n        if n % i == 0 and i % 2 == 0:\n            # Add i to the sum\n            sum_of_factors += i\n\n    return sum_of_factors\n\n# Test the function\nassert sum_of_even_factors(18) == 26\nassert sum_of_even_factors(24) == 42\nassert sum_of_even_factors(10) == 10"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function checks if a given text contains a word with 'z'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the text contains a word with 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Testing the function\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"Python is awesomez\") == True\nassert text_match_wordz(\"This is a test\") == False\nassert text_match_wordz(\"z\") == True\nassert text_match_wordz(\"\") == False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    elif month_number == 2:\n        return False\n    else:\n        raise ValueError(\"Invalid month number. Please provide a number between 1 and 12.\")\n\n# Testing the function\nassert check_month_number(5) == True\nassert check_month_number(8) == False\nassert check_month_number(2) == False\nassert check_month_number(13) == ValueError"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Testing the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n        >>> find_min_sublist([[1, 2, 3], [4, 5], [6]])\n        [6]\n        >>> find_min_sublist([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculates the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(0, 5)\n    0\n    >>> rectangle_area(5, 0)\n    0\n    >>> rectangle_area(-1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length cannot be negative.\n    >>> rectangle_area(5, -1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Width cannot be negative.\n    \"\"\"\n    if length < 0:\n        raise ValueError(\"Length cannot be negative.\")\n    if width < 0:\n        raise ValueError(\"Width cannot be negative.\")\n    return length * width\n\n# Testing the function\nassert rectangle_area(10, 20) == 200\nassert rectangle_area(0, 5) == 0\nassert rectangle_area(5, 0) == 0\nassert rectangle_area(-1, 5)\nassert rectangle_area(5, -1)"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string from which uppercase substrings need to be removed.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n\n    Examples:\n        >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n        'cstyoravoitshos'\n        >>> remove_uppercase('HelloWorld')\n        'Helloworld'\n        >>> remove_uppercase('lowercase')\n        'lowercase'\n    \"\"\"\n    result = ''\n    current_substring = ''\n    for char in string:\n        if char.isupper():\n            current_substring += char\n        else:\n            if len(current_substring) > 0:\n                result += current_substring.lower()\n                current_substring = ''\n            result += char\n\n    # Append any remaining uppercase substring\n    if len(current_substring) > 0:\n        result += current_substring.lower()\n\n    return result"}
{"task_id": "Mbpp/460", "solution": "def extract_first_elements(sublists):\n    \"\"\"\n    Extracts the first element of each sublist.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Raises:\n        TypeError: If the input is not a list or if any sublist is not iterable.\n\n    Examples:\n        >>> extract_first_elements([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n\n        >>> extract_first_elements([[1], [2, 3], [4, 5, 6]])\n        [1, 2, 4]\n\n        >>> extract_first_elements([[], [1, 2, 3], [4, 5]])\n        [None, 1, 4]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5], [6]])\n        [1, 4, 6]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5], []])\n        [1, 4, None]\n\n        >>> extract_first_elements([[1, 2, 3], [], [4, 5]])\n        [1, None, 4]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], []])\n        [1, 4, None]\n\n        >>> extract_first_elements([[], [], []])\n        [None, None, None]\n\n        >>> extract_first_elements([])\n        []\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6]])\n        [1, 4]\n\n        >>> extract_first_elements([[1, 2, 3]])\n        [1]\n\n        >>> extract_first_elements([[1], [2], [3]])\n        [1, 2, 3]\n\n        >>> extract_first_elements([[1, 2, 3]])\n        [1]\n\n        >>> extract_first_elements([[1], [2], [3]])\n        [1, 2, 3]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n        [1, 4, 7]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])\n        [1, 4, 7, 10]\n\n        >>> extract_first_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]])\n        [1, 4, 7, 10, 13]\n    \"\"\"\n    if"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Generate all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of lists containing all possible combinations of the elements.\n\n    Examples:\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n\n    def backtrack(curr_comb, start_index):\n        # Add the current combination to the result\n        result.append(curr_comb[:])\n\n        # Generate all possible combinations by adding the next element\n        for i in range(start_index, len(lst)):\n            curr_comb.append(lst[i])\n            backtrack(curr_comb, i + 1)\n            curr_comb.pop()\n\n    result = []\n    backtrack([], 0)\n    return result"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product of any subarray in the given array.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    >>> max_subarray_product([-2, -3, 0, -2, -4])\n    8\n    >>> max_subarray_product([-2, 0, -1])\n    0\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    max_positive_product = arr[0]\n    max_negative_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] == 0:\n            max_positive_product = 0\n            max_negative_product = 0\n        elif arr[i] > 0:\n            max_positive_product = max(arr[i], max_positive_product * arr[i])\n            max_negative_product = max_negative_product * arr[i]\n        else:\n            temp = max_positive_product\n            max_positive_product = max(arr[i], max_negative_product * arr[i])\n            max_negative_product = temp * arr[i]\n\n        max_product = max(max_product, max_positive_product)\n\n    return max_product"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The modified dictionary with empty items removed.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Testing the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The maximum product of an increasing subsequence.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    >>> max_product([1, 2, 3, 4, 5])\n    60\n    >>> max_product([5, 4, 3, 2, 1])\n    60\n    \"\"\"\n\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Initialize two arrays to store the maximum product ending at each index\n    max_product_ending_here = [1] * n\n    min_product_ending_here = [1] * n\n\n    # Initialize variables to store the maximum product found so far\n    max_product_so_far = float('-inf')\n\n    for i in range(1, n):\n        # Update the maximum product ending at the current index\n        max_product_ending_here[i] = max(arr[i], max_product_ending_here[i-1] * arr[i], min_product_ending_here[i-1] * arr[i])\n\n        # Update the minimum product ending at the current index\n        min_product_ending_here[i] = min(arr[i], max_product_ending_here[i-1] * arr[i], min_product_ending_here[i-1] * arr[i])\n\n        # Update the maximum product found so far\n        max_product_so_far = max(max_product_so_far, max_product_ending_here[i])\n\n    return max_product_so_far"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Adds the pairwise elements of the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: A new tuple with the pairwise addition of the elements.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n        >>> add_pairwise((1,))\n        (0,)\n        >>> add_pairwise(())\n        ()\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Calculates the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Raises:\n    ValueError: If the modulo value is not a positive integer.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    >>> find_remainder([1, 2, 3, 4, 5], 10)\n    0\n    >>> find_remainder([1, 2, 3, 4, 5], 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Modulo value must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Modulo value must be a positive integer.\")\n\n    result = 1\n    for num in arr:\n        result = (result * num) % n\n\n    return result"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n\n    return True\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 5, 7, 9]) == False\nassert check_Consecutive([1, 2, 4, 6, 8]) == False\nassert check_Consecutive([1, 2, 2, 3, 4]) == False\nassert check_Consecutive([1]) == False\nassert check_Consecutive([]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Finds the intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The intersection of elements in the tuple lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\n# Testing the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The new character.\n\n    Returns:\n        str: The modified string with the characters replaced.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        'pollgon'\n        >>> replace_char(\"hello world\",'o','a')\n        'hellla wrald'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Testing the function\nassert replace_char(\"polygon\",'y','l') == \"pollgon\"\nassert replace_char(\"hello world\",'o','a') == \"hellla wrald\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples, where each tuple contains a key-value pair from the dictionary, sorted by value in descending order.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n\n# Testing the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Calculates the sum of the largest and smallest values in a given array.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([5, 10, 15, 20])\n    25\n    >>> big_sum([-1, -5, -10])\n    -16\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in arr:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The string to be converted to lower case.\n\n    Returns:\n    str: The lower case version of the input string.\n\n    Examples:\n    >>> convert_to_lower(\"Hello\")\n    'hello'\n    >>> convert_to_lower(\"WORLD\")\n    'world'\n    >>> convert_to_lower(\"12345\")\n    '12345'\n    \"\"\"\n    return string.lower()\n\n# Testing the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string from which lowercase substrings need to be removed.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n        >>> remove_lowercase(\"Python\")\n        'Python'\n        >>> remove_lowercase(\"pythoN\")\n        'pythoN'\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            # Skip lowercase characters\n            i += 1\n        else:\n            # Append non-lowercase characters to the result\n            result += string[i]\n            i += 1\n    return result\n\n# Testing the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"\nassert remove_lowercase(\"Python\") == \"Python\"\nassert remove_lowercase(\"pythoN\") == \"pythoN\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Returns the first digit of a given number.\n\n    Parameters:\n    number (int): The number for which the first digit needs to be found.\n\n    Returns:\n    int: The first digit of the given number.\n\n    Raises:\n    TypeError: If the input is not an integer.\n\n    Examples:\n    >>> first_digit(123)\n    1\n    >>> first_digit(-456)\n    4\n    >>> first_digit(0)\n    0\n    \"\"\"\n\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Handle negative numbers\n    if number < 0:\n        number = abs(number)\n\n    # Handle the case when the number is 0\n    if number == 0:\n        return 0\n\n    # Find the first digit by repeatedly dividing the number by 10\n    while number >= 10:\n        number //= 10\n\n    return number"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    Returns a list of odd numbers from the given list of integers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers from the given list.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n        >>> get_odd_numbers([2, 4, 6, 8])\n        []\n        >>> get_odd_numbers([1, 3, 5, 7, 9])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    odd_numbers = []\n    for number in numbers:\n        if number % 2 != 0:\n            odd_numbers.append(number)\n    return odd_numbers\n\n# Testing the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\nassert get_odd_numbers([2, 4, 6, 8]) == []\nassert get_odd_numbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> difference(3)\n    30\n    >>> difference(5)\n    225\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n\n    return sum_of_cubes - sum_of_numbers\n\n# Testing the function\nassert difference(3) == 30\nassert difference(5) == 225"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    \"\"\"\n    This function counts the number of pairs whose XOR value is odd.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The size of the input list.\n\n    Returns:\n    int: The number of pairs whose XOR value is odd.\n\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n\n    return count\n\n# Testing the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The toggled string.\n\n    Examples:\n        >>> toggle_string(\"Python\")\n        'pYTHON'\n        >>> toggle_string(\"Hello, World\u00a0km\")\n        'hELLO, wORLD'\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string\n\n# Testing the function\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"Hello, World\u00a0km\") == \"hELLO, WORLD\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Raises:\n        TypeError: If either num1 or num2 is not an integer.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 321)\n        0\n        >>> digit_distance_nums(123, 456)\n        6\n    \"\"\"\n    # Check if the input numbers are integers\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both numbers must be integers.\")\n\n    # Convert the numbers to strings for easier manipulation\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Pad the shorter number with leading zeros to make both numbers the same length\n    max_length = max(len(num1_str), len(num2_str))\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n\n    # Calculate the sum of the per-digit difference\n    distance_sum = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance_sum += abs(int(digit1) - int(digit2))\n\n    return distance_sum"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the sublist.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    Examples:\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    7\n    >>> max_sub_array_sum([1, 2, 3, 4, 5], 3)\n    12\n    >>> max_sub_array_sum([-1, -2, -3, -4, -5], 2)\n    -3\n    \"\"\"\n\n    # Initialize variables\n    max_sum = float('-inf')\n    current_sum = 0\n\n    # Iterate through the list\n    for i in range(n):\n        current_sum += arr[i]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n, len(arr)):\n        current_sum += arr[i] - arr[i - n]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Finds the union of the elements of two given tuples and outputs them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of the elements of the two input tuples, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n        >>> union_elements((), (1, 2, 3))\n        (1, 2, 3)\n        >>> union_elements((1, 2, 3), ())\n        (1, 2, 3)\n    \"\"\"\n    # Convert the tuples to sets to remove duplicates and then convert them back to tuples\n    union_set = tuple(set(tuple1 + tuple2))\n\n    # Sort the elements in ascending order\n    sorted_union = tuple(sorted(union_set))\n\n    return sorted_union\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)\nassert union_elements((), (1, 2, 3)) == (1, 2, 3)\nassert union_elements((1, 2, 3), ()) == (1, 2, 3)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Finds the length of the longest sublist in a given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n        >>> Find_Max_Length([[1,2,3],[4,5],[6,7,8,9,10]])\n        5\n        >>> Find_Max_Length([[1,2,3],[4,5],[6,7,8,9,10],[]])\n        5\n        >>> Find_Max_Length([])\n        0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_length = 0\n    for sublist in lst:\n        if isinstance(sublist, list):\n            max_length = max(max_length, len(sublist))\n\n    return max_length"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings extracted between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n        >>> extract_values('\"Hello\", \"World\"')\n        ['Hello', 'World']\n        >>> extract_values('\"1\", \"2\", \"3\"')\n        ['1', '2', '3']\n    \"\"\"\n    values = []\n    start_index = 0\n    while start_index < len(string):\n        # Find the start index of the next quotation mark\n        start_index = string.find('\"', start_index)\n        if start_index == -1:\n            break\n        start_index += 1\n\n        # Find the end index of the next quotation mark\n        end_index = string.find('\"', start_index)\n        if end_index == -1:\n            break\n\n        # Extract the value between the quotation marks\n        value = string[start_index:end_index]\n        values.append(value)\n\n        # Move the start index to the end of the current value\n        start_index = end_index + 1\n\n    return values"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The size of the list.\n\n    Returns:\n        int: The number of unordered pairs.\n\n    Raises:\n        ValueError: If the list size is less than 2 or if the list contains non-integer elements.\n\n    Examples:\n        >>> count_Pairs([1, 2, 1], 3)\n        2\n        >>> count_Pairs([1, 1, 1], 3)\n        0\n        >>> count_Pairs([1, 2, 3], 3)\n        3\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"List size must be at least 2.\")\n\n    if any(not isinstance(x, int) for x in lst):\n        raise ValueError(\"List must contain only integers.\")\n\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if lst[i] != lst[j]:\n                count += 1\n\n    return count"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n        >>> split_string('')\n        []\n        >>> split_string('12345')\n        ['1', '2', '3', '4', '5']\n    \"\"\"\n    return list(string)\n\n# Testing the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']\nassert split_string('') == []\nassert split_string('12345') == ['1', '2', '3', '4', '5']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculates the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer for which the sum of digits needs to be calculated.\n\n    Returns:\n    int: The sum of digits of the given non-negative integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    digit_sum = 0\n    while n > 0:\n        digit_sum += n % 10\n        n //= 10\n\n    return digit_sum"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Testing the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,15]) == False\nassert is_sorted_list([1,2,3,4,5]) == True\nassert is_sorted_list([5,4,3,2,1]) == False\nassert is_sorted_list([1,1,1,1,1]) == True\nassert is_sorted_list([1]) == True\nassert is_sorted_list([]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Raises:\n        TypeError: If n is not an integer.\n        ValueError: If n is negative.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n\n        >>> empty_list(0)\n        []\n\n        >>> empty_list(-1)\n        ValueError: n must be a non-negative integer.\n\n        >>> empty_list(3.5)\n        TypeError: n must be an integer.\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer.\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    return [{} for _ in range(n)]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists containing strings.\n\n    Returns:\n        list: A new list of lists with each sublist sorted in ascending order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Testing the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def remove_duplicates(num_lists):\n    \"\"\"\n    Removes duplicate numbers from a given list of lists.\n\n    Args:\n        num_lists (list): A list of lists containing numbers.\n\n    Returns:\n        list: A new list with duplicate numbers removed.\n\n    Examples:\n        >>> remove_duplicates([[1, 2, 3, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]])\n        [[1, 4, 5], [2, 6, 7]]\n        >>> remove_duplicates([[1, 2, 3], [4, 5, 6]])\n        [[1, 2, 3], [4, 5, 6]]\n        >>> remove_duplicates([[1, 1, 1], [2, 2, 2]])\n        [[], []]\n    \"\"\"\n    unique_nums = []\n    for num_list in num_lists:\n        unique_nums.append(list(set(num_list)))\n    return unique_nums\n\n# Testing the function\nassert remove_duplicates([[1, 2, 3, 2, 3, 4, 5], [2, 3, 4, 5, 6, 7]]) == [[1, 4, 5], [2, 6, 7]]\nassert remove_duplicates([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\nassert remove_duplicates([[1, 1, 1], [2, 2, 2]]) == [[], []]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    \"\"\"\n    Calculates the product of the unique numbers in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the unique numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n        >>> unique_product([])\n        1\n        >>> unique_product([1, 2, 3, 4, 5])\n        120\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product"}
{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to check.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n\n    return False\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 2, 3, 4, 5], [2, 3]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [6, 7]) == False\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_sub_array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit of the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit of the factorial is to be calculated.\n\n    Returns:\n    int: The last digit of the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    8\n    >>> last_digit_factorial(0)\n    1\n    >>> last_digit_factorial(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input number must be non-negative.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleaves three lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A single flat list containing the interleaved elements.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [10, 20, 30], [100, 200, 300])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300]\n\n        >>> interleave_lists([1, 2, 3, 4], [10, 20, 30, 40], [100, 200, 300, 400])\n        ValueError: Lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Lists must have the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements.\n\n    Raises:\n        TypeError: If either `tuple1` or `tuple2` is not a tuple.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n        >>> find_dissimilar((1, 2, 3), (4, 5, 6))\n        (1, 2, 3, 4, 5, 6)\n    \"\"\"\n    if not isinstance(tuple1, tuple) or not isinstance(tuple2, tuple):\n        raise TypeError(\"Both inputs must be tuples.\")\n\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n\n    dissimilar_elements = set1.symmetric_difference(set2)\n\n    return tuple(dissimilar_elements)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested tuple.\n\n    Returns:\n        tuple: A new tuple with even elements only.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n        >>> extract_even((1, 3, 5, 7))\n        ()\n        >>> extract_even((2, (4, 6, (8, 10)), 12))\n        (2, (4, (8, 10)), 12)\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If base_edge or height is negative.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(0, 5)\n    0.0\n    >>> surface_area(5, 0)\n    0.0\n    \"\"\"\n\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive.\")\n\n    base_area = base_edge ** 2\n    lateral_area = base_edge * (2 * (base_edge ** 2 + height ** 2) ** 0.5)\n    surface_area = base_area + lateral_area\n\n    return surface_area\n\n# Testing the function\nassert surface_area(3, 4) == 33.0\nassert surface_area(0, 5) == 0.0\nassert surface_area(5, 0) == 0.0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    catalan_numbers = [1]  # Initialize the list with the first Catalan number\n\n    for i in range(1, n + 1):\n        catalan_numbers.append(int((4 * i - 2) * catalan_numbers[i - 1] / (i + 1)))\n\n    return catalan_numbers[n]\n\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries representing the items. Each dictionary should have 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is greater than the number of items in the dataset.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)\n        [{'name': 'Item-2', 'price': 555.22}]\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 2)\n        [{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1}], 2)\n        [{'name': 'Item-1', 'price': 101.1}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty.\")\n\n    if n > len(dataset):\n        raise ValueError(\"n cannot be greater than the number of items in the dataset.\")\n\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which the list should be split.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        IndexError: If the index n is out of range.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5, 6, 52, 36, 12, 10]\n        >>> split_Arr([1, 2, 3, 4, 5], 0)\n        [1, 2, 3, 4, 5]\n        >>> split_Arr([1, 2, 3, 4, 5], 5)\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    if n < 0 or n >= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Testing the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-integer values.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([-1, -2, -3, -4])\n        7\n        >>> big_diff([10, 10, 10, 10])\n        0\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n\n    if not all(isinstance(num, int) for num in nums):\n        raise ValueError(\"Input list must contain only integers\")\n\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    Raises:\n        ValueError: If the start number is greater than the end number.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n        >>> perfect_squares(10, 1)\n        []\n        >>> perfect_squares(1, 1)\n        [1]\n    \"\"\"\n    if start > end:\n        raise ValueError(\"Start number cannot be greater than the end number.\")\n\n    squares = []\n    for num in range(start, end + 1):\n        if math.isqrt(num) ** 2 == num:\n            squares.append(num)\n\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\n# Testing the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n        >>> swap_list([])\n        ValueError: List is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms in the sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_of_product(3)\n    15\n    >>> sum_of_product(5)\n    120\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    result = 0\n    for i in range(1, n + 1):\n        result += binomial_coefficient(i, i + 1)\n\n    return result\n\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Calculates the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n\n    Raises:\n    ValueError: If n or k is not a positive integer or if k is greater than n.\n\n    Examples:\n    >>> binomial_coefficient(5, 3)\n    10\n    >>> binomial_coefficient(10, 2)\n    45\n    \"\"\"\n\n    if not isinstance(n, int) or not isinstance(k, int) or n <= 0 or k <= 0:\n        raise ValueError(\"n and k must be positive integers\")\n\n    if k > n:\n        raise ValueError(\"k cannot be greater than n\")\n\n    if k > n - k:\n        k = n - k\n\n    result = 1\n    for i in range(1, k + 1):\n        result = result * (n - i + 1) // i\n\n    return result"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n        >>> removezero_ip(\"001.002.003.004\")\n        '1.2.3.4'\n        >>> removezero_ip(\"127.0.0.1\")\n        '127.0.0.1'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Finds the difference between the first even and first odd number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8])\n        0\n        >>> diff_even_odd([1, 3, 5, 7])\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers and not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    if not even_numbers:\n        return min(odd_numbers)\n\n    if not odd_numbers:\n        return min(even_numbers)\n\n    return min(even_numbers) - min(odd_numbers)"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    \"\"\"\n    Calculates the size in bytes of a given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the tuple.\n\n    Raises:\n    TypeError: If the input is not a tuple.\n\n    Examples:\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    80\n    >>> tuple_size(())\n    24\n    >>> tuple_size((1, 2, 3))\n    24\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    # Calculate the size of the tuple\n    size = sys.getsizeof(t)\n\n    # Calculate the size of each element in the tuple\n    for item in t:\n        size += sys.getsizeof(item)\n\n    return size\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size(()) == sys.getsizeof(())\nassert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Finds the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The kth element to find.\n\n    Returns:\n        int: The kth element from the merged sorted array.\n\n    Raises:\n        IndexError: If k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n        >>> find_kth([1, 2, 3], [4, 5, 6], 2)\n        3\n        >>> find_kth([1, 2, 3], [4, 5, 6], 7)\n        Traceback (most recent call last):\n        ...\n        IndexError: k is out of range\n    \"\"\"\n    # Check if k is out of range\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise IndexError(\"k is out of range\")\n\n    # Initialize pointers for both arrays\n    i, j = 0, 0\n\n    # Iterate until we find the kth element\n    while i + j < k:\n        # If arr1 is exhausted, return the kth element from arr2\n        if i == len(arr1):\n            return arr2[j + k - i - 1]\n        # If arr2 is exhausted, return the kth element from arr1\n        elif j == len(arr2):\n            return arr1[i + k - j - 1]\n        # Compare the elements at the current pointers\n        elif arr1[i] < arr2[j]:\n            i += 1\n        else:\n            j += 1\n\n    # Return the kth element\n    return min(arr1[i], arr2[j])"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n\n    # Get the number of digits in the number\n    num_digits = len(num_str)\n\n    # Calculate the sum of digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    if sum_of_digits == num:\n        return True\n    else:\n        return False\n\n# Test the function\nassert armstrong_number(153) == True\nassert armstrong_number(370) == True\nassert armstrong_number(9474) == True\nassert armstrong_number(123) == False"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculates the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_average(10)\n    (55, 5.5)\n    >>> sum_average(0)\n    (0, 0.0)\n    >>> sum_average(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum_of_numbers = (n * (n + 1)) / 2\n    average = sum_of_numbers / n\n\n    return sum_of_numbers, average"}
{"task_id": "Mbpp/600", "solution": "def is_even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Testing the function\nassert is_even(1) == False\nassert is_even(2) == True\nassert is_even(3) == False\nassert is_even(4) == True\nassert is_even(5) == False\nassert is_even(6) == True\nassert is_even(7) == False\nassert is_even(8) == True\nassert is_even(9) == False\nassert is_even(10) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated character is found.\n    \"\"\"\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") is None\nassert first_repeated_char(\"aabbcc\") == \"a\"\nassert first_repeated_char(\"abcdef\") is None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all Lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for the Lucid numbers.\n\n    Returns:\n    list: A list of Lucid numbers.\n\n    \"\"\"\n\n    def is_lucid(num):\n        \"\"\"\n        Checks if a number is a Lucid number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a Lucid number, False otherwise.\n\n        \"\"\"\n        if num <= 1:\n            return False\n        if num == 2:\n            return True\n        if num % 2 == 0:\n            return False\n\n        for i in range(3, int(num ** 0.5) + 1, 2):\n            if num % i == 0:\n                return False\n\n        return True\n\n    lucid_numbers = []\n    for num in range(1, n + 1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n\n    return lucid_numbers\n\n\n# Testing the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Args:\n        string (str): The input string containing words separated by spaces.\n\n    Returns:\n        str: The reversed string with words in the reverse order.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n        >>> reverse_words(\"Hello World\")\n        'World Hello'\n        >>> reverse_words(\"This is a test\")\n        'test a is This'\n    \"\"\"\n    # Split the string into a list of words\n    words = string.split()\n\n    # Reverse the order of the words\n    reversed_words = words[::-1]\n\n    # Join the reversed words back into a string\n    reversed_string = ' '.join(reversed_words)\n\n    return reversed_string"}
{"task_id": "Mbpp/605", "solution": "def is_prime(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n\n    # Check if the number is less than 2\n    if n < 2:\n        return False\n\n    # Check if the number is divisible by any number from 2 to the square root of the number\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n\n    return True\n\n# Test the function\nassert is_prime(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    TypeError: If the input is not a number.\n\n    Examples:\n    >>> radian_degree(90)\n    1.5707963267948966\n    >>> radian_degree(0)\n    0.0\n    >>> radian_degree(360)\n    6.283185307179586\n    \"\"\"\n    if not isinstance(degrees, (int, float)):\n        raise TypeError(\"Input must be a number.\")\n\n    return degrees * math.pi / 180\n\n# Testing the function\nassert radian_degree(90) == 1.5707963267948966\nassert radian_degree(0) == 0.0\nassert radian_degree(360) == 6.283185307179586"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The string to search for the pattern.\n        pattern (str): The regex pattern to search for.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not a valid regular expression.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'cat')\n        (None, None, None)\n    \"\"\"\n    try:\n        match = re.search(pattern, string)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None, None, None\n    except re.error as e:\n        raise ValueError(f\"Invalid regular expression: {e}\")\n\n# Testing the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'cat') == (None, None, None)"}
{"task_id": "Mbpp/608", "solution": "def bell_number(n):\n    \"\"\"\n    Calculate the nth Bell number using a dynamic programming approach.\n\n    Parameters:\n    n (int): The index of the Bell number to calculate.\n\n    Returns:\n    int: The nth Bell number.\n\n    \"\"\"\n\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n\n    return bell[n][0]\n\n# Testing the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The modified list with the k'th element removed.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n        >>> remove_kth_element([1, 2, 3], 0)\n        [2, 3]\n        >>> remove_kth_element([1, 2, 3], 3)\n        Traceback (most recent call last):\n        ...\n        IndexError: list assignment index out of range\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"list assignment index out of range\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The column number (0-indexed).\n\n    Returns:\n        int: The maximum value in the nth column.\n\n    Raises:\n        IndexError: If the column number is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n        8\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n        Traceback (most recent call last):\n        ...\n        IndexError: Column number is out of range\n    \"\"\"\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column number is out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list contains the first element of each sublist,\n              and the second list contains the second element of each sublist.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    return [list(x) for x in zip(*lst)]\n\n# Testing the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Calculates the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not a tuple.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n        >>> cummulative_sum([(1, 2, 3), (4, 5, 6)])\n        21\n        >>> cummulative_sum([(1,), (2,), (3,)])\n        6\n    \"\"\"\n    if not isinstance(tuple_list, list):\n        raise TypeError(\"Input must be a list\")\n\n    for element in tuple_list:\n        if not isinstance(element, tuple):\n            raise TypeError(\"All elements in the list must be tuples\")\n\n    return sum(sum(t) for t in tuple_list)"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculates the average value for each tuple in the given tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple or if any of the tuples are not of the same length.\n\n    Examples:\n        >>> average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))\n        [30.5, 34.25, 27.0, 23.25]\n    \"\"\"\n    if not isinstance(tuples, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    if not all(isinstance(t, tuple) for t in tuples):\n        raise TypeError(\"All elements in the input must be tuples.\")\n\n    if not all(len(tuples[0]) == len(t) for t in tuples):\n        raise ValueError(\"All tuples must have the same length.\")\n\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n\n    return averages"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the lengths of the input tuples are not equal.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7))\n        ValueError: Tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n\n    return tuple(result)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        [1.0, 1.0, 1.0]\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    return [x / y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    num_list = []\n    char_list = []\n\n    for char in string:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n\n    return ''.join(char_list) + ''.join(num_list)\n\n# Testing the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([2, 4, 6, 8, 10])\n        5\n        >>> largest_subset([1, 2, 3, 4, 5])\n        1\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, remaining_numbers):\n        \"\"\"\n        Recursive function to find the largest subset.\n\n        Args:\n            numbers (list): The original list of numbers.\n            current_subset (list): The current subset being considered.\n            remaining_numbers (list): The remaining numbers to be considered.\n\n        Returns:\n            list: The largest subset found so far.\n        \"\"\"\n        if not remaining_numbers:\n            return current_subset\n\n        largest_subset = current_subset\n        for i, num in enumerate(remaining_numbers):\n            if all(is_divisible(num, n) for n in current_subset):\n                new_subset = find_subset(numbers, current_subset + [num], remaining_numbers[:i] + remaining_numbers[i+1:])\n                if len(new_subset) > len(largest_subset):\n                    largest_subset = new_subset\n\n        return largest_subset\n\n    return len(find_subset(numbers, [], numbers))"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median value.\n\n    Raises:\n        ValueError: If the lists are not of the same size.\n\n    \"\"\"\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"Lists must be of the same size.\")\n\n    i = 0\n    j = 0\n    count = 0\n    median1 = 0\n    median2 = 0\n\n    while count < n + 1:\n        if i == n:\n            median2 = list2[j]\n            break\n        if j == n:\n            median2 = list1[i]\n            break\n\n        if list1[i] <= list2[j]:\n            median1 = median2\n            median2 = list1[i]\n            i += 1\n        else:\n            median1 = median2\n            median2 = list2[j]\n            j += 1\n\n        count += 1\n\n    if n % 2 == 0:\n        return (median1 + median2) / 2.0\n    else:\n        return median2\n\n\n# Testing the function\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nn = 5\n\nmedian = get_median(list1, list2, n)"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number.\n\n    Raises:\n        TypeError: If nums is not a list or n is not an integer.\n        ValueError: If n is negative.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5], 2)\n        [1, 4, 9, 16, 25]\n        >>> nth_nums([1, 2, 3, 4, 5], 3)\n        [1, 8, 27, 64, 125]\n        >>> nth_nums([1, 2, 3, 4, 5], 0)\n        [1, 1, 1, 1, 1]\n        >>> nth_nums([], 2)\n        []\n\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"nums must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    return [num ** n for num in nums]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n\n    Examples:\n    >>> is_upper(\"person\")\n    'PERSON'\n    >>> is_upper(\"Hello, World\u00a0km\")\n    'HELLO, WORLD\u00a0km'\n    >>> is_upper(\"\")\n    ''\n    \"\"\"\n    return string.upper()\n\n# Testing the function\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"Hello, World\u00a0km\") == \"HELLO, WORLD\u00a0km\"\nassert is_upper(\"\") == \"\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with the given radius.\n\n    Parameters:\n    radius (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle inscribed in the semicircle.\n    None: If the radius is negative.\n\n    Raises:\n    TypeError: If the radius is not a number.\n\n    \"\"\"\n\n    if radius < 0:\n        return None\n\n    if not isinstance(radius, (int, float)):\n        raise TypeError(\"Radius must be a number.\")\n\n    height = math.sqrt(radius ** 2 - (radius / 2) ** 2)\n    base = radius / 2\n    area = (base * height) / 2\n\n    return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == 0.5\nassert triangle_area(2) == 2.5\nassert triangle_area(3) == 7.5"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n\n    Examples:\n        >>> replace_spaces(\"My Name is Dawood\")\n        'My%20Name%20is%20Dawood'\n        >>> replace_spaces(\"Hello World\")\n        'Hello%20World'\n        >>> replace_spaces(\"Python is awesome\")\n        'Python%20is%20awesome'\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n# Testing the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"Hello World\") == 'Hello%20World'\nassert replace_spaces(\"Python is awesome\") == 'Python%20is%20awesome'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Finds even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers from the input list.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> find_even_numbers([2, 4, 6, 8])\n        [2, 4, 6, 8]\n        >>> find_even_numbers([1, 3, 5, 7])\n        []\n    \"\"\"\n    even_numbers = []\n    for number in numbers:\n        if number % 2 == 0:\n            even_numbers.append(number)\n    return even_numbers\n\n# Testing the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\nassert find_even_numbers([2, 4, 6, 8]) == [2, 4, 6, 8]\nassert find_even_numbers([1, 3, 5, 7]) == []"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    \"\"\"\n    Extracts all the adjacent coordinates of the given coordinate tuple.\n\n    Args:\n        coordinate (tuple): The coordinate tuple for which adjacent coordinates need to be extracted.\n\n    Returns:\n        list: A list of adjacent coordinates.\n\n    Raises:\n        TypeError: If the input is not a tuple or if the tuple contains non-integer values.\n\n    Examples:\n        >>> get_coordinates((3, 4))\n        [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\n    \"\"\"\n    if not isinstance(coordinate, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    if not all(isinstance(x, int) for x in coordinate):\n        raise TypeError(\"Tuple must contain integer values\")\n\n    x, y = coordinate\n    adjacent_coordinates = []\n\n    for dx in [-1, 0, 1]:\n        for dy in [-1, 0, 1]:\n            if dx == 0 and dy == 0:\n                continue\n            adjacent_coordinates.append([x + dx, y + dy])\n\n    return adjacent_coordinates"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n        >>> replace_spaces('Hello_World')\n        'Hello World'\n    \"\"\"\n    return string.replace(' ', '_')\n\n# Testing the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('Hello_World') == 'Hello World'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1, 0, 2, 0, 3, 4])\n        [1, 2, 3, 4, 0, 0]\n        >>> move_zero([0, 0, 0, 0])\n        [0, 0, 0, 0]\n        >>> move_zero([1, 2, 3, 4])\n        [1, 2, 3, 4]\n    \"\"\"\n    # Initialize two pointers, one for the current position and another for the position to insert non-zero elements\n    current_pos = 0\n    insert_pos = 0\n\n    # Iterate through the list\n    while current_pos < len(lst):\n        # If the current element is non-zero, move it to the insert position\n        if lst[current_pos] != 0:\n            lst[insert_pos] = lst[current_pos]\n            insert_pos += 1\n        current_pos += 1\n\n    # Fill the remaining positions with zeroes\n    while insert_pos < len(lst):\n        lst[insert_pos] = 0\n        insert_pos += 1\n\n    return lst"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): A list of integers.\n        n (int): The size of the list.\n\n    Returns:\n        int: The sum of XOR of all pairs of numbers in the list.\n\n    Raises:\n        ValueError: If the size of the list is less than 2 or greater than 1000.\n\n    Examples:\n        >>> pair_xor_Sum([5, 9, 7, 6], 4)\n        47\n        >>> pair_xor_Sum([1, 2, 3], 3)\n        2\n    \"\"\"\n    if n < 2 or n > 1000:\n        raise ValueError(\"The size of the list should be between 2 and 1000.\")\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += nums[i] ^ nums[j]\n\n    return result"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def heapify(arr, n, i):\n        \"\"\"\n        Builds a max heap from the given list.\n\n        Parameters:\n        arr (list): The list to be heapified.\n        n (int): The size of the heap.\n        i (int): The index of the current root node.\n\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort_helper(arr):\n        \"\"\"\n        Sorts the given list using the heap sort algorithm.\n\n        Parameters:\n        arr (list): The list to be sorted.\n\n        Returns:\n        list: The sorted list.\n\n        \"\"\"\n        n = len(arr)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n\n        return arr\n\n    return heap_sort_helper(arr)\n\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    buy_price (float): The buying price of the asset.\n    sell_price (float): The selling price of the asset.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    if buy_price < sell_price:\n        return True\n    else:\n        return False\n\n# Testing the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_speed, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_speed (float): Wind speed in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind speed is less than 0 or the temperature is greater than 10.\n\n    Formula:\n        Wind chill index (WCI) is calculated using the formula:\n        WCI = 13.12 + 0.6215 * temperature - 11.37 * wind_speed**0.16 + 0.3965 * temperature * wind_speed**0.16\n\n    Example:\n        >>> wind_chill(120, 35)\n        40\n    \"\"\"\n    if wind_speed < 0:\n        raise ValueError(\"Wind speed cannot be negative.\")\n    if temperature > 10:\n        raise ValueError(\"Temperature cannot be greater than 10 degrees Celsius.\")\n\n    wci = 13.12 + 0.6215 * temperature - 11.37 * wind_speed**0.16 + 0.3965 * temperature * wind_speed**0.16\n    return round(wci)\n\n# Testing the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Calculates the sum of the lengths of names in the given list after removing names starting with a lowercase letter.\n\n    Args:\n        names (list): A list of names.\n\n    Returns:\n        int: The sum of the lengths of the names after removing lowercase names.\n\n    Examples:\n        >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n        >>> sum_name_lengths(['John', 'jane', 'Mike', 'Emily'])\n        10\n    \"\"\"\n    # Filter out names starting with lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the filtered names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\nassert sum_name_lengths(['John', 'jane', 'Mike', 'Emily']) == 10"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Calculates the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to be calculated.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    325\n    >>> is_nonagonal(4)\n    661\n    >>> is_nonagonal(5)\n    1126\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (7 * n - 5) // 2\n\n# Testing the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 11\nassert is_nonagonal(3) == 325\nassert is_nonagonal(4) == 661\nassert is_nonagonal(5) == 1126"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    # Split the text into words\n    words = text.split()\n\n    # Iterate over each word\n    for word in words:\n        # Check if the word has 'z' except at the start and end\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonzabc\") == False\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzabcz\") == False\nassert text_match_wordz_middle(\"pythonzabcz.\") == True\nassert text_match_wordz_middle(\"pythonzabczdefz\") == True\nassert text_match_wordz_middle(\"pythonzabczdef\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array up to a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position up to which the array should be reversed.\n\n    Returns:\n    list: The reversed array up to the given position.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6)\n    [6, 5, 4, 3, 2, 1]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0)\n    [1, 2, 3, 4, 5, 6]\n    \"\"\"\n    if k < 0 or k >= len(arr):\n        return arr\n\n    start = 0\n    end = k\n\n    while start < end:\n        arr[start], arr[end] = arr[end], arr[start]\n        start += 1\n        end -= 1\n\n    return arr"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tuple_input, dict_input):\n    \"\"\"\n    Adds a dictionary to a tuple and returns the resulting tuple.\n\n    Args:\n        tuple_input (tuple): The input tuple.\n        dict_input (dict): The input dictionary.\n\n    Returns:\n        tuple: The resulting tuple with the dictionary added.\n\n    Raises:\n        TypeError: If the input is not a tuple or a dictionary.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3})\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    if not isinstance(tuple_input, tuple):\n        raise TypeError(\"Input must be a tuple\")\n    if not isinstance(dict_input, dict):\n        raise TypeError(\"Input must be a dictionary\")\n\n    return tuple_input + (dict_input,)\n\n# Testing the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3}) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Finds the maximum average of a path in a square matrix.\n\n    Args:\n        matrix (list of lists): The square matrix of size N*N.\n\n    Returns:\n        float: The maximum average of a path.\n\n    Raises:\n        ValueError: If the input matrix is not square or if it is empty.\n\n    Examples:\n        >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n        >>> maxAverageOfPath([[1, 2], [3, 4]])\n        2.5\n        >>> maxAverageOfPath([[1]])\n        1.0\n    \"\"\"\n\n    # Check if the matrix is square\n    if not all(len(row) == len(matrix) for row in matrix):\n        raise ValueError(\"Input matrix must be square\")\n\n    # Check if the matrix is empty\n    if not matrix:\n        raise ValueError(\"Input matrix cannot be empty\")\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Initialize the dynamic programming table\n    dp = [[0] * n for _ in range(n)]\n\n    # Fill the dynamic programming table\n    for i in range(n):\n        for j in range(n):\n            # Calculate the maximum average of a path ending at (i, j)\n            if i == 0 and j == 0:\n                dp[i][j] = matrix[i][j]\n            elif i == 0:\n                dp[i][j] = dp[i][j - 1] + matrix[i][j]\n            elif j == 0:\n                dp[i][j] = dp[i - 1][j] + matrix[i][j]\n            else:\n                dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i][j]\n\n    # Calculate the maximum average of a path\n    max_average = dp[n - 1][n - 1] / (n * n)\n\n    return max_average"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on their height and weight, returning a dictionary of students that meet the criteria.\n\n    Args:\n        students (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required for a student to be included.\n        min_weight (float): The minimum weight required for a student to be included.\n\n    Returns:\n        dict: A dictionary of students that meet the height and weight criteria.\n\n    Examples:\n        >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The number of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n        >>> count_same_pair([1, 2, 3], [4, 5, 6])\n        0\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculates the sum of all digits of the base raised to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to which the base is raised.\n\n    Returns:\n    int: The sum of all digits of the base raised to the specified power.\n\n    Raises:\n    ValueError: If the base or power is negative.\n\n    Examples:\n    >>> power_base_sum(2, 100)\n    115\n    >>> power_base_sum(3, 4)\n    81\n    >>> power_base_sum(10, 5)\n    1\n    \"\"\"\n\n    if base < 0 or power < 0:\n        raise ValueError(\"Base and power must be non-negative.\")\n\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n\n    return digit_sum\n\n# Testing the function\nassert power_base_sum(2, 100) == 115\nassert power_base_sum(3, 4) == 81\nassert power_base_sum(10, 5) == 1"}
{"task_id": "Mbpp/725", "solution": "def extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings extracted between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    import re\n\n    # Use regular expression to find all occurrences of quotation marks and their contents\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n\n    return matches"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Args:\n        t (tuple): A tuple of numbers.\n\n    Returns:\n        tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Raises:\n        ValueError: If the input tuple is empty or has only one element.\n\n    Examples:\n        >>> multiply_elements((1, 5, 7, 8, 10))\n        (5, 35, 56, 80)\n        >>> multiply_elements((1,))\n        Traceback (most recent call last):\n        ...\n        ValueError: Input tuple must have at least two elements.\n        >>> multiply_elements(())\n        Traceback (most recent call last):\n        ...\n        ValueError: Input tuple must have at least two elements.\n    \"\"\"\n    if len(t) < 2:\n        raise ValueError(\"Input tuple must have at least two elements.\")\n\n    return tuple(t[i] * t[i+1] for i in range(len(t) - 1))"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n        >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateral_surface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either the radius or height is negative.\n\n    Examples:\n    >>> lateral_surface_cone(5, 12)\n    204.20352248333654\n    >>> lateral_surface_cone(0, 10)\n    0.0\n    >>> lateral_surface_cone(10, 0)\n    0.0\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    slant_height = math.sqrt(r**2 + h**2)\n    lateral_area = math.pi * r * slant_height\n\n    return lateral_area\n\n# Testing the function\nassert lateral_surface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given text.\n\n    Args:\n        text (str): The input text.\n\n    Returns:\n        str: The modified text with special characters replaced.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        text = text.replace(char, ':')\n    return text\n\n# Testing the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): A sorted list of numbers.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if it is not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_of_subarray_prod([1, 2, 3])\n    20\n    >>> sum_of_subarray_prod([1, 2, 3, 4])\n    70\n    >>> sum_of_subarray_prod([1, 2, 3, 4, 5])\n    275\n    \"\"\"\n\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i+1, n+1):\n            sublist = lst[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result\n\n# Testing the function\nassert sum_of_subarray_prod([1, 2, 3]) == 20\nassert sum_of_subarray_prod([1, 2, 3, 4]) == 70\nassert sum_of_subarray_prod([1, 2, 3, 4, 5]) == 275"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles the bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number for which the middle bits need to be toggled.\n\n    Returns:\n        int: The number with toggled middle bits.\n\n    Raises:\n        TypeError: If the input is not an integer.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n        >>> toggle_middle_bits(15)\n        15\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Get the number of bits in the binary representation of the input number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n\n    Examples:\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    >>> left_insertion([1,2,4,5], 0)\n    0\n    >>> left_insertion([1,2,4,5], 3)\n    2\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search to find the left insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string starts with a vowel using regex.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU].*'\n    return bool(re.match(pattern, string))\n\n# Testing the function\nassert check_str(\"annie\") == True\nassert check_str(\"bob\") == False\nassert check_str(\"Elephant\") == True\nassert check_str(\"dog\") == False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    index = 1\n    triangular_number = 1\n\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Testing the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the input tuple has an odd number of elements.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n        >>> tuple_to_dict(())\n        {}\n        >>> tuple_to_dict((1,))\n        ValueError: Tuple must have an even number of elements.\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple must have an even number of elements.\")\n\n    return {tup[i]: tup[i + 1] for i in range(0, len(tup), 2)}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    # Convert the string to a set to remove duplicate characters\n    unique_chars = set(string)\n\n    # If the set has only one element, all characters are the same\n    if len(unique_chars) == 1:\n        return True\n    else:\n        return False\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of the sides of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    # Calculate the height of the equilateral triangle formed by the base of the tetrahedron\n    height = math.sqrt(2/3) * side_length\n\n    # Calculate the area of the base triangle\n    base_area = (math.sqrt(3) / 4) * side_length**2\n\n    # Calculate the total area of the tetrahedron\n    total_area = base_area + (4 * height)\n\n    return total_area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotates a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        n (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n        >>> rotate_right([1, 2, 3, 4, 5], 2)\n        [4, 5, 1, 2, 3]\n        >>> rotate_right([1, 2, 3, 4, 5], 6)\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    if n >= len(lst):\n        n = n % len(lst)\n    return lst[-n:] + lst[:-n]\n\n# Testing the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\nassert rotate_right([1, 2, 3, 4, 5], 2) == [4, 5, 1, 2, 3]\nassert rotate_right([1, 2, 3, 4, 5], 6) == [1, 2, 3, 4, 5]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tuple_to_check):\n    \"\"\"\n    Check if the given tuple has any None value.\n\n    Args:\n        tuple_to_check (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any None value, False otherwise.\n    \"\"\"\n    return None in tuple_to_check\n\n# Testing the function\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    \"\"\"\n    Find numbers within a given range from startnum to endnum where every number is divisible by every digit it contains.\n\n    Args:\n        startnum (int): The starting number of the range.\n        endnum (int): The ending number of the range.\n\n    Returns:\n        list: A list of numbers within the given range that satisfy the condition.\n\n    Raises:\n        ValueError: If startnum is greater than endnum.\n\n    Examples:\n        >>> divisible_by_digits(1, 22)\n        [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\n    \"\"\"\n    if startnum > endnum:\n        raise ValueError(\"startnum must be less than or equal to endnum\")\n\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n\n    return result"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with spaces between words starting with capital letters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n    >>> capital_words_spaces(\"Python\")\n    'Python'\n    >>> capital_words_spaces(\"PythonIsAwesome\")\n    'Python Is Awesome'\n    >>> capital_words_spaces(\"helloWorld\")\n    'hello World'\n    \"\"\"\n\n    # Split the string into words\n    words = string.split()\n\n    # Iterate over each word\n    for i in range(len(words)):\n        # Check if the word starts with a capital letter\n        if words[i][0].isupper():\n            # Insert a space before the word\n            words[i] = \" \" + words[i]\n\n    # Join the words back into a string\n    modified_string = \"\".join(words)\n\n    return modified_string"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A new list with the numbers sorted in ascending order.\n\n    Raises:\n        ValueError: If the input list contains non-numeric strings.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    try:\n        # Convert the strings to numbers and sort them\n        sorted_numbers = sorted(int(num) for num in numbers)\n        return sorted_numbers\n    except ValueError:\n        raise ValueError(\"Input list contains non-numeric strings.\")\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n        >>> add_tuple([], (1, 2, 3))\n        [1, 2, 3]\n        >>> add_tuple([1, 2, 3], ())\n        [1, 2, 3]\n    \"\"\"\n    return lst + list(tup)\n\n# Testing the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([], (1, 2, 3)) == [1, 2, 3]\nassert add_tuple([1, 2, 3], ()) == [1, 2, 3]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n\n    def is_min_heap(arr, i):\n        \"\"\"\n        Recursive helper function to check if the subtree rooted at index i is a min heap.\n\n        Parameters:\n        arr (list): The input array to be checked.\n        i (int): The index of the root of the subtree.\n\n        Returns:\n        bool: True if the subtree rooted at index i is a min heap, False otherwise.\n        \"\"\"\n        n = len(arr)\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n\n        # Base case: leaf nodes are considered min heaps\n        if left_child_index >= n:\n            return True\n\n        # Check if the root of the subtree is smaller than its left and right children\n        if arr[i] > arr[left_child_index] or (right_child_index < n and arr[i] > arr[right_child_index]):\n            return False\n\n        # Recursively check if the left and right subtrees are min heaps\n        return is_min_heap(arr, left_child_index) and is_min_heap(arr, right_child_index)\n\n    return is_min_heap(arr, 0)\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert check_min_heap([8, 7, 6, 5, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Calculates the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The index of the Jacobsthal number to calculate.\n\n    Returns:\n    int: The nth Jacobsthal number.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> jacobsthal_num(0)\n    0\n    >>> jacobsthal_num(1)\n    1\n    >>> jacobsthal_num(5)\n    11\n    >>> jacobsthal_num(10)\n    127\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)\n\n\n# Testing the function\nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(10) == 127"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples containing records.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records or if k is not a positive integer.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4)\n        [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\n\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 0)\n        []\n\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 5)\n        Traceback (most recent call last):\n            ...\n        ValueError: k cannot be greater than the number of records.\n\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], -1)\n        Traceback (most recent call last):\n            ...\n        ValueError: k must be a positive integer.\n    \"\"\"\n    if not isinstance(records, list):\n        raise TypeError(\"records must be a list.\")\n    if not isinstance(k, int):\n        raise TypeError(\"k must be an integer.\")\n    if k < 0:\n        raise ValueError(\"k must be a positive integer.\")\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    \"\"\"\n    Extracts common elements from three lists based on their indices.\n\n    Args:\n        l1 (list): The first list.\n        l2 (list): The second list.\n        l3 (list): The third list.\n\n    Returns:\n        list: A list containing common elements from the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])\n        [1, 7]\n    \"\"\"\n    if len(l1) != len(l2) or len(l1) != len(l3):\n        raise ValueError(\"Input lists must have the same length\")\n\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n\n    return common_elements"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two numbers.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([10, 10, 10, 10])\n        10\n        >>> second_smallest([5])\n        ValueError: List must have at least two numbers.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n        string_list (list): A list of strings.\n\n    Returns:\n        int: The number of pairs of reverse strings.\n\n    Examples:\n        >>> count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])\n        2\n        >>> count_reverse_pairs([\"hello\", \"world\", \"python\"])\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Counts the number of occurrences of each unique sublist in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        dict: A dictionary where the keys are tuples representing unique sublists, and the values are the number of occurrences.\n\n    Examples:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n\n# Testing the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        if '.' in string:\n            parts = string.split('.')\n            if len(parts) == 2 and len(parts[1]) <= 2:\n                return True\n    except ValueError:\n        pass\n    return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == False\nassert is_decimal('123.1') == True\nassert is_decimal('123.11.1') == False\nassert is_decimal('abc') == False\nassert is_decimal('123.11.1') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    # Check if the list is empty\n    if len(numbers) == 0:\n        return False\n\n    # Check if all elements in the list are the same\n    if len(set(numbers)) == 1:\n        return True\n\n    return False\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([1]) == True\nassert unique_Element([]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n\n    Raises:\n    ValueError: If the month number is not between 1 and 12.\n\n    Examples:\n    >>> check_month_number(6)\n    True\n    >>> check_month_number(9)\n    False\n    >>> check_month_number(13)\n    ValueError: Invalid month number. Month number should be between 1 and 12.\n    \"\"\"\n\n    if month_number < 1 or month_number > 12:\n        raise ValueError(\"Invalid month number. Month number should be between 1 and 12.\")\n\n    thirty_day_months = [4, 6, 9, 11]\n    return month_number in thirty_day_months\n\n# Testing the function\nassert check_month_number(6) == True\nassert check_month_number(9) == False\nassert check_month_number(13) == ValueError(\"Invalid month number. Month number should be between 1 and 12.\")"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than two elements.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((1, 2, 3, 4, 5), 5)\n    1\n    >>> find_min_diff((10, 20, 30, 40, 50), 5)\n    10\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n\n    Examples:\n        >>> number_ctr('program2bedone')\n        1\n        >>> number_ctr('12345')\n        5\n        >>> number_ctr('abc')\n        0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Testing the function\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abc') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    A polite number is a positive integer that is not divisible by the sum of its digits.\n\n    Args:\n        n (int): The position of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> is_polite(7)\n        11\n        >>> is_polite(10)\n        13\n        >>> is_polite(15)\n        23\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    count = 0\n    num = 0\n\n    while count < n:\n        num += 1\n        if not is_divisible_by_sum_of_digits(num):\n            count += 1\n\n    return num\n\n\ndef is_divisible_by_sum_of_digits(num):\n    \"\"\"\n    Helper function to check if a number is divisible by the sum of its digits.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is divisible by the sum of its digits, False otherwise.\n    \"\"\"\n    digit_sum = sum(int(digit) for digit in str(num))\n    return num % digit_sum == 0\n\n\n# Testing the function\nassert is_polite(7) == 11\nassert is_polite(10) == 13\nassert is_polite(15) == 23"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of tuples, where each tuple contains two consecutive items from the input list.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Testing the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to the given target sum.\n\n    Args:\n        nums (list): A list of numbers.\n        target_sum (int): The target sum.\n\n    Returns:\n        int: The number of pairs whose sum is equal to the target sum.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 5, 3, 2, 2], 4)\n        3\n        >>> get_pairs_count([1, 2, 3, 4, 5], 6)\n        2\n    \"\"\"\n    count = 0\n    nums_dict = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in nums_dict:\n            count += nums_dict[complement]\n        if num in nums_dict:\n            nums_dict[num] += 1\n        else:\n            nums_dict[num] = 1\n\n    return count"}
{"task_id": "Mbpp/769", "solution": "def diff(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The difference between the two lists.\n\n    Examples:\n        >>> diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n        [10, 20, 30, 15]\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n# Testing the function\nassert diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    202\n    >>> odd_num_sum(4)\n    432\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_powers = 0\n    count = 0\n    num = 1\n\n    while count < n:\n        sum_of_powers += num ** 4\n        count += 1\n        num += 2\n\n    return sum_of_powers"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            opening_bracket = stack.pop()\n            if opening_brackets.index(opening_bracket) != closing_brackets.index(char):\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"({[}])\") == False\nassert check_expression(\"({}[])\") == True\nassert check_expression(\"({[}])\") == False\nassert check_expression(\"({[}])\") == False"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n        >>> remove_length('Hello world', 5)\n        'Hello world'\n        >>> remove_length('Python is awesome', 7)\n        'Python is awesome'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The string to search within.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple: A tuple containing the substring, the starting index, and the ending index of the first occurrence.\n               Returns None if there is no match.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        start_index = string.index(substring)\n        end_index = start_index + len(substring)\n        return substring, start_index, end_index\n    else:\n        return None\n\n# Testing the function\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)\nassert occurrence_substring('python programming, python language', 'java') is None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,3,2]) == False\nassert odd_position([1,3,5,7,9]) == True\nassert odd_position([2,4,6,8,10]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Calculates the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n        >>> find_sum([1, 1, 1, 1, 1])\n        1\n        >>> find_sum([1, 2, 3, 4, 5])\n        15\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Create a variable to store the sum\n    sum_of_non_repeated = 0\n\n    # Iterate over each element in the list\n    for element in lst:\n        # Check if the element is already in the set\n        if element not in unique_elements:\n            # Add the element to the set\n            unique_elements.add(element)\n            # Add the element to the sum\n            sum_of_non_repeated += element\n\n    # Return the sum of non-repeated elements\n    return sum_of_non_repeated\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21\nassert find_sum([1, 1, 1, 1, 1]) == 1\nassert find_sum([1, 2, 3, 4, 5]) == 15"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i-1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n\n    result.append(current_sublist)\n\n    return result"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds the combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n\n    Examples:\n        >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n        [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations\n\n# Testing the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors of a given number is even.\n\n    Parameters:\n    n (int): The number to check for divisors.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n\n    # Initialize the count of divisors to 0\n    count = 0\n\n    # Iterate from 1 to the square root of n\n    for i in range(1, int(n**0.5) + 1):\n        # If i divides n evenly, increment the count\n        if n % i == 0:\n            count += 1\n            # If i is not the square root of n, increment the count again\n            if i != n // i:\n                count += 1\n\n    # Return True if the count is even, False otherwise\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10) == True\nassert count_divisors(12) == False\nassert count_divisors(1) == True\nassert count_divisors(2) == True\nassert count_divisors(3) == False\nassert count_divisors(4) == True\nassert count_divisors(5) == False\nassert count_divisors(6) == True\nassert count_divisors(7) == False\nassert count_divisors(8) == True\nassert count_divisors(9) == False\nassert count_divisors(100) == True\nassert count_divisors(101) == False"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in the given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    >>> odd_length_sum([1, 2, 4, 5, 6])\n    30\n    >>> odd_length_sum([1, 2, 3, 4, 5])\n    29\n    \"\"\"\n\n    n = len(arr)\n    result = 0\n\n    # Iterate through all possible subarrays\n    for i in range(n):\n        for j in range(i, n):\n            subarray_length = j - i + 1\n\n            # Check if the subarray length is odd\n            if subarray_length % 2 != 0:\n                subarray_sum = sum(arr[i:j+1])\n                result += subarray_sum\n\n    return result\n\n# Testing the function\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 4, 5, 6]) == 30\nassert odd_length_sum([1, 2, 3, 4, 5]) == 29"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Finds the product of the first even and odd number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The product of the first even and odd number in the list.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        4\n        >>> mul_even_odd([2, 4, 6, 8])\n        16\n        >>> mul_even_odd([1, 3, 5, 7])\n        ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers and not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    if even_numbers:\n        first_even = even_numbers[0]\n    else:\n        first_even = None\n\n    if odd_numbers:\n        first_odd = odd_numbers[0]\n    else:\n        first_odd = None\n\n    if first_even and first_odd:\n        return first_even * first_odd\n    else:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n# Testing the function\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([2, 4, 6, 8]) == 16\nassert mul_even_odd([1, 3, 5, 7]) == ValueError(\"List does not contain any even or odd numbers.\")"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5)\")\n        (1, 2, 3, 4, 5)\n        >>> tuple_str_int(\"(10, 20, 30, 40, 50)\")\n        (10, 20, 30, 40, 50)\n    \"\"\"\n    try:\n        # Remove the parentheses from the string\n        tuple_str = tuple_str.strip(\"()\")\n\n        # Split the string into individual elements\n        elements = tuple_str.split(\",\")\n\n        # Convert each element to an integer\n        int_tuple = tuple(int(element.strip()) for element in elements)\n\n        return int_tuple\n\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation\")\n\n# Testing the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)\nassert tuple_str_int(\"(10, 20, 30, 40, 50)\") == (10, 20, 30, 40, 50)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Finds the right insertion point for a specified value in a sorted list.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain sorted order.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Perform binary search to find the right insertion point\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"abb\")\nassert not text_match_three(\"abbbb\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list to be included in the new tuple.\n        str (str): The string to be included in the new tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst) + (str,)\n\n# Testing the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False\nassert even_position([2,4,6,8,10]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n        >>> remove_nested(('a', 'b', ('c', 'd'), 'e'))\n        ('a', 'b', 'e')\n    \"\"\"\n    return tuple(item for item in tup if not isinstance(item, tuple))\n\n# Testing the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested(('a', 'b', ('c', 'd'), 'e')) == ('a', 'b', 'e')"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lst (list): The input list containing lists.\n\n    Returns:\n        int: The number of lists in the input list.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n        >>> count_list([[1, 2, 3], [4, 5], [6]])\n        3\n        >>> count_list([[], [1, 2], [3, 4, 5]])\n        3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Testing the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 2, 3], [4, 5], [6]]) == 3\nassert count_list([[], [1, 2], [3, 4, 5]]) == 3"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of elements.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The last position of the target element in the array, or -1 if it is not found.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 3)\n    2\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Initialize the result variable\n    result = -1\n\n    # Perform binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If the middle element is equal to the target, update the result and move the left pointer to the right\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        # If the middle element is less than the target, move the left pointer to the right\n        elif arr[mid] < target:\n            left = mid + 1\n        # If the middle element is greater than the target, move the right pointer to the left\n        else:\n            right = mid - 1\n\n    return result"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Checks if a given text starts with 'a' and ends with 'b'.\n\n    Args:\n        text (str): The text to be checked.\n\n    Returns:\n        bool: True if the text starts with 'a' and ends with 'b', False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, text))\n\n# Testing the function\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"ababab\")\nassert not text_starta_endb(\"aabab\")\nassert not text_starta_endb(\"babab\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Calculates the sum of all values in the given dictionary.\n\n    Args:\n        dictionary (dict): The dictionary to calculate the sum of values.\n\n    Returns:\n        int: The sum of all values in the dictionary.\n\n    Raises:\n        TypeError: If the input is not a dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b':200, 'c':300})\n        600\n        >>> return_sum({'x': 1, 'y':2, 'z':3})\n        6\n        >>> return_sum({})\n        0\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary\")\n\n    return sum(dictionary.values())\n\n# Testing the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculates the sum of all odd natural numbers within the given range.\n\n    Parameters:\n    l (int): The lower bound of the range (inclusive).\n    r (int): The upper bound of the range (inclusive).\n\n    Returns:\n    int: The sum of all odd natural numbers within the given range.\n\n    Raises:\n    ValueError: If l is greater than r or either l or r is negative.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    25\n    >>> sum_in_range(10, 1)\n    ValueError: Lower bound must be less than or equal to the upper bound.\n    >>> sum_in_range(-5, 5)\n    ValueError: Lower bound and upper bound must be positive integers.\n    \"\"\"\n\n    if l > r:\n        raise ValueError(\"Lower bound must be less than or equal to the upper bound.\")\n    if l < 0 or r < 0:\n        raise ValueError(\"Lower bound and upper bound must be positive integers.\")\n\n    sum_odd = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            sum_odd += num\n\n    return sum_odd"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculates the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([-1, -2, -3])\n    -6\n    >>> _sum([])\n    0\n    \"\"\"\n\n    if not isinstance(arr, list):\n        raise TypeError(\"Input must be a list\")\n\n    total = 0\n    for num in arr:\n        total += num\n\n    return total\n\n# Testing the function\nassert _sum([1, 2, 3]) == 6\nassert _sum([-1, -2, -3]) == -6\nassert _sum([]) == 0"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the bits of a given number to the left by d positions.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of positions to rotate the bits.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer or the rotation count is negative.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(16, 0)\n        16\n        >>> left_rotate(16, 4)\n        64\n        >>> left_rotate(16, 5)\n        112\n    \"\"\"\n    if not isinstance(num, int) or not isinstance(d, int):\n        raise ValueError(\"Both the number and rotation count should be integers.\")\n\n    if num < 0 or d < 0:\n        raise ValueError(\"Both the number and rotation count should be non-negative.\")\n\n    if num.bit_length() > 32:\n        raise ValueError(\"The number should be a 32-bit integer.\")\n\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Args:\n        string (str): The input string from which whitespaces need to be removed.\n\n    Returns:\n        str: The input string with all whitespaces removed.\n\n    Examples:\n        >>> remove_all_spaces('python  program')\n        'pythonprogram'\n        >>> remove_all_spaces('   spacious   ')\n        'spacious'\n        >>> remove_all_spaces('')\n        ''\n    \"\"\"\n    return ''.join(string.split())\n\n# Testing the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('   spacious   ') == 'spacious'\nassert remove_all_spaces('') == ''"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The number of equal integers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n# Testing the function\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    sqrt = int(math.sqrt(num))\n    return sqrt * sqrt == num\n\n# Testing the function\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> is_product_even([1, 2, 3])\n        False\n        >>> is_product_even([2, 4, 6])\n        True\n        >>> is_product_even([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product % 2 == 0"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list with the highest sum of elements.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])\n        [10, 11, 12]\n        >>> max_sum_list([[1, 2, 3], [4, 5, 6]])\n        [1, 2, 3]\n        >>> max_sum_list([[1, 2, 3]])\n        [1, 2, 3]\n        >>> max_sum_list([])\n        []\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lst:\n        return []\n\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n        >>> max_run_uppercase('abcdefg')\n        0\n        >>> max_run_uppercase('ABCDEFG')\n        7\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If no odd number is found in the list.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        ValueError: No odd number found in the list.\n    \"\"\"\n    for number in numbers:\n        if number % 2 != 0:\n            return number\n    raise ValueError(\"No odd number found in the list.\")\n\n# Testing the function\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == ValueError(\"No odd number found in the list.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_data, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tuple_data (tuple): The input tuple to check.\n        k: The value to search for in the tuple.\n\n    Returns:\n        bool: True if the k is found in the tuple, False otherwise.\n    \"\"\"\n    if k in tuple_data:\n        return True\n    else:\n        return False\n\n# Testing the function\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((10, 4, 5, 6, 8), 11) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if all elements in tuple2 are smaller than their corresponding elements in tuple1, False otherwise.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n\n    return True\n\n# Testing the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == True\nassert check_smaller((1, 2, 3), (4, 5, 6)) == False"}
