{"date": "2025-02-04 09:08", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string is empty\n    if not input_string:\n        return False\n\n    # Split the input string into words using underscore as the delimiter\n    words = input_string.split('_')\n\n    # Iterate through each word\n    for word in words:\n        # Check if the word contains only lowercase letters\n        if not word.islower():\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n\n    Example:\n    >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n    [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number satisfies the condition, False otherwise.\n    \"\"\"\n    reverse = 0\n    temp = num\n    while temp > 0:\n        reverse = (reverse * 10) + (temp % 10)\n        temp = temp // 10\n\n    return num == (reverse * 2) - 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Example:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number to compare.\n    num2 (int): The second number to compare.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # Convert the numbers to binary strings\n    bin_num1 = bin(num1)[2:]\n    bin_num2 = bin(num2)[2:]\n\n    # Pad the binary strings with leading zeros to make their lengths equal\n    max_length = max(len(bin_num1), len(bin_num2))\n    bin_num1 = bin_num1.zfill(max_length)\n    bin_num2 = bin_num2.zfill(max_length)\n\n    # Count the number of positions where the bits differ\n    count = 0\n    for i in range(max_length):\n        if bin_num1[i] != bin_num2[i]:\n            count += 1\n\n    # Return True if the count is exactly 1, indicating a difference at one bit position\n    return count == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, 10]]}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"xyz\")\n    3\n    \"\"\"\n    n = len(s)\n    temp = s + s\n    for i in range(1, n):\n        if temp[i:i+n] == s:\n            return i\n    return n", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(n**0.5) + 1):\n        j = int((n - i**2)**0.5)\n        if i**2 + j**2 == n:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[991]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers and returns them in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    return sorted(heap, reverse=True)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with squares of individual elements from the input list.\n\n    Example:\n    >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    # Create an empty set to store unique elements\n    unique_elements = set()\n\n    # Iterate through each element in the array\n    for num in arr:\n        # If the element is already in the set, it means it is a duplicate\n        if num in unique_elements:\n            return True\n        # Add the element to the set\n        unique_elements.add(num)\n\n    # If no duplicate is found, return False\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The index of the tetrahedral number to calculate.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    120\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the shared elements.\n\n    Example:\n    >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n    [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits and returns the largest number that can be formed with those digits.\n\n    Parameters:\n    digits (list): A list of integers representing the available digits.\n\n    Returns:\n    int: The largest number that can be formed with the given digits.\n\n    Example:\n    >>> find_Max_Num([1,2,3])\n    321\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and return the integer value\n    return int(''.join(map(str, sorted_digits)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Parameters:\n    tuple_list (list): A list of tuples containing pairs of integers.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Example:\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from a string.\n\n    Parameters:\n    string (str): The input string.\n    char (str): The character to remove.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n\n    Example:\n    >>> remove_Occ(\"hello\", \"l\")\n    'heo'\n    \"\"\"\n    if char in string:\n        first_index = string.find(char)\n        last_index = string.rfind(char)\n        modified_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n        return modified_string\n    else:\n        return string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Finds the smallest number in a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list is empty\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list is empty\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Parameters:\n    lst (list): The main list to be checked.\n    sublst (list): The sublist to be searched for in the main list.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sublst) == 0:\n        return True\n    if len(lst) < len(sublst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i] == sublst[0] and lst[i:i + len(sublst)] == sublst:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of words that are at least 4 characters long.\n\n    Example:\n    >>> find_char_long('Please move back to stream')\n    ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge the first two dictionaries\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    # Override values in the merged dictionary if they exist in the third dictionary\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def sort_tuples(lst):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: The sorted list of tuples.\n\n    Examples:\n        >>> subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n# Test the function\ndef test_sort_tuples():\n    \"\"\"\n    Tests the sort_tuples function.\n    \"\"\"\n    assert sort_tuples([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    assert sort_tuples([('A', 10), ('B', 5), ('C', 7), ('D', 8)]) == [('B', 5), ('C', 7), ('A', 10), ('D', 8)]\n    assert sort_tuples([('Alice', 95), ('Bob', 85), ('Charlie', 90), ('David', 80)]) == [('Bob', 85), ('Charlie', 90), ('Alice', 95), ('David', 80)]\n    print(\"All tests passed.\")\n\n# Run the tests\ntest_sort_tuples()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Parameters:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Examples:\n    >>> closest_num(11)\n    10\n    >>> closest_num(10)\n    9\n    >>> closest_num(0)\n    None\n    \"\"\"\n    if n <= 0:\n        return None\n    else:\n        return n - 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime or not.\n\n        Parameters:\n        num (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_power_of_two(num):\n        \"\"\"\n        Check if a number is a power of two or not.\n\n        Parameters:\n        num (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is a power of two, False otherwise.\n        \"\"\"\n        return (num & (num - 1) == 0) and num != 0\n\n    if is_prime(n) and is_power_of_two(n):\n        return True\n    else:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[383]], "plus_fail_tests": [[true]]}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the square.\n\n    Returns:\n    int or float: The perimeter of the square.\n\n    Example:\n    >>> square_perimeter(10)\n    40\n    \"\"\"\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    This function checks if a number is a non-prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a non-prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if a given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n\n    prev_digit = num_str[0]\n    for digit in num_str[1:]:\n        if digit == prev_digit:\n            return False\n        prev_digit = digit\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212123]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_Diff(num):\n    \"\"\"\n    This function checks if a number is divisible by 11.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string for easier manipulation\n    num_str = str(num)\n\n    # Initialize the difference between the sum of even and odd digits\n    diff = 0\n\n    # Iterate through each digit of the number\n    for i, digit in enumerate(num_str):\n        # Convert the digit back to an integer\n        digit = int(digit)\n\n        # Add the digit to the difference based on its position\n        if i % 2 == 0:\n            diff += digit\n        else:\n            diff -= digit\n\n    # Check if the difference is divisible by 11\n    return diff % 11 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-1212]]}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): A list of tuples.\n        k (int): The number to check divisibility against.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n    \"\"\"\n    result = []\n    for t in tuples:\n        if all(elem % k == 0 for elem in t):\n            result.append(t)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Function to check if all tuples have equal length.\n\n    Parameters:\n    tuples (list): A list of tuples to be checked.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Finds the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of strings representing words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n    \"\"\"\n    longest_len = 0\n    for word in words:\n        if len(word) > longest_len:\n            longest_len = len(word)\n    return longest_len", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n\n    Parameters:\n    word (str): The input word.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    \"\"\"\n    return (4/3) * math.pi * radius**3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Parameters:\n    string1 (str): The first string from which characters will be removed.\n    string2 (str): The second string containing the characters to be removed from the first string.\n\n    Returns:\n    str: The modified string with characters from string2 removed from string1.\n\n    Example:\n    >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n    'bacuve'\n    \"\"\"\n    clean_string = \"\"\n    for char in string1:\n        if char not in string2:\n            clean_string += char\n    return clean_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    # Check if the array is increasing or decreasing\n    is_increasing = arr[0] <= arr[-1]\n\n    # Check if all elements in the array satisfy the monotonic condition\n    for i in range(1, len(arr)):\n        if is_increasing and arr[i] < arr[i-1]:\n            return False\n        elif not is_increasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test the function\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4, 5]) == True\nassert is_monotonic([5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 2, 1]) == False\nassert is_monotonic([1, 2, 3, 4, 2, 1]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Parameters:\n    lst (list): The list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n\n    Examples:\n    >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n    21\n    >>> recursive_list_sum([1, [2, [3, [4, 5]]]])\n    15\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using a recursive approach.\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns):\n    \"\"\"\n    Check if the patterns follow the given sequence.\n\n    Parameters:\n    patterns (list): A list of patterns to check.\n\n    Returns:\n    bool: True if the patterns follow the sequence, False otherwise.\n    \"\"\"\n    sequence = [\"red\", \"green\", \"green\"]\n    for i in range(len(patterns)):\n        if i >= len(sequence) or patterns[i] != sequence[i]:\n            return False\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for element in sublist:\n            if element in freq_dict:\n                freq_dict[element] += 1\n            else:\n                freq_dict[element] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Examples:\n        >>> pos_count([1,-2,3,-4])\n        2\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a given nested list of lists.\n\n    Parameters:\n    nested_lists (list): A nested list of lists containing elements to be compared.\n\n    Returns:\n    list: A list of common elements found in the nested lists.\n\n    Example:\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Finds the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The specified integer.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n\n    Examples:\n    >>> next_smallest_palindrome(99)\n    101\n    >>> next_smallest_palindrome(1234)\n    1331\n    \"\"\"\n\n    # Convert the integer to a string for easier manipulation\n    n_str = str(n)\n\n    # Find the length of the string\n    length = len(n_str)\n\n    # If the string is already a palindrome, increment it by 1\n    if n_str == n_str[::-1]:\n        n_str = str(int(n_str) + 1)\n\n    # If the string is a palindrome with all 9s, increment it by 2\n    if n_str == \"9\" * length:\n        n_str = \"1\" + \"0\" * (length - 1) + \"1\"\n\n    # Find the midpoint of the string\n    mid = length // 2\n\n    # If the string is odd length, ignore the middle character\n    if length % 2 == 1:\n        mid += 1\n\n    # Find the left and right halves of the string\n    left_half = n_str[:mid]\n    right_half = n_str[mid:]\n\n    # If the left half is greater than the right half, decrement the left half by 1\n    if left_half > right_half:\n        left_half = str(int(left_half) - 1)\n\n        # If the left half is now a single digit, add a leading 0\n        if len(left_half) < mid:\n            left_half = \"0\" + left_half\n\n        # Update the string with the new left half\n        n_str = left_half + n_str[mid:]\n\n    # If the left half is equal to the right half, increment the left half by 1\n    else:\n        left_half = str(int(left_half) + 1)\n\n        # If the left half is now a single digit, add a leading 0\n        if len(left_half) < mid:\n            left_half = \"0\" + left_half\n\n        # Update the string with the new left half\n        n_str = left_half + n_str[mid:]\n\n    # Reverse the right half and add it to the updated left half\n    n_str = n_str[:mid] + n_str[mid:][::-1]\n\n    # Return the next smallest palindrome as an integer\n    return int(n_str)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[0]]}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    \"\"\"\n    return 4 * math.pi * radius**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def rotate_binary_string(binary_string, num_rotations):\n    \"\"\"\n    Rotates a binary string the given number of times and returns the rotated string.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    str: The rotated binary string.\n    \"\"\"\n    binary_string = binary_string * num_rotations\n    return binary_string[num_rotations:] + binary_string[:num_rotations]\ndef count_odd_numbers(binary_string):\n    \"\"\"\n    Counts the number of odd numbers in a binary string.\n\n    Parameters:\n    binary_string (str): The binary string to be analyzed.\n\n    Returns:\n    int: The count of odd numbers in the binary string.\n    \"\"\"\n    count = 0\n    for digit in binary_string:\n        if int(digit) % 2 != 0:\n            count += 1\n    return count\ndef odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Finds the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be analyzed.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The count of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    rotated_string = rotate_binary_string(binary_string, num_rotations)\n    return count_odd_numbers(rotated_string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["011001", 6]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of True values in a given list.\n\n    Parameters:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n\n    Example:\n    >>> count_true_booleans([True, False, True])\n    2\n    \"\"\"\n    count = 0\n    for value in lst:\n        if value:\n            count += 1\n    return count\n\n# Test the function\ndef test_count_true_booleans():\n    assert count_true_booleans([True, False, True]) == 2\n    assert count_true_booleans([False, False, False]) == 0\n    assert count_true_booleans([True, True, True]) == 3\n    assert count_true_booleans([]) == 0\n    print(\"All tests passed\")\n\n# Run the tests\ntest_count_true_booleans()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Parameters:\n    lst (list): The list to be appended.\n    tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n    tuple: The resulting tuple after appending the list.\n\n    Example:\n    >>> add_lists([5, 6, 7], (9, 10))\n    (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find.\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If the input array is empty or if k is out of range.\n\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    # Sort the array in ascending order\n    arr.sort()\n\n    # Return the kth element\n    return arr[k - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initial values of the sequence\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n    Parameters:\n    tuples (list): A list of tuples containing values and their corresponding indices.\n\n    Returns:\n    str: The first value of the tuple with the smallest second value.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    \"\"\"\n    if not tuples:\n        raise ValueError(\"Input list is empty\")\n\n    min_index = tuples[0][1]\n    min_value = tuples[0][0]\n\n    for value, index in tuples[1:]:\n        if index < min_index:\n            min_index = index\n            min_value = value\n\n    return min_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Adam", 150, "NYC", true], ["Benjamin", 100, "LA", false], ["Charlie", 200, "Chicago", true], ["David", 125, "Miami", false]]]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Example:\n    >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(strings, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Parameters:\n    strings (list): A list of string values.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any of the strings, False otherwise.\n    \"\"\"\n    for string in strings:\n        if substring in string:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Example:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() for word in words)\n    return camel_str", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def find_min_length(lists):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Parameters:\n    lists (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    \"\"\"\n    if not isinstance(lists, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not all(isinstance(lst, list) for lst in lists):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lists:\n        return 0\n\n    min_length = float('inf')\n    for lst in lists:\n        min_length = min(min_length, len(lst))\n\n    return min_length\n\n# Test cases\nassert find_min_length([[1], [1, 2]]) == 1\nassert find_min_length([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 2\nassert find_min_length([[], [1, 2], [3, 4, 5, 6]]) == 0\nassert find_min_length([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == 2\nassert find_min_length([[1, 2, 3, 4], [5, 6, 7], [8, 9, 10, 11, 12]]) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): The tuple of positive integers to be converted.\n\n    Returns:\n    int: The single integer representation of the input tuple.\n\n    Example:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    \"\"\"\n    return int(''.join(map(str, tup)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Function to find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(0)\n    0\n    \"\"\"\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers to be multiplied.\n\n    Returns:\n        float: The result of multiplying all the numbers and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if not numbers:\n        return 0\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The item with maximum frequency in the list.\n\n    Example:\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    2\n    \"\"\"\n    frequency = {}\n    max_item = None\n    max_frequency = 0\n\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n        if frequency[item] > max_frequency:\n            max_frequency = frequency[item]\n            max_item = item\n\n    return max_item", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]]]}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    list: A list of strings split on the space character.\n\n    Example:\n    >>> string_to_list(\"python programming\")\n    ['python', 'programming']\n    \"\"\"\n    return string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Function to find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] != arr[mid - 1] and arr[mid] != arr[mid + 1]:\n            return arr[mid]\n\n        if (mid % 2 == 0 and arr[mid] == arr[mid - 1]) or (mid % 2 == 1 and arr[mid] == arr[mid + 1]):\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    if left == right:\n        return arr[left]\n\n    raise ValueError(\"More than one element appears only once\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        tuples_list (list): A list of tuples containing pairs of numbers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list or if the list contains elements other than tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(1, 2, 3), (4, 5, 6)])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list should contain tuples only.\n        >>> max_product_tuple(10)\n        Traceback (most recent call last):\n        ...\n        ValueError: Input should be a list.\n    \"\"\"\n\n    if not isinstance(tuples_list, list):\n        raise ValueError(\"Input should be a list.\")\n\n    for element in tuples_list:\n        if not isinstance(element, tuple):\n            raise ValueError(\"Input list should contain tuples only.\")\n\n    max_product = 0\n    for tup in tuples_list:\n        product = abs(tup[0] * tup[1])\n        if product > max_product:\n            max_product = product\n\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    This function removes the characters with odd index values from a given string.\n\n    Parameters:\n    string (str): The input string from which characters with odd index values are to be removed.\n\n    Returns:\n    str: The modified string with characters with odd index values removed.\n\n    Example:\n    >>> odd_values_string('abcdef')\n    'ace'\n    \"\"\"\n    modified_string = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            modified_string += string[i]\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer n as input and returns the number of divisors of n.\n\n    Parameters:\n    n (int): The integer for which the number of divisors is to be found.\n\n    Returns:\n    int: The number of divisors of n.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(24)\n    8\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n    >>> next_power_of_2(0)\n    1\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    4\n    >>> next_power_of_2(5)\n    8\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_set_bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    n (int): The number to count the set bits in.\n\n    Returns:\n    int: The count of set bits in the given number.\n\n    Examples:\n    >>> count_set_bits(2)\n    1\n    >>> count_set_bits(7)\n    3\n    >>> count_set_bits(0)\n    0\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function\nassert count_set_bits(2) == 1\nassert count_set_bits(7) == 3\nassert count_set_bits(0) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Finds the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): A binary string.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["100000011100000000111111111000000011111101"]]}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    matrix (list): A 2D list representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        return False\n\n    # Calculate the sum of any row or column\n    n = len(matrix)\n    expected_sum = sum(matrix[0])\n\n    # Check if each row and column sum to the expected sum\n    for i in range(n):\n        row_sum = sum(matrix[i])\n        col_sum = sum(matrix[j][i] for j in range(n))\n        if row_sum != expected_sum or col_sum != expected_sum:\n            return False\n\n    # Check if the diagonals sum to the expected sum\n    diag_sum1 = sum(matrix[i][i] for i in range(n))\n    diag_sum2 = sum(matrix[i][n-i-1] for i in range(n))\n    if diag_sum1 != expected_sum or diag_sum2 != expected_sum:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["12233112212523384455667788993344556677889925823384377889984455667718812233812233445566778899412233334455667788994123456789876543215566778891228334451223384455667718839956677889991234567898799"]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number for which to calculate the angle.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    \"\"\"\n    return math.atan2(z.imag, z.real)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n    >>> count_char_position(\"xbcefg\")\n    2\n    >>> count_char_position(\"abcdefg\")\n    7\n    >>> count_char_position(\"\")\n    0\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(ord('a') + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n\n    def flip(lst, end):\n        \"\"\"\n        Flips the elements in the list from the start to the end index.\n\n        Parameters:\n        lst (list): The list of elements.\n        end (int): The index up to which the elements need to be flipped.\n\n        Returns:\n        list: The flipped list of elements.\n\n        \"\"\"\n        start = 0\n        while start < end:\n            lst[start], lst[end] = lst[end], lst[start]\n            start += 1\n            end -= 1\n        return lst\n\n    def find_max_index(lst, end):\n        \"\"\"\n        Finds the index of the maximum element in the list up to the end index.\n\n        Parameters:\n        lst (list): The list of elements.\n        end (int): The index up to which the maximum element needs to be found.\n\n        Returns:\n        int: The index of the maximum element.\n\n        \"\"\"\n        max_index = 0\n        for i in range(end):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    current_size = n\n    while current_size > 1:\n        max_index = find_max_index(lst, current_size - 1)\n        if max_index != current_size - 1:\n            lst = flip(lst, max_index)\n            lst = flip(lst, current_size - 1)\n        current_size -= 1\n\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[7, 21, 76, 39, 52, 45, 83, 16, 35, 93]]]}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n\n    Example:\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    \"\"\"\n    neg_sum = 0\n    for num in numbers:\n        if num < 0:\n            neg_sum += num\n    return neg_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character and returns the modified string.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the given character.\n\n    Example:\n    >>> replace_blank(\"hello people\", '@')\n    'hello@people'\n    \"\"\"\n    return string.replace(' ', character)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check if a given number can be represented as the sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return False\n\n    while n != 1:\n        if n % 2 != 0:\n            return False\n        n //= 2\n\n    return True\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(14) == False\nassert is_sum_of_powers_of_two(16) == True\nassert is_sum_of_powers_of_two(32) == True\nassert is_sum_of_powers_of_two(64) == True\nassert is_sum_of_powers_of_two(0) == False\nassert is_sum_of_powers_of_two(1) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(15)\n    405\n    \"\"\"\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n    lst (list): The input list from which the n largest items are to be extracted.\n    n (int): The number of largest items to be returned.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Example:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    \"\"\"\n    lst_sorted = sorted(lst, reverse=True)  # Sort the list in descending order\n    return lst_sorted[:n]  # Return the first n items from the sorted list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    n (int): The target sum.\n\n    Returns:\n    tuple or None: A tuple (x, y) that satisfies ax + by = n, or None if no solution exists.\n    \"\"\"\n    if n == 0:\n        return (0, 0)\n\n    if a == 0:\n        if n % b == 0:\n            return (0, n // b)\n        else:\n            return None\n\n    if b == 0:\n        if n % a == 0:\n            return (n // a, 0)\n        else:\n            return None\n\n    if a == b:\n        if n % (2 * a) == 0:\n            return (n // (2 * a), n // (2 * a))\n        else:\n            return None\n\n    if a > b:\n        x, y = find_solution(a - b, b, n)\n        if x is not None:\n            return (x + 1, y)\n    else:\n        x, y = find_solution(a, b - a, n)\n        if y is not None:\n            return (x, y + 1)\n\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n\n    Example:\n    >>> sum_common_divisors(10, 15)\n    6\n    \"\"\"\n    def get_divisors(n):\n        \"\"\"\n        Finds the divisors of a given number.\n\n        Parameters:\n        n (int): The number.\n\n        Returns:\n        list: A list of divisors of n.\n        \"\"\"\n        divisors = []\n        for i in range(1, n + 1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_divisors = set(get_divisors(a)) & set(get_divisors(b))\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Finds the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"Invalid range\")\n\n    return sum(lst[start:end+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n    list3 (list): The third list.\n\n    Returns:\n    int: The count of items that are identical in the same position of the three lists.\n\n    Example:\n    >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n    3\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    Example:\n    >>> count_charac(\"python programming\")\n    18\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: The product of a and b.\n\n    Example:\n    >>> multiply_int(10, 20)\n    200\n    \"\"\"\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import math\ndef convert(complex_number):\n    \"\"\"\n    Converts a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n\n    Example:\n    >>> convert(1)\n    (1.0, 0.0)\n    \"\"\"\n    magnitude = abs(complex_number)\n    angle = math.phase(complex_number)\n    return (magnitude, angle)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["(1+0j)"]], "plus_fail_tests": [["(1+2j)"]]}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_list = [char for char in string if char.lower() in vowels]\n    vowel_list.reverse()\n    result = ''\n    vowel_index = 0\n    for char in string:\n        if char.lower() in vowels:\n            result += vowel_list[vowel_index]\n            vowel_index += 1\n        else:\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Sets all even bits of a given number to 1 and returns the modified number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The modified number with even bits set to 1.\n\n    Example:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(11)\n    14\n    \"\"\"\n    # Create a mask with all even bits set to 1\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits to 1\n    return num | mask", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Converts a tuple to a string.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    str: The converted string.\n\n    Example:\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    \"\"\"\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Parameters:\n    n (int): The minimum length of words to be considered.\n    sentence (str): The input sentence containing words.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n\n    Example:\n    >>> long_words(3, \"python is a programming language\")\n    ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum absolute difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of numbers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((-2, -1, -5, -3))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    \"\"\"\n    min_num = float('inf')\n    max_num = float('-inf')\n\n    for num in arr:\n        min_num = min(min_num, num)\n        max_num = max(max_num, num)\n\n    return max_num - min_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Function to check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    n (int): The length of the array.\n    element: The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    \"\"\"\n    Calculate the ratio of zeroes to non-zeroes in an array of integers.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    float: The ratio of zeroes to non-zeroes in the array.\n\n    Example:\n    >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n    0.181818\n    \"\"\"\n    zero_count = 0\n    non_zero_count = 0\n\n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n\n    if non_zero_count == 0:\n        return 0\n\n    return zero_count / non_zero_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon based on the length of its sides.\n\n    Parameters:\n    side_length (float): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Example:\n    >>> perimeter_pentagon(5)\n    25\n    \"\"\"\n    return 5 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Parameters:\n    string (str): The input string to search for the occurrences of 'std'.\n\n    Returns:\n    int: The count of occurrences of 'std' in the input string.\n\n    Example:\n    >>> count_occurance(\"letstdlenstdporstd\")\n    3\n    \"\"\"\n    count = 0\n    i = 0\n    while i < len(string):\n        if string[i:i+3] == 'std':\n            count += 1\n            i += 3\n        else:\n            i += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists of numbers.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        flattened_set.update(sublist)\n    return flattened_set", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst (list): The list from which elements need to be removed.\n        elements_to_remove (list): The list of elements to be removed from the given list.\n\n    Returns:\n        list: The updated list with elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Parameters:\n    tup (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if all elements in the tuple have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(tup[0])\n    for element in tup:\n        if not isinstance(element, data_type):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Parameters:\n    lst (list): The list to search for occurrences.\n    num: The number to count occurrences of.\n\n    Returns:\n    int: The count of occurrences of the number in the list.\n\n    Example:\n    >>> frequency([1, 2, 3], 4)\n    0\n    \"\"\"\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n\n    Examples:\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([])\n    0\n    >>> count_integer([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    \"\"\"\n    n = len(string)\n    count = n * (n + 1) // 2\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n\n    Example:\n    >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n    194\n    \"\"\"\n\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Find the maximum sum of increasing subsequence from the left side of the peak\n    max_sum_left = 0\n    current_sum = 0\n    for i in range(peak):\n        if arr[i] <= arr[i+1]:\n            current_sum += arr[i]\n        else:\n            max_sum_left = max(max_sum_left, current_sum + arr[i])\n            current_sum = 0\n    max_sum_left = max(max_sum_left, current_sum + arr[peak])\n\n    # Find the maximum sum of decreasing subsequence from the right side of the peak\n    max_sum_right = 0\n    current_sum = 0\n    for i in range(peak+1, n):\n        if arr[i] >= arr[i-1]:\n            current_sum += arr[i]\n        else:\n            max_sum_right = max(max_sum_right, current_sum + arr[i])\n            current_sum = 0\n    max_sum_right = max(max_sum_right, current_sum + arr[peak])\n\n    # Return the sum of the maximum sum of increasing and decreasing subsequences\n    return max_sum_left + max_sum_right", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Example:\n    >>> volume_cube(3)\n    27\n    \"\"\"\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_perfect_square(num):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n\n    Examples:\n    >>> next_perfect_square(35)\n    36\n    >>> next_perfect_square(121)\n    144\n    \"\"\"\n    # Find the square root of the given number\n    sqrt = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt * sqrt == num:\n        # If the square root is a perfect square, increment it to find the next perfect square\n        sqrt += 1\n\n    # Find the next perfect square by squaring the incremented square root\n    next_perfect_square = sqrt * sqrt\n\n    return next_perfect_square\n\n# Test the function\nassert next_perfect_square(35) == 36\nassert next_perfect_square(121) == 144", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n\n    Examples:\n        >>> insert_element(['Red', 'Green', 'Black'], 'c')\n        ['c', 'Red', 'c', 'Green', 'c', 'Black']\n    \"\"\"\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    \"\"\"\n    Counts the number of pairs of integers in a list that xor to an even number.\n\n    Parameters:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The count of pairs of integers that xor to an even number.\n\n    Example:\n    >>> find_even_pair([5, 4, 7, 2, 1])\n    4\n    \"\"\"\n    count = 0\n    num_set = set()\n\n    for num in nums:\n        if num ^ 1 in num_set:\n            count += 1\n        num_set.add(num)\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1]]], "plus_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]]}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The modified first list with the last element replaced by the elements of the second list.\n\n    Example:\n    >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n    [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    tuples (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Example:\n    >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n    {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    occurences = {}\n    for tup in tuples:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCD\")\n    1\n    >>> lps(\"AABB\")\n    2\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n+1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Function to find the number of possible sequences of length n,\n    where each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n\n    Parameters:\n    m (int): The upper limit of each element in the sequence.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of possible sequences.\n\n    Example:\n    >>> get_total_number_of_sequences(10, 4)\n    4\n    \"\"\"\n\n    # Base case: If n is 0, there is only one possible sequence (empty sequence)\n    if n == 0:\n        return 1\n\n    # Initialize the count of sequences\n    count = 0\n\n    # Iterate through all possible values for the first element of the sequence\n    for i in range(1, m+1):\n        # Recursively call the function for the remaining elements of the sequence\n        count += get_total_number_of_sequences(i*2-1, n-1)\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[100, 10]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The sum of the series.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    14\n    >>> sum_series(0)\n    0\n    \"\"\"\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        divisors = [1]\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors.append(i)\n                if i != num // i:\n                    divisors.append(num // i)\n        return sum(divisors)\n\n    amicable_sum = 0\n    for i in range(2, n + 1):\n        j = sum_proper_divisors(i)\n        if i != j and sum_proper_divisors(j) == i:\n            amicable_sum += i\n    return amicable_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the human_age is less than zero.\n\n    \"\"\"\n    if human_age < 0:\n        raise ValueError(\"Human age cannot be negative.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Example:\n    >>> lateralsurface_cube(5)\n    100\n    \"\"\"\n    return 4 * side_length**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Parameters:\n    lst (list): The input list containing numbers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n\n    Example:\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    \"\"\"\n    sum_even = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            sum_even += lst[i]\n    return sum_even", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The interval at which to split the list.\n\n    Returns:\n        list: A list of lists, where each sublist contains the nth elements from the input list.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Parameters:\n    lst (list): The list of elements to apply the format string to.\n    format_str (str): The format string to apply to the elements.\n\n    Returns:\n    list: A new list with the format string applied to each element.\n\n    Example:\n    >>> add_string([1, 2, 3, 4], 'temp{0}')\n    ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Finds the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    \"\"\"\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n\n    primes = [2, 3]  # Starting with the first two newman\u2013shanks\u2013williams primes\n\n    while len(primes) < n:\n        num = primes[-1] + 1  # Start checking from the next number after the last prime found\n\n        while True:\n            is_prime = True\n\n            for prime in primes:\n                if num % prime == 0:\n                    is_prime = False\n                    break\n\n            if is_prime:\n                primes.append(num)\n                break\n\n            num += 1\n\n    return primes[n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter by.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across two tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the division operation result element-wise.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            result.append(None)\n        else:\n            result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a given list are unique.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples and returns a list of rear elements.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    rear_elements = []\n    for tuple in tuples_list:\n        rear_elements.append(tuple[-1])\n    return rear_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check if the frequency of each digit in the given number is less than or equal to the digit itself.\n\n    Parameters:\n    num (int): The number to be validated.\n\n    Returns:\n    bool: True if the condition is satisfied, False otherwise.\n    \"\"\"\n    freq = [0] * 10  # Initialize frequency array for digits 0-9\n\n    # Count the frequency of each digit in the number\n    while num > 0:\n        digit = num % 10\n        freq[digit] += 1\n        num //= 10\n\n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in range(10):\n        if freq[digit] > digit:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Example:\n    >>> square_Sum(2)\n    10\n    \"\"\"\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return sum(num ** 2 for num in odd_numbers)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    Parameters:\n    char (str): The character for which the ASCII value is to be determined.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Example:\n    >>> ascii_value('A')\n    65\n    \"\"\"\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum elements from each tuple.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the maximum elements from each input tuple.\n\n    Example:\n    >>> maximize_elements((1, 3), (4, 5))\n    (4, 5)\n    >>> maximize_elements((1, 3), (2, 9))\n    (2, 9)\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        result.append(max(tuple1[i], tuple2[i]))\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    Example:\n    >>> sub_list([1, 2, 3],[4,5,6])\n    [-3, -3, -3]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(bb|bbb)'\n    return bool(re.fullmatch(pattern, text))", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["abbbba"]], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n    lst: A list of elements.\n    L: An integer representing the length of the first part of the list.\n\n    Returns:\n    A tuple containing two lists: the first part of the input list and the remaining elements.\n\n    Raises:\n    ValueError: If L is greater than the length of the input list.\n\n    Example:\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length L cannot be greater than the length of the input list.\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return (first_part, second_part)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Finds the list with the maximum length in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    tuple: A tuple containing the maximum length and the list with the maximum length.\n\n    Example:\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n\n    return max_len, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Finds the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list to be checked.\n    element: The element to compare with the list items.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate from a list of tuples.\n\n    Parameters:\n    tuples (list): A list of tuples containing names and scores.\n\n    Returns:\n    tuple: The name and the maximum aggregate.\n\n    Example:\n    >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n    ('Juan Whelan', 212)\n    \"\"\"\n    aggregates = {}\n    for name, score in tuples:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n    max_name = max(aggregates, key=aggregates.get)\n    max_aggregate = aggregates[max_name]\n    return (max_name, max_aggregate)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    \"\"\"\n    This function takes in an array and an element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n    Parameters:\n    arr (list): The input array to search in.\n    element: The element to search for in the array.\n\n    Returns:\n    tuple: A tuple containing a boolean indicating if the element is in the array and the index position of the element (or -1 if the element is not found).\n\n    Example:\n    >>> sequential_search([11,23,58,31,56,77,43,12,65,19],31)\n    (True, 3)\n    \"\"\"\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits for first and last n bits).\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    \"\"\"\n\n    def count_binary_seq_helper(n, sum_first, sum_last):\n        if n == 0:\n            return 1 if sum_first == sum_last else 0\n        count = 0\n        if sum_first < n:\n            count += count_binary_seq_helper(n-1, sum_first+1, sum_last)\n        if sum_last < n:\n            count += count_binary_seq_helper(n-1, sum_first, sum_last+1)\n        return count\n\n    return count_binary_seq_helper(2*n, 0, 0)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursive function to find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    max_depth = 0\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, dict_depth(value))\n\n    return max_depth + 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    61\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return find_star_num(n-1) + 6*(n-1)", "base_status": "fail", "plus_status": "timeout", "base_fail_tests": [[3]], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    This function takes two numbers (dividend and divisor) and returns the quotient of the division rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int or float): The number to be divided.\n    divisor (int or float): The number to divide by.\n\n    Returns:\n    int: The quotient of the division rounded down to the nearest integer.\n\n    Example:\n    >>> find_quotient(10, 3)\n    3\n    \"\"\"\n    quotient = dividend // divisor\n    return quotient\n\n# Test the function\ndef test_find_quotient():\n    assert find_quotient(10, 3) == 3\n    assert find_quotient(15, 4) == 3\n    assert find_quotient(20, 5) == 4\n    assert find_quotient(30, 7) == 4\n    assert find_quotient(40, 8) == 5\n    assert find_quotient(50, 10) == 5\n    assert find_quotient(60, 12) == 5\n    assert find_quotient(70, 15) == 4\n    assert find_quotient(80, 20) == 4\n    assert find_quotient(90, 25) == 3\n    assert find_quotient(100, 30) == 3\n\ntest_find_quotient()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the positions of two numbers and returns a tuple with the second number first and then the first number.\n\n    Args:\n    num1: The first number.\n    num2: The second number.\n\n    Returns:\n    A tuple with the second number first and then the first number.\n\n    Example:\n    >>> swap_numbers(10, 20)\n    (20, 10)\n    \"\"\"\n    return (num2, num1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Example:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n    # Calculate the binomial coefficients using Pascal's triangle\n    coeffs = [[1]]\n    for i in range(1, n+1):\n        row = [1]\n        for j in range(1, i):\n            row.append(coeffs[i-1][j-1] + coeffs[i-1][j])\n        row.append(1)\n        coeffs.append(row)\n\n    # Calculate the sum of even index binomial coefficients\n    sum_even_coeffs = 0\n    for i in range(0, n+1, 2):\n        sum_even_coeffs += coeffs[n][i]\n\n    return sum_even_coeffs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["3.14", false, 7.5]]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the modified array.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array.\n\n    Example:\n    >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n    30\n    \"\"\"\n\n    # Calculate the sum of the original array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_sum_repeated = max_sum * k\n\n    # If the total sum is positive, the maximum sum of a contiguous subarray in the modified array is the same as the maximum sum in the original array\n    if total_sum > 0:\n        return max_sum_repeated\n\n    # If the total sum is negative, the maximum sum of a contiguous subarray in the modified array is the minimum of the maximum sum in the original array and the sum of the original array multiplied by (k - 1)\n    return min(max_sum_repeated, total_sum * (k - 1))\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a contiguous subarray in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    Example:\n    >>> max_sub_array_sum([10, 20, -30, -1])\n    30\n    \"\"\"\n\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, len(arr)):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 20, -30, -1], 4, 3]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(base, height):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle given the base and height.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The length of the perpendicular height from the base to the hypotenuse.\n\n    Returns:\n    float: The length of the third side of the right-angled triangle.\n\n    Raises:\n    ValueError: If either base or height is negative.\n\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n\n    hypotenuse = math.sqrt(base**2 + height**2)\n    return hypotenuse", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Parameters:\n    tup (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n    ValueError: If the input array contains less than 2 integers.\n\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input array must contain at least 2 integers.\")\n\n    max_product = float('-inf')\n    result = None\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n\n    return result\n\n# Test the function\nassert max_product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    return (1/3) * math.pi * radius**2 * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenate each element of a tuple into a single string using a delimiter.\n\n    Parameters:\n    tup (tuple): The input tuple to be concatenated.\n    delimiter (str): The delimiter used to separate elements. Default is '-'.\n\n    Returns:\n    str: The concatenated string.\n\n    Example:\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(map(str, tup))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n\n    Example:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(3, 2)\n    2\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_products):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num_products (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the largest products.\n\n    Raises:\n        ValueError: If num_products is less than or equal to 0.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num_products <= 0:\n        raise ValueError(\"num_products must be greater than 0\")\n\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:num_products]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], [], 0]]}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two input numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list of the sums of digits for each number.\n\n    Example:\n    >>> sum_of_digits([10, 2, 56])\n    [1, 2, 11]\n    \"\"\"\n    result = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    min_val = None\n    for item in lst:\n        if min_val is None or item < min_val:\n            min_val = item\n\n    return min_val", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number to find the highest power of 2 for.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(32)\n    32\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Testing the function\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(32) == 32", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    tuple: A tuple of characters representing the input string.\n\n    Example:\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values[i]: scores[i]}}\n        result.append(nested_dict)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to be checked.\n    element: The element to search for in the tuple.\n\n    Returns:\n    bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    if element in tuplex:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    Parameters:\n    seq1 (list): The first sequence to check.\n    seq2 (list): The second sequence to check.\n\n    Returns:\n    bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples and returns a list of the extracted elements.\n\n    Parameters:\n    lst (list): The list of tuples from which the nth element is to be extracted.\n    n (int): The index of the element to be extracted from each tuple.\n\n    Returns:\n    list: A list of the extracted elements.\n\n    Example:\n    >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n    ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [tup[n] for tup in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    Returns two words from a list of words starting with letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words starting with letter 'p'.\n\n    Raises:\n        ValueError: If no words starting with letter 'p' are found.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n    p_words = [word for word in words if word.lower().startswith('p')]\n    if len(p_words) < 2:\n        raise ValueError(\"No two words starting with letter 'p' found.\")\n    return tuple(p_words[:2])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list with odd numbers removed.\n\n    Example:\n    >>> remove_odd([1, 2, 3])\n    [2]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The first non-repeated character in the string, or None if no such character exists.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Counts the number of sublists in a list that contain a particular element.\n\n    Parameters:\n    lst (list): The list of sublists to be searched.\n    element: The element to be counted.\n\n    Returns:\n    int: The count of sublists containing the element.\n\n    Example:\n    >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n    3\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number for which prime numbers are counted.\n\n    Returns:\n    int: The count of prime numbers less than the given non-negative number.\n\n    Examples:\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    >>> count_Primes_nums(20)\n    8\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(n):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The number with the left most unset bit set.\n\n    Example:\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    if n == 0:\n        return 1\n\n    # Find the position of the leftmost unset bit\n    position = 0\n    while n & (1 << position):\n        position += 1\n\n    # Set the leftmost unset bit\n    return n | (1 << position)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[255]]}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        tuples_list (list): A list of tuples containing pairs of integers.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list or if the list contains elements other than tuples.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([(3, 4), (5, 6), (7, 8)])\n        12\n    \"\"\"\n    if not isinstance(tuples_list, list):\n        raise ValueError(\"Input must be a list\")\n\n    if not all(isinstance(t, tuple) for t in tuples_list):\n        raise ValueError(\"List must contain only tuples\")\n\n    min_product = float('inf')\n    for t in tuples_list:\n        product = t[0] * t[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    Returns the last digit of a given number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n\n    Examples:\n    >>> last_digit(123)\n    3\n    >>> last_digit(456789)\n    9\n    >>> last_digit(0)\n    0\n    \"\"\"\n    return int(str(number)[-1])\n\n# Test the function\nassert last_digit(123) == 3\nassert last_digit(456789) == 9\nassert last_digit(0) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Example:\n    >>> cube_sum(2)\n    72\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum(num ** 3 for num in even_numbers)\n    return cube_sum\n\n# Test the function\nassert cube_sum(2) == 72", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Example:\n    >>> square_Sum(2)\n    20\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Finds the element of a list with the maximum length.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The element of the list with the maximum length.\n\n    Example:\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A', 'B', 'C']\n    \"\"\"\n    max_len = 0\n    max_element = []\n\n    for element in lst:\n        if len(element) > max_len:\n            max_len = len(element)\n            max_element = element\n\n    return max_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n\n    \"\"\"\n    def merge_and_count(left, right):\n        \"\"\"\n        Merges two sorted arrays and counts the number of inversions.\n\n        Parameters:\n        left (list): The left sorted array.\n        right (list): The right sorted array.\n\n        Returns:\n        list: The merged sorted array.\n        int: The number of inversions.\n\n        \"\"\"\n        merged = []\n        inversions = 0\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                merged.append(left[i])\n                i += 1\n            else:\n                merged.append(right[j])\n                j += 1\n                inversions += len(left) - i\n\n        merged.extend(left[i:])\n        merged.extend(right[j:])\n\n        return merged, inversions\n\n    def merge_sort_and_count(arr):\n        \"\"\"\n        Sorts and counts the number of inversions in an array using merge sort.\n\n        Parameters:\n        arr (list): The input array.\n\n        Returns:\n        list: The sorted array.\n        int: The number of inversions.\n\n        \"\"\"\n        if len(arr) <= 1:\n            return arr, 0\n\n        mid = len(arr) // 2\n        left, left_inversions = merge_sort_and_count(arr[:mid])\n        right, right_inversions = merge_sort_and_count(arr[mid:])\n        merged, split_inversions = merge_and_count(left, right)\n\n        return merged, left_inversions + right_inversions + split_inversions\n\n    _, inversions = merge_sort_and_count(arr)\n    return inversions", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters odd numbers from a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers to be filtered.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n\n    Example:\n    >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 3, 5, 7, 9]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    This function finds the first adverb and their positions in a given sentence.\n\n    Parameters:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the start and end positions of the adverb, and the adverb itself.\n\n    Example:\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    \"\"\"\n    adverbs = ['clearly', 'easily', 'often', 'always', 'never', 'suddenly']  # List of adverbs\n    words = sentence.split()  # Split the sentence into words\n\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:  # Check if the word is an adverb\n            return (i, i + len(word), word)  # Return the start and end positions and the adverb\n\n    return None  # Return None if no adverb is found", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["clearly!! we can see the sky"]], "plus_fail_tests": [["heavily and quickly we ran down the steep hill"]]}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): List of integers to be joined.\n\n    Returns:\n        int: The joined integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Parameters:\n    arr (list): The input array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n    str: The date in dd-mm-yyyy format.\n\n    Example:\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    \"\"\"\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the elementwise and of the input tuples.\n\n    Example:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] & tuple2[i])\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n    i (int): The index up to which the prefix is considered.\n    k (int): The index of the element to be included in the subsequence.\n\n    Returns:\n    int: The maximum sum of increasing subsequence.\n\n    \"\"\"\n\n    # Initialize the maximum sum to 0\n    max_sum = 0\n\n    # Iterate through the prefix from 0 to i\n    for j in range(i + 1):\n        # Check if the current element is greater than the previous element\n        if arr[j] > arr[j - 1]:\n            # Update the maximum sum\n            max_sum += arr[j]\n\n    # Add the kth element to the maximum sum\n    max_sum += arr[k]\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 2, 3]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product of any contiguous subarray.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n\n        if current_product > max_product:\n            max_product = current_product\n\n        if num == 0:\n            current_product = 1\n\n    return max_product", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2, -2, 4, -6, 8, 10, -12, -16, 8]]]}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with odd characters removed.\n\n    Example:\n    >>> remove_odd(\"python\")\n    'yhn'\n    \"\"\"\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(nums, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    nums (list): The list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    \"\"\"\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += nums[i]\n\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Example:\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    \"\"\"\n    median = (a + b) / 2\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Example:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its standard form coefficients a, b, and c.\n\n    Parameters:\n    a (float): The coefficient of the x^2 term.\n    b (float): The coefficient of the x term.\n    c (float): The constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Example:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n    # Calculate the directrix using the standard form of a parabola\n    directrix = -b / (2 * a)\n    return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check if a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n\n    Examples:\n    >>> is_sorted_list([1,2,4,6,8,10,12,14,16,17])\n    True\n    >>> is_sorted_list([1,3,2,4,6,8,10,12,14,16,17])\n    False\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\nassert is_sorted_list([1,3,2,4,6,8,10,12,14,16,17]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of negative numbers from the input list.\n\n    Example:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    \"\"\"\n    return [num for num in lst if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replace all occurrences of a character in a string with another character.\n\n    Parameters:\n    string (str): The input string.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace the old_char.\n\n    Returns:\n    str: The modified string with all occurrences of old_char replaced with new_char.\n\n    Example:\n    >>> replace_char(\"polygon\",'y','l')\n    \"pollgon\"\n    \"\"\"\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array of numbers.\n    num (int): The number to compare with the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all the elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n\n    Example:\n    >>> rectangle_area(10, 20)\n    200\n    \"\"\"\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculates the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Example:\n    >>> surfacearea_cube(5)\n    150\n    \"\"\"\n    return 6 * size ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a modulo value n as input.\n    It calculates the product of the array elements modulo n and returns the result.\n\n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array elements modulo n.\n\n    Example:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input is not a list of sublists.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n        >>> find_min_sublist([[1, 2, 3], [1], [1, 2]])\n        [1]\n        >>> find_min_sublist([[1, 2], [1, 2, 3], [1]])\n        [1]\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of sublists\")\n\n    if not lst:\n        return []\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple and returns a list of the extracted elements.\n\n    Parameters:\n    tup (tuple): The input tuple containing strings.\n\n    Returns:\n    list: A list of the rear index elements extracted from the input tuple.\n\n    Example:\n    >>> extract_rear(('Mers', 'for', 'Vers') )\n    ['s', 'r', 's']\n    \"\"\"\n    rear_elements = []\n    for string in tup:\n        rear_elements.append(string[-1])\n    return rear_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    \"\"\"\n    Counts the occurrence of all elements of a list in a tuple.\n\n    Parameters:\n    tuple_input (tuple): The input tuple.\n    list_input (list): The list of elements to count their occurrences in the tuple.\n\n    Returns:\n    int: The total count of occurrences of the elements in the tuple.\n\n    Example:\n    >>> count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'])\n    3\n    \"\"\"\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Parameters:\n    dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n    list: A list of tuples containing the sorted key-value pairs.\n\n    Example:\n    >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n    [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_list = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with cubes of the input numbers.\n\n    Example:\n    >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    cubes = [num ** 3 for num in nums]\n    return cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Returns the first digit of a given number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The first digit of the input number.\n\n    Examples:\n    >>> first_digit(123)\n    1\n    >>> first_digit(5678)\n    5\n    >>> first_digit(-90123)\n    -9\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer\n    return int(first_digit)\n\n# Test the function\nassert first_digit(123) == 1\nassert first_digit(5678) == 5\nassert first_digit(-90123) == -9", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(10)\n    87\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n <= 2:\n        return 1\n\n    perrin_nums = [3, 0, 2]\n    for i in range(3, n):\n        perrin_nums.append(perrin_nums[i-3] + perrin_nums[i-2])\n\n    return sum(perrin_nums)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Function to perform index wise multiplication of tuple elements in the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the index wise multiplication of elements from tuple1 and tuple2.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Example:\n    >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n    ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if len(tuple1[i]) != len(tuple2[i]):\n            raise ValueError(\"Elements of the input tuples must have the same length\")\n\n        element = []\n        for j in range(len(tuple1[i])):\n            element.append(tuple1[i][j] * tuple2[i][j])\n        result.append(tuple(element))\n\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns their union in sorted order.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the union of elements from tuple1 and tuple2 in sorted order.\n\n    Example:\n    >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 4, 5, 6, 7, 10)\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Parameters:\n    string_list (list): A list of string values.\n\n    Returns:\n    list: A new list with each string reversed.\n\n    Example:\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Parameters:\n    lst (list): The input list of elements.\n\n    Returns:\n    list: A list of lists containing all possible combinations of the input list.\n\n    Example:\n    >>> combinations_list(['orange', 'red', 'green', 'blue'])\n    [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\n    \"\"\"\n    def backtrack(start, path):\n        # Add the current combination to the result\n        result.append(path)\n\n        # Explore all possible combinations by extending the current path\n        for i in range(start, len(lst)):\n            backtrack(i + 1, path + [lst[i]])\n\n    result = []\n    backtrack(0, [])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Parameters:\n    tuple_list1 (list): The first list of tuples.\n    tuple_list2 (list): The second list of tuples.\n\n    Returns:\n    set: A set of tuples representing the intersection of the two input lists.\n\n    Example:\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n    {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list1:\n        for tuple2 in tuple_list2:\n            if set(tuple1) == set(tuple2):\n                intersection.add(tuple1)\n                break\n    return intersection", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]]], "plus_fail_tests": [[[[2, 3, 1], [6, 5, 4], [11, 12, 10]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]]]}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    Parameters:\n    month_number (int): The number of the month to check.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_month_number(5) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    list1 (list): The first list to be interleaved.\n    list2 (list): The second list to be interleaved.\n    list3 (list): The third list to be interleaved.\n\n    Returns:\n    list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    Example:\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(12)\n    4\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    last_digit = 1\n    for i in range(2, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n\n    Example:\n    >>> remove_whitespaces(' Google    Flutter ')\n    'GoogleFlutter'\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n    >>> digit_distance_nums(1, 2)\n    1\n    >>> digit_distance_nums(123, 321)\n    12\n    >>> digit_distance_nums(1234, 4321)\n    10\n    \"\"\"\n    # Convert the integers to strings for easy access to their digits\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Find the length of the longer integer\n    max_length = max(len(num1_str), len(num2_str))\n\n    # Pad the shorter integer with leading zeros to match the length of the longer integer\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n\n    # Calculate the sum of the per-digit difference\n    sum_diff = 0\n    for i in range(max_length):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    return sum_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Hello World\")\n    'hELLO wORLD'\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = list(set(numbers))\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Examples:\n    >>> difference(3)\n    30\n    >>> difference(5)\n    70\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n\n    Example:\n    >>> convert_to_lower(\"InValid\")\n    'invalid'\n    \"\"\"\n    return string.lower()\n\n# Test the function\ndef test_convert_to_lower():\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n\ntest_convert_to_lower()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [string for string in string_list if len(string) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Parameters:\n    string (str): The input string to be split into characters.\n\n    Returns:\n    list: A list of characters extracted from the input string.\n\n    Example:\n    >>> split_string('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\ndef test_split_string():\n    assert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']\n\ntest_split_string()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + sum_digits(n // 10)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    \"\"\"\n    Extracts the first element of each sublist and returns a list of these elements.\n\n    Args:\n        sublists (list): A list of sublists.\n\n    Returns:\n        list: A list of the first elements of the sublists.\n\n    Examples:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    return [sublist[0] for sublist in sublists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string from which uppercase substrings need to be removed.\n\n    Returns:\n    str: The modified string with uppercase substrings removed.\n\n    Example:\n    >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n    'cstyoravoitshos'\n    \"\"\"\n    result = ''\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            result += string[i]\n        else:\n            j = i + 1\n            while j < len(string) and string[j].isupper():\n                j += 1\n            i = j\n        i += 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["cAstyoUrFavoRitETVshoWs"]], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n    n = len(arr)\n    if n < 2:\n        return 0\n\n    max_ending_here = [arr[0]] * n\n    min_ending_here = [arr[0]] * n\n\n    for i in range(1, n):\n        max_ending_here[i] = max(arr[i], max_ending_here[i-1] * arr[i], min_ending_here[i-1] * arr[i])\n        min_ending_here[i] = min(arr[i], max_ending_here[i-1] * arr[i], min_ending_here[i-1] * arr[i])\n\n    return max(max_ending_here)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    dict: The dictionary with empty items removed.\n\n    Example:\n    >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n    {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 20, 30, 40])\n        30\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    smallest = nums[0]\n    largest = nums[0]\n\n    for num in nums:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return largest - smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([5, 10, 15, 20])\n    25\n    >>> big_sum([-5, -10, -15, -20])\n    -35\n    \"\"\"\n    smallest = arr[0]\n    largest = arr[0]\n\n    for num in arr:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def find_max_length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the longest sublist.\n\n    Example:\n    >>> find_max_length([[1], [1, 4], [5, 6, 7, 8]])\n    4\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Test the function\nassert find_max_length([[1], [1, 4], [5, 6, 7, 8]]) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of neighboring elements of the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: A tuple containing the pairwise addition of neighboring elements.\n\n    Example:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Example:\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2 != 0:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1], 5]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with lowercase substrings removed.\n\n    Examples:\n    >>> remove_lowercase(\"PYTHon\")\n    'PYTH'\n    >>> remove_lowercase(\"Python\")\n    'Python'\n    >>> remove_lowercase(\"python\")\n    ''\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            while i < len(string) and string[i].islower():\n                i += 1\n        else:\n            result += string[i]\n            i += 1\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return True\n\n    diff = lst[1] - lst[0]\n    for i in range(2, len(lst)):\n        if lst[i] - lst[i-1] != diff:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n\n    Example:\n    >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n    [1, 3, 5]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\ndef test_get_odd_numbers():\n    \"\"\"\n    This function tests the get_odd_numbers function.\n    \"\"\"\n    assert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n    assert get_odd_numbers([2, 4, 6, 8]) == []\n    assert get_odd_numbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n    assert get_odd_numbers([-1, 0, 1, -2, 2]) == [-1, 1, -2]\n    print(\"All tests passed\")\n\n# Run the tests\ntest_get_odd_numbers()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    This function removes duplicate numbers from a given list of numbers and returns a new list with only two unique numbers.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A new list with only two unique numbers.\n\n    Example:\n    >>> two_unique_nums([1, 2, 3, 2, 3, 4, 5])\n    [1, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))\n    if len(unique_nums) < 2:\n        return unique_nums\n    else:\n        return unique_nums[:2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 2, 3, 4, 5]]], "plus_fail_tests": [[[1, 2, 3, 2, 4, 5, 3, 6, 4, 7, 8, 9, 5, 6]]]}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    nested_tuple (tuple): The nested mixed tuple to be processed.\n\n    Returns:\n    tuple: The nested mixed tuple with uneven elements removed.\n\n    Examples:\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    def is_even(num):\n        return num % 2 == 0\n\n    def process_tuple(tup):\n        return tuple(process_tuple(item) if isinstance(item, tuple) else item for item in tup if is_even(item))\n\n    return process_tuple(nested_tuple)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[4, 5, [7, 6, [2, 4]], 6, 8]]], "plus_fail_tests": [[[1, 2, 3, [4, 5, [6, 7, [8, 9, [10, 11, [12, 13, [14, 15, [16, 17, [18, 19, [20]]]]]]]]]]]]}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(nums, target):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    nums (list): A list of integers.\n    target (int): The target value for the pairs.\n\n    Returns:\n    int: The count of possible unordered pairs.\n\n    Examples:\n    >>> count_Pairs([1, 2, 1], 3)\n    2\n    >>> count_Pairs([1, 2, 3, 4, 5], 6)\n    10\n    \"\"\"\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] != nums[j] and nums[i] + nums[j] == target:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], 5]], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10]]}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    values = []\n    i = 0\n    while i < len(string):\n        if string[i] == '\"':\n            start = i + 1\n            end = start\n            while end < len(string) and string[end] != '\"':\n                end += 1\n            values.append(string[start:end])\n            i = end + 1\n        else:\n            i += 1\n    return values", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["\"This is a \"nested\"\" input string.\""]]}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The input list to be split.\n    n (int): The index at which the list should be split.\n\n    Returns:\n    list: The modified list with the first part added to the end.\n\n    Example:\n    >>> split_Arr([12,10,5,6,52,36],2)\n    [5, 6, 52, 36, 12, 10]\n    \"\"\"\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial coefficients to consider.\n\n    Returns:\n    int: The sum of the product of the consecutive binomial coefficients.\n\n    Example:\n    >>> sum_of_product(3)\n    15\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculates the binomial coefficient (n choose k).\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial coefficient (n choose k).\n\n        Example:\n        >>> binomial_coefficient(5, 2)\n        10\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        else:\n            return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    result = 0\n    for i in range(1, n+1):\n        result += i * binomial_coefficient(n+i-1, i)\n\n    return result\n\n# Test the function\nassert sum_of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Function to find the n most expensive items in a given dataset.\n\n    Parameters:\n    dataset (list): A list of dictionaries representing items with 'name' and 'price' keys.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list: A list of dictionaries representing the n most expensive items from the dataset.\n\n    Example:\n    >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n    [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The position of the element to find.\n\n    Returns:\n    int: The kth element from the merged sorted arrays.\n\n    Raises:\n    ValueError: If k is out of range for the combined length of the arrays.\n\n    \"\"\"\n    # Check if k is out of range for the combined length of the arrays\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range for the combined length of the arrays\")\n\n    # Initialize pointers for arr1 and arr2\n    i, j = 0, 0\n\n    # Iterate until either arr1 or arr2 is exhausted\n    while i < len(arr1) and j < len(arr2):\n        # If arr1[i] is smaller, increment i and decrement k\n        if arr1[i] < arr2[j]:\n            i += 1\n            k -= 1\n        # If arr2[j] is smaller, increment j and decrement k\n        else:\n            j += 1\n            k -= 1\n\n    # If arr1 is exhausted, return the kth element from arr2\n    if i == len(arr1):\n        return arr2[j + k - 1]\n\n    # If arr2 is exhausted, return the kth element from arr1\n    if j == len(arr2):\n        return arr1[i + k - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 3, 6, 7, 9], [1, 4, 8, 10], 5]], "plus_fail_tests": [[[1, 2, 3], [true, true, false], 3]]}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all Lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The given integer.\n\n    Returns:\n    list: A list of Lucid numbers.\n\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"\n        Helper function to check if a number is Lucid.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is Lucid, False otherwise.\n\n        \"\"\"\n        if num == 1:\n            return True\n        elif num % 2 == 0:\n            return False\n        else:\n            return is_lucid(num - 2)\n\n    lucid_nums = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_nums.append(num)\n\n    return lucid_nums\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n\n    Example:\n    >>> empty_list(5)\n    [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_sub_array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to check.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i + len(sub_arr)] == sub_arr:\n            return True\n\n    return False\n\n# Test cases\nassert is_sub_array([1, 4, 3, 5], [1, 2]) == False\nassert is_sub_array([1, 2, 3, 4], [1, 2]) == True\nassert is_sub_array([1, 2, 3, 4], [2, 3]) == True\nassert is_sub_array([1, 2, 3, 4], [3, 4]) == True\nassert is_sub_array([1, 2, 3, 4], [1, 2, 3, 4]) == True\nassert is_sub_array([1, 2, 3, 4], [1, 2, 3, 4, 5]) == False\nassert is_sub_array([1, 2, 3, 4], [1, 3]) == False\nassert is_sub_array([1, 2, 3, 4], [2, 4]) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Parameters:\n    string (str): The input string to search for repeated characters.\n\n    Returns:\n    str: The first repeated character in the string, or None if no repeated character is found.\n\n    Examples:\n    >>> first_repeated_char(\"abcabc\")\n    'a'\n    >>> first_repeated_char(\"abcd\")\n    None\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n\n    Example:\n    >>> convert_to_uppercase(\"person\")\n    'PERSON'\n    \"\"\"\n    return string.upper()\n\n# Test the function\ndef test_convert_to_uppercase():\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n\ntest_convert_to_uppercase()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string for easy iteration\n    num_str = str(num)\n\n    # Calculate the sum of the cube of each digit\n    armstrong_sum = sum(int(digit) ** len(num_str) for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return armstrong_sum == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Example:\n    >>> surface_area(3, 4)\n    33.0\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge ** 2)\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33.0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \n    Args:\n    lst (list): A list of lists, where each sublist has two elements.\n    \n    Returns:\n    list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with the first and last elements swapped.\n\n    Example:\n    >>> swap_list([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        lst[0], lst[-1] = lst[-1], lst[0]\n        return lst\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Parameters:\n    list1 (list): The first sorted list.\n    list2 (list): The second sorted list.\n    n (int): The size of the lists.\n\n    Returns:\n    float: The median of the two sorted lists.\n\n    Raises:\n    ValueError: If the lists are not of the same size.\n\n    \"\"\"\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"Lists must be of the same size.\")\n\n    i = 0\n    j = 0\n    count = 0\n    median = 0\n    while count < n:\n        if list1[i] < list2[j]:\n            median = list1[i]\n            i += 1\n        else:\n            median = list2[j]\n            j += 1\n        count += 1\n\n    if n % 2 == 0:\n        return (median + min(list1[i], list2[j])) / 2.0\n    else:\n        return median\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nn = 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1], [2], 1]]}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        total = sum(tup)\n        average = total / len(tup)\n        averages.append(average)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A tuple containing the dissimilar elements from both tuples.\n\n    Example:\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference between the first even and first odd number of a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list is empty or does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8])\n        0\n        >>> diff_even_odd([1, 3, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: The list does not contain any even or odd numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"The list does not contain any even or odd numbers.\")\n\n    return even_numbers[0] - odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    tuple: The converted tuple.\n\n    Example:\n    >>> list_tuple([5, 10, 7, 4, 15, 3])\n    (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(tup):\n    \"\"\"\n    Calculate the size in bytes of a given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the input tuple.\n\n    Example:\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    80\n    \"\"\"\n    return sys.getsizeof(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Parameters:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the given numbers.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    squares = []\n    for num in range(start, end + 1):\n        if int(num ** 0.5) ** 2 == num:\n            squares.append(num)\n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, -1]]}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replace all spaces in the given string with '%20'.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by '%20'.\n\n    Example:\n    >>> replace_spaces(\"My Name is Dawood\")\n    'My%20Name%20is%20Dawood'\n    \"\"\"\n    return string.replace(\" \", \"%20\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import math\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), (x + 1j * y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Function to find the nth Bell number.\n\n    Parameters:\n    n (int): The position of the Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(5)\n    5\n    \"\"\"\n    if n == 0 or n == 1:\n        return 1\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n    bell[1] = 1\n\n    for i in range(2, n + 1):\n        bell[i] = 0\n        for j in range(i - 1, -1, -1):\n            bell[j] = bell[j] + bell[j - 1]\n\n    return bell[n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the element wise modulo of the input tuples.\n\n    Raises:\n    ValueError: If the input tuples are not of the same length.\n\n    Examples:\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Converts degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise and returns the result as a new list.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        if list2[i] != 0:\n            result.append(list1[i] / list2[i])\n        else:\n            result.append(float('nan'))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Function to find the cumulative sum of all the values in the given tuple list.\n\n    Parameters:\n    tuple_list (list): A list of tuples containing numeric values.\n\n    Returns:\n    int: The cumulative sum of all the values in the tuple list.\n\n    Example:\n    >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n    30\n    \"\"\"\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculates the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum_numbers = n * (n + 1) // 2\n    average = sum_numbers / n\n    return sum_numbers, average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    \"\"\"\n    Calculates the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n\n    Parameters:\n    radius (float): The radius of the semicircle.\n\n    Returns:\n    float: The area of the largest triangle, or None if the radius is negative.\n    \"\"\"\n    if radius < 0:\n        return None\n\n    # Calculate the height of the triangle\n    height = math.sqrt(radius**2 - (radius/2)**2)\n\n    # Calculate the area of the triangle\n    area = (radius**2) * (math.pi/4)\n\n    return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check if a given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from a given list and returns the modified list.\n\n    Parameters:\n    lst (list): The input list from which the k'th element is to be removed.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: The modified list with the k'th element removed.\n\n    Example:\n    >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with all numbers moved to the end.\n\n    Example:\n    >>> move_num('I1love143you55three3000thousand')\n    'Iloveyouthreethousand1143553000'\n    \"\"\"\n    num_string = ''\n    non_num_string = ''\n\n    for char in string:\n        if char.isdigit():\n            num_string += char\n        else:\n            non_num_string += char\n\n    return non_num_string + num_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list of even numbers.\n\n    Example:\n    >>> find_even_numbers([1, 2, 3, 4, 5])\n    [2, 4]\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n    string (str): The input string to search.\n    pattern (str): The regex pattern to match.\n\n    Returns:\n    tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n    ValueError: If the input string or pattern is empty.\n\n    Example:\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    if not string or not pattern:\n        raise ValueError(\"Input string and pattern cannot be empty.\")\n\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", ""]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Parameters:\n    ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n\n    Example:\n    >>> removezero_ip(\"216.08.094.196\")\n    '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Parameters:\n    string (str): The input string containing words seperated by spaces.\n\n    Returns:\n    str: The reversed string with words in reverse order.\n\n    Example:\n    >>> reverse_words(\"python program\")\n    'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix represented as a list of lists.\n\n    Parameters:\n    matrix (list of lists): The matrix to be processed.\n    n (int): The index of the column to find the maximum value in.\n\n    Returns:\n    int: The maximum value in the nth column of the matrix.\n\n    Raises:\n    ValueError: If the matrix is empty or if the column index is out of range.\n\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column index out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([2, 4, 6, 8, 10])\n        5\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, subset):\n        \"\"\"\n        Recursive function to find the largest subset of numbers.\n\n        Args:\n            numbers (list): A list of numbers.\n            subset (list): The current subset being considered.\n\n        Returns:\n            list: The largest subset found so far.\n        \"\"\"\n        if not numbers:\n            return subset\n\n        new_subset = subset + [numbers[0]]\n        for i in range(1, len(numbers)):\n            if is_divisible(numbers[0], numbers[i]):\n                new_subset = find_subset(numbers[1:i] + numbers[i+1:], new_subset)\n                break\n\n        return max(find_subset(numbers[1:], subset), new_subset, key=len)\n\n    return len(find_subset(numbers, []))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 6, 13, 17, 18]]], "plus_fail_tests": [[[11, 22, 33, 44, 55, 66, 77, 88, 99, 110]]]}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to raise each number to.\n\n    Returns:\n    list: A new list with the n-th power of each number in the original list.\n\n    Example:\n    >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than 2 elements.\n\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least 2 elements.\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update minimum difference if a smaller difference is found\n\n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with all zeroes moved to the end.\n\n    Examples:\n    >>> move_zero([1,0,2,0,3,4])\n    [1,2,3,4,0,0]\n    >>> move_zero([0,0,1,2,3,0])\n    [1,2,3,0,0,0]\n    >>> move_zero([0,0,0,0,0,0])\n    [0,0,0,0,0,0]\n    \"\"\"\n    non_zero_lst = [num for num in lst if num != 0]\n    zero_lst = [0] * (len(lst) - len(non_zero_lst))\n    return non_zero_lst + zero_lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to which the base is raised.\n\n    Returns:\n    int: The sum of all digits of the result.\n\n    Example:\n    >>> power_base_sum(2, 100)\n    115\n    \"\"\"\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of the XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): The list of numbers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of the XOR of all pairs of numbers.\n\n    Example:\n    >>> pair_xor_Sum([5,9,7,6],4)\n    47\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    int: The count of indices where the lists have the same values.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    Example:\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) < 2:\n        return True\n    else:\n        first_char = string[0]\n        for char in string:\n            if char != first_char:\n                return False\n        return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[float('-inf') for _ in range(n)] for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n    return dp[n-1][n-1] / (n*n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A new list of numbers sorted in ascending order.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(map(int, numbers))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array upto the given position.\n\n    Example:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\ndef test_reverse_array_upto_k():\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0) == [1, 2, 3, 4, 5, 6]\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6) == [6, 5, 4, 3, 2, 1]\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 10) == [6, 5, 4, 3, 2, 1]\n    assert reverse_array_upto_k([], 0) == []\n    assert reverse_array_upto_k([1], 0) == [1]\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], -1) == [1, 2, 3, 4, 5, 6]\n    assert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 7) == [6, 5, 4, 3, 2, 1]\n\ntest_reverse_array_upto_k()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples containing records with values.\n        k (int): The number of minimum records to be returned.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If the number of records is less than k.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if len(records) < k:\n        raise ValueError(\"Number of records is less than k\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort records based on values\n    return sorted_records[:k]  # Return the first k records", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Example:\n    >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    \"\"\"\n    sum_length = 0\n    for name in names:\n        if name[0].isupper():\n            sum_length += len(name)\n    return sum_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array in which to search for the target number.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number in the array, or -1 if the target is not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    wind_velocity (int or float): Wind velocity in km/h.\n    temperature (int or float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    \"\"\"\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def diff_lists(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the elements that are present in list1 but not in list2.\n\n    Example:\n    >>> diff_lists([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return [item for item in list1 if item not in list2]\n\n# Test the function\ndef test_diff_lists():\n    assert diff_lists([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n    assert diff_lists([1, 2, 3], [4, 5, 6]) == [1, 2, 3]\n    assert diff_lists([1, 2, 3], [1, 2, 3]) == []\n    assert diff_lists([1, 2, 3], []) == [1, 2, 3]\n    assert diff_lists([], [1, 2, 3]) == []\n    assert diff_lists([1, 2, 3], [2, 3, 4]) == [1]\n    assert diff_lists([1, 2, 3], [3, 2, 1]) == [1]\n    assert diff_lists([1, 2, 3], [4, 5, 6, 7]) == [1, 2, 3]\n    assert diff_lists([1, 2, 3], [1, 2, 3, 4, 5, 6, 7]) == []\n    assert diff_lists([1, 2, 3, 4, 5, 6, 7], [1, 2, 3]) == [4, 5, 6, 7]\n    assert diff_lists([1, 2, 3, 4, 5, 6, 7], [3, 4, 5, 6, 7, 8, 9]) == [1, 2]\n    assert diff_lists([1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8, 9]) == []\n\ntest_diff_lists()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    \"\"\"\n    Filters students based on height and weight above the minimum values.\n\n    Args:\n        students (dict): A dictionary with student names as keys and tuples of height and weight as values.\n        min_height (float): The minimum height required.\n        min_weight (float): The minimum weight required.\n\n    Returns:\n        dict: A dictionary containing the filtered students.\n\n    Example:\n        >>> filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)\n        {'Cierra Vega': (6.2, 70)}\n    \"\"\"\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Cierra Vega": [6.2, 70], "Alden Cantrell": [5.9, 65], "Kierra Gentry": [6.0, 68], "Pierre Cox": [5.8, 66]}, 6.0, 70]], "plus_fail_tests": [[{"Alice": [5.6, 60], "Bob": [6.1, 70], "Charlie": [5.9, 65], "Dave": [5.11, 72], "Eve": [6.0, 68], "Frank": [5.7, 63]}, 5.8, 65]]}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Parameters:\n    expression (str): The expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    opening_brackets = ['(', '{', '[']\n    closing_brackets = [')', '}', ']']\n    bracket_pairs = {'(': ')', '{': '}', '[': ']'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            if char != bracket_pairs[stack.pop()]:\n                return False\n\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Examples:\n    >>> is_nonagonal(10)\n    325\n    \"\"\"\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check if the given amount has no profit and no loss.\n\n    Parameters:\n    amount (int): The actual amount.\n    expected_amount (int): The expected amount.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces replaced by underscores and vice versa.\n\n    Example:\n    >>> replace_spaces('Jumanji The Jungle')\n    'Jumanji_The_Jungle'\n    \"\"\"\n    modified_string = ''\n    for char in string:\n        if char == ' ':\n            modified_string += '_'\n        elif char == '_':\n            modified_string += ' '\n        else:\n            modified_string += char\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of pairs of consecutive items in the input list.\n\n    Example:\n    >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    This function checks if a string contains 'z' except at the start and end of the word.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n\n    Examples:\n    >>> text_match_wordz_middle(\"pythonzabc.\")\n    True\n    >>> text_match_wordz_middle(\"pythonz\")\n    False\n    >>> text_match_wordz_middle(\"zpythonz\")\n    False\n    \"\"\"\n    # Check if the string starts with 'z' or ends with 'z'\n    if text.startswith('z') or text.endswith('z'):\n        return False\n\n    # Check if 'z' is present in the middle of the string\n    for i in range(1, len(text)-1):\n        if text[i] == 'z':\n            return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def heapify(arr, n, i):\n        \"\"\"\n        Builds a max heap from the given list.\n\n        Parameters:\n        arr (list): The list to be heapified.\n        n (int): The size of the heap.\n        i (int): The index of the root of the subtree.\n\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(lst)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(lst, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the sum of corresponding elements from the input lists.\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list with the sum of corresponding elements from the input lists.\n\n    Example:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs in a list whose sum is equal to a given target sum.\n\n    Args:\n        numbers (list): A list of numbers.\n        target_sum (int): The target sum for the pairs.\n\n    Returns:\n        int: The count of pairs whose sum is equal to the target sum.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([2, 3, 4, 5, 6], 9)\n        3\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Parameters:\n    string (str): The input string to search for the substring.\n    substring (str): The substring to search for in the string.\n\n    Returns:\n    tuple or None: If a match is found, returns a tuple containing the substring, start index, and end index. If no match is found, returns None.\n\n    Example:\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    \"\"\"\n    if substring in string:\n        start_index = string.index(substring)\n        end_index = start_index + len(substring)\n        return (substring, start_index, end_index)\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n\n    Example:\n    >>> number_ctr('program2bedone')\n    1\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Parameters:\n    numbers (list): A list of numbers to be checked.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    \"\"\"\n    # Calculate the slant height of the cone\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area using the formula:\n    # LSA = \u03c0 * r * s\n    lsa = math.pi * r * s\n\n    return lsa", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all words with length k from the given string.\n\n    Parameters:\n    string (str): The input string.\n    k (int): The length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n\n    Example:\n    >>> remove_length('The person is most value tet', 3)\n    'person is most value'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    This function takes a tuple of numbers as input and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n\n    Parameters:\n    t (tuple): A tuple of numbers.\n\n    Returns:\n    tuple: A tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Example:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] * t[i + 1])\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon in a given string.\n\n    Parameters:\n    string (str): The input string to be processed.\n\n    Returns:\n    str: The processed string with spaces, commas, and dots replaced with colons.\n\n    Example:\n    >>> replace_specialchar('Python language, Programming language.')\n    'Python:language::Programming:language:'\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':')\n    return string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Parameters:\n    num (int): The number whose middle bits are to be toggled.\n\n    Returns:\n    int: The number with toggled middle bits.\n\n    Example:\n    >>> toggle_middle_bits(9)\n    15\n    \"\"\"\n    if num < 3:\n        return num\n\n    # Calculate the number of bits in the given number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle the middle bits\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using bitwise XOR\n    toggled_num = num ^ mask\n\n    return toggled_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    Example:\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds combinations of sums with tuples in the given tuple list.\n\n    Parameters:\n    tuple_list (list): A list of tuples.\n\n    Returns:\n    list: A list of tuples representing combinations of sums.\n\n    Example:\n    >>> find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])\n    [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Example:\n    >>> odd_num_sum(2)\n    82\n    \"\"\"\n    odd_sum = 0\n    for i in range(1, 2*n + 1, 2):\n        odd_sum += i**4\n    return odd_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiou]'\n    return bool(re.match(pattern, string, re.IGNORECASE))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        if '.' in string:\n            parts = string.split('.')\n            if len(parts) == 2 and len(parts[1]) <= 2:\n                return True\n        return False\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The list with consecutive duplicates removed.\n\n    Example:\n    >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert a given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n    tup -- A tuple of elements.\n\n    Returns:\n    A dictionary with adjacent elements as key-value pairs.\n\n    Raises:\n    ValueError: If the length of the tuple is odd.\n\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even.\")\n\n    result = {}\n    for i in range(0, len(tup), 2):\n        result[tup[i]] = tup[i+1]\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Finds the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than 2 elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1])\n        Traceback (most recent call last):\n        ...\n        ValueError: List must have at least 2 elements.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to the tuple and returns the resulting tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    dictionary (dict): The dictionary to be added to the tuple.\n\n    Returns:\n    tuple: The resulting tuple with the dictionary added.\n\n    Example:\n    >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3})\n    (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tup + (dictionary,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple.\n\n    Returns:\n    tuple: An integer tuple.\n\n    Example:\n    >>> tuple_str_int(\"(7, 8, 9)\")\n    (7, 8, 9)\n    \"\"\"\n    # Remove the parentheses from the string\n    tuple_str = tuple_str.strip('()')\n\n    # Split the string into individual elements\n    elements = tuple_str.split(',')\n\n    # Convert each element to an integer\n    elements = [int(element) for element in elements]\n\n    # Create a tuple from the list of integers\n    result = tuple(elements)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Parameters:\n    lst (list): The list to which the tuple is to be added.\n    tup (tuple): The tuple to be added to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n\n    Example:\n    >>> add_tuple([5, 6, 7], (9, 10))\n    [5, 6, 7, 9, 10]\n    \"\"\"\n    lst.extend(tup)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of non-repeated elements.\n\n    Example:\n    >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n    21\n    \"\"\"\n    non_repeated_sum = 0\n    seen = set()\n    for num in lst:\n        if num not in seen:\n            non_repeated_sum += num\n            seen.add(num)\n    return non_repeated_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    num_items (int): The number of items to rotate.\n\n    Returns:\n    list: The rotated list.\n\n    Example:\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    num_items = num_items % len(lst)  # Adjust the number of items to rotate if it exceeds the length of the list\n    return lst[-num_items:] + lst[:-num_items]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Parameters:\n    tup (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check if the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The number of the month to check.\n\n    Returns:\n    bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_of_subarray_prod([1, 2, 3])\n    20\n    >>> sum_of_subarray_prod([4, 5, 6])\n    120\n    \"\"\"\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        sublist_product = 1\n        for j in range(i, n):\n            sublist_product *= lst[j]\n            result += sublist_product\n\n    return result\n\n# Test the function\nassert sum_of_subarray_prod([1, 2, 3]) == 20\nassert sum_of_subarray_prod([4, 5, 6]) == 120", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index contains odd numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    \"\"\"\n    # Calculate the area using Heron's formula\n    area = math.sqrt(3) * edge_length**2\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays in a given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    >>> odd_length_sum([1, 2, 4, 5, 6])\n    28\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    # Iterate through each subarray\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            subarray_length = len(subarray)\n\n            # Check if the subarray length is odd\n            if subarray_length % 2 != 0:\n                result += sum(subarray)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists of integers.\n\n    Returns:\n    list: The list in the input list of lists with the highest sum of elements.\n\n    Example:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index contains even numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n\n    Example:\n    >>> capital_words_spaces(\"Python\")\n    'Python'\n    >>> capital_words_spaces(\"PythonIsAwesome\")\n    'Python Is Awesome'\n    >>> capital_words_spaces(\"PythonIsAwesomeProgrammingLanguage\")\n    'Python Is Awesome Programming Language'\n    \"\"\"\n    result = []\n    for i, char in enumerate(string):\n        if i > 0 and char.isupper():\n            result.append(' ')\n        result.append(char)\n    return ''.join(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Parameters:\n    tup (tuple): The input tuple to check.\n    k: The value to search for in the tuple.\n\n    Returns:\n    bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Parameters:\n    text (str): The input string to be matched.\n\n    Returns:\n    bool: True if the input string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted.\n\n    Returns:\n    int: The index where the target value should be inserted to maintain sorted order.\n\n    Example:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([4, 5, 6])\n    15\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits in a given number.\n\n    Parameters:\n    num (int): The number to be rotated.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n\n    Example:\n    >>> left_rotate(16, 2)\n    64\n    \"\"\"\n    # Convert the number to binary representation\n    binary_num = bin(num)[2:]\n\n    # Pad the binary representation with leading zeros if necessary\n    binary_num = binary_num.zfill(32)\n\n    # Rotate the bits\n    rotated_bits = binary_num[d:] + binary_num[:d]\n\n    # Convert the rotated bits back to decimal\n    rotated_num = int(rotated_bits, 2)\n\n    return rotated_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Parameters:\n    text (str): The input string to be matched.\n\n    Returns:\n    bool: True if the input string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: The tuple with tuples removed.\n\n    Examples:\n    >>> remove_nested((1, 5, 7, (4, 6), 10))\n    (1, 5, 7, 10)\n    >>> remove_nested((1, (2, 3), (4, 5)))\n    (1, 2, 3, 4, 5)\n    \"\"\"\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n        else:\n            result.extend(item)\n    return tuple(result)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 5, 7, [4, 6], 10]]], "plus_fail_tests": [[[2, 6, 8, [5, 7], 11, [[2, 9], [6, 3]], 4]]]}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n\n    Example:\n    >>> return_sum({'a': 100, 'b':200, 'c':300})\n    600\n    \"\"\"\n    return sum(dictionary.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n    tuple1: The first tuple.\n    tuple2: The second tuple.\n\n    Returns:\n    True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        return False\n\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array in which to search for the element.\n    target: The element to search for in the array.\n\n    Returns:\n    int: The index of the last occurrence of the target element in the array, or -1 if the element is not found.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 3)\n    2\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    # Check if the square root of the number is an integer\n    return int(num ** 0.5) ** 2 == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of first even and odd number of a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The product of the first even and odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"The list does not contain any even or odd numbers.\")\n\n    return even_numbers[0] * odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    \"\"\"\n    Function to find the nth Jacobsthal number.\n\n    Parameters:\n    n (int): The index of the Jacobsthal number to find.\n\n    Returns:\n    int: The nth Jacobsthal number.\n\n    Examples:\n    >>> jacobsthal_num(5)\n    11\n    >>> jacobsthal_num(10)\n    127\n    \"\"\"\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + 3 * jacobsthal_num(n-2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[100]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n\n    Example:\n    >>> remove_all_spaces('python  program')\n    'pythonprogram'\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list, or None if no odd number is found.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        None\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The length of the maximum run of uppercase characters.\n\n    Example:\n    >>> max_run_uppercase('GeMKSForGERksISBESt')\n    5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Parameters:\n    lists (list): A list of lists.\n\n    Returns:\n    int: The count of lists.\n\n    Example:\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    \"\"\"\n    count = 0\n    for lst in lists:\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 3, [4, [5, [6, [7, [8, 9]]]]]]]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers.\n\n    Examples:\n    >>> test_three_equal(1, 1, 1)\n    3\n    >>> test_three_equal(1, 2, 3)\n    0\n    >>> test_three_equal(1, 1, 2)\n    2\n    \"\"\"\n    if a == b and b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of strings.\n        string (str): The string to be added to the tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    \"\"\"\n\n    def is_prime(num):\n        \"\"\"\n        Helper function to check if a number is prime.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n    def is_triangular(num):\n        \"\"\"\n        Checks if a number is a triangular number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a triangular number, False otherwise.\n\n        \"\"\"\n        # Calculate the triangular number using the formula n*(n+1)/2\n        triangular_num = num * (num + 1) // 2\n        # Check if the number of digits in the triangular number is equal to n\n        return len(str(triangular_num)) == n\n\n    index = 1\n    while True:\n        if is_triangular(index):\n            return index\n        index += 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    \"\"\"\n    This function calculates the sum of even factors of a given number.\n\n    Parameters:\n    num (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Example:\n    >>> sumofFactors(18)\n    26\n    \"\"\"\n    factors = [i for i in range(1, num+1) if num % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Example:\n    >>> sum_in_range(2, 5)\n    8\n    \"\"\"\n    odd_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            odd_sum += num\n    return odd_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check if the count of divisors of a number is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of a list and returns a list with a tuple for each combination.\n\n    Parameters:\n    lst (list): The input list of elements.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list with tuples representing all combinations of length n.\n\n    Example:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    if n == 0:\n        return [()]\n\n    result = []\n    for i in range(len(lst)):\n        element = lst[i]\n        sub_combinations = combinations_colors(lst, n - 1)\n        for sub_combination in sub_combinations:\n            result.append((element,) + sub_combination)\n\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Example:\n    >>> even_Power_Sum(2)\n    1056\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}