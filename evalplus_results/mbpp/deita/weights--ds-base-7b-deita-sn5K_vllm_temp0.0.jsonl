{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1.intersection(set2)\n\n# Test cases\nassert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    if n <= 1:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    numbers (list): List of numbers to find the n largest integers from.\n    n (int): Number of largest integers to find.\n\n    Returns:\n    list: List of n largest integers in descending order.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Example:\n    >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n    [85, 75, 65]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    # Use a min-heap to find the n largest integers\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Reverse the heap to get the n largest integers in descending order\n    largest_numbers = []\n    while heap:\n        largest_numbers.append(heapq.heappop(heap))\n    largest_numbers.reverse()\n\n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at one bit position only.\n\n    Args:\n    num1 (int): First number.\n    num2 (int): Second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n\n    \"\"\"\n    # Convert numbers to binary strings\n    bin1 = bin(num1)[2:]\n    bin2 = bin(num2)[2:]\n\n    # Pad the shorter binary string with leading zeros\n    if len(bin1) < len(bin2):\n        bin1 = '0' * (len(bin2) - len(bin1)) + bin1\n    elif len(bin2) < len(bin1):\n        bin2 = '0' * (len(bin1) - len(bin2)) + bin2\n\n    # Count the number of different bits\n    count = 0\n    for i in range(len(bin1)):\n        if bin1[i] != bin2[i]:\n            count += 1\n\n    # Check if the count is exactly 1\n    return count == 1\n\n# Test cases\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(13, 12) == False\nassert differ_At_One_Bit_Pos(13, 13) == False\nassert differ_At_One_Bit_Pos(13, 14) == False"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required to get the same string.\n\n    Raises:\n    ValueError: If the input string is empty.\n\n    Example:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input string cannot be empty.\n    \"\"\"\n    if not string:\n        raise ValueError(\"Input string cannot be empty.\")\n\n    rotations = 0\n    while string != string[1:] + string[0]:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Remove first occurrence of the character\n    string = string.replace(char, '', 1)\n    \n    # Remove last occurrence of the character\n    string = string.replace(char, '', 1)\n    \n    return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n    \n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculate the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    if input_string.islower() and '_' in input_string:\n        return True\n    else:\n        return False\n\n# Test cases\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"AAB_CBBBC\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_h_i_j_k_l_m_\") == False\nassert text_lowercase_unders"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    return 4 * side_length\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string.\n\n    Example:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    result = \"\"\n    for char in string1:\n        if char not in string2:\n            result += char\n    return result\n\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1,2,3,4,5]) == False\nassert test_duplicate([1,2,3,4,5,5]) == True\nassert test_duplicate([1,2,3,4,5,1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n\n    \"\"\"\n    if n <= 0:\n        return False\n\n    while n > 1:\n        if n % 2 == 0:\n            n //= 2\n        elif n % 3 == 0:\n            n //= 3\n        elif n % 5 == 0:\n            n //= 5\n        else:\n            return False\n\n    return True\n\n# Test cases\nassert is_woodall(383) == True\nassert is_woodall(12) == False\nassert is_woodall(0) == False\nassert is_woodall(-1) == False"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    # Convert the number to a string\n    num_str = str(num)\n    \n    # Reverse the string\n    reversed_str = num_str[::-1]\n    \n    # Convert the reversed string back to a number\n    reversed_num = int(reversed_str)\n    \n    # Check if the number is one less than twice its reverse\n    return num == (reversed_num * 2) - 1\n\n# Test cases\nassert check(70) == False\nassert check(71) == True\nassert check(72) == False\nassert check(73) == False\nassert check(74) == False\nassert check(75) == False\nassert check(76) == False\nassert check(77) == False\nassert check(78) == False\nassert check(79) == False\nassert check(80) == False\nassert check(81) == False\nassert check(82) == False\nassert check(83) == False\nassert check(84) == False\nassert check(85) == False\nassert check(86) == False\nassert check(87) == False\nassert check(88) == False\nassert check(89) == False\nassert check(90) == False\nassert check(91) == False\nassert check(92) == False\nassert check(93) == False\nassert check(94) == False\nassert check(95) == False\nassert check(96) == False\nassert check(97) == False\nassert check(98) == False\nassert check(99) == False\nassert check(100) == False\nassert check(101) == False\nassert check(102) == False\nassert check(103) == False\nassert check(104) == False\nassert check(105) == False\nassert check(106) == False\nassert check(107) == False\nassert check(108) == False\nassert check(109) == False\nassert check(110) == False\nassert check(111) == False\nassert check(112) == False\nassert check(113) == False\nassert check(114) == False\nassert check(115) == False\nassert check(116) == False\nassert check(117) == False\nassert check(118) == False\nassert check(119) == False\nassert check(120) == False\nassert check(121) == False\nassert check(122) == False\nassert check(123) == False\nassert check(124) == False\nassert check(125) == False\nassert check(126) == False\nassert check(127) == False\nassert check(128) == False\nassert check(129) == False\nassert check(130) == False\nassert check(131) == False\nassert check(132) == False\nassert check(133) == False\nassert check(134) == False\nassert check(135) == False\nassert check(136) == False\nassert check(137) == False\n"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n    \n    # Convert the sorted digits to a string and return the result\n    return int(''.join(map(str, digits)))\n\n# Test cases\nassert find_Max_Num([1,2,3]) == 321\nassert find_Max_Num([3,2,1]) == 321\nassert find_Max_Num([1,3,2]) == 321\nassert find_Max_Num([4,3,2,1]) == 4321\nassert find_Max_Num([1,4,3,2]) == 4321\nassert find_Max_Num([1,2,4,3]) == 4321\nassert find_Max_Num([1,2,3,4]) == 4321\nassert find_Max_Num([1,1,1,1]) == 1111\nassert find_Max_Num([1,1,1,2]) == 2111\nassert find_Max_Num([1,1,2,1]) == 2111\nassert find_Max_Num([1,2,1,1]) == 2111\nassert find_Max_Num([2,1,1,1]) == 2111\nassert find_Max_Num([1,2,2,1]) == 2211\nassert find_Max_Num([1,2,1,2]) == 2211\nassert find_Max_Num([2,1,2,1]) == 2211\nassert find_Max_Num([2,2,1,1]) == 2211\nassert find_Max_Num([2,2,2,1]) == 2221\nassert find_Max_Num([2,2,1,2]) == 2221\nassert find_Max_Num([2,1,2,2]) == 2221\nassert find_Max_Num([1,2,2,2]) == 2221\nassert find_Max_Num([1,1,1,1,1]) == 11111\nassert find_Max_Num([1,1,1,1,2]) == 21111\nassert find_Max_Num([1,1,1,2,1]) == 21111\nassert find_Max_Num([1,1,2,1,1]) == 21111\nassert find_Max_Num([1,2,1,1,1]) == 21111\nassert find_Max_Num([2,1,1,1,1]) == 21111\nassert find_Max_Num([1,2,2,1,1]) == 22111\nassert find_Max_Num([1,2,1,2,1]) == 22111\nassert find_Max_Num([1,2,1,1,2]) == 22111\nassert find_Max_Num([1,1,2,2,1]) == 22111\nassert find_Max_Num([1,1,2,1,2]) == 22111\nassert find_Max_Num([1,2,1,2,2]) == 2211"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    return (num1 ^ num2) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, 2) == False\nassert opposite_Signs(-1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    return n * (3 * n - 2)\n\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6\nassert count_Substrings('12345') == 0\nassert count_Substrings('123456') == 2\nassert count_Substrings('1234567') == 3\nassert count_Substrings('12345678') == 4\nassert count_Substrings('123456789') == 5"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The smallest number in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Example:\n    >>> smallest_num([10, 20, 1, 45, 99])\n    1\n    \"\"\"\n    if len(lst) == 0:\n        raise ValueError(\"Input list is empty\")\n    return min(lst)\n\n# Test cases\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([-10, -20, -1, -45, -99]) == -99\nassert smallest_num([0, 0, 0, 0]) == 0\nassert smallest_num([1]) == 1\nassert smallest_num([]) == ValueError(\"Input list is empty\")"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test cases\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(1, 2), (3, 4), (5, 6), (7, 8)]) == 6\nassert max_difference([(1, 1), (2, 2), (3, 3), (4, 4)]) == 0"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test cases\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n# Test cases\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21\nassert recursive_list_sum([1, 2, [3,4],[5,6], 7]) == 28\nassert recursive_list_sum([1, 2, [3,4],[5,6], 7, [8, 9]]) == 36"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test cases\nassert pos_count([1,-2,3,-4]) == 2\nassert pos_count([1,2,3,4]) == 4\nassert pos_count([-1,-2,-3,-4]) == 0\nassert pos_count([0,0,0,0]) == 0"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Args:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Example:\n    >>> bell_number(2)\n    2\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    bell = [1]\n    for _ in range(n):\n        new_bell = [1]\n        for i in range(len(bell)):\n            new_bell.append(new_bell[i] + bell[i])\n        bell = new_bell\n\n    return bell[-1]\n\n\n# Test cases\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15\nassert bell_number(5) == 52"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    increasing = decreasing = True\n    \n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n    \n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 2, 4]) == False\nassert is_monotonic([1, 1, 1, 1]) == True\nassert is_monotonic([1, 2, 1, 4]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n    lst (list): The list to be checked.\n    sublst (list): The sublist to be searched for.\n\n    Returns:\n    bool: True if the sublist is found in the list, False otherwise.\n\n    \"\"\"\n    if len(sublst) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([2,4,3,5,7],[3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7,8]) == False\nassert is_sublist([2,4,3,5,7],[]) == True\nassert is_sublist([],[]) == True\nassert is_sublist([],[1]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    lengths = set(len(tuple) for tuple in tuples)\n    return len(lengths) == 1\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66), (77, 88)]) == False"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "import math\n\ndef dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n\n    Example:\n    >>> dif_Square(5)\n    True\n    >>> dif_Square(10)\n    False\n    >>> dif_Square(17)\n    True\n    \"\"\"\n    # Check if n is a perfect square\n    if math.isqrt(n) ** 2 == n:\n        return True\n\n    # Check if n can be represented as the difference of two squares\n    for i in range(1, int(math.isqrt(n)) + 1):\n        if math.isqrt(n - i ** 2) ** 2 == math.isqrt(n - i ** 2):\n            return True\n\n    return False\n\n# Test the function\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(17) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    if len(patterns) != len(sequence):\n        return False\n    \n    pattern_dict = {}\n    for i in range(len(patterns)):\n        if patterns[i] in pattern_dict:\n            if pattern_dict[patterns[i]] != sequence[i]:\n                return False\n        else:\n            pattern_dict[patterns[i]] = sequence[i]\n    \n    return True\n\n# Test cases\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"c\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\"])==False\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\", \"c\"])==False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    result = []\n    for t in tuples:\n        if all(num % k == 0 for num in t):\n            result.append(t)\n    return result\n\n# Test cases\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]\nassert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == []\nassert find_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3) == [(1, 2, 3)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Args:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n\n    \"\"\"\n    # Convert the number to a string\n    num_str = str(num)\n\n    # Calculate the sum of the digits at odd positions\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n\n    # Calculate the sum of the digits at even positions\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n\n    # Check if the difference between the sums is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Hadoop1\") == True\nassert word_len(\"Hadoop12\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    return n * (n + 1) * (n + 2) // 6\n\ndef test_tetrahedral_number():\n    assert tetrahedral_number(5) == 35\n"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * radius**3\n\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    sequence = [0, 1, 1]\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\ndef test_newman_conway():\n    assert newman_conway(10) == 6\n    assert newman_conway(1) == 1\n    assert newman_conway(2) == 1\n    assert newman_conway(3) == 2\n    assert newman_conway(4) == 2\n    assert newman_conway(5) == 5\n    assert newman_conway(6) == 2\n    assert newman_conway(7) == 5\n    assert newman_conway(8) == 5\n    assert newman_conway(9) == 8\n    assert newman_conway(10) == 6\n\n"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    return 4 * math.pi * radius**2\n\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\n# Test cases\nassert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(1) == 1\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(3) == 19\nassert centered_hexagonal_number(4) == 37\nassert centered_hexagonal_number(5) == 61"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n\n# Test cases\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test cases\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}\nassert freq_count([1, 2, 3, 4, 5]) == {1: 1, 2: 1, 3: 1, 4: 1, 5: 1}\nassert freq_count([1, 1, 1, 2, 2, 3, 3, 3, 3]) == {1: 3, 2: 2, 3: 4}\nassert freq_count([]) == {}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Raises:\n    ValueError: If n is less than or equal to 1.\n\n    Example:\n    >>> closest_num(11)\n    10\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n must be greater than 1\")\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n\n# Test cases\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"apple\", \"banana\", \"cherry\"]) == 6\nassert len_log([\"hello\", \"world\"]) == 5"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    for string in lst:\n        if substring in string:\n            return True\n    return False\n\n# Test cases\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"orange\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"orangee\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n    for i in range(1, len(num_str) - 1):\n        if num_str[i] == num_str[i-1] or num_str[i] == num_str[i+1]:\n            return False\n    return True\n\n# Test cases\nassert is_undulating(1212121) == True\nassert is_undulating(1212122) == False\nassert is_undulating(121212) == False\nassert is_undulating(12121) == False\nassert is_undulating(1212) == False\nassert is_undulating(121) == False\nassert is_undulating(12) == False\nassert is_undulating(1) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n\n    Raises:\n    ValueError: If 'b' is negative.\n\n    Example:\n    >>> power(3, 4)\n    81\n    >>> power(2, 3)\n    8\n    >>> power(5, 0)\n    1\n    >>> power(0, 5)\n    0\n    >>> power(0, 0)\n    1\n    >>> power(2, -3)\n    Traceback (most recent call last):\n    ...\n    ValueError: Exponent must be a non-negative integer.\n    \"\"\"\n    if not isinstance(a, (int, float)):\n        raise TypeError(\"Base must be a number.\")\n    if not isinstance(b, int):\n        raise TypeError(\"Exponent must be an integer.\")\n    if b < 0:\n        raise ValueError(\"Exponent must be a non-negative integer.\")\n\n    result = 1\n    for _ in range(b):\n        result *= a\n\n    return result\n\n\n# Test cases\nassert power(3, 4) == 81\nassert power(2, 3) == 8\nassert power(5, 0) == 1\nassert power(0, 5) == 0\nassert power(0, 0) == 1\n\ntry:\n    power(2, -3)\nexcept ValueError as e:\n    assert str(e) == \"Exponent must be a non-negative integer.\"\n\ntry:\n    power(2, 3.5)\nexcept TypeError as e:\n    assert str(e) == \"Exponent must be an integer.\"\n\ntry:\n    power(2.5, 3)\nexcept TypeError as e:\n    assert str(e) == \"Base must be a number.\""}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    if len(lst) == 0:\n        return None\n    min_value = lst[0][1]\n    min_index = 0\n    for i in range(1, len(lst)):\n        if lst[i][1] < min_value:\n            min_value = lst[i][1]\n            min_index = i\n    return lst[min_index][0]\n\n# Test cases\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([]) == None\nassert index_minimum([('Rash', 143)]) == 'Rash'\nassert index_minimum([('Rash', 143), ('Manjeet', 143)]) == 'Rash'"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    min_length = float('inf')\n    for sublist in lst:\n        min_length = min(min_length, len(sublist))\n    return min_length\n\n# Test cases\nassert find_min_length([[1], [1, 2]]) == 1\nassert find_min_length([[1, 2], [1, 2, 3]]) == 2\nassert find_min_length([[1, 2, 3], [1, 2], [1]]) == 1\nassert find_min_length([[1], [1, 2, 3], [1, 2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            count += 2\n        if i * i == n:\n            count -= 1\n    return count\n\n# Test cases\nassert divisor(15) == 4\nassert divisor(1) == 1\nassert divisor(100) == 9\nassert divisor(1000) == 25"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for num in flattened_list:\n        if num in frequency_dict:\n            frequency_dict[num] += 1\n        else:\n            frequency_dict[num] = 1\n    return frequency_dict\n\n# Test cases\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n# Test cases\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(10) == '1010'\nassert decimal_to_binary(16) == '10000'\nassert decimal_to_binary(32) == '100000'\nassert decimal_to_binary(64) == '1000000'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    # Convert the integer to a string\n    num_str = str(n)\n    \n    # Find the length of the string\n    length = len(num_str)\n    \n    # Check if the number is already a palindrome\n    if num_str == num_str[::-1]:\n        # If it is, increment the number by 1 and return it\n        return int(num_str) + 1\n    \n    # Find the middle index of the string\n    mid = length // 2\n    \n    # Check if the number is odd or even\n    if length % 2 == 0:\n        # If even, split the string into two halves\n        left_half = num_str[:mid]\n        right_half = num_str[mid:]\n    else:\n        # If odd, split the string into two halves, excluding the middle character\n        left_half = num_str[:mid]\n        right_half = num_str[mid+1:]\n    \n    # Reverse the right half\n    reversed_right_half = right_half[::-1]\n    \n    # Check if the left half is greater than the reversed right half\n    if left_half > reversed_right_half:\n        # If it is, increment the number by 1 and return it\n        return int(num_str) + 1\n    \n    # If the left half is equal to the reversed right half, increment the number by 1 and return it\n    return int(num_str) + 1\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        ValueError: If the kth element is not found in the array.\n\n    Example:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"Invalid index\")\n    return sorted(arr)[k-1]\n\n# Test cases\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([12,3,5,7,19], 5) == 19\nassert kth_element([12,3,5,7,19], 1) == 3\nassert kth_element([12,3,5,7,19], 3) == 5\nassert kth_element([12,3,5,7,19], 4) == 7\nassert kth_element([12,3,5,7,19], 5) == 19"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_case_string):\n    words = snake_case_string.split('_')\n    camel_case_string = ''.join(word.capitalize() for word in words)\n    return camel_case_string\n\n# Test cases\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('hello_world') == 'HelloWorld'\nassert snake_to_camel('snake_case_string') == 'SnakeCaseString'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    if m == 0:\n        return 0\n    elif n == 0:\n        return 1\n    else:\n        return (n - 1) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n# Test cases\nassert eulerian_num(3, 1) == 4\nassert eulerian_num(0, 0) == 1\nassert eulerian_num(0, 1) == 0\nassert eulerian_num(1, 0) == 1\nassert eulerian_num(2, 2) == 5\nassert eulerian_num(3, 3) == 10"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\n# Test cases\nassert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"])) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Test cases\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True]) == 3\nassert count_true_booleans([True, False, True, False, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    return tup + tuple(lst)\n\n# Test cases\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([], (1, 2, 3)) == (1, 2, 3)\nassert add_lists([1, 2, 3], ()) == (1, 2, 3)\nassert add_lists([], ()) == ()"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    # Convert the binary string to a list of characters\n    binary_list = list(binary_string)\n    \n    # Perform the rotations\n    for _ in range(num_rotations):\n        # Rotate the list by one position\n        binary_list = binary_list[1:] + binary_list[:1]\n        \n        # Convert the rotated list back to a binary string\n        binary_string = ''.join(binary_list)\n        \n        # Check if the rotated binary string has an odd value\n        if int(binary_string, 2) % 2 != 0:\n            # Increment the count if the rotated binary string has an odd value\n            count += 1\n    \n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123abc\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    return int(''.join(map(str, tup)))\n\n# Test cases\nassert tuple_to_int((1,2,3)) == 123\nassert tuple_to_int((4,5,6)) == 456\nassert tuple_to_int((7,8,9)) == 789"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\n# Test cases\nassert string_to_list(\"python programming\") == ['python', 'programming']\nassert string_to_list(\"\") == []\nassert string_to_list(\"single word\") == ['single', 'word']\nassert string_to_list(\"  multiple   spaces  \") == ['multiple', 'spaces']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n# Test cases\nassert search([1,1,2,2,3]) == 3\nassert search([1,1,2,3,3]) == 2\nassert search([1,2,2,3,3]) == 1\nassert search([1,1,2,2,3,3,4,4,5]) == 5\nassert search([1,1,2,2,3,3,4,4,5,5,6,6,7]) == 7"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test cases\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1), (1, 1), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 120\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1), (1, 1)]) == 120\nassert max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_divisors(num):\n        divisors_sum = 0\n        for i in range(1, int(num/2) + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_numbers_sum = 0\n    for num in range(1, n+1):\n        divisor_sum = sum_divisors(num)\n        if divisor_sum != num and sum_divisors(divisor_sum) == num:\n            amicable_numbers_sum += num\n\n    return amicable_numbers_sum\n\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Args:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeros\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test cases\nassert find_length(\"11000010001\") == 6\nassert find_length(\"11111111111\") == 0\nassert find_length(\"00000000000\") == 0\nassert find_length(\"10101010101\") == 0\nassert find_length(\"11001100110\") == 0\nassert find_length(\"11100011100\") == 3\nassert find_length(\"00011100011\") == 3\nassert find_length}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Args:\n    a (int): First number.\n    b (int): Second number.\n\n    Returns:\n    int: Sum of common divisors.\n\n    Example:\n    >>> sum_common_divisors(10, 15)\n    6\n    \"\"\"\n    common_divisors = []\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.append(i)\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): The minimum length of words to be considered.\n    words (str): A string of words separated by spaces.\n\n    Returns:\n    list: A list of words that are longer than n characters.\n\n    Example:\n    >>> long_words(3, \"python is a programming language\")\n    ['python', 'programming', 'language']\n    \"\"\"\n    word_list = words.split()\n    long_words = [word for word in word_list if len(word) > n]\n    return long_words\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    # Check if the matrix is a square matrix\n    if len(matrix) != len(matrix[0]):\n        return False\n    \n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n    \n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*matrix)]\n    \n    # Calculate the sum of the main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(len(matrix)))\n    \n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(matrix[i][len(matrix)-1-i] for i in range(len(matrix)))\n    \n    # Check if all sums are equal\n    if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and row_sums[0] == col_sums[0] == main_diag_sum == sec_diag_sum:\n        return True\n    else:\n        return False\n\n# Test cases\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]]) == False\nassert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == False"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The item with maximum frequency.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Example:\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n\n    max_item = lst[0]\n    max_count = 1\n    count = {}\n\n    for item in lst:\n        if item in count:\n            count[item] += 1\n        else:\n            count[item] = 1\n\n        if count[item] > max_count:\n            max_item = item\n            max_count = count[item]\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowels_in_string = [char for char in string if char.lower() in vowels]\n    reversed_vowels = vowels_in_string[::-1]\n    reversed_string = ''\n    index = 0\n    for char in string:\n        if char.lower() in vowels:\n            reversed_string += reversed_vowels[index]\n            index += 1\n        else:\n            reversed_string += char\n    return reversed_string\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World\") == \"Hollo Werld\"\nassert reverse_vowels(\"aeiou\") == \"uoiea\"\nassert reverse_vowels(\"AEIOU\") == \"UOIEA\"\nassert reverse_vowels(\"\") == \"\"\nassert reverse_vowels(\"xyz\") == \"xyz\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\n# Test cases\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\"\nassert tup_string(('h', 'e', 'l', 'l', 'o')) == \"hello\"\nassert tup_string(('w', 'o', 'r', 'l', 'd')) == \"world\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = zero_count / non_zero_count\n    \n    return ratio\n\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    if n == 0:\n        return True\n    while n > 0:\n        if n & 1:\n            n >>= 1\n        else:\n            return False\n    return True\n\n# Test cases\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(16) == True\nassert is_Sum_Of_Powers_Of_Two(32) == True\nassert is_Sum_Of_Powers_Of_Two(64) == True\nassert is_Sum_Of_Powers_Of_Two(128) == True\nassert is_Sum_Of_Powers_Of_Two(256) == True\nassert is_Sum_Of_Powers_Of_Two(512) == True\nassert is_Sum_Of_Powers_Of_Two(1024) == True\nassert is_Sum_Of_Powers_Of_Two(2048) == True\nassert is_Sum_Of_Powers_Of_Two(4096) == True\nassert is_Sum_Of_Powers_Of_Two(8192) == True\nassert is_Sum_Of_Powers_Of_Two(16384) == True\nassert is_Sum_Of_Powers_Of_Two(32768) == True\nassert is_Sum_Of_Powers_Of_Two(65536) == True\nassert is_Sum_Of_Powers_Of_Two(131072) == True\nassert is_Sum_Of_Powers_Of_Two(262144) == True\nassert is_Sum_Of_Powers_Of_Two(524288) == True\nassert is_Sum_Of_Powers_Of_Two(1048576) == True\nassert is_Sum_Of_Powers_Of_Two(2097152) == True\nassert is_Sum_Of_Powers_Of_Two(4194304) == True\nassert is_Sum_Of_Powers_Of_Two(8388608) == True\nassert is_Sum_Of_Powers_Of_Two(16777216) == True\nassert is_Sum_Of_Powers_Of_Two(33554432) == True\nassert is_Sum_Of_Powers_Of_Two(67108864) == True\nassert is_Sum_Of_Powers_Of_Two(134217728) == True\nassert is_Sum_Of_Powers_Of_Two(268435456) == True\nassert is_Sum_Of_Powers_Of_Two(536870912) == True\nassert is_Sum_Of_Powers_Of_Two(1073741824) == True\nassert is_Sum_Of_Powers_Of_Two"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    return 2 * math.pi * radius\n\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    flattened = []\n    for sublist in lst:\n        flattened.extend(sublist)\n    return flattened\n\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sort a list of elements using the pancake sort algorithm.\n\n    Args:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Raises:\n    AssertionError: If the input list is not a list.\n\n    Example:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise AssertionError(\"Input must be a list\")\n\n    def flip(arr, k):\n        \"\"\"\n        Flip the first k elements of the list.\n\n        Args:\n        arr (list): The list to be flipped.\n        k (int): The number of elements to be flipped.\n\n        Returns:\n        list: The flipped list.\n        \"\"\"\n        return arr[:k][::-1] + arr[k:]\n\n    def find_max_index(arr, n):\n        \"\"\"\n        Find the index of the maximum element in the list.\n\n        Args:\n        arr (list): The list to be searched.\n        n (int): The number of elements to be considered.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(n):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n, 0, -1):\n        max_index = find_max_index(lst, i)\n        lst = flip(lst, max_index + 1)\n        lst = flip(lst, i)\n\n    return lst\n\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test cases\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3\nassert count_samepair([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]) == 8\nassert count_samepair([1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8],[1,2,3,4,5,6,7,8]) == 8"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n    arr (tuple): A tuple of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Example:\n    >>> max_Abs_Diff((2,1,5,3))\n    4\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n\n# Test cases\nassert max_Abs_Diff((2,1,5,3)) == 4\nassert max_Abs_Diff((1,2,3,4,5)) == 4\nassert max_Abs_Diff((5,4,3,2,1)) == 4\nassert max_Abs_Diff((1,1,1,1,1)) == 0\nassert max_Abs_Diff((1,2,3,4,5,6,7,8,9,10)) == 9"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Args:\n    a (int): First integer.\n    b (int): Second integer.\n    n (int): Target value.\n\n    Returns:\n    tuple: Tuple of integers (x, y) that satisfy ax + by = n, or None if no solution exists.\n\n    Example:\n    >>> find_solution(2, 3, 7)\n    (2, 1)\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return (x, y)\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return (x, y)\n    else:\n        return None\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(2, 3, 8) == None\nassert find_solution(2, 3, 9) == (3, 2)\nassert find_solution(2, 3, 10) == None\nassert find_solution(2, 3, 11) == None\nassert find_solution(2, 3, 12) == (6, 4)\nassert find_solution(2, 3, 13) == None\nassert find_solution(2, 3, 14) == None\nassert find_solution(2, 3, 15) == (7, 5)\nassert find_solution(2, 3, 16) == None\nassert find_solution(2, 3, 17) == None\nassert find_solution(2, 3, 18) == (9, 6)\nassert find_solution(2, 3, 19) == None\nassert find_solution(2, 3, 20) == (10, 7)\nassert find_solution(2, 3, 21) == None\nassert find_solution(2, 3, 22) == None\nassert find_solution(2, 3, 23) == None\nassert find_solution(2, 3, 24) == (12, 8)\nassert find_solution(2, 3, 25) == None\nassert find_solution(2, 3, 26) == None\nassert find_solution(2, 3, 27) == None\nassert find_solution(2, 3, 28) == None\nassert find_solution(2, 3, 29) == None\nassert find_solution(2, 3, 30) == (15, 9)\nassert find_solution(2, 3, 31) == None\nassert find_solution(2, 3, 32) == None\nassert find_solution(2, 3, 33) == None\nassert find_solution(2, 3, 34) == None\nassert find_solution(2, 3, "}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    return [x for x in lst1 if x not in lst2]\n\n# Test cases\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], []) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert remove_elements([], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == []\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    result = 0\n    for i in range(n // 2):\n        result += n - 2 * i\n    return result\n\n# Test cases\nassert sum_series(6) == 12\nassert sum_series(10) == 20\nassert sum_series(15) == 30"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + i):\n            count += 1\n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdef\") == 3\nassert count_char_position(\"\") == 0\nassert count_char_position(\"a\") == 1\nassert count_char_position(\"ab\") == 2\nassert count_char_position(\"abc\") == 3\nassert count_char_position(\"abcd\") == 4\nassert count_char_position(\"abcde\") == 5\nassert count_char_position(\"abcdef\") == 6\nassert count_char_position(\"abcdefg\") == 7\nassert count_char_position(\"abcdefgh\") == 8\nassert count_char_position(\"abcdefghi\") == 9\nassert count_char_position(\"abcdefghij\") == 10\nassert count_char_position(\"abcdefghijk\") == 11\nassert count_char_position(\"abcdefghijkl\") == 12\nassert count_char_position(\"abcdefghijklm\") == 13\nassert count_char_position(\"abcdefghijklmn\") == 14\nassert count_char_position(\"abcdefghijklmno\") == 15\nassert count_char_position(\"abcdefghijklmnop\") == 16\nassert count_char_position(\"abcdefghijklmnopq\") == 17\nassert count_char_position(\"abcdefghijklmnopqr\") == 18\nassert count_char_position(\"abcdefghijklmnopqrs\") == 19\nassert count_char_position(\"abcdefghijklmnopqrst\") == 20\nassert count_char_position(\"abcdefghijklmnopqrstu\") == 21\nassert count_char_position(\"abcdefghijklmnopqrstuv\") == 22\nassert count_char_position(\"abcdefghijklmnopqrstuvw\") == 23\nassert count_char_position(\"abcdefghijklmnopqrstuvwx\") == 24\nassert count_char_position(\"abcdefghijklmnopqrstuvwxy\") == 25\nassert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([1, 2, 3, 4, 5]) == 6\nassert find_even_pair([2, 4, 6, 8, 10]) == 10\nassert find_even_pair([1, 3, 5, 7, 9]) == 0"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    return 2 ** (n - 1).bit_length()\n\n# Test cases\nassert next_power_of_2(0) == 1\nassert next_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(6) == 8\nassert next_power_of_2(7) == 8\nassert next_power_of_2(8) == 8\nassert next_power_of_2(9) == 16\nassert next_power_of_2(10) == 16\nassert next_power_of_2(11) == 16\nassert next_power_of_2(12) == 16\nassert next_power_of_2(13) == 16\nassert next_power_of_2(14) == 16\nassert next_power_of_2(15) == 16\nassert next_power_of_2(16) == 16"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    count = 0\n    for element in lst:\n        if element == num:\n            count += 1\n    return count\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0\nassert frequency([1, 2, 3, 4, 4, 4], 4) == 3\nassert frequency([1, 2, 3, 4, 4, 4, 4], 4) == 4\nassert frequency([1, 2, 3, 4, 4, 4, 4, 4], 4) == 5"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n    lst (list): The input list of numbers.\n    start (int): The starting index of the range.\n    end (int): The ending index of the range.\n\n    Returns:\n    int: The sum of numbers in the specified range.\n\n    Raises:\n    ValueError: If the start or end index is out of range.\n\n    Example:\n    >>> sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10)\n    29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"Start or end index is out of range\")\n\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    return 5 * side_length\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    for i in range(len(string)-2):\n        if string[i:i+3] == 'std':\n            count += 1\n    return count\n\n# Test cases\nassert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"stdstdstd\") == 3\nassert count_occurance(\"letstdlenstdporstdstd\") == 4\nassert count_occurance(\"letstdlenstdporstdstdstd\") == 5\nassert count_occurance(\"letstdlenstdporstdstdstdstd\") == 6\nassert count_occurance(\"letstdlenstdporstdstdstdstdstd\") == 7\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstd\") == 8\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstd\") == 9\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstd\") == 10\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstd\") == 11\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstd\") == 12\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstd\") == 13\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstd\") == 14\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 15\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 16\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 17\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 18\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 19\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 20\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 21\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 22\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 23\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 24\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\") == 25\nassert count_occurance(\"letstdlenstdporstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstdstd\")"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    data_type = type(tup[0])\n    for element in tup:\n        if not isinstance(element, data_type):\n            return False\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 6, 7, 3, 5, \"6\")) == False\nassert check_type((5, 6, 7, 3, 5, 6.0)) == False\nassert check_type((5, 6, 7, 3, 5, True)) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n // 2\n\n# Test cases\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 4) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 1) == False\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 10) == False"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    count = 0\n    while num:\n        num &= (num - 1)\n        count += 1\n    return count\n\n# Test cases\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(10) == 2\nassert count_Set_Bits(15) == 4\nassert count_Set_Bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    return string[::2]\n\n# Test cases\nassert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('123456') == '135'\nassert odd_values_string('') == ''\nassert odd_values_string('a') == 'a'\nassert odd_values_string('ab') == 'a'\nassert odd_values_string('abc') == 'ac'\nassert odd_values_string('abcd') == 'ac'\nassert odd_values_string('abcde') == 'ace'\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    return min(a, b, c)\n\n# Test cases\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(0, 10, 20) == 0\nassert min_of_three(20, 10, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(\" \", character)\n\n# Test cases\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Returns a list containing the n largest items from the input list.\n\n    Args:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Raises:\n    ValueError: If n is less than 1 or greater than the length of the input list.\n\n    Example:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    \"\"\"\n    if n < 1 or n > len(lst):\n        raise ValueError(\"n must be between 1 and the length of the input list\")\n\n    lst_copy = lst.copy()\n    largest_nums = []\n\n    for _ in range(n):\n        largest_num = max(lst_copy)\n        largest_nums.append(largest_num)\n        lst_copy.remove(largest_num)\n\n    return largest_nums\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    return 2 * math.pi * radius * height\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    # Convert the number to binary representation\n    binary_num = bin(num)[2:]\n\n    # Set all even bits to 1\n    binary_num = binary_num[:-1] + '1' + binary_num[-1]\n\n    # Convert the modified binary representation back to decimal\n    modified_num = int(binary_num, 2)\n\n    return modified_num\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n\n# Test cases\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {(1, 2): 1, (2, 3): 1, (3, 4): 1, (4, 5): 1, (5, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2)]) == {(1, 2): 2, (2, 3): 1, (3, 4): 1, (4, 5): 1, (5, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2), (2, 3)]) == {(1, 2): 2, (2, 3): 2, (3, 4): 1, (4, 5): 1, (5, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2), (2, 3), (3, 4)]) == {(1, 2): 2, (2, 3): 2, (3, 4): 2, (4, 5): 1, (5, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2), (2, 3), (3, 4), (4, 5)]) == {(1, 2): 2, (2, 3): 2, (3, 4): 2, (4, 5): 2, (5, 6): 1}\nassert check_occurences([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6)]) == {(1, 2): 2, (2, 3): 2, (3, 4): 2, (4, 5): 2, (5, 6): 2}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]:\n                count += 1\n    return count\n\n# Test cases\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Base case: if n is 1, there is only one possible sequence\n    if n == 1:\n        return 1\n\n    # Initialize the count of sequences\n    count = 0\n\n    # Iterate through possible values for the first element\n    for i in range(1, m+1):\n        # Recursively call the function for the remaining elements\n        count += get_total_number_of_sequences(i, n-1)\n\n    return count\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\n# Test cases\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1, 2, 3], [4, 5, 6]) == [1, 2, 4, 5, 6]\nassert replace_list([1, 2, 3], []) == [1, 2, []]\nassert replace_list([], [4, 5, 6]) == [4, 5, 6]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    count = 0\n    for char in string:\n        count += 1\n    return count\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n    num (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n\n    Raises:\n    ValueError: If the given number is not a positive integer.\n\n    Example:\n    >>> next_Perfect_Square(35)\n    36\n    \"\"\"\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"The given number must be a positive integer.\")\n\n    next_square = math.ceil(math.sqrt(num)) ** 2\n    return next_square\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Find the maximum sum of increasing subsequence from the left side of the peak\n    left_sum = [0] * n\n    left_sum[0] = arr[0]\n    for i in range(1, peak):\n        if arr[i] > arr[i-1]:\n            left_sum[i] = left_sum[i-1] + arr[i]\n        else:\n            left_sum[i] = arr[i]\n\n    # Find the maximum sum of decreasing subsequence from the right side of the peak\n    right_sum = [0] * n\n    right_sum[-1] = arr[-1]\n    for i in range(n-2, peak, -1):\n        if arr[i] > arr[i+1]:\n            right_sum[i] = right_sum[i+1] + arr[i]\n        else:\n            right_sum[i] = arr[i]\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = max(left_sum) + max(right_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"ABCDEFG\") == 1\nassert lps(\"ABBCDAB\") == 5\nassert lps(\"ABCBA\") == 5\nassert lps(\"ABCD\") == 1\nassert lps(\"ABCCBA\") == 6\nassert lps(\"ABCDE\") == 1\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert lps(\"ABCDECBA\") == 7\nassert"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    count = 0\n    for item in tuple_input:\n        if item == element:\n            count += 1\n    return count\n\n# Test cases\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10) == 3"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_number):\n    real, imaginary = complex_number.real, complex_number.imag\n    magnitude = math.sqrt(real**2 + imaginary**2)\n    angle = math.atan2(imaginary, real)\n    return magnitude, angle\n\n# Test cases\nassert convert(1) == (1.0, 0.0)\nassert convert(2+3j) == (3.605551275463989, 0.982793723247329)\nassert convert(-1) == (1.0, 3.141592653589793)\nassert convert(0) == (0.0, 0.0)\nassert convert(1+0j) == (1.0, 0.0)\nassert convert(0+1j) == (1.0, 1.5707963267948966)\nassert convert(0-1j) == (1.0, -1.5707963267948966)\nassert convert(-1+0j) == (1.0, 3.141592653589793)\nassert convert(1+1j) == (1.4142135623730951, 0.7853981633974483)\nassert convert(1-1j) == (1.4142135623730951, -0.7853981633974483)\nassert convert(-1-1j) == (1.4142135623730951, -2.356194490192345)\nassert convert(-1+1j) == (1.4142135623730951, 2.356194490192345)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test cases\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([1, 2, 3, 4, 5]) == 5\nassert count_integer([1, 2, 'abc', 'def', 3.14]) == 2\nassert count_integer([1, 2, 'abc', 'def', 3.14, 4, 5, 6, 7, 8, 9, 10]) == 2"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    result = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n-1)\n        for sub_combination in sub_combinations:\n            result.append(sub_combination + (lst[i],))\n    return result\n\n# Test cases\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Red'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Red'), ('Red', 'Blue', 'Green'), ('Red', 'Blue', 'Blue'), ('Green', 'Red', 'Red'), ('Green', 'Red', 'Green'), ('Green', 'Red', 'Blue'), ('Green', 'Green', 'Red'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Red'), ('Green', 'Blue', 'Green'), ('Green', 'Blue', 'Blue'), ('Blue', 'Red', 'Red'), ('Blue', 'Red', 'Green'), ('Blue', 'Red', 'Blue'), ('Blue', 'Green', 'Red'), ('Blue', 'Green', 'Green'), ('Blue', 'Green', 'Blue'), ('Blue', 'Blue', 'Red'), ('Blue', 'Blue', 'Green'), ('Blue', 'Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    if n <= 1:\n        return 0\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    p = 2\n    while p * p <= n:\n        if primes[p]:\n            for i in range(p * p, n + 1, p):\n                primes[i] = False\n        p += 1\n\n    return sum(primes)\n\n\n# Test cases\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(15) == 6\nassert count_Primes_nums(20) == 8\nassert count_Primes_nums(25) == 10"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return num2, num1\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Check if the lengths of the tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n\n    # Create a new tuple to store the maximized elements\n    maximized_tuple = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(tuple1)):\n        # Get the elements from both tuples\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n\n        # Check if both elements are tuples\n        if not isinstance(element1, tuple) or not isinstance(element2, tuple):\n            raise ValueError(\"Elements must be tuples\")\n\n        # Check if both tuples have the same length\n        if len(element1) != len(element2):\n            raise ValueError(\"Tuples must have the same length\")\n\n        # Create a new tuple to store the maximized elements\n        maximized_element = []\n\n        # Iterate over the elements of the sub-tuples\n        for j in range(len(element1)):\n            # Get the elements from both sub-tuples\n            sub_element1 = element1[j]\n            sub_element2 = element2[j]\n\n            # Check if both elements are numbers\n            if not isinstance(sub_element1, (int, float)) or not isinstance(sub_element2, (int, float)):\n                raise ValueError(\"Sub-elements must be numbers\")\n\n            # Maximize the elements\n            maximized_element.append(max(sub_element1, sub_element2))\n\n        # Add the maximized sub-tuple to the maximized tuple\n        maximized_tuple.append(tuple(maximized_element))\n\n    # Return the maximized tuple\n    return tuple(maximized_tuple)\n\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    primes = [2, 3]\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    while len(primes) < n:\n        next_prime = primes[-1] + 2\n        while True:\n            is_prime = True\n            for prime in primes:\n                if next_prime % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_prime)\n                break\n            next_prime += 2\n    return primes[n-1]\n\n# Test cases\nassert newman_prime(3) == 7\nassert newman_prime(5) == 11\nassert newman_prime(10) == 29"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    result = tuple(a // b for a, b in zip(tuple1, tuple2))\n    return result\n\nassert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    if L <= 0 or L > len(lst):\n        return (lst, [])\n    else:\n        return (lst[:L], lst[L:])\n\n# Test cases\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts([1,1,2,3,4,4,5,1],0)==([1, 1, 2, 3, 4, 4, 5, 1], [])\nassert split_two_parts([1,1,2,3,4,4,5,1],8)==([1, 1, 2, 3, 4, 4, 5, 1], [])\nassert split_two_parts([1,1,2,3,4,4,5,1],1)==([1], [1, 2, 3, 4, 4, 5, 1])\nassert split_two_parts([1,1,2,3,4,4,5,1],7)==([1, 1, 2, 3, 4, 4, 5], [1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61\nassert dog_age(1) == 10.5\nassert dog_age(2) == 21\nassert dog_age(3) == 25.5\nassert dog_age(4) == 31"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test cases\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    return 4 * side_length ** 2\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return sum(num ** 2 for num in odd_numbers)\n\n# Test cases\nassert square_Sum(2) == 10\nassert square_Sum(3) == 36\nassert square_Sum(4) == 100"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    Args:\n    n (int): The index of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Example:\n    >>> find_star_num(3)\n    37\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n    return 2 * n * (2 * n - 1)\n\n# Test the function\nassert find_star_num(3) == 37"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Find the sum of even numbers at even positions in a list.\n\n    Args:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Example:\n    >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n    30\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    even_sum = 0\n    for i in range(len(lst)):\n        if i % 2 == 0 and lst[i] % 2 == 0:\n            even_sum += lst[i]\n\n    return even_sum\n\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Args:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> even_Power_Sum(2)\n    1056\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    power_sum = sum(num ** 5 for num in even_numbers)\n\n    return power_sum\n\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    return [tup[-1] for tup in lst]\n\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    return tuple(result)\n\n# Test cases\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((1, 2, 3), (4, 5, 6)) == (-3, -3, -3)\nassert substract_elements((10, 20, 30), (5, 10, 15)) == (5, 10, 15)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Args:\n    n (int): The positive integer for which the sum of even index binomial coefficients is to be calculated.\n\n    Returns:\n    int: The sum of even index binomial coefficients for the given positive integer n.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    binomial_coeffs = [1]\n    for i in range(1, n+1):\n        binomial_coeffs.append(binomial_coeffs[i-1] * (n-i+1) // i)\n\n    # Calculate the sum of even index binomial coefficients\n    even_sum = 0\n    for i in range(0, len(binomial_coeffs), 2):\n        even_sum += binomial_coeffs[i]\n\n    return even_sum\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * radius**2 * height\n\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test cases\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 195) == {}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test cases\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2))) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5, 6)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5, 6, 7)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5, 6, 7, 8)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5, 6, 7, 8, 9)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, (1, 2), 3, 4, 5, 6, 7, 8, 9, 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    return n * (3 * n - 2)\n\ndef test_is_num_decagonal():\n    assert is_num_decagonal(3) == 27\n"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test cases\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],42) == (False, -1)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1,2,3]) == True\nassert all_unique([1,2,2]) == False\nassert all_unique([1,1,2]) == False\nassert all_unique([1,2,3,4,5,6,7,8,9,10]) == True\nassert all_unique([1,2,3,4,5,6,7,8,9,10,10]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(lst1, lst2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n    lst1 (list): The first list to be subtracted.\n    lst2 (list): The second list to be subtracted.\n\n    Returns:\n    list: The element-wise subtraction of the two lists.\n\n    Raises:\n    ValueError: If the two lists have different lengths.\n\n    Example:\n    >>> sub_list([1, 2, 3],[4,5,6])\n    [-3, -3, -3]\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"The two lists must have the same length.\")\n    return [x - y for x, y in zip(lst1, lst2)]\n\n# Test the function\nassert sub_list([1, 2, 3],[4,5,6]) == [-3,-3,-3]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(1223) == False\nassert validate(1233) == False\nassert validate(1232) == True\nassert validate(12333) == False\nassert validate(12344) == False\nassert validate(12345) == True\nassert validate(123456) == True\nassert validate(1234567) == True\nassert validate(12345678) == True\nassert validate(123456789) == True\nassert validate(1234567890) == True\nassert validate(12345678901) == True\nassert validate(123456789012) == True\nassert validate(1234567890123) == True\nassert validate(12345678901234) == True\nassert validate(123456789012345) == True\nassert validate(1234567890123456) == True\nassert validate(12345678901234567) == True\nassert validate(123456789012345678) == True\nassert validate(1234567890123456789) == True\nassert validate(12345678901234567890) == True\nassert validate(123456789012345678901) == True\nassert validate(1234567890123456789012) == True\nassert validate(12345678901234567890123) == True\nassert validate(123456789012345678901234) == True\nassert validate(1234567890123456789012345) == True\nassert validate(12345678901234567890123456) == True\nassert validate(123456789012345678901234567) == True\nassert validate(1234567890123456789012345678) == True\nassert validate(12345678901234567890123456789) == True\nassert validate(123456789012345678901234567890) == True\nassert validate(1234"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True\nassert check_element([1, 1, 1, 1], 1)==True\nassert check_element([1, 2, 3, 4], 1)==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"abc\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == True\nassert text_match_two_three(\"abbbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the modified array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Raises:\n        ValueError: If the length of the modified array is not equal to the product of the length of the input array and the number of repetitions.\n\n    Example:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n        30\n    \"\"\"\n    if n != len(arr) * k:\n        raise ValueError(\"Length of modified array is not equal to the product of the length of the input array and the number of repetitions.\")\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum * k\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array with the first and last elements removed\n    modified_sum_without_first_last = max_sub_array_sum(arr[1:-1]) * (k - 1)\n\n    # Calculate the maximum sum of a contiguous sub"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i * i\n    return sum_of_squares\n\n# Test cases\nassert square_Sum(2) == 20\nassert square_Sum(3) == 210\nassert square_Sum(4) == 250\nassert square_Sum(5) == 350"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_lst = sublist\n    return max_len, max_lst\n\n# Test cases\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [2, 4, 6, 8]]) == (4, [2, 4, 6, 8])\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17], [2, 4, 6, 8], [10, 12, 14, 16, 18]]) == (5, [10, 12, 14, 16, 18])"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    return a // b\n\n# Test cases\nassert find(10, 3) == 3\nassert find(10, 2) == 5\nassert find(10, 1) == 10\nassert find(10, 0) == 0\nassert find(0, 10) == 0\nassert find(0, 0) == 0"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Find the third side of a right angled triangle.\n\n    Args:\n    a (float): Length of the first side of the triangle.\n    b (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either of the input sides is negative.\n\n    Example:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    \"\"\"\n    if a < 0 or b < 0:\n        raise ValueError(\"Input sides cannot be negative.\")\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return max_value\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val([1, 2, 3, 4, 5]) == 5\nassert max_val([-1, -2, -3, -4, -5]) == -1\nassert max_val([1, '2', 3, '4', 5]) == 5\nassert max_val([1, 2, 3, 4, 5, '6']) == 6"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test cases\nassert get_Inv_Count([1,20,6,4,5]) == 5\nassert get_Inv_Count([1,2,3,4,5]) == 0\nassert get_Inv_Count([5,4,3,2,1]) == 10\nassert get_Inv_Count([1,2,3,4,5,6,7,8,9,10]) == 0\nassert get_Inv_Count([10,9,8,7,6,5,4,3,2,1]) == 45"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Test cases\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [120, 130, 140]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 120, 130, 140]\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120], [120, 130, 140], [150, 160, 170]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 120, 130, 140, 150, 160, 170]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    max_score = 0\n    max_name = None\n    aggregates = {}\n\n    for name, score in lst:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n\n        if aggregates[name] > max_score:\n            max_score = aggregates[name]\n            max_name = name\n\n    return (max_name, max_score)\n\n# Test cases\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84), ('Peter Nichols', 100)]) == ('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84), ('Peter Nichols', 100), ('Juan Whelan', 100)]) == ('Juan Whelan', 312)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    # Base case: if n is 0, there is only one possible sequence\n    if n == 0:\n        return 1\n    \n    # Recursive case: count the number of sequences with n-1 bits\n    count = count_binary_seq(n-1)\n    \n    # Add 2 to the count for each sequence that satisfies the condition\n    count += 2 * count_binary_seq(n-1)\n    \n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    if isinstance(dictionary, dict):\n        if dictionary:\n            return 1 + max(dict_depth(value) for value in dictionary.values())\n        else:\n            return 1\n    else:\n        return 0\n\n# Test cases\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {}}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {}}}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {}}}}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {}}}}}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {}}}}}}}}}}}}})==4\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': {'f': {'g': {'h': {'i': {'j': {'k': {'l': {'m': {'n': {'o': {'p': {'q': {}}}}}}}}}}}}}})==4\nassert dict_depth({'a':"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w.startswith('p'):\n                result.append(w)\n    return tuple(result)\n\n# Test cases\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')\nassert start_withp([\"Python\", \"Java\", \"c\"]) == ('Python',)\nassert start_withp([\"Java\", \"c\"]) == ()"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum as 0\n    max_sum = 0\n\n    # Iterate through the array from index 0 to i-1\n    for j in range(i):\n        # Check if the current element is greater than the kth element\n        if arr[j] > arr[k]:\n            # Update the maximum sum if the current sum is greater\n            max_sum = max(max_sum, arr[j])\n\n    # Return the maximum sum\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    list1 (list): The first list of factors.\n    list2 (list): The second list of factors.\n    num (int): The number of largest products to find.\n\n    Returns:\n    list: The list of the specified number of largest products.\n\n    Raises:\n    ValueError: If num is less than 1.\n\n    Example:\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    \"\"\"\n    if num < 1:\n        raise ValueError(\"num must be greater than 0\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[0] * list2[0], list1[0] * list2[1], list1[1] * list2[0], list1[1] * list2[1])\n        if max_product == list1[0] * list2[0]:\n            products.append(list1[0] * list2[0])\n            list1.pop(0)\n            list2.pop(0)\n        elif max_product == list1[0] * list2[1]:\n            products.append(list1[0] * list2[1])\n            list1.pop(0)\n            list2.pop(1)\n        elif max_product == list1[1] * list2[0]:\n            products.append(list1[1] * list2[0])\n            list1.pop(1)\n            list2.pop(0)\n        else:\n            products.append(list1[1] * list2[1])\n            list1.pop(1)\n            list2.pop(1)\n\n    return products\n\n# Test the function\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    if a > b:\n        return a\n    else:\n        return b\n\n# Test cases\nassert maximum(5, 10) == 10\nassert maximum(10, 5) == 10\nassert maximum(5, 5) == 5"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Set the left most unset bit in a given number.\n\n    Args:\n    num (int): The input number.\n\n    Returns:\n    int: The number with the left most unset bit set.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Example:\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Find the position of the left most unset bit\n    position = 0\n    while num & (1 << position):\n        position += 1\n\n    # Set the left most unset bit\n    num |= (1 << position)\n\n    return num\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Args:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test cases\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(16) == 16\nassert highest_Power_of_2(32) == 32\nassert highest_Power_of_2(64) == 64\nassert highest_Power_of_2(128) == 128\nassert highest_Power_of_2(256) == 256\nassert highest_Power_of_2(512) == 512\nassert highest_Power_of_2(1024) == 1024\nassert highest_Power_of_2(2048) == 2048\nassert highest_Power_of_2(4096) == 4096\nassert highest_Power_of_2(8192) == 8192\nassert highest_Power_of_2(16384) == 16384\nassert highest_Power_of_2(32768) == 32768\nassert highest_Power_of_2(65536) == 65536\nassert highest_Power_of_2(131072) == 131072\nassert highest_Power_of_2(262144) == 262144\nassert highest_Power_of_2(524288) == 524288\nassert highest_Power_of_2(1048576) == 1048576\nassert highest_Power_of_2(2097152) == 2097152\nassert highest_Power_of_2(4194304) == 4194304\nassert highest_Power_of_2(8388608) == 8388608\nassert highest_Power_of_2(16777216) == 16777216\nassert highest_Power_of_2(33554432) == 33554432\nassert highest_Power_of_2(67108864) == 67108864\nassert highest_Power_of_2(134217728) == 134217728\nassert highest_Power_of_2(268435456) == 268435456\nassert highest_Power_of_2(536870912) == 536870912\nassert highest_Power_of_2(1073741824) == 1073741824\nassert highest_Power_of_2(2147483648) == 2147483648\nassert highest_Power_of_2(4294967296) == 4294967296\nassert highest_Power_of_2(85899345"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test cases\nassert find_lucas(9) == 76\nassert find_lucas(10) == 123\nassert find_lucas(11) == 244\nassert find_lucas(12) == 487\nassert find_lucas(13) == 974\nassert find_lucas(14) == 1771\nassert find_lucas(15) == 3136\nassert find_lucas(16) == 5767\nassert find_lucas(17) == 10609\nassert find_lucas(18) == 19513\nassert find_lucas(19) == 35888\nassert find_lucas(20) == 66012"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(item) for item in lst]\n\n# Test cases\nassert add_string([1,2,3,4],'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string([], 'temp{0}') == []\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string([1, 2, 3, 4], 'temp{0}') != ['temp1', 'temp2', 'temp3']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test cases\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\ndef test_get_max_sum():\n    assert get_max_sum(60) == 106\n"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    return len(set(tup)) == len(tup)\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6)) == False\nassert check_distinct((1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, 6, 1, 4, 5, "}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abcdabcd\") == \"a\"\nassert first_non_repeating_character(\"aabbcc\") == None\nassert first_non_repeating_character(\"aabbccd\") == \"d\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    Find the median of three numbers.\n\n    Args:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    num3 (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    \"\"\"\n    sorted_numbers = sorted([num1, num2, num3])\n    median = sorted_numbers[1]\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    result = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result\n\n# Test cases\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]\nassert sum_of_digits([123, 456, 789]) == [6, 15, 24]\nassert sum_of_digits([1, 2, 3]) == [1, 2, 3]\nassert sum_of_digits([100, 200, 300]) == [1, 2, 3]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    if a < b:\n        return a\n    else:\n        return b\n\n# Test cases\nassert minimum(1, 2) == 1\nassert minimum(2, 1) == 1\nassert minimum(-1, 0) == -1\nassert minimum(0, -1) == -1\nassert minimum(0, 0) == 0"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    if element in tuplex:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'a')==False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    Find whether the parity of a given number is odd.\n\n    Args:\n    num (int): The number to check parity.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n\n    Example:\n    >>> find_Parity(12)\n    False\n    \"\"\"\n    return num % 2 == 1\n\n# Test cases\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    min_product = float('inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n\n# Test cases\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5)]) == 10\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9), (3, 5), (1, 2)]) == 2"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    min_val = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_val:\n            min_val = item\n    return min_val\n\n# Test cases\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2\nassert min_val([1, 2, 3, 4, 5]) == 1\nassert min_val([5, 4, 3, 2, 1]) == 1\nassert min_val([1, 'Python', 3, 2, 4, 5, 'version']) == 1\nassert min_val([1, 2, 3, 4, 5, 'version']) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12, 13]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == 1\nassert min_val([1, 2, 3, 4, 5, 'version', 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == 1\nassert min_val([1, 2, "}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    return [num for num in lst if num % 2 == 0]\n\ndef test_remove_odd():\n    assert remove_odd([1, 2, 3]) == [2]\n\ntest_remove_odd()"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [tup[n] for tup in lst]\n\n# Test cases\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1) == [98, 97, 91, 94]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2) == [99, 96, 94, 98]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test cases\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3,4,5],[3,4,5,6,7]) == True\nassert overlapping([1,2,3,4,5],[5,6,7,8,9]) == True\nassert overlapping([1,2,3,4,5],[1,2,3,4,5]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    max_product = float('-inf')\n    max_pair = None\n    \n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n    \n    return max_pair\n\n# Test cases\nassert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([-1,-2,-3,-4,-7,0,-8,-4]) == (-7,-8)\nassert max_Product([1,2,3,4,7,0,8,4,10]) == (10,8)\nassert max_Product([1,2,3,4,7,0,8,4,10,11]) == (11,10)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = max(len(sublist) for sublist in lst)\n    max_sublist = [sublist for sublist in lst if len(sublist) == max_length]\n    return max_sublist[0]\n\n# Test cases\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([['A','B'],['A','B','C'],['A']]) == ['A','B','C']\nassert Find_Max([['A','B','C'],['A'],['A','B']]) == ['A','B','C']\nassert Find_Max([['A','B','C'],['A','B'],['A']]) == ['A','B','C']\nassert Find_Max([['A','B','C'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    \"\"\"\n    Find the cube sum of first n even natural numbers.\n\n    Args:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    216\n    >>> cube_Sum(4)\n    408\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    even_numbers = [2 * i for i in range(1, n + 1)]\n    cube_sum = sum(num ** 3 for num in even_numbers)\n    return cube_sum\n\n\n# Test cases\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 216\nassert cube_Sum(4) == 408"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    return delimiter.join(str(x) for x in tup)\n\n# Test cases\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter=' ') == 'ID is 4 UTS'\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='') == 'IDis4UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers to include in the calculation.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    total_cube = 0\n    for num in range(1, n+1):\n        total_cube += num**3\n\n    average_cube = total_cube / n\n    return average_cube\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]\n\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test cases\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 7) == 2\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 15) == 1\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 2) == 0"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n    date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n    str: The date in dd-mm-yyyy format.\n\n    Raises:\n    ValueError: If the input date is not in the correct format.\n\n    Example:\n    >>> change_date_format(\"2026-01-02\")\n    '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Input date should be in yyyy-mm-dd format.\")\n\n# Test cases\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\n"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] & tuple2[i])\n    return tuple(result)\n\n# Test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 2)\nassert and_tuples((1, 2, 3), (1, 2, 3)) == (1, 2, 3)\nassert and_tuples((1, 2, 3), (0, 0, 0)) == (0, 0, 0)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: Directrix of the parabola.\n\n    Example:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n    return -b / (2 * a)\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Find the median length of a trapezium.\n\n    Args:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input lengths are non-positive.\n\n    Example:\n    >>> median_trapezium(15, 25, 35)\n    20\n    \"\"\"\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Input lengths must be positive.\")\n\n    median = (a + b) / 2\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([1, 2, 3, 4, 5], 0) == True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(num):\n    return num % 10\n\n# Test cases\nassert last_digit(123) == 3\nassert last_digit(456) == 6\nassert last_digit(789) == 9"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]\n\n# Test cases\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([1, 2, 3, 4]) == []\nassert neg_nos([-1, -2, -3, -4]) == [-1, -2, -3, -4]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])\n\n# Test cases\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"hello\") == \"el\"\nassert remove_odd(\"world\") == \"wrd\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    return int(''.join(map(str, numbers)))\n\n# Test cases\nassert multiple_to_single([11, 33, 50]) == 113350\nassert multiple_to_single([1, 2, 3]) == 123\nassert multiple_to_single([10, 20, 30]) == 102030"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    # Split the sentence into words\n    words = sentence.split()\n    \n    # Initialize variables to store the first adverb and its position\n    first_adverb = None\n    first_adverb_position = None\n    \n    # Iterate over the words in the sentence\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.endswith('ly'):\n            # If it is the first adverb, store its position and value\n            if first_adverb is None:\n                first_adverb = word\n                first_adverb_position = i\n            # If there are multiple adverbs, update the first adverb and its position\n            else:\n                first_adverb = word\n                first_adverb_position = i\n    \n    # Return the first adverb and its position\n    return first_adverb_position, first_adverb\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 'clearly')\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 'clearly')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n        result.append((element1[0] * element2[0], element1[1] * element2[1]))\n    return tuple(result)\n\n# Test cases\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\n# Test cases\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c']) == 4\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd']) == 5\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b', 'c', 'd', 'e']) == 5"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    cubes = []\n    for num in nums:\n        cubes.append(num ** 3)\n    return cubes\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 5\n    else:\n        perrin_nums = [3, 5]\n        for _ in range(2, n):\n            perrin_nums.append(perrin_nums[-2] + perrin_nums[-3])\n        return sum(perrin_nums)\n\n# Test cases\nassert cal_sum(9) == 49\nassert cal_sum(10) == 84\nassert cal_sum(11) == 132\nassert cal_sum(12) == 207\nassert cal_sum(13) == 319\nassert cal_sum(14) == 506\nassert cal_sum(15) == 825\nassert cal_sum(16) == 1331\nassert cal_sum(17) == 2156\nassert cal_sum(18) == 3487\nassert cal_sum(19) == 5643\nassert cal_sum(20) == 9120"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    return [s for s in lst if len(s) == size]\n\n# Test cases\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 10) == []\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 0) == []"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")\n\n# Test cases\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces('Hello World') == 'HelloWorld'\nassert remove_whitespaces('  Python  ') == 'Python'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    factors = [i for i in range(1, num+1) if num % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)\n\n# Test cases\nassert sumofFactors(18) == 26\nassert sumofFactors(24) == 42\nassert sumofFactors(30) == 42"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"python.\") == False\nassert text_match_wordz(\"pythonz\") == True\nassert text_match_wordz(\"pythonz123\") == True\nassert text_match_wordz(\"pythonz123z\") == True\nassert text_match_wordz(\"pythonz123z.\") == True\nassert text_match_wordz(\"pythonz123z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.z.z\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.z.z.\") == True\nassert text_match_wordz(\"pythonz123z.z.z.z.z.z.z.z.z.z.z.z\") == True\nassert text_match_"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    elif month_number == 2:\n        return False\n    else:\n        return False\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(13) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    min_len = float('inf')\n    min_sublist = []\n    \n    for sublist in lst:\n        if len(sublist) < min_len:\n            min_len = len(sublist)\n            min_sublist = sublist\n    \n    return min_sublist\n\n# Test cases\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,2],[1,2,3],[1]]) == [1]\nassert Find_Min([[1,2,3],[1],[1,2]]) == [1]\nassert Find_Min([[1,2,3],[1,2],[1]]) == [1]\nassert Find_Min([[1,2,3],[1,2],[1,2,3]]) == [1, 2]\nassert Find_Min([[1,2,3],[1,2,3],[1,2]]) == [1, 2]\nassert Find_Min([[1,2,3],[1,2,3],[1,2,3]]) == [1, 2, 3]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    result = ''\n    for char in string:\n        if char.islower():\n            result += char\n    return result\n\n# Test cases\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('HelloWorld') == 'Helloworld'\nassert remove_uppercase('lowercase') == 'lowercase'\nassert remove_uppercase('UPPERCASE') == ''\nassert remove_uppercase('') == ''"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\ntest_Extract()"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for item in lst:\n        result += [comb + [item] for comb in result]\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product subarray.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Example:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n\n    for num in arr[1:]:\n        temp_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, current_max * num, current_min * num)\n        current_max = temp_max\n\n        max_product = max(max_product, current_max)\n\n    return max_product\n\n\n# Test cases\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([-2, -3, 0, -2, -40]) == 80\nassert max_subarray_product([-2, 0, -1]) == 0\nassert max_subarray_product([-2, 0, -1, 10]) == 10\nassert max_subarray_product([-2, 0, -1, 10, -2]) == 10\nassert max_subarray_product([-2, 0, -1, 10, -2, 10]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10, -2]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10, -2, 10]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10, -2, 10, -2]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10, -2, 10, -2, 10]) == 100\nassert max_subarray_product([-2, 0, -1, 10, -2, 10, -2, 10, -2, 10, -2, 10, -2]) == 100\nassert max_subarray_product([-"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test cases\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':'Blue'})=={'c1': 'Red', 'c3':'Blue'}\nassert drop_empty({'c1': None, 'c2': None, 'c3':None})=={}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n\n# Test cases\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000\nassert max_product([1, 2, 3, 4, 5]) == 60\nassert max_product([5, 4, 3, 2, 1]) == 60\nassert max_product([1, 2, 3, 4, 5, 6]) == 120\nassert max_product([6, 5, 4, 3, 2, 1]) == 120\nassert max_product([1, 2, 3, 4, 5, 6, 7]) == 5040\nassert max_product([7, 6, 5, 4, 3, 2, 1]) == 5040\nassert max_product([1, 2, 3, 4, 5, 6, 7, 8]) == 40320\nassert max_product([8, 7, 6, 5, 4, 3, 2, 1]) == 40320\nassert max_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 362880\nassert max_product([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 362880"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i+1])\n    return tuple(result)\n\n# Test cases\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((1, 2, 3, 4, 5)) == (3, 5, 7, 9)\nassert add_pairwise((1, 2, 3, 4, 5, 6)) == (3, 5, 7, 9, 11)\nassert add_pairwise((1, 2, 3, 4, 5, 6, 7)) == (3, 5, 7, 9, 11, 13)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test cases\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9\nassert find_remainder([1, 2, 3, 4, 5], 10) == 0\nassert find_remainder([1, 2, 3, 4, 5], 1) == 0\nassert find_remainder([1, 2, 3, 4, 5], 2) == 1\nassert find_remainder([1, 2, 3, 4, 5], 3) == 0\nassert find_remainder([1, 2, 3, 4, 5], 4) == 0\nassert find_remainder([1, 2, 3, 4, 5], 5) == 0\nassert find_remainder([1, 2, 3, 4, 5], 6) == 0\nassert find_remainder([1, 2, 3, 4, 5], 7) == 3\nassert find_remainder([1, 2, 3, 4, 5], 8) == 0\nassert find_remainder([1, 2, 3, 4, 5], 9) == 0\nassert find_remainder([1, 2, 3, 4, 5], 10) == 0"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i+1] - sorted_lst[i] != 1:\n            return False\n    return True\n\n# Test cases\nassert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,4,6]) == False\nassert check_Consecutive([1,2,3,4,5,6]) == True\nassert check_Consecutive([1,2,3,4,5,6,7]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]) == True\nassert check_Consecutive([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\n# Test cases\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    return string.replace(old_char, new_char)\n\n# Test cases\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    return sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n\n# Test cases\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':85}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 85)]\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87, 'Biology':85, 'English':88}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81), ('Biology', 85), ('English', 88)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Args:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Example:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([1, 2, 3, 4, 5])\n    6\n    >>> big_sum([1, 2, 3, 4, 5, 6])\n    7\n    >>> big_sum([1])\n    2\n    >>> big_sum([])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input array is empty\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    arr.sort()\n    return arr[0] + arr[-1]\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([1, 2, 3, 4, 5]) == 6\nassert big_sum([1, 2, 3, 4, 5, 6]) == 7\nassert big_sum([1]) == 2\n\ntry:\n    big_sum([])\nexcept ValueError as e:\n    assert str(e) == \"Input array is empty\""}
{"task_id": "Mbpp/477", "solution": "def is_lower(string):\n    return string.lower()\n\nassert is_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n\n# Test cases\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"\nassert remove_lowercase(\"python\") == \"\"\nassert remove_lowercase(\"PyThOn\") == \"PyTh\"\nassert remove_lowercase(\"PYTHON\") == \"PYTHON\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(num):\n    \"\"\"\n    Find the first digit of a given number.\n\n    Args:\n    num (int): The number to find the first digit of.\n\n    Returns:\n    int: The first digit of the given number.\n\n    Raises:\n    TypeError: If the input is not an integer.\n\n    Example:\n    >>> first_digit(123)\n    1\n    >>> first_digit(100)\n    1\n    >>> first_digit(0)\n    0\n    \"\"\"\n    if not isinstance(num, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    if num == 0:\n        return 0\n\n    while num >= 10:\n        num //= 10\n\n    return num\n\n\n# Test cases\nassert first_digit(123) == 1\nassert first_digit(100) == 1\nassert first_digit(0) == 0"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    odd_numbers = []\n    for num in numbers:\n        if num % 2 != 0:\n            odd_numbers.append(num)\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test cases\nassert difference(3) == 30\nassert difference(5) == 225\nassert difference(10) == 3025"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([1,2,3,4,5],5) == 10\nassert find_Odd_Pair([1,2,3,4,5,6],6) == 20"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string\n\n# Test cases\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"python\") == \"PYTHON\"\nassert toggle_string(\"PyThOn\") == \"pYtHoN\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n\n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between the two integers.\n\n    Example:\n    >>> digit_distance_nums(1, 2)\n    1\n    >>> digit_distance_nums(12, 23)\n    3\n    >>> digit_distance_nums(123, 234)\n    3\n    >>> digit_distance_nums(1234, 2345)\n    4\n    >>> digit_distance_nums(12345, 23456)\n    5\n    >>> digit_distance_nums(123456, 234567)\n    6\n    >>> digit_distance_nums(1234567, 2345678)\n    7\n    >>> digit_distance_nums(12345678, 23456789)\n    8\n    >>> digit_distance_nums(123456789, 234567890)\n    9\n    >>> digit_distance_nums(1234567890, 2345678901)\n    10\n    >>> digit_distance_nums(12345678901, 23456789012)\n    11\n    >>> digit_distance_nums(123456789012, 234567890123)\n    12\n    >>> digit_distance_nums(1234567890123, 2345678901234)\n    13\n    >>> digit_distance_nums(12345678901234, 23456789012345)\n    14\n    >>> digit_distance_nums(123456789012345, 234567890123456)\n    15\n    >>> digit_distance_nums(1234567890123456, 2345678901234567)\n    16\n    >>> digit_distance_nums(12345678901234567, 23456789012345678)\n    17\n    >>> digit_distance_nums(123456789012345678, 234567890123456789)\n    18\n    >>> digit_distance_nums(1234567890123456789, 234567890"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n# Test cases\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([1, 2, 3, 4, 5], 5) == 15\nassert max_sub_array_sum([-1, -2, -3, -4, -5], 5) == -1\nassert max_sub_array_sum([1, -2, 3, -4, 5], 5) == 5\nassert max_sub_array_sum([-1, 2, -3, 4, -5], 5) == 4"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Test cases\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[1,2,3],[4,5,6],[7,8,9,10]]) == 3\nassert Find_Max_Length([[1,2,3,4],[5,6,7,8],[9,10,11,12,13]]) == 4\nassert Find_Max_Length([[1,2,3,4,5],[6,7,8,9,10],[11,12,13,14,15,16]]) == 5"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    values = re.findall(r'\"([^\"]*)\"', string)\n    return values\n\n# Test cases\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']\nassert extract_values('\"Python\", \"PHP\", \"Java\", \"C#\"') == ['Python', 'PHP', 'Java', 'C#']\nassert extract_values('\"Python\"') == ['Python']\nassert extract_values('\"Python\", \"PHP\"') == ['Python', 'PHP']\nassert extract_values('\"Python\", \"PHP\", \"Java\", \"C#\", \"Ruby\"') == ['Python', 'PHP', 'Java', 'C#', 'Ruby']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test cases\nassert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,2,3],3) == 3\nassert count_Pairs([1,1,1],3) == 0"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    return list(string)\n\ndef test_split_string():\n    assert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']\n"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n\n    Args:\n    num (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input is negative.\n\n    Example:\n    >>> sum_digits(345)\n    12\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be non-negative.\")\n    return sum(int(digit) for digit in str(num))\n\n# Test cases\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(12345) == 15"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test cases\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,15]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,16]) == True\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,14]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,12]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,10]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,8]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,6]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,4]) == False\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,2]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]\n\n# Test cases\nassert empty_list(5) == [{}, {}, {}, {}, {}]\nassert empty_list(0) == []\nassert empty_list(1) == [{}]\nassert empty_list(2) == [{}, {}]\nassert empty_list(3) == [{}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    return [sorted(sublist) for sublist in lst]\n\n# Test cases\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n    return unique_nums\n\n# Test cases\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,1,1,1,1,1,1]) == [1]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert two_unique_nums([1,1,2,2,3,3,4,4,5,5]) == [1, 2, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5,1,2,3,4,5]) == [1, 2, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5,6,7,8,9,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nassert two_unique_nums([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\n# Test cases\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000\nassert unique_product([1, 2, 3, 4, 5]) == 120\nassert unique_product([1, 1, 1, 1, 1]) == 1\nassert unique_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3628800"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n    arr (list): The main list.\n    sub (list): The sublist to check.\n\n    Returns:\n    bool: True if sub is a sublist of arr, False otherwise.\n\n    \"\"\"\n    if len(sub) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub) + 1):\n        if arr[i:i+len(sub)] == sub:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3]) == True\nassert is_Sub_Array([1,4,3,5],[4,3,5]) == True\nassert is_Sub_Array([1,4,3,5],[4,3,5,6]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5]) == True\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,11,12,13,14,15,16]) == False\nassert is_Sub_Array([1,4,3,5],[1,4,3,5,6,7,8,9,10,"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    if n == 0:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(1, n+1):\n            last_digit = (last_digit * i) % 10\n        return last_digit\n\n# Test cases\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 0\nassert last_digit_factorial(15) == 0\nassert last_digit_factorial(20) == 0\nassert last_digit_factorial(25) == 0\nassert last_digit_factorial(30) == 0\nassert last_digit_factorial(35) == 0\nassert last_digit_factorial(40) == 0\nassert last_digit_factorial(45) == 0\nassert last_digit_factorial(50) == 0\nassert last_digit_factorial(55) == 0\nassert last_digit_factorial(60) == 0\nassert last_digit_factorial(65) == 0\nassert last_digit_factorial(70) == 0\nassert last_digit_factorial(75) == 0\nassert last_digit_factorial(80) == 0\nassert last_digit_factorial(85) == 0\nassert last_digit_factorial(90) == 0\nassert last_digit_factorial(95) == 0\nassert last_digit_factorial(100) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A tuple containing the dissimilar elements.\n\n    Example:\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n    nested_tuple (tuple): A nested mixed tuple.\n\n    Returns:\n    tuple: A new tuple with uneven elements removed.\n\n    Example:\n    >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n    (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    new_tuple = tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, nested_tuple))\n    return new_tuple\n\n# Test cases\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10)) == (4, (6, (2, 4)), 6, 8, 10)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11)) == (4, (6, (2, 4)), 6, 8, 10)\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8, 9, 10, 11, 12)) == (4, (6, (2, 4)), 6, 8, 10, 12)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge and height.\n\n    Args:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is not a positive number.\n\n    Example:\n    >>> surface_Area(3, 4)\n    33\n    \"\"\"\n    if base_edge <= 0 or height <= 0:\n        raise ValueError(\"Base edge and height must be positive numbers.\")\n\n    base_area = base_edge ** 2\n    lateral_area = 4 * base_edge * height\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_Area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n-i-1)\n        return result\n\n# Test cases\nassert catalan_number(10) == 16796\nassert catalan_number(5) == 42\nassert catalan_number(0) == 1\nassert catalan_number(1) == 1\nassert catalan_number(2) == 2\nassert catalan_number(3) == 5\nassert catalan_number(4) == 14\nassert catalan_number(5) == 42\nassert catalan_number(6) == 132\nassert catalan_number(7) == 429\nassert catalan_number(8) == 1430\nassert catalan_number(9) == 4862\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(items, n):\n    sorted_items = sorted(items, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]\n\n# Test cases\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Test cases\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]\nassert split_Arr([12,10,5,6,52,36],3) == [6,52,36,12,10,5]\nassert split_Arr([12,10,5,6,52,36],4) == [52,36,12,10,5,6]\nassert split_Arr([12,10,5,6,52,36],5) == [36,12,10,5,6,52]\nassert split_Arr([12,10,5,6,52,36],6) == [12,10,5,6,52,36]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test cases\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)\nassert list_tuple([]) == ()\nassert list_tuple([1]) == (1,)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The difference between the largest and smallest values in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Example:\n    >>> big_diff([1,2,3,4])\n    3\n    >>> big_diff([1,2,3,4,5])\n    4\n    >>> big_diff([1,2,3,4,5,6])\n    5\n    >>> big_diff([1,2,3,4,5,6,7])\n    6\n    >>> big_diff([1,2,3,4,5,6,7,8])\n    7\n    >>> big_diff([1,2,3,4,5,6,7,8,9])\n    8\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10])\n    9\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11])\n    10\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12])\n    11\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13])\n    12\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n    13\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n    14\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n    15\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n    16\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n    17\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n    18\n    >>> big_diff([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n    19\n    >>> big_diff([1,2,3,4,5,6,7,8,9,"}
{"task_id": "Mbpp/589", "solution": "import math\n\ndef perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the given numbers.\n\n    Raises:\n    ValueError: If start is greater than end.\n\n    Example:\n    >>> perfect_squares(1, 30)\n    [1, 4, 9, 16, 25]\n    \"\"\"\n    if start > end:\n        raise ValueError(\"Starting number should be less than or equal to the ending number.\")\n\n    squares = []\n    for num in range(int(math.ceil(math.sqrt(start))), int(math.floor(math.sqrt(end))) + 1):\n        squares.append(num ** 2)\n\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test cases\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3, 4, 5]) == [5, 2, 3, 4, 1]\nassert swap_List([100, 200, 300, 400, 500]) == [500, 200, 300, 400, 100]"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    \"\"\"\n    Find the sum of the product of consecutive binomial co-efficients.\n\n    Args:\n        n (int): The number of consecutive binomial co-efficients to consider.\n\n    Returns:\n        int: The sum of the product of consecutive binomial co-efficients.\n\n    Example:\n        >>> sum_Of_product(3)\n        15\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculate the binomial co-efficient (n choose k).\n\n        Args:\n            n (int): The total number of items.\n            k (int): The number of items to choose.\n\n        Returns:\n            int: The binomial co-efficient (n choose k).\n\n        Example:\n            >>> binomial_coefficient(5, 2)\n            10\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        if k > n - k:\n            k = n - k\n        result = 1\n        for i in range(k):\n            result = result * (n - i) // (i + 1)\n        return result\n\n    result = 0\n    for i in range(1, n + 1):\n        result += binomial_coefficient(n + i - 1, i)\n    return result\n\n\ndef test_sum_Of_product():\n    \"\"\"\n    Test the sum_Of_product function.\n    \"\"\"\n    assert sum_Of_product(3) == 15\n\n"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    octets = ip_address.split('.')\n    modified_octets = []\n    for octet in octets:\n        modified_octet = str(int(octet))\n        modified_octets.append(modified_octet)\n    modified_ip_address = '.'.join(modified_octets)\n    return modified_ip_address\n\n# Test cases\nassert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\"\nassert removezero_ip(\"0.0.0.0\") == \"0.0.0.0\"\nassert removezero_ip(\"127.0.0.1\") == \"127.0.0.1\""}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n        else:\n            if odd_num is None:\n                odd_num = num\n    \n    if even_num is not None and odd_num is not None:\n        return even_num - odd_num\n    else:\n        return None\n\n# Test cases\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3\nassert diff_even_odd([1,3,5,7,9]) is None\nassert diff_even_odd([2,4,6,8]) == 2\nassert diff_even_odd([1,3,5,7,9,2,4,6,8]) == 2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(tup):\n    return sys.getsizeof(tup)\n\n# Test cases\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size(()) == sys.getsizeof(())\nassert tuple_size((1,)) == sys.getsizeof((1,))\nassert tuple_size((1, 2)) == sys.getsizeof((1, 2))\nassert tuple_size((1, 2, 3)) == sys.getsizeof((1, 2, 3))\nassert tuple_size((1, 2, 3, 4)) == sys.getsizeof((1, 2, 3, 4))\nassert tuple_size((1, 2, 3, 4, 5)) == sys.getsizeof((1, 2, 3, 4, 5))\nassert tuple_size((1, 2, 3, 4, 5, 6)) == sys.getsizeof((1, 2, 3, 4, 5, 6))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)) == sys.getsizeof((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))\nassert tuple_size((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13)) == sys.getsizeof((1, 2, "}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged sorted array.\n\n    Raises:\n        ValueError: If k is out of range for the merged array.\n\n    Example:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    merged = []\n    i, j = 0, 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n\n    if k < 1 or k > len(merged):\n        raise ValueError(\"k is out of range for the merged array\")\n\n    return merged[k - 1]\n\n\n# Test cases\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n\n    \"\"\"\n    # Convert the number to a string to get its length\n    num_str = str(num)\n    length = len(num_str)\n\n    # Calculate the sum of the cubes of each digit\n    sum_of_cubes = sum(int(digit) ** length for digit in num_str)\n\n    # Check if the sum of the cubes is equal to the original number\n    return sum_of_cubes == num\n\n# Test the function\nassert armstrong_number(153) == True\nassert armstrong_number(100) == False\nassert armstrong_number(371) == True\nassert armstrong_number(407) == True\nassert armstrong_number(1634) == True\nassert armstrong_number(8208) == True\nassert armstrong_number(9474) == True\nassert armstrong_number(54748) == True\nassert armstrong_number(92727) == True\nassert armstrong_number(93084) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Finds the sum and average of the first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers to sum and average.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_nums = n * (n + 1) // 2\n    avg_nums = sum_nums / n\n\n    return sum_nums, avg_nums\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    return num % 2 == 0\n\n# Test cases\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(4) == True\nassert is_Even(5) == False\nassert is_Even(6) == True\nassert is_Even(7) == False\nassert is_Even(8) == True\nassert is_Even(9) == False\nassert is_Even(10) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") == None\nassert first_repeated_char(\"aabbcc\") == \"a\"\nassert first_repeated_char(\"abcdefghijklmnopqrstuvwxyz\") == None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n\n    Args:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a number is lucid.\n\n    Args:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n\n    \"\"\"\n    if num == 1:\n        return True\n    if num % 2 == 0:\n        return False\n    while num > 1:\n        if num % 2 == 0:\n            return False\n        num = (num - 1) / 2\n    return True\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n# Test cases\nassert reverse_words(\"python program\") == \"program python\"\nassert reverse_words(\"hello world\") == \"world hello\"\nassert reverse_words(\"\") == \"\"\nassert reverse_words(\"single word\") == \"single word\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True\nassert prime_num(12) == False\nassert prime_num(2) == True\nassert prime_num(1) == False\nassert prime_num(0) == False\nassert prime_num(-1) == False"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    return degrees * math.pi / 180\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test cases\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'cat') == None"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test cases\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15\nassert bell_Number(5) == 52"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test cases\nassert remove_kth_element([1,1,2,3,4,4,5,1],3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([1,2,3,4,5], 2) == [1, 2, 4, 5]\nassert remove_kth_element([1,2,3,4,5], 5) == [1, 2, 3, 4]\nassert remove_kth_element([1,2,3,4,5], 1) == [1, 3, 4, 5]\nassert remove_kth_element([1,2,3,4,5], 0) == [2, 3, 4, 5]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\n# Test cases\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 8\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1) == 9"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test cases\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([['a', 'b'], ['c', 'd']]) == [['a', 'c'], ['b', 'd']]\nassert merge([['a'], ['b']]) == [['a'], ['b']]\nassert merge([['a', 'b', 'c'], ['d', 'e', 'f']]) == [['a', 'd'], ['b', 'e'], ['c', 'f']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\n# Test cases\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(1, 2, 3), (4, 5, 6), (7, 8, 9)]) == 45\nassert cummulative_sum([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12)]) == 78"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        total = sum(t)\n        average = total / len(t)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    return tuple(a % b for a, b in zip(t1, t2))\n\n# Test cases\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n    lst1 (list): The first list.\n    lst2 (list): The second list.\n\n    Returns:\n    list: The result of element-wise division of lst1 by lst2.\n\n    Raises:\n    ValueError: If the length of lst1 and lst2 are not equal.\n    ZeroDivisionError: If an element in lst2 is zero.\n\n    Example:\n    >>> div_list([4,5,6],[1, 2, 3])\n    [4.0, 2.5, 2.0]\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Length of lst1 and lst2 must be equal.\")\n\n    result = []\n    for i in range(len(lst1)):\n        if lst2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n        result.append(lst1[i] / lst2[i])\n\n    return result\n\n# Test the function\nassert div_list([4,5,6],[1, 2, 3]) == [4.0, 2.5, 2.0]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    num_list = []\n    char_list = []\n\n    for char in string:\n        if char.isdigit():\n            num_list.append(char)\n        else:\n            char_list.append(char)\n\n    return ''.join(char_list) + ''.join(num_list)\n\n\n# Test cases\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('1234567890') == '1234567890'\nassert move_num('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('1234567890') == '1234567890'\nassert move_num('abcdefghijklmnopqrstuvwxyz') == 'abcdefghijklmnopqrstuvwxyz'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        nums (list): List of numbers.\n\n    Returns:\n        int: Size of the largest subset.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Example:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list is empty\")\n\n    nums.sort()\n    dp = [1] * len(nums)\n\n    for i in range(1, len(nums)):\n        for j in range(i):\n            if nums[i] % nums[j] == 0:\n                dp[i] = max(dp[i], dp[j] + 1)\n\n    return max(dp)\n\n\n# Test cases\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([1, 2, 3, 4, 5, 6]) == 6\nassert largest_subset([1, 2, 4, 8, 16, 32]) == 6\nassert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\nassert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 20\nassert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]) == 30\nassert largest_subset([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50]) == 50"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        mid_index = n // 2\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        mid_index = n // 2\n        median = merged_list[mid_index]\n    return median\n\n# Test cases\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 5) == 5.0\nassert get_median([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], 6) == 5.5"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    return string.upper()\n\n# Test cases\nassert is_upper(\"person\") == \"PERSON\"\nassert is_upper(\"PERSON\") == \"PERSON\"\nassert is_upper(\"\") == \"\"\nassert is_upper(\"123\") == \"123\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius <= 0:\n        return None\n    else:\n        area = (radius ** 2) * math.pi / 2\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == None\nassert triangle_area(1) == 1.5707963267948966\nassert triangle_area(2) == 6.283185307179586\nassert triangle_area(3) == 11.570796326794896"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\ndef test_find_even_numbers():\n    assert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\n\ntest_find_even_numbers()"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append((i, j))\n    return adjacent_coordinates\n\n# Test cases\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    return string.replace(' ', '_')\n\n# Test cases\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('Hello World') == 'Hello_World'\nassert replace_spaces('Python is awesome') == 'Python_is_awesome'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    # Create a new list to store the non-zero elements\n    new_lst = [num for num in lst if num != 0]\n    \n    # Append the required number of zeroes to the new list\n    new_lst.extend([0] * (len(lst) - len(new_lst)))\n    \n    return new_lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result\n\n# Test cases\nassert pair_xor_Sum([5,9,7,6],4) == 47\nassert pair_xor_Sum([1,2,3,4],4) == 10\nassert pair_xor_Sum([1,2,3,4,5],5) == 30"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, price):\n    if amount > price:\n        return True\n    else:\n        return False\n\n# Test cases\nassert noprofit_noloss(1500, 1200) == False\nassert noprofit_noloss(1200, 1500) == True\nassert noprofit_noloss(1000, 1000) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n    wind_velocity (float): Wind velocity in km/h.\n    temperature (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    Raises:\n    ValueError: If the wind velocity is less than 0 or greater than 120.\n    ValueError: If the temperature is less than -50 or greater than 50.\n\n    \"\"\"\n    if wind_velocity < 0 or wind_velocity > 120:\n        raise ValueError(\"Wind velocity must be between 0 and 120 km/h.\")\n    if temperature < -50 or temperature > 50:\n        raise ValueError(\"Temperature must be between -50 and 50 celsius.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(0, 0) == 13\nassert wind_chill(100, -20) == -10"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    # Remove names starting with lowercase letter\n    names = [name for name in names if not name[0].islower()]\n    \n    # Sum the lengths of the remaining names\n    total_length = sum(len(name) for name in names)\n    \n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    return n * (3 * n - 2)\n\ndef test_is_nonagonal():\n    assert is_nonagonal(10) == 325\n"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    # Split the text into words\n    words = text.split()\n    \n    # Iterate over each word\n    for word in words:\n        # Check if the word starts with 'z'\n        if word.startswith('z'):\n            return False\n        \n        # Check if the word ends with 'z'\n        if word.endswith('z'):\n            return False\n        \n        # Check if the word contains 'z' except at the start and end\n        if 'z' in word[1:-1]:\n            return True\n    \n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\")==True\nassert text_match_wordz_middle(\"pythonzabc\")==False\nassert text_match_wordz_middle(\"pythonz\")==False\nassert text_match_wordz_middle(\"pythonzabcz\")==True\nassert text_match_wordz_middle(\"pythonzabcz.\")==True\nassert text_match_wordz_middle(\"pythonzabcz.z\")==False\nassert text_match_wordz_middle(\"pythonzabcz.z.\")==False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    # Reverse the array upto a given position\n    arr[:k] = arr[:k][::-1]\n    return arr\n\n# Test the function\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    tup += (dict,)\n    return tup\n\n# Test cases\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3]]) == 5.2\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [4, 5, 6]]) == 5.2\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9], [1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n\n# Test cases\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test cases\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) == 4\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[1, 2, 3, 4, 5, 6, 7, 8]) == 8\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[8, 7, 6, 5, 4, 3, 2, 1]) == 0"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test cases\nassert power_base_sum(2, 100) == 115\nassert power_base_sum(3, 2) == 9\nassert power_base_sum(5, 3) == 19"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    list: A list of extracted values.\n\n    Example:\n    >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n    ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    Takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    \"\"\"\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n    return result\n\n# Test the function\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n\n# Test cases\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Args:\n    r (float): Radius of the cone.\n    h (float): Height of the cone.\n\n    Returns:\n    float: Lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Example:\n    >>> lateralsurface_cone(5, 12)\n    204.20352248333654\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    return math.pi * r * math.sqrt(r**2 + h**2)\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test cases\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'\nassert replace_specialchar('Hello World') == 'Hello:World'\nassert replace_specialchar('') == ''"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\n# Test cases\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 4\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 8) == 6\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9) == 7\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10) == -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Finds the sum of products of all possible sublists of a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists of the input list.\n\n    Example:\n    >>> sum_Of_Subarray_Prod([1,2,3])\n    20\n    \"\"\"\n    n = len(lst)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result\n\n# Test cases\nassert sum_Of_Subarray_Prod([1,2,3]) == 20\nassert sum_Of_Subarray_Prod([1,2,3,4]) == 50\nassert sum_Of_Subarray_Prod([1,2,3,4,5]) == 130"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Check if the number is a power of 2\n    if num & (num - 1) == 0:\n        return num\n\n    # Toggle bits of the number except the first and the last bit\n    mask = ~(1 << (num.bit_length() - 1))\n    mask &= ~(1 << (num.bit_length() - 2))\n    return num ^ mask\n\n# Test cases\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 10\nassert toggle_middle_bits(16) == 16\nassert toggle_middle_bits(0) == 0\nassert toggle_middle_bits(1) == 1"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test cases\nassert left_insertion([1,2,4,5], 6) == 4\nassert left_insertion([1,2,4,5], 3) == 2\nassert left_insertion([1,2,4,5], 1) == 0\nassert left_insertion([1,2,4,5], 5) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    pattern = r'^[aeiouAEIOU].*'\n    return bool(re.match(pattern, string))\n\n# Test cases\nassert check_str(\"annie\")\nassert not check_str(\"banana\")\nassert check_str(\"apple\")\nassert check_str(\"Elephant\")\nassert not check_str(\"dog\")"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Args:\n    n (int): Number of digits in the triangular number.\n\n    Returns:\n    int: Index of the smallest triangular number with n digits.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> find_Index(2)\n    4\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    index = 1\n    triangular_number = 1\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even\")\n\n    result = {}\n    for i in range(0, len(tup), 2):\n        result[tup[i]] = tup[i+1]\n\n    return result\n\n\n# Test cases\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 5, 7, 10, 13)) == {1: 5, 7: 10, 13: None}\nassert tuple_to_dict((1, 5, 7, 10)) == {1: 5, 7: 10}\nassert tuple_to_dict((1, 5)) == {1: 5}\nassert tuple_to_dict((1,)) == {}\nassert tuple_to_dict(()) == {}\n\ntry:\n    tuple_to_dict((1, 5, 7, 10, 13, 5, 1))\nexcept ValueError as e:\n    assert str(e) == \"Tuple length must be even\""}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    if len(set(string)) == 1:\n        return True\n    else:\n        return False\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side):\n    \"\"\"\n    Calculate the area of a tetrahedron with a given side length.\n\n    Args:\n    side (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    area = math.sqrt(3) * side**2\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst (list): The list to be rotated.\n    num_items (int): The number of items to rotate.\n\n    Returns:\n    list: The rotated list.\n\n    Raises:\n    ValueError: If num_items is not a positive integer.\n\n    Example:\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    if not isinstance(num_items, int) or num_items <= 0:\n        raise ValueError(\"num_items must be a positive integer\")\n\n    num_items = num_items % len(lst)  # Adjust num_items if it exceeds the length of the list\n    rotated_lst = lst[-num_items:] + lst[:-num_items]\n    return rotated_lst\n\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    return any(value is None for value in tup)\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False\nassert check_none((None, None, None)) == True\nassert check_none((None, 4, 5, 6, 7)) == True\nassert check_none((10, None, 5, 6, 7)) == True\nassert check_none((10, 4, None, 6, 7)) == True\nassert check_none((10, 4, 5, None, 7)) == True\nassert check_none((10, 4, 5, 6, None)) == True"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper():\n            modified_words.append(word)\n        else:\n            modified_words.append(word.capitalize())\n    return ' '.join(modified_words)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"python\") == 'python'\nassert capital_words_spaces(\"PythonProgramming\") == 'Python Programming'\nassert capital_words_spaces(\"pythonProgramming\") == 'python Programming'\nassert capital_words_spaces(\"Python Programming\") == 'Python Programming'\nassert capital_words_spaces(\"python programming\") == 'python programming'\nassert capital_words_spaces(\"PythonProgrammingLanguage\") == 'Python Programming Language'\nassert capital_words_spaces(\"pythonprogramminglanguage\") == 'pythonprogramminglanguage'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    # Convert the list of strings to a list of integers\n    lst = [int(num) for num in lst]\n    \n    # Sort the list numerically\n    lst.sort()\n    \n    return lst\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    lst.extend(tup)\n    return lst\n\n# Test cases\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([], (1, 2, 3)) == [1, 2, 3]\nassert add_tuple([1, 2, 3], ()) == [1, 2, 3]\nassert add_tuple([], ()) == []"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    n = len(arr)\n    for i in range(n):\n        left_child_index = 2 * i + 1\n        right_child_index = 2 * i + 2\n        if left_child_index < n and arr[i] > arr[left_child_index]:\n            return False\n        if right_child_index < n and arr[i] > arr[right_child_index]:\n            return False\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert check_min_heap([8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert check_min_heap([9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert check_min_heap([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert check_min_heap([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\nassert check_min_heap([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\nassert check_min_heap([13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2,"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test cases\nassert jacobsthal_num(0) == 0\nassert jacobsthal_num(1) == 1\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(3) == 3\nassert jacobsthal_num(4) == 5\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(6) == 21\nassert jacobsthal_num(7) == 43\nassert jacobsthal_num(8) == 85\nassert jacobsthal_num(9) == 171\nassert jacobsthal_num(10) == 341\nassert jacobsthal_num(11) == 683\nassert jacobsthal_num(12) == 1365\nassert jacobsthal_num(13) == 2731"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 3) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 4) == [('Akash', 2), ('Akshat', 4), ('Manjeet', 10), ('Nikhil', 8)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 1) == [('Akash', 2)]\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 0) == []"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test cases\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]\nassert extract_index_list([1, 2, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == []\nassert extract_index_list([1, 1, 1, 1, 1, 1, 1],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n\n    Raises:\n    ValueError: If the list is empty or has only one element.\n\n    Example:\n    >>> second_smallest([1, 2, -8, -2, 0, -2])\n    -2\n    \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest\n\n# Test the function\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test cases\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\"]) == 3\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\"]) == 4\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\", \"julia\", \"julia\", \"julia\"]) == 5"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    counts = {}\n    for sublist in lst:\n        tup = tuple(sublist)\n        if tup in counts:\n            counts[tup] += 1\n        else:\n            counts[tup] = 1\n    return counts\n\n# Test cases\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([[1, 2, 3], [4, 5, 6], [1, 2, 3], [7, 8, 9], [4, 5, 6], [10, 11, 12]]) == {(1, 2, 3): 2, (4, 5, 6): 2, (7, 8, 9): 1, (10, 11, 12): 1}\nassert unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == {(1, 2, 3): 1, (4, 5, 6): 1, (7, 8, 9): 1, (10, 11, 12): 1}\nassert unique_sublists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]]) == {(1, 2, 3): 2, (4, 5, 6): 2, (7, 8, 9): 2, (10, 11, 12): 2}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.11.11') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == True\nassert is_decimal('123.1') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123.1111') == False\nassert is_decimal('123.11111') == False\nassert is_decimal('123.111111') == False\nassert is_decimal('123.1111111') == False\nassert is_decimal('123.11111111') == False\nassert is_decimal('123.111111111') == False\nassert is_decimal('123.1111111111') == False\nassert is_decimal('123.11111111111') == False\nassert is_decimal('123.111111111111') == False\nassert is_decimal('123.1111111111111') == False\nassert is_decimal('123.11111111111111') == False\nassert is_decimal('123.111111111111111') == False\nassert is_decimal('123.1111111111111111') == False\nassert is_decimal('123.11111111111111111') == False\nassert is_decimal('123.111111111111111111') == False\nassert is_decimal('123.1111111111111111111') == False\nassert is_decimal('123.11111111111111111111') == False\nassert is_decimal('123.111111111111111111111') == False\nassert is_decimal('123.1111111111111111111111') == False\nassert is_decimal('123.11111111111111111111111') == False\nassert is_decimal('123.111111111111111111111111') == False\nassert is_decimal('123.1111111111111111111111111') == False\nassert is_decimal('123"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(lst):\n    return len(set(lst)) == 1\n\n# Test cases\nassert unique_Element([1,1,1]) == True\nassert unique_Element([1,2,3]) == False\nassert unique_Element([1]) == True\nassert unique_Element([]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return False\n\n# Test cases\nassert check_monthnumber_number(6) == True\nassert check_monthnumber_number(2) == False\nassert check_monthnumber_number(12) == False"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n\n# Test cases\nassert find_min_diff((1,5,3,19,18,25),6) == 1\nassert find_min_diff((1,2,3,4,5,6),6) == 1\nassert find_min_diff((1,2,3,4,5,6,7),7) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8),8) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9),9) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10),10) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11),11) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12),12) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13),13) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14),14) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15),15) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16),16) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17),17) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18),18) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19),19) == 1\nassert find_min_diff((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),20) == 1\nassert find_min_diff((1,2,3,"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test cases\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abcdefg') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases\nassert is_polite(7) == 11\nassert is_polite(10) == 19\nassert is_polite(15) == 29\nassert is_polite(20) == 37"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst)-1):\n        pairs.append((lst[i], lst[i+1]))\n    return pairs\n\n# Test cases\nassert pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\nassert get_pairs_count([1, 5, 7, -1], 6) == 2\nassert get_pairs_count([1, 5, 7, -1, 5], 6) == 3"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))\n\n# Test cases\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\nassert Diff([1, 2, 3, 4, 5], [2, 4]) == [1, 3, 5]\nassert Diff([1, 2, 3], [1, 2, 3]) == []"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n\n    Args:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of fourth power of first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Example:\n    >>> odd_num_sum(2)\n    82\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    fourth_power_sum = sum(num ** 4 for num in odd_numbers)\n    return fourth_power_sum\n\n\n# Test the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test cases\nassert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('The person is most value tet', 4) == 'The person is most tet'\nassert remove_length('The person is most value tet', 5) == 'The person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n    string (str): The input string.\n    substring (str): The substring to find within the input string.\n\n    Returns:\n    tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n           If there is no match, returns None.\n\n    Example:\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    \"\"\"\n    if substring in string:\n        first_occurrence = string.index(substring)\n        last_occurrence = string.rindex(substring)\n        return substring, first_occurrence, last_occurrence\n    else:\n        return None\n\n# Test the function\nassert occurance_substring('python programming, python language','python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    return all(lst[i] % 2 != 0 for i in range(1, len(lst), 2))\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,3,2]) == False\nassert odd_position([2,1,4,3,6,7,6,3,2,1]) == False\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4]) == True\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3]) == False\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3,6]) == True\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3,6,7]) == False\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3,6,7,6]) == True\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3,6,7,6,3]) == False\nassert odd_position([2,1,4,3,6,7,6,3,2,1,4,3,6,7,6,3,2]) == True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    unique_elements = set(lst)\n    return sum(unique_elements)\n\n# Test cases\nassert find_sum([1,2,3,1,1,4,5,6]) == 21\nassert find_sum([1,1,1,1,1,1,1,1]) == 1\nassert find_sum([1,2,3,4,5,6,7,8,9]) == 45\nassert find_sum([1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9]) == 45"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n\n    for num in lst:\n        if not current_sublist or num != current_sublist[-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [num]\n        else:\n            current_sublist.append(num)\n\n    if current_sublist:\n        result.append(current_sublist)\n\n    return result\n\n# Test cases\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n\ndef test_find_combinations():\n    assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\n\ntest_find_combinations()"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0\n\n# Test cases\nassert count_divisors(10) == True\nassert count_divisors(12) == False\nassert count_divisors(16) == True\nassert count_divisors(20) == False"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Find the sum of all odd length subarrays in the given array.\n\n    Args:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Example:\n    >>> odd_length_sum([1,2,4])\n    14\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result\n\n# Test cases\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,4,5,6]) == 28\nassert odd_length_sum([1,2,4,5,6,7]) == 35"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_nums = [num for num in lst if num % 2 == 0]\n    odd_nums = [num for num in lst if num % 2 != 0]\n    if len(even_nums) > 0 and len(odd_nums) > 0:\n        return even_nums[0] * odd_nums[0]\n    else:\n        return None\n\n# Test cases\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4\nassert mul_even_odd([1,3,5,7,4,1,6]) == None\nassert mul_even_odd([1,3,5,7,4,1]) == None\nassert mul_even_odd([1,3,5,7,4]) == 4\nassert mul_even_odd([1,3,5,7]) == None\nassert mul_even_odd([1,3,5]) == None\nassert mul_even_odd([1,3]) == None\nassert mul_even_odd([1]) == None\nassert mul_even_odd([]) == None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses from the string\n    tuple_str = tuple_str.strip('()')\n    \n    # Split the string into a list of numbers\n    numbers = tuple_str.split(',')\n    \n    # Convert each number to an integer\n    numbers = [int(num) for num in numbers]\n    \n    # Create a tuple from the list of integers\n    result = tuple(numbers)\n    \n    return result\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test cases\nassert right_insertion([1,2,4,5], 6) == 4\nassert right_insertion([1,2,4,5], 3) == 2\nassert right_insertion([1,2,4,5], 1) == 1\nassert right_insertion([1,2,4,5], 5) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n\n# Test cases\nassert not text_match_three(\"ac\")\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"abb\")\nassert not text_match_three(\"abbbb\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])\n\n# Test cases\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([], \"best\") == ('best',)\nassert new_tuple([\"WEB\", \"is\"], \"\") == ('WEB', 'is', '')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    return all(num % 2 == 0 for num in lst[::2])\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,6,8,10]) == False\nassert even_position([2,4,6,8,10,12]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    result = []\n    for item in tup:\n        if isinstance(item, tuple):\n            result.extend(item)\n        else:\n            result.append(item)\n    return tuple(result)\n\n# Test cases\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 4, 6, 10)\nassert remove_nested((1, 5, 7, (4, 6), 10, (11, 12))) == (1, 5, 7, 4, 6, 10, 11, 12)\nassert remove_nested((1, 5, 7, (4, 6), 10, (11, 12), 13)) == (1, 5, 7, 4, 6, 10, 11, 12, 13)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test cases\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([1, 2, 3, 4, 5]) == 0\nassert count_list([[1, 2], [3, 4], [5, 6], [7, 8, 9]]) == 4\nassert count_list([1, [2, 3], [4, 5, 6], [7, 8, 9, 10]]) == 3\nassert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9, 10], [11, 12, 13, 14, 15]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1,2,3], 1) == 0\nassert last([1,2,3], 2) == 1\nassert last([1,2,3], 3) == 2\nassert last([1,2,3], 4) == -1\nassert last([1,2,3,3,3], 3) == 4\nassert last([1,2,3,3,3], 4) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    pattern = r'^a.*b$'\n    match = re.search(pattern, text)\n    return match is not None\n\n# Test cases\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"aababbb\")\nassert not text_starta_endb(\"aabbbbb\")\nassert not text_starta_endb(\"aabbb\")\nassert not text_starta_endb(\"aab\")\nassert not text_starta_endb(\"a\")\nassert not text_starta_endb(\"ab\")\nassert not text_starta_endb(\"b\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())\n\n# Test cases\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 100, 'b':200, 'c':300, 'd':400}) == 1000\nassert return_sum({'a': 100, 'b':200, 'c':300, 'd':400, 'e':500}) == 1500"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n    l (int): The lower limit of the range.\n    r (int): The upper limit of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Raises:\n    ValueError: If l is greater than r.\n\n    Example:\n    >>> sum_in_range(2, 5)\n    8\n    \"\"\"\n    if l > r:\n        raise ValueError(\"Lower limit should be less than or equal to upper limit.\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum\n\n# Test the function\nassert sum_in_range(2, 5) == 8"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Test cases\nassert _sum([1, 2, 3]) == 6\nassert _sum([4, 5, 6]) == 15\nassert _sum([7, 8, 9]) == 24"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n    num (int): The number to rotate.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n\n    Raises:\n    ValueError: If d is greater than 32.\n\n    Example:\n    >>> left_rotate(16, 2)\n    64\n    \"\"\"\n    if d > 32:\n        raise ValueError(\"d must be less than or equal to 32\")\n\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num\n\n# Test the function\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    return string.replace(\" \", \"\")\n\n# Test cases\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('pythonprogram') == 'pythonprogram'\nassert remove_all_spaces('pythonprogram') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2\nassert test_three_equal(1, 2, 1) == 2\nassert test_three_equal(2, 1, 1) == 2\nassert test_three_equal(2, 2, 1) == 2\nassert test_three_equal(2, 2, 2) == 3"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    Args:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n\n    \"\"\"\n    if num < 0:\n        return False\n    sqrt = int(math.sqrt(num))\n    return sqrt * sqrt == num\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(9)\nassert is_perfect_square(0)\nassert is_perfect_square(1)\nassert is_perfect_square(4)\nassert is_perfect_square(16)\nassert is_perfect_square(25)\nassert is_perfect_square(36)\nassert is_perfect_square(49)\nassert is_perfect_square(64)\nassert is_perfect_square(81)\nassert is_perfect_square(100)\nassert is_perfect_square(121)\nassert is_perfect_square(144)\nassert is_perfect_square(169)\nassert is_perfect_square(196)\nassert is_perfect_square(225)\nassert is_perfect_square(256)\nassert is_perfect_square(289)\nassert is_perfect_square(324)\nassert is_perfect_square(361)\nassert is_perfect_square(400)\nassert is_perfect_square(441)\nassert is_perfect_square(484)\nassert is_perfect_square(529)\nassert is_perfect_square(576)\nassert is_perfect_square(625)\nassert is_perfect_square(676)\nassert is_perfect_square(729)\nassert is_perfect_square(784)\nassert is_perfect_square(841)\nassert is_perfect_square(900)\nassert is_perfect_square(961)\nassert is_perfect_square(1024)\nassert is_perfect_square(1089)\nassert is_perfect_square(1156)\nassert is_perfect_square(1225)\nassert is_perfect_square(1296)\nassert is_perfect_square(1369)\nassert is_perfect_square(1444)\nassert is_perfect_square(1521)\nassert is_perfect_square(1600)\nassert is_perfect_square(1681)\nassert is_perfect_square(1764)\nassert is_perfect_square(1849)\nassert is_perfect_square(1936)\nassert is_perfect_square(2025)\nassert is_perfect_square(2116)\nassert is_perfect_square(2209)\nassert is_perfect_square(2304)\nassert is_perfect_square(2401)\nassert is_perfect_square(2500)\nassert is_perfect_square(2601)\nassert is_perfect_square(2704)\nassert is_perfect"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([-1, -2, -3]) == False\nassert is_product_even([-2, -4, -6]) == True\nassert is_product_even([0, 1, 2]) == False\nassert is_product_even([0, 0, 0]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n    \n    return max_list\n\n# Test cases\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [13,14,15]]) == [13, 14, 15]\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], [13,14,15], [16,17,18]]) == [16, 17, 18]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    max_run = 0\n    current_run = 0\n    \n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n    \n    return max(max_run, current_run)\n\n# Test cases\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('geMKSForGERksISBESt') == 0\nassert max_run_uppercase('GeMKSForGERksISBESt123') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABC') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEF') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFG') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGH') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHI') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJ') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJK') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKL') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLM') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMN') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNO') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOP') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQ') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQR') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQRS') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQRST') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQRSTU') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEFGHIJKLMNOPQRSTUV') == 5\nassert max_run_uppercase('GeMKSForGERksISBESt123ABCDEF"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,6]) == None\nassert first_odd([1,2,3,4,5]) == 1\nassert first_odd([2,4,6,8,10]) == None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    return k in tup\n\n# Test cases\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((10, 4, 5, 6, 8), 10) == True\nassert check_K((10, 4, 5, 6, 8), 15) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (1, 2, 3)) == True\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 2)) == False"}
