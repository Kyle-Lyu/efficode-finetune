{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        set: A set containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        set((4, 5))\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return set1.intersection(set2)\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    This function checks if a given number is a prime number or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Testing the function\nassert is_not_prime(2) == False\nassert is_not_prime(3) == False\nassert is_not_prime(4) == True\nassert is_not_prime(5) == False\nassert is_not_prime(6) == True\nassert is_not_prime(7) == False\nassert is_not_prime(8) == True\nassert is_not_prime(9) == True\nassert is_not_prime(10) == True\nassert is_not_prime(11) == False\nassert is_not_prime(12) == True\nassert is_not_prime(13) == False\nassert is_not_prime(14) == True\nassert is_not_prime(15) == True\nassert is_not_prime(16) == True\nassert is_not_prime(17) == False\nassert is_not_prime(18) == True\nassert is_not_prime(19) == False\nassert is_not_prime(20) == True\nassert is_not_prime(21) == True\nassert is_not_prime(22) == True\nassert is_not_prime(23) == False\nassert is_not_prime(24) == True\nassert is_not_prime(25) == True\nassert is_not_prime(26) == True\nassert is_not_prime(27) == True\nassert is_not_prime(28) == True\nassert is_not_prime(29) == False\nassert is_not_prime(30) == True\nassert is_not_prime(31) == False\nassert is_not_prime(32) == True\nassert is_not_prime(33) == True\nassert is_not_prime(34) == True\nassert is_not_prime(35) == True\nassert is_not_prime(36) == True\nassert is_not_prime(37) == False\nassert is_not_prime(38) == True\nassert is_not_prime(39) == True\nassert is_not_prime(40) == True\nassert is_not_prime(41) == False\nassert is_not_prime(42) == True\nassert is_not_prime(43) == False\nassert is_not_prime(44) == True\nassert is_not_prime(45) == True\nassert is_not_prime(46) == True\nassert is_not_prime(47) == False\nassert is_not_prime(48) == True\nassert is_not_prime(49) == True\nassert is_not_prime(50) == True\nassert is_not_prime(51) == False\nassert"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Finds the n largest integers from a given list of numbers and returns them in descending order.\n\n    Args:\n        numbers (list): The list of numbers to find the n largest integers from.\n        n (int): The number of largest integers to return.\n\n    Returns:\n        list: A list containing the n largest integers from the given list of numbers, in descending order.\n\n    Raises:\n        ValueError: If the value of n is less than 1 or greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n < 1 or n > len(numbers):\n        raise ValueError(\"n should be between 1 and the length of the numbers list.\")\n\n    # Use heapq to find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    # Reverse the list to get the largest integers in descending order\n    largest_numbers.reverse()\n\n    return largest_numbers"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position, False otherwise.\n    \"\"\"\n    # XOR the two numbers to find the positions where they differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is exactly 1, then the numbers differ at one bit position\n    return count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(10, 12) == True\nassert differ_At_One_Bit_Pos(7, 7) == False\nassert differ_At_One_Bit_Pos(0, 1) == True\nassert differ_At_One_Bit_Pos(1, 2) == True\nassert differ_At_One_Bit_Pos(3, 5) == True\nassert differ_At_One_Bit_Pos(8, 16) == False\nassert differ_At_One_Bit_Pos(10, 11) == True\nassert differ_At_One_Bit_Pos(100, 101) == True\nassert differ_At_One_Bit_Pos(1000, 1001) == True\nassert differ_At_One_Bit_Pos(10000, 10001) == True\nassert differ_At_One_Bit_Pos(100000, 100001) == True\nassert differ_At_One_Bit_Pos(1000000, 1000001) == True\nassert differ_At_One_Bit_Pos(10000000, 10000001) == True\nassert differ_At_One_Bit_Pos(100000000, 100000001) == True\nassert differ_At_One_Bit_Pos(1000000000, 1000000001) == True\nassert differ_At_One_Bit_Pos(10000000000, 10000000001) == True\nassert differ_At_One_Bit_Pos(100000000000, 100000000001) == True\nassert differ_At_One_Bit_Pos(1000000000000, 1000000000001) == True\nassert differ_At_One_Bit_Pos(10000000000000, 10000000000001) == True\nassert differ_At_One"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        set: A set containing all words which are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        {'Please', 'move', 'back', 'stream'}\n    \"\"\"\n    words = string.split()\n    char_long_words = [word for word in words if len(word) >= 4]\n    return set(char_long_words)\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A list of squares of the numbers in the input list.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Finds the minimum number of rotations required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Raises:\n        TypeError: If the input is not a string.\n\n    Examples:\n        >>> find_Rotations(\"aaaa\")\n        1\n        >>> find_Rotations(\"abcde\")\n        5\n        >>> find_Rotations(\"\")\n        0\n    \"\"\"\n    if not isinstance(string, str):\n        raise TypeError(\"Input must be a string.\")\n\n    if len(string) <= 1:\n        return 0\n\n    rotations = 1\n    while string[1:] + string[0] != string:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n\n    Raises:\n        ValueError: If the input string is empty or the character is not found in the string.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"python\", \"o\")\n        'ython'\n        >>> remove_Occ(\"python\", \"z\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Character not found in the string\n    \"\"\"\n    if not string:\n        raise ValueError(\"Input string cannot be empty\")\n\n    if char not in string:\n        raise ValueError(\"Character not found in the string\")\n\n    first_index = string.index(char)\n    last_index = string.rindex(char)\n\n    return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]"}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The input matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative.\n\n    Examples:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    >>> find_Volume(0, 5, 4)\n    0.0\n    >>> find_Volume(10, -2, 6)\n    Traceback (most recent call last):\n    ...\n    ValueError: Height and length must be positive numbers.\n    \"\"\"\n    if base < 0 or height < 0 or length < 0:\n        raise ValueError(\"Height and length must be positive numbers.\")\n\n    volume = (base * height * length) / 2\n    return volume\n\n# Test cases\nassert find_Volume(10, 8, 6) == 240\nassert find_Volume(0, 5, 4) == 0\nassert find_Volume(10, -2, 6)"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string is empty\n    if not input_string:\n        return False\n\n    # Split the input string into words using underscore as the delimiter\n    words = input_string.split('_')\n\n    # Iterate through each word and check if it contains only lowercase letters\n    for word in words:\n        if not word.islower():\n            return False\n\n    return True\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"Aab_cbbbc\") == False\nassert text_lowercase_underscore(\"aab_Cbbbc\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_def\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_Def\") == False\nassert text_lowercase_underscore(\"\") == False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the square.\n\n    Returns:\n    int or float: The perimeter of the square.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(5.5)\n    22.0\n    \"\"\"\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40\nassert square_perimeter(5.5) == 22.0"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The input string from which characters will be removed.\n        string2 (str): The string containing the characters to be removed from string1.\n\n    Returns:\n        str: The modified string with characters from string2 removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    clean_string = ''\n    for char in string1:\n        if char not in string2:\n            clean_string += char\n    return clean_string\n\n# Test the function\ndef test_remove_dirty_chars():\n    assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\n\n# Run the tests\ntest_remove_dirty_chars()"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Function to check if a given array contains any duplicate elements.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate elements, False otherwise.\n    \"\"\"\n    # Convert the array to a set to remove duplicates\n    unique_elements = set(arr)\n\n    # If the length of the set is less than the length of the original array,\n    # it means there are duplicate elements in the array\n    if len(unique_elements) < len(arr):\n        return True\n    else:\n        return False\n\n# Test the function\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 5, 5]) == True\nassert test_duplicate([1, 1, 1, 1, 1]) == True\nassert test_duplicate([]) == False\nassert test_duplicate([1, 2, 3, 4, 5, 1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    def is_prime(n):\n        \"\"\"\n        Check if a number is prime or not.\n\n        Parameters:\n        n (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n        \"\"\"\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    def is_power_of_two(n):\n        \"\"\"\n        Check if a number is a power of two or not.\n\n        Parameters:\n        n (int): The number to be checked.\n\n        Returns:\n        bool: True if the number is a power of two, False otherwise.\n        \"\"\"\n        return (n & (n - 1) == 0) and n != 0\n\n    if is_prime(number) and is_power_of_two(number + 1):\n        return True\n    return False\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(number):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to reverse it\n    number_str = str(number)\n\n    # Reverse the string\n    reversed_str = number_str[::-1]\n\n    # Convert the reversed string back to an integer\n    reversed_number = int(reversed_str)\n\n    # Check if the number is one less than twice its reverse\n    if number == (reversed_number * 2) - 1:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given list of digits.\n\n    Examples:\n        >>> find_Max_Num([1, 2, 3])\n        321\n        >>> find_Max_Num([4, 3, 2, 1])\n        4321\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and then to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321\nassert find_Max_Num([4, 3, 2, 1]) == 4321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test the function\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(5, 10) == False\nassert opposite_Signs(0, 0) == False\nassert opposite_Signs(-5, -10) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(10)\n    1215\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3 * n - 2)\n\n# Testing the function\nassert is_octagonal(5) == 65\nassert is_octagonal(10) == 1215"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(lst):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        lst (list): The input list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = lst[0]\n    for num in lst:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples containing pairs of integers.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n        >>> max_difference([(1, 2), (3, 4), (5, 6)])\n        4\n    \"\"\"\n    if not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples\")\n\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples(lst):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: The sorted list of tuples.\n\n    Examples:\n        >>> sort_tuples([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\n        [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n    \"\"\"\n    return sorted(lst, key=lambda x: x[1])\n\n# Test the function\nassert sort_tuples([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list to be flattened and summed.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The count of positive numbers in the list.\n\n    Examples:\n        >>> pos_count([1,-2,3,-4])\n        2\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Testing the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    # Base cases\n    if n == 0 or n == 1:\n        return 1\n\n    # Initialize the list to store Bell numbers\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    # Calculate the Bell numbers\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Test the function\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n    for i in range(len(arr) - 1):\n        if increasing and arr[i] > arr[i + 1]:\n            return False\n        elif not increasing and arr[i] < arr[i + 1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4, 5]) == True\nassert is_monotonic([5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 3, 4, 5]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 4, 3, 2, 1]) == False\nassert is_monotonic([1, 2, 3, 3, 4, 5, 4, 3, 2, 1]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert is_monotonic([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, 1]) == False\nassert is_monotonic([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0,"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n        lst (list): The main list.\n        sublst (list): The sublist to check.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([2,4,3,5,7],[3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7,8]) == False\nassert is_sublist([2,4,3,5,7],[]) == True\nassert is_sublist([],[]) == True\nassert is_sublist([],[1]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Function to find whether all the given tuples have equal length or not.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(tuple_) for tuple_ in tuples)\n    return len(lengths) == 1\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True\nassert get_equal([(11, 22, 33), (44, 55)]) == False\nassert get_equal([(11, 22, 33), (44, 55, 66), (77, 88)]) == False\nassert get_equal([()]) == True\nassert get_equal([]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n            i += 1\n\n    return lst"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(num ** 0.5) + 1):\n        for j in range(int(num ** 0.5) + 1):\n            if i ** 2 - j ** 2 == num:\n                return True\n    return False\n\n# Test the function\nassert dif_Square(5) == True\nassert dif_Square(10) == True\nassert dif_Square(14) == False\nassert dif_Square(25) == True\nassert dif_Square(30) == False\nassert dif_Square(37) == False\nassert dif_Square(40) == True\nassert dif_Square(41) == False\nassert dif_Square(49) == True\nassert dif_Square(50) == False\nassert dif_Square(58) == False\nassert dif_Square(65) == False\nassert dif_Square(72) == False\nassert dif_Square(73) == False\nassert dif_Square(74) == False\nassert dif_Square(75) == True\nassert dif_Square(76) == False\nassert dif_Square(81) == True\nassert dif_Square(82) == False\nassert dif_Square(83) == False\nassert dif_Square(84) == False\nassert dif_Square(85) == False\nassert dif_Square(86) == False\nassert dif_Square(87) == False\nassert dif_Square(88) == False\nassert dif_Square(89) == False\nassert dif_Square(90) == False\nassert dif_Square(91) == False\nassert dif_Square(92) == False\nassert dif_Square(93) == False\nassert dif_Square(94) == False\nassert dif_Square(95) == False\nassert dif_Square(96) == False\nassert dif_Square(97) == False\nassert dif_Square(98) == False\nassert dif_Square(99) == False\nassert dif_Square(100) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns):\n    \"\"\"\n    Check if the given patterns follow the sequence.\n\n    Args:\n        patterns (list): A list of patterns to check.\n\n    Returns:\n        bool: True if the patterns follow the sequence, False otherwise.\n    \"\"\"\n    sequence = patterns[0]  # Initialize the sequence with the first pattern\n    for pattern in patterns[1:]:  # Iterate through the remaining patterns\n        if pattern != sequence[-1]:  # If the current pattern is not the same as the last pattern in the sequence\n            return False  # Return False as the patterns do not follow the sequence\n        sequence.append(pattern)  # Add the current pattern to the sequence\n    return True  # Return True as all patterns follow the sequence\n\n# Test the function\nassert is_samepatterns([\"red\", \"green\", \"green\"]) == True\nassert is_samepatterns([\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"blue\"]) == False\nassert is_samepatterns([\"a\", \"b\", \"c\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        lst (list): A list of tuples.\n        k (int): The number to check divisibility against.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n\n    Examples:\n        >>> find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)\n        [(6, 24, 12)]\n    \"\"\"\n    result = []\n    for tup in lst:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    This function checks if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of even and odd digits\n    sum_even = 0\n    sum_odd = 0\n\n    # Iterate through each digit and calculate the sums\n    for i, digit in enumerate(number_str):\n        if i % 2 == 0:\n            sum_even += int(digit)\n        else:\n            sum_odd += int(digit)\n\n    # Check if the absolute difference between the sums is divisible by 11\n    return abs(sum_even - sum_odd) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of the word is odd.\n\n    Parameters:\n    word (str): The input word.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 == 1\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == False\nassert word_len(\"Java\") == False\nassert word_len(\"Scala\") == False\nassert word_len(\"Ruby\") == False\nassert word_len(\"Swift\") == False\nassert word_len(\"Kotlin\") == False\nassert word_len(\"Go\") == False\nassert word_len(\"C\") == False\nassert word_len(\"C++\") == False\nassert word_len(\"Fortran\") == False\nassert word_len(\"Lisp\") == False\nassert word_len(\"Haskell\") == False\nassert word_len(\"Erlang\") == False\nassert word_len(\"Elixir\") == False\nassert word_len(\"Rust\") == False\nassert word_len(\"Julia\") == False\nassert word_len(\"Perl\") == False\nassert word_len(\"Clojure\") == False\nassert word_len(\"OCaml\") == False\nassert word_len(\"F#\") == False\nassert word_len(\"R\") == False\nassert word_len(\"Matlab\") == False\nassert word_len(\"Pascal\") == False\nassert word_len(\"Prolog\") == False\nassert word_len(\"Ada\") == False\nassert word_len(\"Fortran\") == False\nassert word_len(\"Lisp\") == False\nassert word_len(\"Haskell\") == False\nassert word_len(\"Erlang\") == False\nassert word_len(\"Elixir\") == False\nassert word_len(\"Rust\") == False\nassert word_len(\"Julia\") == False\nassert word_len(\"Perl\") == False\nassert word_len(\"Clojure\") == False\nassert word_len(\"OCaml\") == False\nassert word_len(\"F#\") == False\nassert word_len(\"R\") == False\nassert word_len(\"Matlab\") == False\nassert word_len(\"Pascal\") == False\nassert word_len(\"Prolog\") == False\nassert word_len(\"Ada\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculates the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to be calculated.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If the input n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    1255\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input n must be a positive integer.\")\n\n    return n * (n + 1) * (n + 2) // 6\n\n# Testing the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(10) == 1255"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculates the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> volume_sphere(10)\n    4188.790204786391\n    >>> volume_sphere(0)\n    0.0\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    volume = (4/3) * math.pi * radius**3\n    return volume\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_conway(10)\n    6\n    >>> newman_conway(1)\n    1\n    >>> newman_conway(2)\n    1\n    >>> newman_conway(3)\n    1\n    >>> newman_conway(4)\n    2\n    >>> newman_conway(5)\n    2\n    >>> newman_conway(6)\n    3\n    >>> newman_conway(7)\n    4\n    >>> newman_conway(8)\n    4\n    >>> newman_conway(9)\n    5\n    >>> newman_conway(10)\n    6\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initial values of the sequence\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Testing the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculates the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> surfacearea_sphere(10)\n    1256.6370614359173\n    >>> surfacearea_sphere(0)\n    0.0\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Finds the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Testing the function\ndef test_centered_hexagonal_number():\n    assert centered_hexagonal_number(10) == 271\n    assert centered_hexagonal_number(1) == 1\n\ntest_centered_hexagonal_number()"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge the first two dictionaries\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Iterate through the keys of the third dictionary\n    for key, value in dict3.items():\n        # If the key already exists in the merged dictionary, update its value\n        if key in merged_dict:\n            merged_dict[key] = value\n        # If the key does not exist, add it to the merged dictionary\n        else:\n            merged_dict[key] = value\n    \n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Raises:\n        ValueError: If n is less than or equal to 1.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n should be greater than 1.\")\n\n    return n - 1\n\n# Testing the function\nassert closest_num(11) == 10\nassert closest_num(10) == 9"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Finds the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list of words.\")\n\n    max_len = 0\n    for word in words:\n        if len(word) > max_len:\n            max_len = len(word)\n\n    return max_len"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"\") == True\nassert find_substring([], \"\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"orange\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"orangee\") == False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"orangee\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if a given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    if len(num_str) < 3:\n        return False\n\n    prev_diff = int(num_str[1]) - int(num_str[0])\n    for i in range(2, len(num_str)):\n        diff = int(num_str[i]) - int(num_str[i-1])\n        if diff != prev_diff:\n            return False\n        prev_diff = diff\n\n    return True\n\n# Test the function\nassert is_undulating(1212121) == True\nassert is_undulating(123456) == False\nassert is_undulating(111111) == True\nassert is_undulating(123456789) == False\nassert is_undulating(12345678910) == True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculates the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n\n    Examples:\n    >>> power(3, 4)\n    81\n    >>> power(2, 5)\n    32\n    \"\"\"\n    return a ** b\n\n# Testing the function\ndef test_power():\n    assert power(3, 4) == 81\n    assert power(2, 5) == 32\n    print(\"All tests passed successfully.\")\n\n# Running the tests\ntest_power()"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    if not all(isinstance(item, tuple) for item in lst):\n        raise ValueError(\"Input list must contain only tuples.\")\n\n    if not lst:\n        return None\n\n    min_value = float('inf')\n    min_index = None\n\n    for i, tup in enumerate(lst):\n        if len(tup) < 2:\n            raise ValueError(\"Tuples must have at least two elements.\")\n\n        value = tup[1]\n        if value < min_value:\n            min_value = value\n            min_index = i\n\n    return lst[min_index][0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_length([[1], [1, 2]])\n        1\n        >>> find_min_length([[1, 2], [1, 2, 3]])\n        2\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4]])\n        3\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    min_length = float('inf')\n    for sublist in lst:\n        if not isinstance(sublist, list):\n            raise ValueError(\"Input must be a list of lists.\")\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    Examples:\n    >>> divisor(15)\n    4\n    >>> divisor(25)\n    3\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Testing the function\nassert divisor(15) == 4\nassert divisor(25) == 3"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    flat_list = [item for sublist in lst for item in sublist]\n    frequency = {}\n    for num in flat_list:\n        if num in frequency:\n            frequency[num] += 1\n        else:\n            frequency[num] = 1\n    return frequency\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n        >>> multiply_num([])\n        0.0\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        return 0.0\n\n    result = 1.0\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)\n\n# Testing the function\nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = bin(decimal)[2:]  # Convert decimal to binary using built-in bin() function\n    return binary\n\n# Test the function\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The next smallest palindrome of the input integer.\n\n    Raises:\n        ValueError: If the input integer is negative.\n\n    Examples:\n        >>> next_smallest_palindrome(99)\n        101\n        >>> next_smallest_palindrome(100)\n        101\n        >>> next_smallest_palindrome(101)\n        101\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input integer must be non-negative.\")\n\n    # Convert the input integer to a string\n    n_str = str(n)\n\n    # Find the length of the input integer\n    length = len(n_str)\n\n    # If the input integer is already a palindrome, return the next smallest palindrome\n    if n_str == n_str[::-1]:\n        return int(n_str[:length // 2] + str(int(n_str[length // 2]) + 1) + n_str[length // 2 + 1:])\n\n    # Find the midpoint of the input integer\n    mid = length // 2\n\n    # Check if the left half of the input integer is less than the right half\n    if n_str[:mid] < n_str[mid:]:\n        # If the left half is less than the right half, increment the left half by 1\n        left_half = str(int(n_str[:mid]) + 1)\n        # If the length of the input integer is odd, add the middle digit to the left half\n        if length % 2 == 1:\n            left_half += n_str[mid]\n        # Add the reversed right half to the left half\n        right_half = n_str[mid:][::-1]\n    else:\n        # If the left half is greater than or equal to the right half, increment the left half by 1\n        left_half = str(int(n_str[:mid]) + 1)\n        # If the length of the input integer is odd, add the middle digit to the left half\n        if length % 2 == 1:\n            left_half += n_str[mid]\n        # Add the reversed right half to the left half\n        right_half = n_str[mid:][::-1]\n\n    # Combine the left and right halves to form the next smallest palindrome\n    return int(left_half + right_half)"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        ValueError: If the input array is empty or if k is out of range.\n\n    Examples:\n        >>> kth_element([12, 3, 5, 7, 19], 2)\n        3\n        >>> kth_element([], 1)\n        Traceback (most recent call last):\n            ...\n        ValueError: Input array is empty\n        >>> kth_element([12, 3, 5, 7, 19], 6)\n        Traceback (most recent call last):\n            ...\n        ValueError: k is out of range\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n\n    return sorted(arr)[k - 1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Converts a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    >>> snake_to_camel('hello_world')\n    'HelloWorld'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() for word in words)\n    return camel_str\n\n# Testing the function\nassert snake_to_camel('python_program') == 'PythonProgram'\nassert snake_to_camel('hello_world') == 'HelloWorld'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculates the Eulerian number a(n, m) using a recursive approach.\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: The input list with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of true booleans in the given list.\n\n    Args:\n        lst (list): A list of booleans.\n\n    Returns:\n        int: The count of true booleans in the list.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True, False, True])\n        4\n    \"\"\"\n    count = 0\n    for boolean in lst:\n        if boolean:\n            count += 1\n    return count\n\n# Testing the function\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True, False, True]) == 4"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple after appending the list.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Finds the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Args:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of rotations to be performed.\n\n    Returns:\n        int: The number of numbers with an odd value after the rotations.\n\n    Examples:\n        >>> odd_Equivalent(\"011001\", 6)\n        3\n    \"\"\"\n    def rotate_binary_string(binary_string, num_rotations):\n        \"\"\"\n        Rotates a binary string the given number of times.\n\n        Args:\n            binary_string (str): The binary string to be rotated.\n            num_rotations (int): The number of rotations to be performed.\n\n        Returns:\n            str: The rotated binary string.\n        \"\"\"\n        return binary_string[-num_rotations:] + binary_string[:-num_rotations]\n\n    def is_odd(number):\n        \"\"\"\n        Checks if a number is odd.\n\n        Args:\n            number (int): The number to be checked.\n\n        Returns:\n            bool: True if the number is odd, False otherwise.\n        \"\"\"\n        return number % 2 != 0\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string, 1)\n        decimal_value = int(binary_string, 2)\n        if is_odd(decimal_value):\n            count += 1\n\n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Finds the common elements in a given nested list of lists.\n\n    Args:\n        nested_lists (list): A list of lists.\n\n    Returns:\n        set: A set containing the common elements in the nested lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        {12, 18}\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return common_elements\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123a\") == False\nassert check_integer(\"\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Converts a given tuple of positive integers into a single integer.\n\n    Args:\n        tup (tuple): The tuple of positive integers to be converted.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the tuple.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    return int(''.join(map(str, tup)))\n\n# Testing the function\nassert tuple_to_int((1, 2, 3)) == 123\nassert tuple_to_int((4, 5, 6)) == 456"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Converts a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()\n\n# Test the function\ndef test_string_to_list():\n    assert string_to_list(\"python programming\") == ['python', 'programming']\n\n# Run the tests\ntest_string_to_list()"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Finds the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or does not contain a single element.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n        >>> search([1,1,2,2,3,3,4,4,5])\n        5\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (mid - left) % 2 == 0:\n                left = mid + 1\n            else:\n                right = mid - 2\n        elif arr[mid] == arr[mid + 1]:\n            if (right - mid) % 2 == 0:\n                right = mid - 1\n            else:\n                left = mid + 2\n        else:\n            return arr[mid]\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Finds the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples containing pairs of numbers.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n        >>> max_product_tuple([(1, -2), (3, -4), (-5, 6)])\n        30\n    \"\"\"\n    if not all(isinstance(item, tuple) for item in lst):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            max_product = max(max_product, product)\n\n    return max_product\n\n# Testing the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36\nassert max_product_tuple([(1, -2), (3, -4), (-5, 6)]) == 30"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors = []\n        for i in range(1, int(num/2)+1):\n            if num % i == 0:\n                divisors.append(i)\n        return sum(divisors)\n\n    amicable_sum = 0\n    for num in range(1, n+1):\n        sum1 = sum_of_divisors(num)\n        sum2 = sum_of_divisors(sum1)\n        if sum2 == num and sum1 != sum2:\n            amicable_sum += num\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculates the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    ValueError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0,1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    \"\"\"\n    if not isinstance(z, complex):\n        raise ValueError(\"Input must be a complex number.\")\n\n    angle = math.atan2(z.imag, z.real)\n    return angle\n\n# Test the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeroes\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n# Test the function\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(num1, num2):\n    \"\"\"\n    Finds the sum of common divisors of two given numbers.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        int: The sum of common divisors of num1 and num2.\n\n    Examples:\n        >>> sum_common_divisors(10, 15)\n        6\n        >>> sum_common_divisors(20, 30)\n        10\n    \"\"\"\n    def get_divisors(num):\n        divisors = []\n        for i in range(1, num + 1):\n            if num % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_divisors = set(get_divisors(num1)).intersection(get_divisors(num2))\n    return sum(common_divisors)\n\n# Testing the function\nassert sum_common_divisors(10, 15) == 6\nassert sum_common_divisors(20, 30) == 10"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: The product of the two integers.\n\n    Examples:\n    >>> multiply_int(10, 20)\n    200\n    >>> multiply_int(-5, 10)\n    -50\n    >>> multiply_int(0, 7)\n    0\n    \"\"\"\n    return a * b\n\n# Testing the function\ndef test_multiply_int():\n    assert multiply_int(10, 20) == 200\n    assert multiply_int(-5, 10) == -50\n    assert multiply_int(0, 7) == 0\n\ntest_multiply_int()"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered as long.\n        sentence (str): The input sentence.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Function to calculate whether the matrix is a magic square.\n\n    Parameters:\n    matrix (list of lists): The input matrix to be tested.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)  # Get the size of the matrix\n\n    # Calculate the sum of each row and column\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    # Calculate the sum of the main diagonal and secondary diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n    secondary_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n\n    # Check if all sums are equal and greater than 0\n    if all(row_sums) and all(col_sums) and main_diag_sum == secondary_diag_sum:\n        return True\n    else:\n        return False\n\n# Test the function\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n        >>> max_occurrences([])\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    frequency = {}\n    max_item = lst[0]\n    max_frequency = 1\n\n    for item in lst:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n\n        if frequency[item] > max_frequency:\n            max_frequency = frequency[item]\n            max_item = item\n\n    return max_item"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    vowel_chars = [char for char in string if char.lower() in vowels]\n    vowel_chars.reverse()\n    result = ''\n    vowel_index = 0\n    for char in string:\n        if char.lower() in vowels:\n            result += vowel_chars[vowel_index]\n            vowel_index += 1\n        else:\n            result += char\n    return result\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World\") == \"Hollo Werld\"\nassert reverse_vowels(\"aeiou\") == \"uoiea\"\nassert reverse_vowels(\"xyz\") == \"xyz\"\nassert reverse_vowels(\"\") == \"\"\nassert reverse_vowels(\"Aeiou\") == \"uoieA\"\nassert reverse_vowels(\"Python is awesome\") == \"Python is awemo\"\nassert reverse_vowels(\"I love Python\") == \"I love nohtyP\"\nassert reverse_vowels(\"aeiouAEIOU\") == \"uoieaUOIEA\"\nassert reverse_vowels(\"This is a test\") == \"This is a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels(\"I am a test\") == \"I ma a test\"\nassert reverse_vowels"}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Converts a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculates the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    sum_neg = 0\n    for num in numbers:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Finds the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Testing the function\ndef test_hexagonal_num():\n    assert hexagonal_num(10) == 190\n    assert hexagonal_num(1) == 1\n\ntest_hexagonal_num()"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check if a given number can be represented as the sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # Base case: if n is 0, it can be represented as the sum of non-zero powers of 2\n    if n == 0:\n        return True\n\n    # Check if n is a power of 2\n    if n & (n - 1) == 0:\n        return True\n\n    # Check if n can be represented as the sum of non-zero powers of 2 by recursively subtracting powers of 2\n    for i in range(1, n):\n        if is_sum_of_powers_of_two(n - 2**i):\n            return True\n\n    return False\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True\nassert is_sum_of_powers_of_two(14) == True\nassert is_sum_of_powers_of_two(16) == True\nassert is_sum_of_powers_of_two(20) == True\nassert is_sum_of_powers_of_two(25) == False\nassert is_sum_of_powers_of_two(31) == False\nassert is_sum_of_powers_of_two(32) == True\nassert is_sum_of_powers_of_two(33) == False\nassert is_sum_of_powers_of_two(37) == False\nassert is_sum_of_powers_of_two(40) == True\nassert is_sum_of_powers_of_two(42) == False\nassert is_sum_of_powers_of_two(48) == True\nassert is_sum_of_powers_of_two(50) == False\nassert is_sum_of_powers_of_two(55) == False\nassert is_sum_of_powers_of_two(60) == True\nassert is_sum_of_powers_of_two(63) == False\nassert is_sum_of_powers_of_two(64) == True\nassert is_sum_of_powers_of_two(65) == False\nassert is_sum_of_powers_of_two(70) == False\nassert is_sum_of_powers_of_two(75) == False\nassert is_sum_of_powers_of_two(80) == True\nassert is_sum_of_powers_of_two(85) == False\nassert is_sum_of_powers_of_two(90) == False\nassert is_sum_of_powers_of_two(95) == False\nassert is_sum_of_powers_of_two(100) == False\n```"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculates the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    Examples:\n    >>> circle_circumference(10)\n    62.830000000000005\n    >>> circle_circumference(0)\n    0.0\n    >>> circle_circumference(-5)\n    ValueError: Radius cannot be negative\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n\n    circumference = 2 * math.pi * radius\n    return circumference\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        set: A set containing all the numbers from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        flattened_set.update(sublist)\n    return flattened_set\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n\n    def flip(lst, k):\n        \"\"\"\n        Flips the first k elements of the list.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        k (int): The number of elements to be flipped.\n\n        Returns:\n        None\n        \"\"\"\n        i = 0\n        while i < k // 2:\n            lst[i], lst[k - i - 1] = lst[k - i - 1], lst[i]\n            i += 1\n\n    n = len(lst)\n    while n > 1:\n        # Find the maximum element in the unsorted part of the list\n        max_index = lst.index(max(lst[:n]))\n\n        # Flip the maximum element to the beginning of the unsorted part\n        flip(lst, max_index + 1)\n\n        # Flip the maximum element to its correct position in the sorted part\n        flip(lst, n)\n\n        n -= 1\n\n    return lst\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must have the same length\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Finds the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    >>> max_Abs_Diff((-2, -5, -1))\n    7\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    min_val = arr[0]\n    max_val = arr[0]\n\n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n\n    return max_val - min_val"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n, returning them as a tuple.\n    If no solution exists, returns None.\n\n    Args:\n        a (int): The coefficient of x.\n        b (int): The coefficient of y.\n        n (int): The desired value of ax + by.\n\n    Returns:\n        tuple: A tuple containing integers x and y that satisfy the equation, or None if no solution exists.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(3, 5, 14)\n        (1, 2)\n        >>> find_solution(2, 3, 15)\n        None\n    \"\"\"\n    # Check if n is divisible by the greatest common divisor of a and b\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n\n    # Find the coefficients x and y using the extended Euclidean algorithm\n    def extended_euclidean(a, b):\n        if b == 0:\n            return 1, 0\n        else:\n            x, y = extended_euclidean(b, a % b)\n            return y, x - (a // b) * y\n\n    x, y = extended_euclidean(a, b)\n\n    # Adjust the coefficients to satisfy the equation ax + by = n\n    x *= n // gcd\n    y *= n // gcd\n\n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Removes all elements from a given list present in another list.\n\n    Args:\n        lst (list): The original list.\n        elements_to_remove (list): The list of elements to remove.\n\n    Returns:\n        list: The updated list with elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculates the sum (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The sum of the series.\n\n    Examples:\n    >>> sum_series(6)\n    12\n    >>> sum_series(10)\n    25\n    \"\"\"\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result\n\n# Testing the function\nassert sum_series(6) == 12\nassert sum_series(10) == 25"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefg\")\n        7\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    count = 0\n    for i in range(len(string)):\n        if i < len(alphabet) and string[i].lower() == alphabet[i]:\n            count += 1\n    return count\n\n# Testing the function\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdefg\") == 7\nassert count_char_position(\"\") == 0"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([1, 2, 3, 4, 5]) == 10\nassert find_even_pair([1, 3, 5, 7, 9]) == 0\nassert find_even_pair([2, 4, 6, 8, 10]) == 10\nassert find_even_pair([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 30"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Finds the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n\n    Examples:\n    >>> next_power_of_2(0)\n    1\n    >>> next_power_of_2(1)\n    1\n    >>> next_power_of_2(2)\n    2\n    >>> next_power_of_2(3)\n    4\n    >>> next_power_of_2(4)\n    4\n    >>> next_power_of_2(5)\n    8\n    >>> next_power_of_2(6)\n    8\n    >>> next_power_of_2(7)\n    8\n    >>> next_power_of_2(8)\n    8\n    >>> next_power_of_2(9)\n    16\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length())\n\n# Testing the function\nassert next_power_of_2(0) == 1\nassert next_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(6) == 8\nassert next_power_of_2(7) == 8\nassert next_power_of_2(8) == 8\nassert next_power_of_2(9) == 16"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n\n    Examples:\n        >>> frequency([1, 2, 3], 4)\n        0\n        >>> frequency([1, 2, 3, 4, 4, 4], 4)\n        3\n    \"\"\"\n    return lst.count(num)\n\n# Testing the function\nassert frequency([1, 2, 3], 4) == 0\nassert frequency([1, 2, 3, 4, 4, 4], 4) == 3"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Finds the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): The input list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 12)\n        78\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 13)\n        Traceback (most recent call last):\n        ...\n        ValueError: End index is out of range\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"End index is out of range\")\n\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 0, 12) == 78"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculates the perimeter of a regular pentagon based on the length of its sides.\n\n    Parameters:\n    side_length (float): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter\n\n# Testing the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurrences(string):\n    \"\"\"\n    Counts the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of occurrences of the string 'std' in the input string.\n\n    Examples:\n        >>> count_occurrences(\"letstdlenstdporstd\")\n        3\n        >>> count_occurrences(\"abcstddefstdghistd\")\n        2\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Testing the function\nassert count_occurrences(\"letstdlenstdporstd\") == 3\nassert count_occurrences(\"abcstddefstdghistd\") == 2"}
{"task_id": "Mbpp/222", "solution": "def check_type(tuple_to_check):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        tuple_to_check (tuple): The tuple to be checked.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(tuple_to_check[0])\n    for element in tuple_to_check:\n        if not isinstance(element, data_type):\n            return False\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((\"hello\", \"world\")) == True\nassert check_type((1, \"2\", 3)) == False\nassert check_type((True, False, True)) == False\nassert check_type(([1, 2], [3, 4])) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Function to check if an element is the majority element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    n (int): The length of the array.\n    element: The element to check for majority.\n\n    Returns:\n    bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    count = 0\n    for num in arr:\n        if num == element:\n            count += 1\n    return count > n // 2\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(n):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    n (int): The number to count the set bits in.\n\n    Returns:\n    int: The count of set bits in the given number.\n\n    Examples:\n    >>> count_Set_Bits(2)\n    1\n    >>> count_Set_Bits(7)\n    3\n    >>> count_Set_Bits(0)\n    0\n    \"\"\"\n    count = 0\n    while n > 0:\n        count += n & 1\n        n >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(7) == 3\nassert count_Set_Bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Removes characters with odd index values from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with characters at odd index values removed.\n\n    Examples:\n    >>> odd_values_string('abcdef')\n    'ace'\n    >>> odd_values_string('123456789')\n    '2468'\n    >>> odd_values_string('')\n    ''\n    \"\"\"\n    return string[::2]\n\n# Testing the function\ndef test_odd_values_string():\n    assert odd_values_string('abcdef') == 'ace'\n    assert odd_values_string('123456789') == '2468'\n    assert odd_values_string('') == ''\n\n# Running the tests\ntest_odd_values_string()"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(num1, num2, num3):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Args:\n        num1 (int or float): The first number.\n        num2 (int or float): The second number.\n        num3 (int or float): The third number.\n\n    Returns:\n        int or float: The minimum of the three numbers.\n\n    Examples:\n        >>> min_of_three(10, 20, 0)\n        0\n        >>> min_of_three(1.5, 2.5, 3.5)\n        1.5\n    \"\"\"\n    return min(num1, num2, num3)\n\n# Testing the function\nassert min_of_three(10, 20, 0) == 0\nassert min_of_three(1.5, 2.5, 3.5) == 1.5"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character and returns the modified string.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the given character.\n\n    Examples:\n        >>> replace_blank(\"hello people\", '@')\n        'hello@people'\n    \"\"\"\n    modified_string = string.replace(' ', character)\n    return modified_string\n\n# Test the function\nassert replace_blank(\"hello people\", '@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Function to find the n largest items from a given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to be returned.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Raises:\n        ValueError: If n is less than 1 or greater than the length of the input list.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 0)\n        Traceback (most recent call last):\n        ...\n        ValueError: n should be between 1 and the length of the list.\n    \"\"\"\n    if n < 1 or n > len(lst):\n        raise ValueError(\"n should be between 1 and the length of the list.\")\n\n    lst_sorted = sorted(lst, reverse=True)\n    return lst_sorted[:n]"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculates the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> lateral_surface_cylinder(10, 5)\n    314.15000000000003\n    >>> lateral_surface_cylinder(0, 10)\n    0.0\n    >>> lateral_surface_cylinder(10, -5)\n    ValueError: Radius and height must be positive.\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive.\")\n\n    base_area = 2 * math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    return base_area + lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(1.5)\n    33.75\n    \"\"\"\n    return side_length ** 3\n\n# Testing the function\ndef test_volume_cube():\n    assert volume_cube(3) == 27\n    assert volume_cube(1.5) == 33.75\n\ntest_volume_cube()"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Sets all even bits of a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with even bits set.\n\n    Examples:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(15)\n    14\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0xAAAAAAAA\n\n    # Apply the mask to set even bits\n    result = num | mask\n\n    return result\n\n# Test the function\nassert even_bit_set_number(10) == 10\nassert even_bit_set_number(15) == 14"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    occurences = {}\n    for tuple in lst:\n        if tuple in occurences:\n            occurences[tuple] += 1\n        else:\n            occurences[tuple] = 1\n    return occurences\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"abcd\")\n    10\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n    length = len(string)\n    if length == 0:\n        return 0\n    else:\n        return length * (length + 1) // 2\n\n# Testing the function\nassert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"\") == 0"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Function to find the number of possible sequences of length n,\n    where each element is a positive integer and is greater than or equal to twice the previous element\n    but less than or equal to m.\n\n    Args:\n        m (int): The upper limit of the sequence elements.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n\n    Raises:\n        ValueError: If m or n is negative or if n is greater than m.\n\n    Examples:\n        >>> get_total_number_of_sequences(10, 4)\n        4\n        >>> get_total_number_of_sequences(10, 0)\n        1\n        >>> get_total_number_of_sequences(10, 1)\n        10\n    \"\"\"\n    if m < 0 or n < 0:\n        raise ValueError(\"m and n must be non-negative\")\n    if n > m:\n        raise ValueError(\"n cannot be greater than m\")\n\n    # Initialize the table to store the number of sequences\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base cases\n    for i in range(1, m + 1):\n        dp[1][i] = 1\n\n    # Fill the table using dynamic programming approach\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            for k in range(1, j + 1):\n                dp[i][j] += dp[i - 1][k]\n\n    # Return the number of sequences of length n with elements up to m\n    return sum(dp[n])\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n\n    Examples:\n    >>> count_charac(\"python programming\")\n    18\n    >>> count_charac(\"\")\n    0\n    >>> count_charac(\"a\")\n    1\n    \"\"\"\n    return len(string)\n\n# Testing the function\nassert count_charac(\"python programming\") == 18\nassert count_charac(\"\") == 0\nassert count_charac(\"a\") == 1"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Finds the next perfect square greater than a given number.\n\n    Args:\n        num (int): The given number.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Raises:\n        ValueError: If the given number is negative.\n\n    Examples:\n        >>> next_Perfect_Square(35)\n        36\n        >>> next_Perfect_Square(0)\n        1\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Number must be non-negative.\")\n\n    # Find the square root of the given number\n    sqrt = math.isqrt(num)\n\n    # Check if the square root is a perfect square\n    if sqrt * sqrt == num:\n        return (sqrt + 1) ** 2\n\n    # Find the next perfect square greater than the given number\n    while True:\n        sqrt += 1\n        if sqrt * sqrt > num:\n            return sqrt * sqrt\n\n# Test the function\nassert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(0) == 1"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence for the given array.\n\n    A bitonic subsequence is one that is first increasing and then decreasing.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n    \"\"\"\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Calculate the maximum sum of increasing subsequence\n    increasing_sum = [arr[0]]\n    for i in range(1, peak + 1):\n        increasing_sum.append(max(arr[i], increasing_sum[i - 1] + arr[i]))\n\n    # Calculate the maximum sum of decreasing subsequence\n    decreasing_sum = [arr[-1]]\n    for i in range(n - 2, peak - 1, -1):\n        decreasing_sum.append(max(arr[i], decreasing_sum[n - i - 2] + arr[i]))\n\n    # Find the maximum sum of bitonic subsequence\n    max_sum = max(max(increasing_sum), max(decreasing_sum))\n\n    return max_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"AABB\")\n    4\n    >>> lps(\"ABCD\")\n    1\n    \"\"\"\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    # All substrings of length 1 are palindromes\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Iterate over substrings of length 2 to n\n    for length in range(2, n+1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j] and length == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n\n    return dp[0][n-1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"AABB\") == 4\nassert lps(\"ABCD\") == 1"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        element: The element to count.\n\n    Returns:\n        int: The count of occurrences of the element in the tuple.\n\n    Examples:\n        >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)\n        0\n        >>> count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)\n        4\n    \"\"\"\n    return tup.count(element)\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8) == 4"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_number):\n    \"\"\"\n    Converts a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and phase of the complex number.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2 + 2j)\n    (2.8284271247461903, 0.7853981633974483)\n    >>> convert(-1 + 0j)\n    (1.0, 3.141592653589793)\n    \"\"\"\n    magnitude = abs(complex_number)\n    phase = math.phase(complex_number)\n    return (magnitude, phase)\n\n# Testing the function\nassert convert(1) == (1.0, 0.0)\nassert convert(2 + 2j) == (2.8284271247461903, 0.7853981633974483)\nassert convert(-1 + 0j) == (1.0, 3.141592653589793)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n\n    Examples:\n    >>> count_integer([1, 2, 'abc', 1.2])\n    2\n    >>> count_integer([])\n    0\n    >>> count_integer([1, 2, 3, 4, 5])\n    5\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Testing the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2\nassert count_integer([]) == 0\nassert count_integer([1, 2, 3, 4, 5]) == 5"}
{"task_id": "Mbpp/255", "solution": "import itertools\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of the combinations.\n\n    Returns:\n        list: A list with a tuple for each combination.\n\n    Examples:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n        [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    return list(itertools.product(lst, repeat=n))\n\n# Testing the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Function to count the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than n.\n\n    Raises:\n    ValueError: If n is a negative number.\n\n    Examples:\n    >>> count_Primes_nums(5)\n    2\n    >>> count_Primes_nums(10)\n    4\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n\n    return count\n\n# Testing the function\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the positions of two numbers and returns a tuple with the second number first and then the first number.\n\n    Args:\n        num1 (int or float): The first number.\n        num2 (int or float): The second number.\n\n    Returns:\n        tuple: A tuple containing the second number first and then the first number.\n\n    Examples:\n        >>> swap_numbers(10, 20)\n        (20, 10)\n        >>> swap_numbers(3.14, 2.71)\n        (2.71, 3.14)\n    \"\"\"\n    return num2, num1\n\n# Testing the function\nassert swap_numbers(10, 20) == (20, 10)\nassert swap_numbers(3.14, 2.71) == (2.71, 3.14)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum elements from each input tuple.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the maximum elements from each input tuple.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements((1, 3), (4, 5))\n        (4, 5)\n        >>> maximize_elements((1, 3), (4, 5, 6))\n        Traceback (most recent call last):\n        ...\n        ValueError: Input tuples must have the same length\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    new_tuple = tuple(max(a, b) for a, b in zip(tuple1, tuple2))\n    return new_tuple\n\n# Test the function\nassert maximize_elements((1, 3), (4, 5)) == (4, 5)\nassert maximize_elements((1, 3), (4, 5, 6)) == (4, 5)\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    primes = [2, 3]  # Starting with the first two newman\u2013shanks\u2013williams primes\n\n    while len(primes) < n:\n        next_prime = primes[-1] + 2  # Start checking for primes from the last known prime + 2\n        is_prime = True\n\n        for prime in primes:\n            if next_prime % prime == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(next_prime)\n\n    return primes[n - 1]\n\n# Testing the function\nassert newman_prime(3) == 7\nassert newman_prime(10) == 29\nassert newman_prime(100) == 547"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the division operation results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n        >>> division_elements((10, 4, 6, 9), (2, 2, 2))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have the same length\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((10, 4, 6, 9), (2, 2, 2))"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the split list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists after the split.\n\n    Raises:\n        ValueError: If the length L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length L cannot be greater than the length of the input list.\")\n\n    first_part = lst[:L]\n    second_part = lst[L:]\n\n    return (first_part, second_part)"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculates the age of a dog in dog's years based on a given human age.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> dog_age(12)\n    61\n    >>> dog_age(0)\n    Traceback (most recent call last):\n    ...\n    ValueError: Human age must be a positive integer.\n    \"\"\"\n    if not isinstance(human_age, int) or human_age <= 0:\n        raise ValueError(\"Human age must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10\n    else:\n        return 20 + (human_age - 2) * 7\n\n# Test cases\nassert dog_age(12) == 61\nassert dog_age(0) == 0\nassert dog_age(1) == 10\nassert dog_age(2) == 20\nassert dog_age(3) == 27\nassert dog_age(4) == 34\nassert dog_age(5) == 41\nassert dog_age(6) == 48\nassert dog_age(7) == 55\nassert dog_age(8) == 62\nassert dog_age(9) == 69\nassert dog_age(10) == 76\nassert dog_age(11) == 83\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements to skip between each split.\n\n    Returns:\n        list: A list of lists, where each inner list contains the nth elements from the input list.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    int or float: The lateral surface area of the cube.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(3.5)\n    121.0\n    \"\"\"\n    return 4 * side_length**2\n\n# Testing the function\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(3.5) == 121.0"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Examples:\n    >>> square_Sum(2)\n    10\n    >>> square_Sum(3)\n    38\n    >>> square_Sum(4)\n    91\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\n# Testing the function\nassert square_Sum(2) == 10\nassert square_Sum(3) == 38\nassert square_Sum(4) == 91"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Finds the n'th star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n\n    Args:\n        n (int): The position of the star number to find.\n\n    Returns:\n        int: The n'th star number.\n\n    Raises:\n        ValueError: If n is not a positive integer.\n\n    Examples:\n        >>> find_star_num(3)\n        37\n        >>> find_star_num(5)\n        299\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    def factorial(num):\n        \"\"\"\n        Calculates the factorial of a number.\n\n        Args:\n            num (int): The number to calculate the factorial of.\n\n        Returns:\n            int: The factorial of the given number.\n\n        Raises:\n            ValueError: If num is not a non-negative integer.\n        \"\"\"\n        if not isinstance(num, int) or num < 0:\n            raise ValueError(\"num must be a non-negative integer\")\n\n        result = 1\n        for i in range(1, num + 1):\n            result *= i\n        return result\n\n    def is_star_number(num):\n        \"\"\"\n        Checks if a number is a star number.\n\n        A star number is a number that can be represented as the sum of the factorials of its digits.\n\n        Args:\n            num (int): The number to check.\n\n        Returns:\n            bool: True if the number is a star number, False otherwise.\n        \"\"\"\n        digit_sum = sum(factorial(int(digit)) for digit in str(num))\n        return digit_sum == num\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_star_number(num):\n            count += 1\n    return num\n\n# Testing the function\nassert find_star_num(3) == 37\nassert find_star_num(5) == 299"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('Z')\n    90\n    \"\"\"\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65\nassert ascii_value('B') == 66\nassert ascii_value('Z') == 90"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Finds the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(lst[1::2])\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Examples:\n    >>> even_Power_Sum(2)\n    1056\n    >>> even_Power_Sum(3)\n    31360\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n\n# Testing the function\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 31360"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    \"\"\"\n    Extracts the rear element of each tuple in a list and returns a new list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    return [tup[-1] for tup in lst]\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n        >>> subtract_elements((1, 2, 3), (4, 5))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuples must have the same length\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    subtracted_elements = []\n    for i in range(len(tuple1)):\n        subtracted_elements.append(tuple1[i] - tuple2[i])\n\n    return tuple(subtracted_elements)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients for a given positive integer n.\n\n    Parameters:\n    n (int): The positive integer for which to calculate the sum of even index binomial coefficients.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Examples:\n    >>> even_binomial_Coeff_Sum(4)\n    8\n    >>> even_binomial_Coeff_Sum(5)\n    10\n    \"\"\"\n    # Initialize the sum of even index binomial coefficients\n    sum_even_coeffs = 0\n\n    # Calculate the binomial coefficients using Pascal's triangle\n    triangle = [[1] * (i + 1) for i in range(n)]\n    for i in range(2, n):\n        for j in range(1, i):\n            triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j]\n\n    # Sum the even index binomial coefficients\n    for i in range(n):\n        for j in range(i + 1):\n            if (i + j) % 2 == 0:\n                sum_even_coeffs += triangle[i][j]\n\n    return sum_even_coeffs\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(5) == 10"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n\n    Example:\n    >>> volume_cylinder(10, 5)\n    1570.7500000000002\n    \"\"\"\n    volume = math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25))) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50, 55)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50, 55, 60)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50, 55, 60, 65)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50, 55, 60, 65, 70)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15, (20, 25), 30, 35, 40, 45, 50, 55, 60, 65, 70, 75)) == 3\nassert count_first_elements((1, 5, 7, (4, 6), 10, 15"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(10)\n    1258\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (3*n - 2)\n\n# Testing the function\nassert is_num_decagonal(3) == 27\nassert is_num_decagonal(10) == 1258"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True\nassert all_unique([1, 1, 1]) == False\nassert all_unique([1, 2, 3, 1]) == False\nassert all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 10]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] - list2[i])\n\n    return result"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n    \n    # Create a dictionary to store the frequency of each digit\n    digit_freq = {}\n    \n    # Count the frequency of each digit\n    for digit in num_str:\n        digit_freq[digit] = digit_freq.get(digit, 0) + 1\n    \n    # Check if the frequency of each digit is less than or equal to the digit itself\n    for digit in digit_freq:\n        if int(digit) < digit_freq[digit]:\n            return False\n    \n    return True\n\n# Test the function\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(123456) == False\nassert validate(121) == False\nassert validate(111111) == True\nassert validate(987654321) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to check for equality.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([\"blue\", \"blue\", \"blue\", \"blue\"], 'blue') == True\nassert check_element([1, 1, 1, 1], 1) == True\nassert check_element([1, 2, 3, 4], 1) == False\nassert check_element([], 'any') == True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False\nassert text_match_two_three(\"abbbbb\") == False\nassert text_match_two_three(\"abbabb\") == True\nassert text_match_two_three(\"abbbabbb\") == True\nassert text_match_two_three(\"abbbbbabbbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the modified array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Raises:\n        ValueError: If the length of the modified array is not equal to k * len(arr).\n\n    Examples:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 16)\n        30\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 12)\n        Traceback (most recent call last):\n            ...\n        ValueError: The length of the modified array is not equal to k * len(arr).\n    \"\"\"\n    if n != k * len(arr):\n        raise ValueError(\"The length of the modified array is not equal to k * len(arr).\")\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = float('-inf')\n    current_sum = 0\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_sum_repeated = max_sum * k\n\n    # If the sum of the original array is positive, add the maximum sum of a contiguous subarray k-1 times\n    if original_sum > 0:\n        max_sum_repeated += (k - 1) * original_sum\n\n    return max_sum_repeated"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Examples:\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    60\n    >>> square_Sum(4)\n    120\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i * i\n    return sum_of_squares\n\n# Testing the function\nassert square_Sum(2) == 20\nassert square_Sum(3) == 60\nassert square_Sum(4) == 120"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Finds the list with the maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the longest list and the list itself.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for sublist in lst:\n        if len(sublist) > max_len:\n            max_len = len(sublist)\n            max_list = sublist\n\n    return max_len, max_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find_quotient(dividend, divisor):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n        dividend (int): The number to be divided.\n        divisor (int): The number to divide by.\n\n    Returns:\n        int: The quotient of the two numbers.\n\n    Raises:\n        ValueError: If the divisor is zero.\n\n    Examples:\n        >>> find_quotient(10, 3)\n        3\n        >>> find_quotient(15, 4)\n        3\n        >>> find_quotient(10, 0)\n        Traceback (most recent call last):\n            ...\n        ValueError: Division by zero is not allowed.\n    \"\"\"\n    if divisor == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n\n    quotient = dividend // divisor\n    return quotient"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(base, height):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle given the base and height.\n\n    Parameters:\n    base (float): The length of the base of the right-angled triangle.\n    height (float): The length of the perpendicular height of the right-angled triangle.\n\n    Returns:\n    float: The length of the third side of the right-angled triangle.\n\n    Raises:\n    ValueError: If either the base or height is negative.\n\n    Examples:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    >>> otherside_rightangle(3, 4)\n    5.0\n    >>> otherside_rightangle(0, 5)\n    Traceback (most recent call last):\n    ...\n    ValueError: Base and height must be positive numbers.\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be positive numbers.\")\n\n    return math.sqrt(base**2 + height**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465\nassert otherside_rightangle(3, 4) == 5.0\nassert otherside_rightangle(0, 5)"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = float('-inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            max_value = max(max_value, item)\n    return max_value\n\n# Test cases\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5\nassert max_val([10, 20, 30, 40, 50]) == 50\nassert max_val([-10, -20, -30, -40, -50]) == -10\nassert max_val([1.5, 2.7, 3.1, 4.9, 5.2]) == 5.2\nassert max_val(['Python', 'Java', 'C++', 'Ruby', 'Scala']) == 'Scala'"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The count of inversions in the array.\n\n    Examples:\n    >>> get_Inv_Count([1,20,6,4,5])\n    5\n    \"\"\"\n    def merge_and_count(arr, left, mid, right):\n        n1 = mid - left + 1\n        n2 = right - mid\n\n        L = arr[left:mid + 1]\n        R = arr[mid + 1:right + 1]\n\n        i = j = inv_count = 0\n\n        for k in range(left, right + 1):\n            if i < n1 and (j >= n2 or L[i] <= R[j]):\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n                inv_count += (mid + 1) - (left + i)\n\n        return inv_count\n\n    def merge_sort_and_count(arr, left, right):\n        inv_count = 0\n\n        if left < right:\n            mid = (left + right) // 2\n\n            inv_count += merge_sort_and_count(arr, left, mid)\n            inv_count += merge_sort_and_count(arr, mid + 1, right)\n\n            inv_count += merge_and_count(arr, left, mid, right)\n\n        return inv_count\n\n    return merge_sort_and_count(arr, 0, len(arr) - 1)\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flat_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flat_list.extend(flatten_list(item))\n        else:\n            flat_list.append(item)\n    return flat_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculates the maximum aggregate from a list of tuples.\n\n    Args:\n        lst (list): A list of tuples containing names and corresponding scores.\n\n    Returns:\n        tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    aggregates = {}\n    for name, score in lst:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n\n    max_name = max(aggregates, key=aggregates.get)\n    max_aggregate = aggregates[max_name]\n\n    return (max_name, max_aggregate)\n\n# Test the function\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits for first and last half).\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    Examples:\n    >>> count_binary_seq(1)\n    2.0\n    >>> count_binary_seq(2)\n    4.0\n    >>> count_binary_seq(3)\n    8.0\n    \"\"\"\n    # Base case for n = 0\n    if n == 0:\n        return 1\n\n    # Initialize count of binary sequences\n    count = 0\n\n    # Recursively calculate count for n-1\n    count += count_binary_seq(n - 1)\n\n    # Calculate count for n-1 with first bit as 1\n    count += count_binary_seq(n - 1)\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(2), 4.0, rel_tol=0.001)\nassert math.isclose(count_binary_seq(3), 8.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    Examples:\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a': {'b': {'c': {'d': {}}}}})\n    5\n    >>> dict_depth({})\n    1\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    max_depth = 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            depth = dict_depth(value) + 1\n            if depth > max_depth:\n                max_depth = depth\n\n    return max_depth\n\n# Test the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a': {'b': {'c': {'d': {}}}}})==5\nassert dict_depth({})==1"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    \"\"\"\n    This function takes a list of words as input and returns two words from the list starting with the letter 'p'.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        tuple: A tuple containing two words starting with the letter 'p'.\n\n    Raises:\n        ValueError: If the input is not a list or if the list does not contain at least two words starting with 'p'.\n\n    Examples:\n        >>> start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])\n        ('Python', 'PHP')\n    \"\"\"\n\n    # Check if the input is a list\n    if not isinstance(words, list):\n        raise ValueError(\"Input should be a list of words.\")\n\n    # Initialize an empty list to store words starting with 'p'\n    p_words = []\n\n    # Iterate over each word in the input list\n    for word in words:\n        # Split the word into individual words\n        individual_words = word.split()\n\n        # Iterate over each individual word\n        for individual_word in individual_words:\n            # Check if the word starts with 'p'\n            if individual_word.lower().startswith('p'):\n                p_words.append(individual_word)\n\n    # Check if there are at least two words starting with 'p'\n    if len(p_words) < 2:\n        raise ValueError(\"Input list should contain at least two words starting with 'p'.\")\n\n    # Return the first two words starting with 'p'\n    return tuple(p_words[:2])"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Finds the maximum sum of increasing subsequence from prefix until the ith index,\n    including the kth element which is after i.\n\n    Args:\n        arr (list): The input list of integers.\n        n (int): The length of the input list.\n        i (int): The index up to which the subsequence is considered.\n        k (int): The index of the element to be included in the subsequence.\n\n    Returns:\n        int: The maximum sum of increasing subsequence.\n\n    Raises:\n        ValueError: If the input arguments are invalid.\n\n    Examples:\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n        11\n    \"\"\"\n\n    if not isinstance(arr, list) or not all(isinstance(num, int) for num in arr):\n        raise ValueError(\"Input 'arr' should be a list of integers.\")\n\n    if not isinstance(n, int) or n != len(arr):\n        raise ValueError(\"Input 'n' should be the length of the list 'arr'.\")\n\n    if not isinstance(i, int) or i < 0 or i >= n:\n        raise ValueError(\"Input 'i' should be a non-negative integer less than the length of the list 'arr'.\")\n\n    if not isinstance(k, int) or k < 0 or k >= n or k <= i:\n        raise ValueError(\"Input 'k' should be a non-negative integer greater than 'i' and less than the length of the list 'arr'.\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Iterate through the prefix until the ith index\n    for j in range(i + 1):\n        # Check if the current element is greater than the previous element\n        if arr[j] > arr[j - 1]:\n            # Update the maximum sum if the current element is included in the subsequence\n            max_sum += arr[j]\n\n    # Add the kth element to the subsequence\n    max_sum += arr[k]\n\n    return max_sum"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of factors.\n        list2 (list): The second list of factors.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the largest products.\n\n    Raises:\n        ValueError: If the number of products to find is greater than the total number of factors in both lists.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num > len(list1) * len(list2):\n        raise ValueError(\"Number of products to find is greater than the total number of factors in both lists.\")\n\n    products = []\n    for factor1 in list1:\n        for factor2 in list2:\n            products.append(factor1 * factor2)\n\n    products.sort(reverse=True)\n    return products[:num]"}
{"task_id": "Mbpp/309", "solution": "def maximum(num1, num2):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n\n    Examples:\n    >>> maximum(5, 10)\n    10\n    >>> maximum(10.5, 5.3)\n    10.5\n    \"\"\"\n    if num1 > num2:\n        return num1\n    else:\n        return num2\n\n# Testing the function\nassert maximum(5, 10) == 10\nassert maximum(10.5, 5.3) == 10.5"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Converts a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple of characters from the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with the left most unset bit set.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(0)\n    1\n    >>> set_left_most_unset_bit(31)\n    31\n    \"\"\"\n    # Find the leftmost unset bit\n    bit_index = 0\n    while num & (1 << bit_index):\n        bit_index += 1\n\n    # Set the leftmost unset bit\n    num |= 1 << bit_index\n\n    return num\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(0) == 1\nassert set_left_most_unset_bit(31) == 31"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculates the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If the radius or height is negative.\n\n    Examples:\n    >>> volume_cone(5, 12)\n    314.15926535897927\n    >>> volume_cone(0, 10)\n    0.0\n    >>> volume_cone(3, -5)\n    ValueError: Radius and height must be non-negative.\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Finds the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The number for which to find the highest power of 2.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n    >>> highest_power_of_2(10)\n    8\n    >>> highest_power_of_2(16)\n    16\n    >>> highest_power_of_2(32)\n    32\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Testing the function\nassert highest_power_of_2(10) == 8\nassert highest_power_of_2(16) == 16\nassert highest_power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Finds the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> find_lucas(9)\n    76\n    >>> find_lucas(0)\n    2\n    >>> find_lucas(-1)\n    Traceback (most recent call last):\n    ...\n    ValueError: n must be a non-negative integer\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n+1):\n            a, b = b, a + b\n        return a\n\n# Testing the function\nassert find_lucas(9) == 76\nassert find_lucas(0) == 2\nassert find_lucas(1) == 1\nassert find_lucas(2) == 3\nassert find_lucas(3) == 4\nassert find_lucas(4) == 7\nassert find_lucas(5) == 11\nassert find_lucas(6) == 18\nassert find_lucas(7) == 29\nassert find_lucas(8) == 47\nassert find_lucas(9) == 76\nassert find_lucas(10) == 123\nassert find_lucas(11) == 199\nassert find_lucas(12) == 322\nassert find_lucas(13) == 521\nassert find_lucas(14) == 843\nassert find_lucas(15) == 1364\nassert find_lucas(16) == 2207\nassert find_lucas(17) == 3571\nassert find_lucas(18) == 5778\nassert find_lucas(19) == 9349\nassert find_lucas(20) == 15127\nassert find_lucas(21) == 24476\nassert find_lucas(22) == 39603\nassert find_lucas(23) == 64079\nassert find_lucas(24) == 103682\nassert find_lucas(25) == 167761\nassert find_lucas(26) == 271443\nassert find_lucas(27) == 439204\nassert find_lucas(28) == 710647\nassert find_lucas(29) == 1149851\nassert find_lucas(30) == 1860498\nassert find_lucas(31) == 3010349\nassert find_lucas(32) == 4870847\nassert find_lucas(33) == 7881196\nassert find_lucas(34) == "}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The input list of elements.\n        format_str (str): The format string to be applied to each element.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values, scores):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values[i]: scores[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 2, 3, 4, 5)) == True\nassert check_distinct(()) == True\nassert check_distinct((1,)) == True\nassert check_distinct((1, 2, 3, 2, 1)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        char: The first non-repeated character in the string, or None if there is no such character.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        'c'\n        >>> first_non_repeating_character(\"aabbc\")\n        'c'\n        >>> first_non_repeating_character(\"aabbcc\")\n        None\n    \"\"\"\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n\n    for char in string:\n        if char_count[char] == 1:\n            return char\n\n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabbc\") == 'c'\nassert first_non_repeating_character(\"aabbcc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    num3 (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    \"\"\"\n    sorted_numbers = sorted([num1, num2, num3])\n    median_index = len(sorted_numbers) // 2\n    return sorted_numbers[median_index]\n\n# Testing the function\nassert median_numbers(25, 55, 65) == 55.0\nassert median_numbers(10, 20, 30) == 20.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number in the input list.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    sums = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sums.append(digit_sum)\n    return sums\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n\n    Examples:\n    >>> minimum(1, 2)\n    1\n    >>> minimum(3.5, 2.8)\n    2.8\n    \"\"\"\n    if a < b:\n        return a\n    else:\n        return b\n\n# Testing the function\nassert minimum(1, 2) == 1\nassert minimum(3.5, 2.8) == 2.8"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The tuple to be checked.\n        element: The element to be searched for.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'z') == False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 3) == True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), '') == False"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and checks if the parity of the number is odd.\n\n    Parameters:\n    num (int): The number to check the parity of.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test the function\ndef test_find_Parity():\n    assert find_Parity(12) == False\n    assert find_Parity(11) == True\n    assert find_Parity(0) == False\n    assert find_Parity(-5) == True\n    assert find_Parity(1) == True\n    assert find_Parity(2) == False\n    assert find_Parity(3) == True\n    assert find_Parity(4) == False\n    assert find_Parity(5) == True\n    assert find_Parity(6) == False\n    assert find_Parity(7) == True\n    assert find_Parity(8) == False\n    assert find_Parity(9) == True\n    assert find_Parity(10) == False\n    print(\"All tests passed successfully.\")\n\n# Run the tests\ntest_find_Parity()"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Finds the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n        >>> min_product_tuple([(1, 2), (3, 4), (5, 6)])\n        6\n    \"\"\"\n    if not all(isinstance(item, tuple) for item in lst):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The heterogeneous list to find the minimum value from.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    min_value = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)):\n            min_value = min(min_value, item)\n\n    return min_value\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Parameters:\n    lst (list): The input list containing numbers.\n\n    Returns:\n    list: A new list with odd numbers removed.\n\n    Examples:\n    >>> remove_odd([1, 2, 3])\n    [2]\n    >>> remove_odd([1, 2, 3, 4, 5])\n    [2, 4]\n    >>> remove_odd([2, 4, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Testing the function\ndef test_remove_odd():\n    assert remove_odd([1, 2, 3]) == [2]\n    assert remove_odd([1, 2, 3, 4, 5]) == [2, 4]\n    assert remove_odd([2, 4, 6]) == [2, 4, 6]\n\ntest_remove_odd()"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples and returns a list of the extracted elements.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the extracted elements.\n\n    Raises:\n        ValueError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)\n        [99, 96, 94, 98]\n    \"\"\"\n    if n < 0 or n >= len(lst[0]):\n        raise ValueError(\"Index out of range\")\n\n    return [tup[n] for tup in lst]"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False\n\n# Test cases\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True\nassert overlapping([], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], []) == False\nassert overlapping([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with the highest product from a given array of integers.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input array has less than 2 elements.\n\n    Examples:\n        >>> max_Product([1, 2, 3, 4, 7, 0, 8, 4])\n        (7, 8)\n        >>> max_Product([-1, -2, -3, -4, -7, 0, -8, -4])\n        (-4, -7)\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input array should have at least 2 elements.\")\n\n    max_product = float('-inf')\n    pair = None\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Finds the element of a list with the maximum length.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the maximum length.\n\n    Raises:\n        ValueError: If the input is not a list of sublists.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n    \"\"\"\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of sublists.\")\n\n    max_length = max(len(sublist) for sublist in lst)\n    max_sublist = [sublist for sublist in lst if len(sublist) == max_length]\n\n    return max_sublist[0]\n\n# Testing the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculates the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i * i * 2\n\n    return sum\n\n# Testing the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple into a single string using a delimiter.\n\n    Args:\n        tup (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to use for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n        >>> concatenate_tuple((\"Hello\", \"World\"), delimiter=' ')\n        'Hello World'\n    \"\"\"\n    return delimiter.join(map(str, tup))\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"Hello\", \"World\"), delimiter=' ') == 'Hello World'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Example:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tuple_of_strings):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tuple_of_strings (tuple): A tuple of strings.\n\n    Returns:\n        list: A list containing the rear index elements of the strings in the tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    rear_elements = []\n    for string in tuple_of_strings:\n        rear_elements.append(string[-1])\n    return rear_elements\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Counts the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to be counted.\n\n    Returns:\n        int: The count of sublists containing the element.\n\n    Examples:\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)\n        3\n        >>> count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5)\n        1\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 5) == 1"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 3, 5, 7, 9]\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\ndef test_filter_oddnumbers():\n    \"\"\"\n    Test the filter_oddnumbers function.\n    \"\"\"\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n    assert filter_oddnumbers([2, 4, 6, 8, 10]) == []\n    assert filter_oddnumbers([1, 3, 5, 7, 9]) == [1, 3, 5, 7, 9]\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == [1, 3, 5, 7, 9, 11]\n    assert filter_oddnumbers([1, 3, 5, 7, 9, 11]) == [1, 3, 5, 7, 9, 11]\n    assert filter_oddnumbers([2, 4, 6, 8, 10, 12]) == []\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == [1, 3, 5, 7, 9, 11]\n    assert filter_oddnumbers([1, 3, 5, 7, 9, 11, 13]) == [1, 3, 5, 7, 9, 11, 13]\n    assert filter_oddnumbers([2, 4, 6, 8, 10, 12, 14]) == []\n    assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == [1, 3, 5, 7, 9, 11, 13]\n    assert filter_oddnumbers([1, 3, 5, 7, 9, 11, 13, 15]) == [1, 3, 5, 7, 9, 11, 13, 15]\n    assert filter_oddnumbers([2, 4, 6, 8, 10, 12, 14, "}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Converts a date in yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Input date should be in yyyy-mm-dd format.\")\n\n# Testing the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using the Shell sort algorithm.\n\n    Parameters:\n    arr (list): The unsorted array.\n\n    Returns:\n    list: The sorted array.\n\n    Examples:\n    >>> shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])\n    [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n    \"\"\"\n    gap = len(arr) // 2\n    while gap > 0:\n        for i in range(gap, len(arr)):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test the function\ndef test_shell_sort():\n    assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\n\ntest_shell_sort()"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n        >>> and_tuples((1, 2, 3), (4, 5, 6))\n        (0, 0, 2)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = tuple(elem1 & elem2 for elem1, elem2 in zip(tuple1, tuple2))\n    return result\n\n# Testing the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3), (4, 5, 6)) == (0, 0, 2)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Finds the directrix of a parabola given its standard form coefficients a, b, and c.\n\n    Parameters:\n    a (float): The coefficient of the x^2 term.\n    b (float): The coefficient of the x term.\n    c (float): The constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Raises:\n    ValueError: If the parabola does not have a directrix (i.e., if it is a straight line).\n\n    Example:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n    if b**2 - 4*a*c < 0:\n        raise ValueError(\"The parabola does not have a directrix (it is a straight line).\")\n\n    directrix = -b / (2*a)\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculates the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the parallel side of the trapezium.\n    b (float): Length of the opposite parallel side of the trapezium.\n    c (float): Length of the adjacent side of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If the input parameters are invalid.\n\n    Examples:\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    >>> median_trapezium(10, 20, 30)\n    15.0\n    \"\"\"\n\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"Input parameters must be positive numbers.\")\n\n    if a + b <= c or a + c <= b or b + c <= a:\n        raise ValueError(\"Invalid trapezium dimensions.\")\n\n    # Calculate the median length using Heron's formula\n    s = (a + b + c) / 2\n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    median = (2 * area) / (b - a)\n\n    return median\n\n# Test the function\ndef test_median_trapezium():\n    assert median_trapezium(15, 25, 35) == 20.0\n    assert median_trapezium(10, 20, 30) == 15.0\n\ntest_median_trapezium()"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array.\n        num (int): The entered number.\n\n    Returns:\n        bool: True if the entered number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([1, 2, 3, 4, 5], 0) == False\nassert check_greater([1, 2, 3, 4, 5], 10) == True\nassert check_greater([1, 2, 3, 4, 5], -1) == False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n\n    Examples:\n    >>> last_digit(123)\n    3\n    >>> last_digit(4567)\n    7\n    >>> last_digit(0)\n    0\n    \"\"\"\n    return number % 10\n\n# Testing the function\nassert last_digit(123) == 3\nassert last_digit(4567) == 7\nassert last_digit(0) == 0"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): The input list containing positive and negative numbers.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n\n    Examples:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    >>> neg_nos([1, 2, 3, 4, 5])\n    []\n    >>> neg_nos([-1, -2, -3, -4, -5])\n    [-1, -2, -3, -4, -5]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Testing the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]\nassert neg_nos([1, 2, 3, 4, 5]) == []\nassert neg_nos([-1, -2, -3, -4, -5]) == [-1, -2, -3, -4, -5]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with odd characters removed.\n\n    Examples:\n    >>> remove_odd(\"python\")\n    'yhn'\n    >>> remove_odd(\"hello\")\n    'eh'\n    >>> remove_odd(\"123456789\")\n    '2468'\n    \"\"\"\n    even_chars = [string[i] for i in range(len(string)) if i % 2 == 0]\n    return ''.join(even_chars)\n\n# Testing the function\nassert remove_odd(\"python\") == \"yhn\"\nassert remove_odd(\"hello\") == \"eh\"\nassert remove_odd(\"123456789\") == \"2468\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): List of integers to be joined.\n\n    Returns:\n        int: Single integer formed by joining the input list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Parameters:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Example:\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    \"\"\"\n    adverb_pattern = r'\\b(?:very|just|quite|over|under|above|below|against|along|among|around|at|before|behind|beneath|beside|between|by|down|for|from|in|inside|into|near|of|off|on|onto|out|over|through|to|toward|under|underneath|upon|with|without)\\b'\n    adverb_match = re.search(adverb_pattern, sentence)\n\n    if adverb_match:\n        start_position = adverb_match.start()\n        end_position = adverb_match.end()\n        adverb = adverb_match.group()\n        return start_position, end_position, adverb\n    else:\n        return None\n\n# Test the function\ndef test_find_adverb_position():\n    assert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\n    assert find_adverb_position(\"I walked to the store\") == (10, 18, 'to')\n    assert find_adverb_position(\"The cat is very hungry\") == (12, 18, 'very')\n    assert find_adverb_position(\"She is not at home\") == (5, 8, 'not')\n    assert find_adverb_position(\"The sun is shining brightly\") == (15, 25, 'shining')\n    assert find_adverb_position(\"I have a big house\") == (9, 12, 'big')\n    assert find_adverb_position(\"The weather is pleasant\") == (15, 23, 'pleasant')\n    assert find_adverb_position(\"The dog is running fast\") == (12, 17, 'running')\n    assert find_adverb_position(\"The cat is not very friendly\") == (12, 18, 'not')\n    assert find_adverb_position(\"The book is written by John\") == (19, 24, 'written')\n    assert find_adverb_position(\"The movie is very exciting\") == (12, 18, 'very')\n    assert find_adverb_position(\"The weather is not good\") == (15, 18, 'not')\n    assert find_adverb_position(\"The book is not very interesting\") == (12, 18, 'not')\n    assert find_adverb_position(\"The book is not very interesting\") == (12, 18, 'not')\n    assert find_adverb_position(\"The book is not very interesting\") == (12, 18, 'not')\n    assert find_adverb_position(\"The book is not very interesting\") == (12, 18, 'not')\n    assert find_adverb_position"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculates the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The side length of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    \"\"\"\n    return 6 * size ** 2\n\n# Testing the function\ndef test_surfacearea_cube():\n    assert surfacearea_cube(5) == 150\n\ntest_surfacearea_cube()"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n        if isinstance(element1, tuple) and isinstance(element2, tuple):\n            result.append(tuple(x * y for x, y in zip(element1, element2)))\n        else:\n            result.append(element1 * element2)\n    return tuple(result)\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(lst):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A list containing the cubes of the individual elements in the input list.\n\n    Examples:\n    >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n    [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    return [num ** 3 for num in lst]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculates the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    perrin_numbers = [3, 0, 2]  # Initial Perrin numbers\n    if n <= 2:\n        return sum(perrin_numbers[:n])\n\n    for _ in range(3, n):\n        next_number = perrin_numbers[-2] + perrin_numbers[-3]\n        perrin_numbers.append(next_number)\n\n    return sum(perrin_numbers)\n\n# Testing the function\nassert cal_sum(9) == 49\nassert cal_sum(0) == 0\nassert cal_sum(1) == 3\nassert cal_sum(2) == 2\nassert cal_sum(3) == 5\nassert cal_sum(4) == 7\nassert cal_sum(5) == 12\nassert cal_sum(6) == 19\nassert cal_sum(7) == 28\nassert cal_sum(8) == 47\nassert cal_sum(9) == 49\nassert cal_sum(10) == 76\nassert cal_sum(11) == 125\nassert cal_sum(12) == 201\nassert cal_sum(13) == 326\nassert cal_sum(14) == 527\nassert cal_sum(15) == 853\nassert cal_sum(16) == 1380\nassert cal_sum(17) == 2233\nassert cal_sum(18) == 3613\nassert cal_sum(19) == 5846\nassert cal_sum(20) == 9459\nassert cal_sum(21) == 15305\nassert cal_sum(22) == 24764\nassert cal_sum(23) == 40069\nassert cal_sum(24) == 64833\nassert cal_sum(25) == 104902\nassert cal_sum(26) == 169735\nassert cal_sum(27) == 274637\nassert cal_sum(28) == 444372\nassert cal_sum(29) == 719009\nassert cal_sum(30) == 1163381\nassert cal_sum(31) == 1882390\nassert cal_sum(32) == 3045771\nassert cal_sum(33) == 4928161\nassert cal_sum(34) == 7973932\nassert cal_sum(35) == 12902093\nassert cal_sum(36) == 208"}
{"task_id": "Mbpp/450", "solution": "def extract_string(lst, size):\n    \"\"\"\n    Extracts strings of a specified size from a given list of string values.\n\n    Args:\n        lst (list): The list of string values.\n        size (int): The size of the strings to be extracted.\n\n    Returns:\n        list: A list containing the extracted strings.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [s for s in lst if len(s) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with whitespaces removed.\n\n    Examples:\n        >>> remove_whitespaces(' Google    Flutter ')\n        'GoogleFlutter'\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\ndef test_remove_whitespaces():\n    assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\n\n# Run the tests\ntest_remove_whitespaces()"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    \"\"\"\n    This function takes a number as input and returns the sum of its even factors.\n\n    Parameters:\n    num (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    Examples:\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(24)\n    42\n    \"\"\"\n    factors = [i for i in range(1, num+1) if num % i == 0]\n    even_factors = [i for i in factors if i % 2 == 0]\n    return sum(even_factors)\n\n# Testing the function\nassert sumofFactors(18) == 26\nassert sumofFactors(24) == 42"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n\n    Examples:\n    >>> text_match_wordz(\"pythonz.\")\n    True\n    >>> text_match_wordz(\"Python.\")\n    False\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Testing the function\nassert text_match_wordz(\"pythonz.\") == True\nassert text_match_wordz(\"Python.\") == False"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    Args:\n        month_number (int): The number of the month to check.\n\n    Returns:\n        bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    month_with_31_days = [1, 3, 5, 7, 8, 10, 12]\n    return month_number in month_with_31_days\n\n# Test the function\nassert check_month_number(5) == True\nassert check_month_number(2) == False\nassert check_month_number(13) == False\nassert check_month_number(0) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A list of reversed string values.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in a given list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input is not a list of sublists.\n\n    Examples:\n        >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n        [1]\n        >>> find_min_sublist([[1, 2], [1, 2, 3], [1]])\n        [1]\n        >>> find_min_sublist([[1, 2, 3], [1]])\n        [1]\n        >>> find_min_sublist([[], [1], [1, 2], [1, 2, 3]])\n        []\n        >>> find_min_sublist([[], [1, 2, 3], [1]])\n        []\n        >>> find_min_sublist([[], []])\n        []\n    \"\"\"\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of sublists\")\n\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculates the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is not a positive number.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(5.5, 3.2)\n    17.1\n    \"\"\"\n    if length <= 0 or width <= 0:\n        raise ValueError(\"Length and width must be positive numbers.\")\n\n    return length * width\n\n# Testing the function\ndef test_rectangle_area():\n    assert rectangle_area(10, 20) == 200\n    assert rectangle_area(5.5, 3.2) == 17.1\n    try:\n        rectangle_area(0, 10)\n    except ValueError as e:\n        assert str(e) == \"Length and width must be positive numbers.\"\n    try:\n        rectangle_area(10, 0)\n    except ValueError as e:\n        assert str(e) == \"Length and width must be positive numbers.\"\n\ntest_rectangle_area()"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with uppercase substrings removed.\n\n    Examples:\n    >>> remove_uppercase('cAstyoUrFavoRitETVshoWs')\n    'cstyoravoitshos'\n    \"\"\"\n    result = ''\n    for char in string:\n        if not char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    \"\"\"\n    Extracts the first element of each sublist and returns a list of these elements.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: A list containing the first element of each sublist.\n\n    Examples:\n        >>> Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])\n        [1, 3, 6]\n    \"\"\"\n    return [sublist[0] for sublist in lst]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result += [current + [lst[i]] for current in result]\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product of a subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_ending_here, min_ending_here = min_ending_here, max_ending_here\n\n        max_ending_here = max(arr[i], max_ending_here * arr[i])\n        min_ending_here = min(arr[i], min_ending_here * arr[i])\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The updated dictionary with empty items dropped.\n\n    Examples:\n        >>> drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})\n        {'c1': 'Red', 'c2': 'Green'}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Finds the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n        >>> max_product([1, 2, 3, 4, 5])\n        60\n        >>> max_product([5, 4, 3, 2, 1])\n        60\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    max_ending_here = arr[0]\n    min_ending_here = arr[0]\n    max_so_far = arr[0]\n\n    for i in range(1, len(arr)):\n        current = arr[i]\n\n        temp_max_ending_here = max(current, max(max_ending_here * current, min_ending_here * current))\n        min_ending_here = min(current, min(max_ending_here * current, min_ending_here * current))\n\n        max_ending_here = temp_max_ending_here\n\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of neighboring elements of the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: A tuple containing the pairwise addition of neighboring elements.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n        >>> add_pairwise((1, 2, 3))\n        (3, 5)\n        >>> add_pairwise((1,))\n        Traceback (most recent call last):\n            ...\n        ValueError: Input tuple must have at least two elements\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    if len(tup) < 2:\n        raise ValueError(\"Input tuple must have at least two elements\")\n\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n\n    return tuple(result)\n\n# Testing the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((1, 2, 3)) == (3, 5)\nassert add_pairwise((1,)) == (None, None)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Finds the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Example:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Testing the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if the given list contains consecutive numbers.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    sorted_lst = sorted(lst)  # Sort the list in ascending order\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i] + 1 != sorted_lst[i + 1]:\n            return False\n    return True\n\n# Test the function\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 2, 4, 5]) == False\nassert check_Consecutive([1, 2, 4, 3, 5]) == False\nassert check_Consecutive([1, 2, 3, 5, 4]) == False\nassert check_Consecutive([1, 2, 3, 3, 4]) == False\nassert check_Consecutive([1, 1, 2, 3, 4]) == False\nassert check_Consecutive([1, 2, 3, 4, 4]) == False\nassert check_Consecutive([1, 2, 3, 3, 5]) == False\nassert check_Consecutive([1, 2, 3, 4, 6, 7, 8]) == True\nassert check_Consecutive([1, 2, 3, 4, 6, 8, 7]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 10]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14]) == False\nassert check_Consecutive([1, "}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are common to both tuple lists.\n\n    Examples:\n        >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n        {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list1:\n        for tuple2 in tuple_list2:\n            if set(tuple1) == set(tuple2):\n                intersection.add(tuple1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character.\n\n    Returns:\n        str: The modified string with all occurrences of the old character replaced by the new character.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        \"pollgon\"\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l') == \"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in ascending order.\n\n    Args:\n        dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples containing the sorted key-value pairs.\n\n    Examples:\n        >>> sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1])\n    return sorted_items\n\n# Test the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Finds the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([1, 2, 3, 4, 5])\n    6\n    >>> big_sum([10, -5, 20, 30, -10])\n    40\n    \"\"\"\n    if len(arr) < 2:\n        return None\n\n    smallest = arr[0]\n    largest = arr[0]\n\n    for num in arr:\n        if num < smallest:\n            smallest = num\n        if num > largest:\n            largest = num\n\n    return smallest + largest\n\n# Testing the function\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([1, 2, 3, 4, 5]) == 6\nassert big_sum([10, -5, 20, 30, -10]) == 40"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n\n    Examples:\n    >>> convert_to_lower(\"InValid\")\n    'invalid'\n    >>> convert_to_lower(\"Hello World\")\n    'hello world'\n    \"\"\"\n    return string.lower()\n\n# Testing the function\ndef test_convert_to_lower():\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n    assert convert_to_lower(\"Hello World\") == \"hello world\"\n\ntest_convert_to_lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with lowercase substrings removed.\n\n    Examples:\n    >>> remove_lowercase(\"PYTHon\")\n    'PYTH'\n    >>> remove_lowercase(\"Python\")\n    'Python'\n    >>> remove_lowercase(\"Python Programming\")\n    'Python Programming'\n    \"\"\"\n    result = \"\"\n    i = 0\n    while i < len(string):\n        if string[i].islower():\n            i += 1\n        else:\n            result += string[i]\n            i += 1\n    return result\n\n# Testing the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\"\nassert remove_lowercase(\"Python\") == \"Python\"\nassert remove_lowercase(\"Python Programming\") == \"Python Programming\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Finds the first digit of a given number.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The first digit of the number.\n\n    Raises:\n        TypeError: If the input is not an integer.\n\n    Examples:\n        >>> first_digit(123)\n        1\n        >>> first_digit(0)\n        0\n        >>> first_digit(-123)\n        1\n    \"\"\"\n    if not isinstance(number, int):\n        raise TypeError(\"Input must be an integer.\")\n\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer\n    return int(first_digit)\n\n# Test the function\nassert first_digit(123) == 1\nassert first_digit(0) == 0\nassert first_digit(-123) == 1"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd ones.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Examples:\n        >>> difference(3)\n        30\n        >>> difference(5)\n        70\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Testing the function\nassert difference(3) == 30\nassert difference(5) == 70"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    >>> toggle_string(\"Hello World\")\n    'hELLO wORLD'\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string\n\n# Testing the function\nassert toggle_string(\"Python\") == \"pYTHON\"\nassert toggle_string(\"Hello World\") == \"hELLO WORLD\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        12\n        >>> digit_distance_nums(100, 200)\n        0\n    \"\"\"\n    # Convert the integers to strings for easier manipulation\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Pad the shorter string with leading zeros to make both strings have the same length\n    max_length = max(len(num1_str), len(num2_str))\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n\n    # Calculate the sum of the per-digit difference\n    sum_diff = 0\n    for i in range(max_length):\n        sum_diff += abs(int(num1_str[i]) - int(num2_str[i]))\n\n    return sum_diff\n\n# Test the function\nassert digit_distance_nums(1, 2) == 1\nassert digit_distance_nums(123, 456) == 12\nassert digit_distance_nums(100, 200) == 0"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(lst, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of the sublist.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n\n    Raises:\n        ValueError: If the length of the sublist is greater than the length of the input list.\n\n    Examples:\n        >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n        Traceback (most recent call last):\n        ...\n        ValueError: Length of sublist should be less than or equal to the length of the input list.\n        >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 3)\n        7\n    \"\"\"\n    if n > len(lst):\n        raise ValueError(\"Length of sublist should be less than or equal to the length of the input list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += lst[i]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n, len(lst)):\n        current_sum += lst[i] - lst[i - n]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the union of elements from tuple1 and tuple2, sorted in ascending order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Finds the length of the longest sublists in a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Examples:\n        >>> Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]])\n        4\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Testing the function\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"([^\"]+)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        lst (list): A list of integers.\n        n (int): The number of elements in the list.\n\n    Returns:\n        int: The count of unordered pairs where both elements are unequal.\n\n    Examples:\n        >>> count_Pairs([1, 2, 1], 3)\n        2\n        >>> count_Pairs([1, 2, 3, 4, 5], 5)\n        10\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Testing the function\nassert count_Pairs([1, 2, 1], 3) == 2\nassert count_Pairs([1, 2, 3, 4, 5], 5) == 10"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Parameters:\n    string (str): The input string to be split.\n\n    Returns:\n    list: A list of characters from the input string.\n\n    Examples:\n    >>> split_string('python')\n    ['p', 'y', 't', 'h', 'o', 'n']\n    >>> split_string('')\n    []\n    >>> split_string('12345')\n    ['1', '2', '3', '4', '5']\n    \"\"\"\n    return list(string)\n\n# Testing the function\ndef test_split_string():\n    assert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']\n    assert split_string('') == []\n    assert split_string('12345') == ['1', '2', '3', '4', '5']\n\ntest_split_string()"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Function to get the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): Non-negative integer.\n\n    Returns:\n    int: Sum of the digits of the input integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n    # Convert the integer to a string to iterate over its digits\n    digits = str(n)\n    # Initialize the sum of digits\n    digit_sum = 0\n    # Iterate over each digit and add it to the sum\n    for digit in digits:\n        digit_sum += int(digit)\n    return digit_sum\n\n# Test the function\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(12345) == 15"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check if a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,15]) == False\nassert is_sorted_list([1,3,2,4,6,8,10,12,14,16,15]) == False\nassert is_sorted_list([1,3,2,4,6,8,10,12,14,16,17]) == False\nassert is_sorted_list([]) == True\nassert is_sorted_list([1]) == True\nassert is_sorted_list([1,2]) == True\nassert is_sorted_list([2,1]) == False\nassert is_sorted_list([1,1,2,2,3,3]) == True\nassert is_sorted_list([1,2,1,2,3,3]) == False\nassert is_sorted_list([1,2,3,2,1]) == False\nassert is_sorted_list([1,2,3,3,2,1]) == False\nassert is_sorted_list([1,2,3,4,3,2,1]) == False\nassert is_sorted_list([1,2,3,4,5,6,7,8,9,10]) == True\nassert is_sorted_list([10,9,8,7,6,5,4,3,2,1]) == False\nassert is_sorted_list([1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1]) == False\nassert is_sorted_list([1,2,3,4,5,6,7,8,9,10,10,9,8,7,6,5,4,3,2,1,1,2,3,4,5,6,7,8,9,10]) == False"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: The input list with each sublist sorted in alphabetical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(num_lists):\n    unique_nums = set()\n    for num_list in num_lists:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    return list(unique_nums)\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_nums = set(lst)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(sub_list, main_list):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n        sub_list (list): The potential sublist.\n        main_list (list): The main list.\n\n    Returns:\n        bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if len(sub_list) == 0:\n        return True\n\n    if len(main_list) == 0:\n        return False\n\n    for i in range(len(main_list)):\n        if main_list[i] == sub_list[0]:\n            if main_list[i:i + len(sub_list)] == sub_list:\n                return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2], [1, 2, 3, 4]) == True\nassert is_Sub_Array([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], []) == False\nassert is_Sub_Array([], []) == True\nassert is_Sub_Array([1, 2, 3], [1, 2, 3, 3, 4, 5]) == False\nassert is_Sub_Array([1, 2, 3, 3, 4, 5], [1, 2, 3, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 3, 4, 5], [1, 2, 3, 3, 4, 5, 6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculates the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    4\n    >>> last_digit_factorial(15)\n    0\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Testing the function\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 4\nassert last_digit_factorial(15) == 0"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements from both input tuples.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: The updated nested mixed tuple with uneven elements removed.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    updated_tuple = ()\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            updated_tuple += (extract_even(item),)\n        elif item % 2 == 0:\n            updated_tuple += (item,)\n    return updated_tuple\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Example:\n    >>> surface_area(3, 4)\n    33.0\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge ** 2)\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33.0"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Calculate the nth Catalan number using the recursive formula\n    def catalan(n):\n        if n <= 1:\n            return 1\n        else:\n            result = 0\n            for i in range(n):\n                result += catalan(i) * catalan(n - i - 1)\n            return result\n\n    return catalan(n)\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Finds the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries, where each dictionary represents an item with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items from the dataset.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is less than 1.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset is empty\")\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        ValueError: If the input list is empty or n is out of range.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5, 6, 52, 36, 12, 10]\n        >>> split_Arr([], 0)\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot be empty\n        >>> split_Arr([1, 2, 3], 4)\n        Traceback (most recent call last):\n        ...\n        ValueError: n is out of range\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input list cannot be empty\")\n    if n < 0 or n >= len(arr):\n        raise ValueError(\"n is out of range\")\n\n    return arr[n:] + arr[:n]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Converts a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Finds the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 20, 30, 40])\n        30\n        >>> big_diff([10, 20, 30, 40, 50])\n        40\n        >>> big_diff([10, 20, 30, 40, 50, 60])\n        50\n        >>> big_diff([10, 20, 30, 40, 50, 60, 70])\n        60\n        >>> big_diff([10, 20, 30, 40, 50, 60, 70, 80])\n        70\n        >>> big_diff([10, 20, 30, 40, 50, 60, 70, 80, 90])\n        80\n        >>> big_diff([10, 20, 30, 40, 50, 60, 70, 80, 90, 100])\n        90\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_val = min(nums)\n    max_val = max(nums)\n    diff = max_val - min_val\n    return diff"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the start and end numbers.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n    \"\"\"\n    squares = []\n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            squares.append(num)\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Converts polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinates.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y), (-2+2.4492935982947064e-16j)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n        >>> swap_list([])\n        []\n        >>> swap_list([1])\n        [1]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(lst) < 2:\n        return lst\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of terms to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Examples:\n    >>> sum_of_product(3)\n    15\n    >>> sum_of_product(5)\n    330\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculates the binomial coefficient (n choose k).\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial coefficient.\n\n        Examples:\n        >>> binomial_coefficient(5, 2)\n        10\n        >>> binomial_coefficient(10, 3)\n        120\n        \"\"\"\n        result = 1\n        for i in range(1, k + 1):\n            result = result * (n - i + 1) // i\n        return result\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += i * binomial_coefficient(i + 1, 2)\n\n    return total_sum\n\n# Testing the function\nassert sum_of_product(3) == 15\nassert sum_of_product(5) == 330"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Removes leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to be processed.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    processed_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(processed_octets)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Finds the difference between the first even and first odd number of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n        >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n        3\n        >>> diff_even_odd([2, 4, 6, 8])\n        0\n        >>> diff_even_odd([1, 3, 5, 7])\n        Traceback (most recent call last):\n            ...\n        ValueError: The list does not contain any even or odd numbers.\n    \"\"\"\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in lst:\n        if num % 2 != 0:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"The list does not contain any even or odd numbers.\")\n\n    return even_num - odd_num"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(tup):\n    \"\"\"\n    Find the size in bytes of the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the tuple.\n\n    Example:\n    >>> tuple_size((\"A\", 1, \"B\", 2, \"C\", 3))\n    80\n    \"\"\"\n    return sys.getsizeof(tup)\n\n# Test the function\ndef test_tuple_size():\n    \"\"\"\n    Test the tuple_size function.\n    \"\"\"\n    assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\n\n# Run the tests\ntest_tuple_size()"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the combined sorted arrays.\n\n    Raises:\n        ValueError: If the value of k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    if k < 1 or k > len(arr1) + len(arr2):\n        raise ValueError(\"k is out of range\")\n\n    i, j = 0, 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n\n        mid = k // 2\n        mid_i, mid_j = min(i + mid, len(arr1)) - 1, min(j + mid, len(arr2)) - 1\n\n        if arr1[mid_i] <= arr2[mid_j]:\n            k -= mid_i - i + 1\n            i = mid_i + 1\n        else:\n            k -= mid_j - j + 1\n            j = mid_j + 1"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n\n    # Initialize the sum of the digits raised to the power of the number of digits\n    armstrong_sum = 0\n\n    # Iterate through each digit in the number\n    for digit in num_str:\n        # Raise each digit to the power of the number of digits and add to the sum\n        armstrong_sum += int(digit) ** len(num_str)\n\n    # Check if the sum is equal to the original number\n    if armstrong_sum == num:\n        return True\n    else:\n        return False\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Finds the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum_of_numbers = n * (n + 1) // 2\n    average = sum_of_numbers / n\n    return sum_of_numbers, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check if a given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test the function\nassert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False\nassert is_Even(4) == True\nassert is_Even(5) == False\nassert is_Even(6) == True\nassert is_Even(7) == False\nassert is_Even(8) == True\nassert is_Even(9) == False\nassert is_Even(10) == True"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string, or None if no repeated character is found.\n\n    Examples:\n        >>> first_repeated_char(\"abcabc\")\n        'a'\n        >>> first_repeated_char(\"abcd\")\n        >>> first_repeated_char(\"\")\n    \"\"\"\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Testing the function\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") == None\nassert first_repeated_char(\"\") == None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The given integer.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n\n    Examples:\n    >>> get_lucid(10)\n    [1, 2, 3, 5, 7]\n    >>> get_lucid(20)\n    [1, 2, 3, 5, 7, 11, 13, 17]\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Check if a number is lucid.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n\n    Examples:\n    >>> is_lucid(1)\n    True\n    >>> is_lucid(2)\n    True\n    >>> is_lucid(3)\n    True\n    >>> is_lucid(4)\n    False\n    >>> is_lucid(5)\n    True\n    \"\"\"\n    if num < 2:\n        return True\n    if num % 2 == 0:\n        return False\n    for i in range(3, int(num**0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]\nassert get_lucid(20) == [1, 2, 3, 5, 7, 11, 13, 17]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words seperated by spaces in a given string.\n\n    Parameters:\n    string (str): The input string containing words seperated by spaces.\n\n    Returns:\n    str: The reversed string with words in the original order.\n\n    Example:\n    >>> reverse_words(\"python program\")\n    'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert prime_num(13) == True\nassert prime_num(15) == False\nassert prime_num(2) == True\nassert prime_num(1) == False\nassert prime_num(0) == False\nassert prime_num(-13) == False\nassert prime_num(29) == True\nassert prime_num(30) == False\nassert prime_num(101) == True\nassert prime_num(100) == False\nassert prime_num(1000000007) == True\nassert prime_num(1000000008) == False"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Converts degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n\n    Example:\n    >>> radian_degree(90)\n    1.5707963267948966\n    \"\"\"\n    return degrees * math.pi / 180\n\n# Test the function\ndef test_radian_degree():\n    assert radian_degree(90) == 1.5707963267948966\n\n# Run the tests\ntest_radian_degree()"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The input string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern is not a valid regular expression.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    try:\n        regex = re.compile(pattern)\n        match = regex.search(string)\n        if match:\n            return match.group(), match.start(), match.end()\n        else:\n            return None\n    except re.error:\n        raise ValueError(\"Invalid regex pattern\")\n\n# Test the function\ndef test_find_literals():\n    assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\n\ntest_find_literals()"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Function to find the nth Bell number.\n\n    Parameters:\n    n (int): The position of the Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(3)\n    5\n    >>> bell_Number(4)\n    15\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Testing the function\nassert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Removes the k'th element from the given list and returns the modified list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The modified list with the k'th element removed.\n\n    Raises:\n        ValueError: If the k'th element is not within the list bounds.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n        >>> remove_kth_element([1, 2, 3], 4)\n        Traceback (most recent call last):\n            ...\n        ValueError: k'th element is not within the list bounds\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise ValueError(\"k'th element is not within the list bounds\")\n\n    return lst[:k] + lst[k+1:]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value of the n'th column in a given matrix.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The index of the column to find the maximum value.\n\n    Returns:\n        int: The maximum value of the n'th column.\n\n    Raises:\n        ValueError: If the matrix is empty or if the column index is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n        8\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n        Traceback (most recent call last):\n        ...\n        ValueError: Column index out of range\n        >>> max_of_nth([], 0)\n        Traceback (most recent call last):\n        ...\n        ValueError: Matrix is empty\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column index out of range\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        max_value = max(max_value, row[n])\n\n    return max_value"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tuple in tuples:\n        total = sum(tuple)\n        average = total / len(tuple)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = tuple(a % b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Function to divide two lists element wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> div_list([4,5,6],[1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n        >>> div_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] / list2[i])\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    nums = ''\n    letters = ''\n\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n\n    return letters + nums\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Finds the size of the largest subset of a list of numbers where every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n        >>> largest_subset([2, 4, 6, 8, 10])\n        5\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Checks if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, index):\n        \"\"\"\n        Recursive helper function to find the largest subset.\n\n        Args:\n            numbers (list): The remaining numbers to consider.\n            current_subset (list): The current subset being built.\n            index (int): The current index in the numbers list.\n\n        Returns:\n            list: The largest subset found so far.\n        \"\"\"\n        if index == len(numbers):\n            return current_subset\n\n        # Exclude the current number and move to the next index\n        exclude_subset = find_subset(numbers, current_subset, index + 1)\n\n        # Include the current number and move to the next index\n        include_subset = find_subset(numbers[index + 1:], current_subset + [numbers[index]], index + 1)\n\n        # Return the larger subset\n        return max(exclude_subset, include_subset, key=len)\n\n    return len(find_subset(numbers, [], 0))\n\n# Test the function\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4\nassert largest_subset([2, 4, 6, 8, 10]) == 5"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two lists.\n\n    Raises:\n        ValueError: If the lists are not of the same size.\n\n    Examples:\n        >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n        16.0\n    \"\"\"\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"Lists must be of the same size.\")\n\n    i = j = count = 0\n    median_index = (n - 1) // 2\n    while count <= median_index:\n        if list1[i] < list2[j]:\n            i += 1\n        else:\n            j += 1\n        count += 1\n\n    if (n % 2) == 0:\n        if list1[i] < list2[j]:\n            return (list1[i] + min(list1[i + 1], list2[j])) / 2.0\n        else:\n            return (list2[j] + min(list1[i], list2[j + 1])) / 2.0\n    else:\n        return min(list1[i], list2[j])\n\n# Test the function\nlist1 = [1, 12, 15, 26, 38]\nlist2 = [2, 13, 17, 30, 45]\nn = 5\nassert get_median(list1, list2, n) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to which each number should be raised.\n\n    Returns:\n        list: A new list with the n-th power of each number in the original list.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n\n    Examples:\n    >>> convert_to_uppercase(\"person\")\n    'PERSON'\n    >>> convert_to_uppercase(\"Hello World\")\n    'HELLO WORLD'\n    \"\"\"\n    return string.upper()\n\n# Testing the function\ndef test_convert_to_uppercase():\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n    assert convert_to_uppercase(\"Hello World\") == \"HELLO WORLD\"\n\ntest_convert_to_uppercase()"}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        # Calculate the area of the largest triangle inscribed in the semicircle\n        height = radius\n        base = 2 * radius\n        area = 0.5 * base * height\n        return area\n\n# Test cases"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n\n    Examples:\n        >>> replace_spaces(\"My Name is Dawood\")\n        'My%20Name%20is%20Dawood'\n    \"\"\"\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list containing only the even numbers from the input list.\n\n    Examples:\n        >>> find_even_numbers([1, 2, 3, 4, 5])\n        [2, 4]\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n    \"\"\"\n    modified_string = string.replace(' ', '_')\n    return modified_string\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Moves all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1, 2, 3, 4, 0, 0]\n    \"\"\"\n    # Create a new list to store non-zero elements\n    non_zero_lst = [num for num in lst if num != 0]\n\n    # Create a new list to store zeroes\n    zero_lst = [0] * (len(lst) - len(non_zero_lst))\n\n    # Combine the non-zero and zero lists\n    return non_zero_lst + zero_lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): The list of numbers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The sum of XOR of all pairs of numbers.\n\n    Examples:\n        >>> pair_xor_Sum([5,9,7,6],4)\n        47\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    arr (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    Examples:\n    >>> heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n\n    def heapify(arr, n, i):\n        \"\"\"\n        Builds a max heap from the given list.\n\n        Parameters:\n        arr (list): The list to be heapified.\n        n (int): The size of the heap.\n        i (int): The index of the root node.\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check if the given amount has no profit and no loss.\n\n    Args:\n        amount (int or float): The actual amount.\n        expected_amount (int or float): The expected amount.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount\n\n# Test the function\ndef test_noprofit_noloss():\n    assert noprofit_noloss(1500, 1200) == False\n    assert noprofit_noloss(1000, 1000) == True\n    assert noprofit_noloss(1234.56, 1234.56) == True\n    assert noprofit_noloss(5000, 4000) == False\n    assert noprofit_noloss(100, 150) == False\n    assert noprofit_noloss(100.50, 100.50) == True\n    assert noprofit_noloss(10000, 10000.0) == True\n    assert noprofit_noloss(1000, 1000.0) == True\n    assert noprofit_noloss(100.0, 100) == True\n    assert noprofit_noloss(100.0, 100.0) == True\n\n# Run the tests\ntest_noprofit_noloss()"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculates the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (int): Wind velocity in km/h.\n        temperature (int): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -273.15 celsius.\n\n    \"\"\"\n    if wind_velocity > 150:\n        raise ValueError(\"Wind velocity cannot exceed 150 km/h.\")\n    if temperature < -273.15:\n        raise ValueError(\"Temperature cannot be lower than -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test cases\nassert wind_chill(120, 35) == 40\nassert wind_chill(0, 10) == -4\nassert wind_chill(150, 25) == 19\nassert wind_chill(100, -300) == -273\n"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Examples:\n    >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n    16\n    >>> sum_name_lengths(['John', 'Emily', 'Michael', 'Olivia'])\n    18\n    \"\"\"\n    filtered_names = [name for name in names if not name[0].islower()]\n    return sum(len(name) for name in filtered_names)\n\n# Testing the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\nassert sum_name_lengths(['John', 'Emily', 'Michael', 'Olivia']) == 18"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    23\n    >>> is_nonagonal(4)\n    38\n    >>> is_nonagonal(5)\n    56\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (7 * n - 5) // 2\n\n# Testing the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 11\nassert is_nonagonal(3) == 23\nassert is_nonagonal(4) == 38\nassert is_nonagonal(5) == 56\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Checks if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 3 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonzabc\") == False\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzxyz\") == True\nassert text_match_wordz_middle(\"pythonzxy\") == False\nassert text_match_wordz_middle(\"zpythonz\") == False\nassert text_match_wordz_middle(\"zpythonzxyz\") == True\nassert text_match_wordz_middle(\"zpythonzxy\") == False\nassert text_match_wordz_middle(\"pythonzxyzpythonz\") == True\nassert text_match_wordz_middle(\"pythonzxypythonz\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array up to a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position up to which the array should be reversed.\n\n    Returns:\n    list: The reversed array up to the given position.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0)\n    [1, 2, 3, 4, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6)\n    [6, 5, 4, 3, 2, 1]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Testing the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 0) == [1, 2, 3, 4, 5, 6]\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 6) == [6, 5, 4, 3, 2, 1]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Adds a dictionary to the tuple and returns the updated tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        dictionary (dict): The dictionary to be added to the tuple.\n\n    Returns:\n        tuple: The updated tuple with the dictionary added.\n\n    Examples:\n        >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n        (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tup + (dictionary,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[float('-inf')] * (n + 1) for _ in range(n + 1)]\n    dp[0][1] = 0\n\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = max(dp[i - 1][j], dp[i][j - 1]) + matrix[i - 1][j - 1]\n\n    max_average = float('-inf')\n    for i in range(1, n + 1):\n        max_average = max(max_average, (dp[i][n] + matrix[i - 1][n - 1]) / (i + n - 1))\n\n    return max_average\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2\nassert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.0\nassert maxAverageOfPath([[1, 2], [3, 4]]) == 2.5\nassert maxAverageOfPath([[1]]) == 1.0\nassert maxAverageOfPath([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]) == 8.0"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\nexpected_output = {'Cierra Vega': (6.2, 70)}\nassert filter_data(students, min_height, min_weight) == expected_output"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the lists have the same values.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    Takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    \n    Parameters:\n    t (tuple): Input tuple of numbers.\n    \n    Returns:\n    tuple: Tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n    \"\"\"\n    result = ()\n    for i in range(len(t) - 1):\n        result += (t[i] * t[i+1],)\n    return result\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sum of corresponding elements from the input lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the sum of corresponding elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n        >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n\n    return result"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    Examples:\n    >>> lateralsurface_cone(5, 12)\n    204.20352248333654\n    >>> lateralsurface_cone(0, 10)\n    0.0\n    >>> lateralsurface_cone(10, 0)\n    0.0\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    # Calculate the slant height\n    s = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area\n    LSA = math.pi * r * s\n\n    return LSA\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654\nassert lateralsurface_cone(0, 10) == 0.0\nassert lateralsurface_cone(10, 0) == 0.0"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, and dots replaced with colons.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n    \"\"\"\n    special_chars = [' ', ',', '.']\n    for char in special_chars:\n        string = string.replace(char, ':')\n    return string\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Finds the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array to search.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculates the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4])\n        70\n    \"\"\"\n    result = 0\n    n = len(lst)\n\n    for i in range(n):\n        for j in range(i, n):\n            sublist = lst[i:j+1]\n            product = 1\n            for num in sublist:\n                product *= num\n            result += product\n\n    return result\n\n# Testing the function\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 70"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(number):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The number with toggled bits.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n    \"\"\"\n    # Check if the number is less than 3\n    if number < 3:\n        return number\n\n    # Calculate the number of bits required to represent the input number\n    num_bits = number.bit_length()\n\n    # Create a mask to toggle bits from the second bit to the second-to-last bit\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the bits using bitwise XOR operation\n    toggled_number = number ^ mask\n\n    return toggled_number\n\n# Test the function\nassert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 14"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to find the left insertion point for.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    Examples:\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    >>> left_insertion([1,2,4,5], 3)\n    2\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Testing the function\nassert left_insertion([1,2,4,5], 6) == 4\nassert left_insertion([1,2,4,5], 3) == 2"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regex.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiou]'\n    return bool(re.match(pattern, string, re.IGNORECASE))\n\n# Test cases\ndef test_check_str():\n    assert check_str(\"annie\") == True\n    assert check_str(\"banana\") == False\n    assert check_str(\"apple\") == True\n    assert check_str(\"Elephant\") == True\n    assert check_str(\"xyz\") == False\n    assert check_str(\"\") == False\n    assert check_str(\"123\") == False\n    assert check_str(\"Annie\") == True\n    assert check_str(\"I\") == True\n    assert check_str(\"i\") == True\n    assert check_str(\"o\") == True\n    assert check_str(\"u\") == True\n    assert check_str(\"A\") == True\n    assert check_str(\"E\") == True\n    assert check_str(\"I\") == True\n    assert check_str(\"O\") == True\n    assert check_str(\"U\") == True\n    print(\"All test cases passed.\")\n\n# Run the test cases\ntest_check_str()"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Finds the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits for the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_Index(2)\n    4\n    >>> find_Index(3)\n    12\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    def is_triangular(num):\n        \"\"\"\n        Checks if a number is triangular.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is triangular, False otherwise.\n        \"\"\"\n        if num < 0:\n            return False\n\n        # Using the formula n(n+1)/2 = x, we can solve for n\n        n = int((2 * num) ** 0.5)\n        return n * (n + 1) // 2 == num\n\n    index = 1\n    triangular_num = 1\n\n    while True:\n        if is_triangular(triangular_num):\n            if len(str(triangular_num)) == n:\n                return index\n        index += 1\n        triangular_num += index\n\n# Testing the function\nassert find_Index(2) == 4\nassert find_Index(3) == 12"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Converts a given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the length of the tuple is odd.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n        >>> tuple_to_dict((1, 5, 7, 10, 13))\n        ValueError: Length of the tuple should be even.\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Length of the tuple should be even.\")\n\n    result_dict = {}\n    for i in range(0, len(tup), 2):\n        result_dict[tup[i]] = tup[i+1]\n\n    return result_dict\n\n# Testing the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 5, 7, 10, 13)) == ValueError(\"Length of the tuple should be even.\")"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) < 2:\n        return True\n    else:\n        first_char = string[0]\n        for char in string:\n            if char != first_char:\n                return False\n        return True\n\n# Test cases"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculates the area of a tetrahedron with a given side length.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(3) * side_length**2\n\n    return area\n\n# Test the function\ndef test_area_tetrahedron():\n    assert area_tetrahedron(3) == 15.588457268119894\n\ntest_area_tetrahedron()"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate to the right direction.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    # Calculate the effective number of rotations\n    num_items = num_items % len(lst)\n\n    # Reverse the entire list\n    lst.reverse()\n\n    # Reverse the first part of the list\n    lst[:num_items] = lst[:num_items][::-1]\n\n    # Reverse the second part of the list\n    lst[num_items:] = lst[num_items:][::-1]\n\n    return lst\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tup (tuple): The input tuple to be checked.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tup)\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False\nassert check_none(()) == False\nassert check_none((None,)) == True\nassert check_none((None, 10)) == True\nassert check_none((10, None)) == True\nassert check_none((None, None)) == True\nassert check_none((None, 10, None)) == True\nassert check_none((10, None, 15)) == True\nassert check_none((10, 4, 5, None, 6, 7)) == True\nassert check_none((10, 4, 5, 6, None, 7)) == True\nassert check_none((10, 4, None, 6, 7)) == True\nassert check_none((10, 4, 5, 6, 7, None)) == True"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonIsAwesome\")\n        'Python Is Awesome'\n        >>> capital_words_spaces(\"ThisIsATest\")\n        'This Is A Test'\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper():\n            modified_words.append(word)\n        else:\n            modified_words.append(word.capitalize())\n    return ' '.join(modified_words)\n\n# Testing the function\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonIsAwesome\") == 'Python Is Awesome'\nassert capital_words_spaces(\"ThisIsATest\") == 'This Is A Test'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of integers.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(int(num) for num in numbers)\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    lst.extend(tup)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[left_child] < arr[i]:\n            return False\n        if right_child < n and arr[right_child] < arr[i]:\n            return False\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert check_min_heap([8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert check_min_heap([9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert check_min_heap([10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert check_min_heap([11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\nassert check_min_heap([12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\nassert check_min_heap([13, 12, 11, "}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11\nassert jacobsthal_num(10) == 12742\nassert jacobsthal_num(15) == 3934940481\nassert jacobsthal_num(20) == 10946149703860"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples containing records.\n        k (int): The number of minimum records to be returned.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort records based on the second element of each tuple\n    return sorted_records[:k]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Finds the second smallest number in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than 2 elements.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1])\n        Traceback (most recent call last):\n            ...\n        ValueError: List should have at least 2 elements.\n    \"\"\"\n    if len(lst) < 2:\n        raise ValueError(\"List should have at least 2 elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    try:\n        float(string)\n        if '.' in string and string.count('.') == 1:\n            parts = string.split('.')\n            if len(parts[1]) <= 2:\n                return True\n        elif string.isdigit():\n            return True\n    except ValueError:\n        pass\n    return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.1') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == False\nassert is_decimal('123.11a') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123.11.1') == False\nassert is_decimal('123"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([1, 1, 2, 2, 3, 3]) == False\nassert unique_Element([]) == True\nassert unique_Element([1]) == True\nassert unique_Element([1, 1, 1, 1, 1, 1]) == True"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    thirty_day_months = [4, 6, 9, 11]  # Months with 30 days\n    return month_number in thirty_day_months\n\n# Test the function\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Finds the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of integers.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the array size is less than 2.\n\n    Examples:\n        >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n        1\n        >>> find_min_diff((4, 8, 12, 16), 4)\n        4\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Array size should be at least 2\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize minimum difference to infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n\n    Examples:\n    >>> number_ctr('program2bedone')\n    1\n    >>> number_ctr('12345')\n    5\n    >>> number_ctr('abc123xyz')\n    3\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Testing the function\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abc123xyz') == 3"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_polite(7)\n    11\n    >>> is_polite(10)\n    19\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    # Base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n\n    # Initialize variables\n    prev_polite = 1\n    curr_polite = 2\n\n    # Find the nth polite number\n    for _ in range(3, n+1):\n        next_polite = prev_polite + curr_polite\n        prev_polite, curr_polite = curr_polite, next_polite\n\n    return curr_polite\n\n# Test the function\nassert is_polite(7) == 11\nassert is_polite(10) == 19"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs\n\n# Test the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to 'sum'.\n\n    Args:\n        numbers (list): A list of numbers.\n        target_sum (int): The target sum.\n\n    Returns:\n        int: The count of pairs whose sum is equal to 'sum'.\n\n    Examples:\n        >>> get_pairs_count([1, 1, 1, 1], 2)\n        6\n        >>> get_pairs_count([1, 2, 3, 4, 5], 5)\n        4\n    \"\"\"\n    count = 0\n    pairs = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in pairs:\n            count += pairs[complement]\n        if num in pairs:\n            pairs[num] += 1\n        else:\n            pairs[num] = 1\n\n    return count\n\n# Testing the function\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\nassert get_pairs_count([1, 2, 3, 4, 5], 5) == 4"}
{"task_id": "Mbpp/769", "solution": "def diff_lists(list1, list2):\n    \"\"\"\n    Returns the difference between two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The difference between the two lists.\n\n    Examples:\n    >>> diff_lists([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])\n    [10, 20, 30, 15]\n    \"\"\"\n    return list(set(list1) - set(list2))\n\n# Test the function\ndef test_diff_lists():\n    assert diff_lists([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]\n\n# Run the tests\ntest_diff_lists()"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculates the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    202\n    \"\"\"\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    sum_of_fourth_power = sum(num ** 4 for num in odd_numbers)\n    return sum_of_fourth_power\n\n# Testing the function\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 202"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Parameters:\n    expression (str): The expression to be checked.\n\n    Returns:\n    bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    opening_brackets = \"({[\"\n    closing_brackets = \")}]\"\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            top_bracket = stack.pop()\n            if opening_brackets.index(top_bracket) != closing_brackets.index(char):\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{[}]\") == False\nassert check_expression(\"({[}])\") == False\nassert check_expression(\"\") == True\nassert check_expression(\"(\") == False\nassert check_expression(\"([{}])\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n\n    Examples:\n        >>> remove_length('The person is most value tet', 3)\n        'person is most value'\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple or None: If a match is found, returns a tuple containing the substring, starting index, and ending index.\n                      If no match is found, returns None.\n\n    Examples:\n        >>> occurance_substring('python programming, python language','python')\n        ('python', 0, 6)\n        >>> occurance_substring('python programming, python language','java')\n        None\n    \"\"\"\n    index = string.find(substring)\n    if index != -1:\n        return (substring, index, index + len(substring) - 1)\n    else:\n        return None\n\n# Test the function\nassert occurance_substring('python programming, python language','python') == ('python', 0, 6)\nassert occurance_substring('python programming, python language','java') == None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index contains odd numbers in a given list.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,3,8]) == False\nassert odd_position([1,3,5,7,9]) == True\nassert odd_position([2,4,6,8,10]) == False\nassert odd_position([1,2,3,4,5,6,7,8,9,10]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Finds the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    unique_elements = set(lst)\n    sum_non_repeated = sum(element for element in lst if element in unique_elements)\n    return sum_non_repeated\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i > 0 and lst[i] != lst[i-1]:\n            result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n\n    result.append(current_sublist)\n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if n // i == i:\n                count += 1\n            else:\n                count += 2\n    return count % 2 == 0\n\n# Test the function\ndef test_count_divisors():\n    assert count_divisors(10) == True\n    assert count_divisors(12) == False\n    assert count_divisors(1) == True\n    assert count_divisors(2) == True\n    assert count_divisors(3) == False\n    assert count_divisors(4) == True\n    assert count_divisors(5) == False\n    assert count_divisors(6) == True\n    assert count_divisors(7) == False\n    assert count_divisors(8) == True\n    assert count_divisors(9) == False\n    assert count_divisors(100) == True\n    assert count_divisors(101) == False\n    assert count_divisors(102) == True\n    assert count_divisors(103) == False\n    assert count_divisors(104) == True\n    assert count_divisors(105) == False\n    assert count_divisors(106) == True\n    assert count_divisors(107) == False\n    assert count_divisors(108) == True\n    assert count_divisors(109) == False\n    assert count_divisors(110) == True\n    assert count_divisors(111) == False\n    assert count_divisors(112) == True\n    assert count_divisors(113) == False\n    assert count_divisors(114) == True\n    assert count_divisors(115) == False\n    assert count_divisors(116) == True\n    assert count_divisors(117) == False\n    assert count_divisors(118) == True\n    assert count_divisors(119) == False\n    assert count_divisors(120) == True\n    assert count_divisors(121) == False\n    assert count_divisors(122) == True\n    assert count_divisors(123) == False\n    assert count_divisors(124) == True\n    assert count_divisors(125) == False\n    assert count_divisors(126) == True\n    assert count_divisors(127) == False\n    assert count_divisors(128) == True\n    assert count_divisors(129) == False\n    assert count_divisors(130) == True\n    assert count_divisors"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n        >>> odd_length_sum([1, 2, 4, 5, 6])\n        35\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray_length = j - i + 1\n            if subarray_length % 2 == 1:\n                result += sum(arr[i:j+1])\n\n    return result\n\n# Testing the function\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 4, 5, 6]) == 35"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n\n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n\n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n\n# Test the function\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the parentheses from the input string\n    tuple_str = tuple_str.strip('()')\n    \n    # Split the string into a list of strings using the comma as the delimiter\n    tuple_list = tuple_str.split(',')\n    \n    # Convert each string in the list to an integer and store them in a new list\n    int_list = [int(num) for num in tuple_list]\n    \n    # Create a tuple from the integer list and return it\n    return tuple(int_list)\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Finds the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    target (int): The value to be inserted.\n\n    Returns:\n    int: The index where the target value should be inserted to maintain sorted order.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    3\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return left\n\n# Test cases\nassert right_insertion([1,2,4,5], 6) == 4\nassert right_insertion([1,2,4,5], 3) == 3"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.match(pattern, text))\n\n# Test cases\ndef test_text_match_three():\n    assert not text_match_three(\"ac\")\n    assert not text_match_three(\"ab\")\n    assert not text_match_three(\"abb\")\n    assert text_match_three(\"abbb\")\n    assert not text_match_three(\"abbbc\")\n    assert text_match_three(\"abbbbc\")\n    assert not text_match_three(\"abbbbbc\")\n    assert text_match_three(\"abbbbbbc\")\n    assert not text_match_three(\"abbbbbbbc\")\n    assert not text_match_three(\"abbbbbbbbc\")\n\ntest_text_match_three()"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of strings.\n        string (str): The input string.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    return tuple(lst + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index contains even numbers in a given list.\n\n    Args:\n        lst (list): The input list to be checked.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3, 2, 1]) == False\nassert even_position([2, 4, 6, 8]) == True\nassert even_position([2, 4, 5, 6, 8]) == False\nassert even_position([2, 4, 6, 8, 10]) == True\nassert even_position([2, 4, 6, 8, 10, 12]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]) == False\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26]) == False\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30]) == False\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32]) == True\nassert even_position([2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The number of lists in the given list.\n\n    Examples:\n    >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    4\n    >>> count_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]])\n    3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Testing the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 3"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array, or -1 if not found.\n    \"\"\"\n    left, right = 0, len(arr) - 1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            if mid == len(arr) - 1 or arr[mid + 1] != target:\n                return mid\n            else:\n                left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 2, 3, 3, 3, 4], 3) == 4\nassert last([1, 2, 3, 3, 3, 4], 5) == -1\nassert last([1, 2, 3, 3, 3, 4], 1) == 0\nassert last([1, 2, 3, 3, 3, 4], 4) == 5\nassert last([1, 2, 3, 3, 3, 4], 2) == 1\nassert last([1, 2, 3, 3, 3, 4], 3) == 4"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(string):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'^a.*b$'\n    return bool(re.match(pattern, string))\n\n# Test cases"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n\n    Args:\n        dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n        int: The sum of all values in the dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b':200, 'c':300})\n        600\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Finds the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Raises:\n    ValueError: If either l or r is not a positive integer.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    25\n    \"\"\"\n    if not isinstance(l, int) or not isinstance(r, int) or l <= 0 or r <= 0:\n        raise ValueError(\"Both l and r must be positive integers.\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculates the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([4, 5, 6])\n    15\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Testing the function\nassert _sum([1, 2, 3]) == 6\nassert _sum([4, 5, 6]) == 15"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits in a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(16, 0)\n        16\n        >>> left_rotate(16, 32)\n        16\n    \"\"\"\n    if not isinstance(num, int) or not isinstance(d, int):\n        raise ValueError(\"Both the number and the rotation amount should be integers.\")\n\n    if num.bit_length() > 32:\n        raise ValueError(\"The number should be a 32-bit integer.\")\n\n    d = d % 32  # Ensure d is within the range of 32 bits\n\n    # Perform left rotation\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n\n    Examples:\n    >>> remove_all_spaces('python  program')\n    'pythonprogram'\n    >>> remove_all_spaces('  hello   world  ')\n    'helloworld'\n    >>> remove_all_spaces('no spaces here')\n    'nospaceshere'\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Testing the function\nassert remove_all_spaces('python  program') == 'pythonprogram'\nassert remove_all_spaces('  hello   world  ') == 'helloworld'\nassert remove_all_spaces('no spaces here') == 'nospaceshere'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Counts the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    if a == b and b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0\n\n# Testing the function\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    sqrt = math.isqrt(num)\n    return sqrt * sqrt == num\n\n# Test cases\nassert not is_perfect_square(10)\nassert is_perfect_square(0)\nassert is_perfect_square(1)\nassert is_perfect_square(4)\nassert is_perfect_square(9)\nassert is_perfect_square(16)\nassert is_perfect_square(25)\nassert is_perfect_square(36)\nassert is_perfect_square(49)\nassert is_perfect_square(64)\nassert is_perfect_square(81)\nassert is_perfect_square(100)\nassert is_perfect_square(121)\nassert is_perfect_square(144)\nassert is_perfect_square(169)\nassert is_perfect_square(196)\nassert is_perfect_square(225)\nassert is_perfect_square(256)\nassert is_perfect_square(289)\nassert is_perfect_square(324)\nassert is_perfect_square(361)\nassert is_perfect_square(400)\nassert is_perfect_square(441)\nassert is_perfect_square(484)\nassert is_perfect_square(529)\nassert is_perfect_square(576)\nassert is_perfect_square(625)\nassert is_perfect_square(676)\nassert is_perfect_square(729)\nassert is_perfect_square(784)\nassert is_perfect_square(841)\nassert is_perfect_square(900)\nassert is_perfect_square(961)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([-1, -2, -3]) == False\nassert is_product_even([-2, -4, -6]) == True\nassert is_product_even([0, 1, 2]) == False\nassert is_product_even([0, 0, 0]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists of integers.\n\n    Returns:\n    list: The list in the input list of lists with the highest sum of elements.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9], 10])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input must be a list of lists.\n    \"\"\"\n\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_sum = float('-inf')\n    max_sum_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_sum_list = sublist\n\n    return max_sum_list"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Finds the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number in the list, or None if no odd number is found.\n\n    Examples:\n        >>> first_odd([1, 3, 5])\n        1\n        >>> first_odd([2, 4, 6])\n        None\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Testing the function\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tuple_nums, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tuple_nums (tuple): The input tuple of numbers.\n        k (int): The number to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tuple_nums\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((10, 4, 5, 6, 8), 10) == True\nassert check_K((10, 4, 5, 6, 8), 20) == False\nassert check_K((10, 4, 5, 6, 8), 0) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 2, 4)) == False\nassert check_smaller((1, 2, 3), (1, 2, 3)) == False\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 2)) == True\nassert check_smaller((1, 2, 3), (0, 1, 3)) == True"}
