{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list of shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): The list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: The n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n cannot be greater than the length of the numbers list.\")\n\n    # Use heapq.nlargest to find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    # Reverse the list to get the numbers in descending order\n    largest_numbers.reverse()\n\n    return largest_numbers"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    # XOR the two numbers to find the positions where they differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    set_bit_count = bin(xor_result).count('1')\n\n    # If the count is 1, the numbers differ at one bit position only\n    return set_bit_count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Raises:\n    ValueError: If the input string is empty.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"\")\n    Traceback (most recent call last):\n        ...\n    ValueError: Input string is empty.\n    \"\"\"\n\n    if not string:\n        raise ValueError(\"Input string is empty.\")\n\n    rotations = 1\n    while string[1:] + string[0] != string:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the index of the first occurrence of the character\n    first_index = string.find(char)\n\n    # Find the index of the last occurrence of the character\n    last_index = string.rfind(char)\n\n    # Remove the first occurrence of the character\n    modified_string = string[:first_index] + string[first_index+1:]\n\n    # Remove the last occurrence of the character\n    modified_string = modified_string[:last_index] + modified_string[last_index+1:]\n\n    return modified_string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n\n    \"\"\"\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (int or float): The length of the base of the triangular prism.\n    height (int or float): The height of the triangular prism.\n    length (int or float): The length of the side of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative or zero.\n\n    Examples:\n    >>> find_Volume(10, 8, 6)\n    240.0\n    >>> find_Volume(5, 5, 5)\n    125.0\n    \"\"\"\n    if base <= 0 or height <= 0 or length <= 0:\n        raise ValueError(\"All input parameters must be positive.\")\n\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Function to check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into words using underscore as the delimiter\n    words = input_string.split('_')\n\n    # Check if all words are lowercase\n    for word in words:\n        if not word.islower():\n            return False\n\n    return True\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the square.\n\n    Returns:\n    int or float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(2.5)\n    10.0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n    \"\"\"\n    clean_chars = [char for char in string1 if char not in string2]\n    return ''.join(clean_chars)\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The array of integers to be checked.\n\n    Returns:\n    bool: True if the array contains duplicate elements, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Convert the number to a string and split it into individual digits\n    digits = [int(digit) for digit in str(num)]\n\n    # Check if the product of the digits is equal to the sum of the digits\n    if sum(digits) != 0 and sum(digits) * sum(digits) == num:\n        return True\n    else:\n        return False\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse = int(str(num)[::-1])  # Reverse the number\n    if num == reverse * 2 - 1:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    Args:\n    digits (list): A list of digits.\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and convert it to an integer\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(5, 7) == False\nassert opposite_Signs(-3, -9) == True\nassert opposite_Signs(0, 0) == False"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            digit_sum = sum(int(digit) for digit in substring)\n            if digit_sum == len(substring):\n                count += 1\n    return count\n\n# Test cases\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list is empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    tuple_list (list): A list of tuples.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Raises:\n    ValueError: If the input is not a list of tuples.\n\n    Examples:\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    \"\"\"\n\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples\")\n\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1, -2, 3, -4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    \"\"\"\n    bell = [1]\n    for i in range(1, n+1):\n        curr_row = [1]\n        for j in range(1, i+1):\n            curr_row.append(curr_row[-1] + bell[-j])\n        bell.append(curr_row[-1])\n    return bell[-1]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 1:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        elif not increasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 2, 4]) == True\nassert is_monotonic([1, 3, 2, 4]) == False\nassert is_monotonic([4, 2, 3, 1]) == False\nassert is_monotonic([1]) == True\nassert is_monotonic([]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    lst (list): The main list to be checked.\n    sublst (list): The sublist to be checked for presence in the main list.\n\n    Returns:\n    bool: True if the sublist is present in the main list, False otherwise.\n    \"\"\"\n    return sublst in lst\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all tuples have equal length.\n\n    Args:\n    tuples (list): A list of tuples.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test cases\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def get_next_gap(gap):\n        \"\"\"\n        Calculates the next gap value for the comb sort algorithm.\n\n        Parameters:\n        gap (int): The current gap value.\n\n        Returns:\n        int: The next gap value.\n\n        \"\"\"\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    gap = len(lst)\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                swapped = True\n\n    return lst\n\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(num ** 0.5) + 1):\n        j = (num - i**2) ** 0.5\n        if j.is_integer():\n            return True\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == True\nassert dif_Square(13) == False\nassert dif_Square(25) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns):\n    \"\"\"\n    Check whether the patterns follow the sequence given in the patterns array.\n\n    Args:\n    patterns (list): A list of patterns to check.\n\n    Returns:\n    bool: True if the patterns follow the sequence, False otherwise.\n    \"\"\"\n    for i in range(len(patterns) - 1):\n        if patterns[i] != patterns[i+1]:\n            return False\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\",\"green\",\"green\"]) == True\nassert is_samepatterns([\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"blue\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n    tuples_list (list): A list of tuples.\n    k (int): The divisor.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        if all(elem % k == 0 for elem in t):\n            result.append(t)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Initialize the sum of odd-indexed digits and the sum of even-indexed digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through the digits of the number\n    for i, digit in enumerate(number_str):\n        # Add the digit to the appropriate sum based on its index\n        if i % 2 == 0:\n            even_sum += int(digit)\n        else:\n            odd_sum += int(digit)\n\n    # Check if the difference between the sums is divisible by 11\n    return abs(odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to be calculated.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(1)\n    1\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n\n    volume = (4/3) * math.pi * (radius ** 3)\n    return volume\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Parameters:\n    n (int): The position of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]  # Initial sequence values\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n\n    surface_area = 4 * math.pi * radius**2\n    return surface_area\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Function to find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Test the function\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> closest_num(11)\n    10\n    >>> closest_num(5)\n    4\n    >>> closest_num(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than 0.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0.\")\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n\n    longest_len = 0\n    for word in words:\n        word_len = len(word)\n        if word_len > longest_len:\n            longest_len = word_len\n\n    return longest_len\n\n# Test the function\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n    lst (list): A list of string values.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for string in lst:\n        if substring in string:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that alternates between even and odd digits.\n    For example, 1212121 is undulating as it has alternating even and odd digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) % 2 == int(num_str[i-1]) % 2:\n            return False\n    return True\n\n# Test the function\nassert is_undulating(1212121) == True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int: The result of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    str: The first value of the tuple with the smallest second value.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]\n\n# Test the function\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> find_min_length([[1], [1, 2]])\n    1\n    >>> find_min_length([[1, 2], [3, 4, 5], [6]])\n    1\n    >>> find_min_length([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Empty list of lists provided.\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lst:\n        raise ValueError(\"Empty list of lists provided.\")\n\n    return min(len(sublist) for sublist in lst)"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n\n    Parameters:\n    n (int): The integer for which the number of divisors is to be found.\n\n    Returns:\n    int: The number of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for item in flattened_list:\n        if item in frequency_dict:\n            frequency_dict[item] += 1\n        else:\n            frequency_dict[item] = 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    if not numbers:\n        return 0\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)\n\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(num):\n    if num == 0:\n        return '0'\n    binary = ''\n    while num > 0:\n        binary = str(num % 2) + binary\n        num = num // 2\n    return binary\n\n# Test cases\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    \"\"\"\n    Check if a number is a palindrome.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is a palindrome, False otherwise.\n    \"\"\"\n    return str(n) == str(n)[::-1]\n\n\ndef next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Parameters:\n    n (int): The specified integer.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    if n < 10:\n        return n\n\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find.\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    IndexError: If the index is out of range.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([1, 2, 3, 4, 5], 5)\n    5\n    >>> kth_element([10, 20, 30, 40, 50], 10)\n    Traceback (most recent call last):\n        ...\n    IndexError: list index out of range\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"list index out of range\")\n    return arr[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    parts = snake_str.split('_')\n    camel_str = parts[0] + ''.join(word.capitalize() for word in parts[1:])\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of the integers 1 to n with m cycles.\n\n    Parameters:\n    n (int): The upper limit of the range of integers.\n    m (int): The number of cycles.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(4, 2)\n    10\n    >>> eulerian_num(5, 3)\n    35\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    This function counts the number of true booleans in the given list.\n\n    Parameters:\n    lst (list): A list of boolean values.\n\n    Returns:\n    int: The count of true booleans in the list.\n\n    Examples:\n    >>> count_true_booleans([True, False, True])\n    2\n    >>> count_true_booleans([False, False, False])\n    0\n    >>> count_true_booleans([True, True, True])\n    3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Test cases\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tup (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tup + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The number of numbers with an odd value after the given number of rotations.\n\n    Examples:\n    >>> odd_Equivalent(\"011001\", 6)\n    3\n    >>> odd_Equivalent(\"101010\", 3)\n    0\n    \"\"\"\n\n    def rotate_binary_string(string):\n        \"\"\"\n        Rotate a binary string by one position to the left.\n\n        Parameters:\n        string (str): The binary string to be rotated.\n\n        Returns:\n        str: The rotated binary string.\n        \"\"\"\n        return string[1:] + string[0]\n\n    def binary_string_to_decimal(string):\n        \"\"\"\n        Convert a binary string to its decimal representation.\n\n        Parameters:\n        string (str): The binary string to be converted.\n\n        Returns:\n        int: The decimal representation of the binary string.\n        \"\"\"\n        return int(string, 2)\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string)\n        decimal_value = binary_string_to_decimal(binary_string)\n        if decimal_value % 2 != 0:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n    - nested_lists: A list of lists, where each inner list contains integers.\n\n    Returns:\n    - A list of common elements found in all the inner lists.\n\n    Example:\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): The input tuple of positive integers.\n\n    Returns:\n        int: The converted single integer.\n\n    Raises:\n        TypeError: If the input is not a tuple or contains non-positive integers.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple\")\n\n    for num in t:\n        if not isinstance(num, int) or num <= 0:\n            raise TypeError(\"Tuple must contain only positive integers\")\n\n    return int(''.join(map(str, t)))\n\n# Test the function\nassert tuple_to_int((1, 2, 3)) == 123"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n\n    Returns:\n    int: The element that appears only once in the array.\n\n    Raises:\n    ValueError: If the input array is empty or contains more than one element that appears only once.\n\n    \"\"\"\n\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty\")\n\n    if len(arr) == 1:\n        return arr[0]\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n# Test cases\nassert search([1, 1, 2, 2, 3]) == 3\nassert search([1, 1, 2, 3, 3, 4, 4, 8, 8, 9, 9, 10]) == 2\nassert search([1]) == 1\nassert search([1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10]) == 10"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n    ValueError: If the input list is empty or if any element in the list is not a tuple.\n\n    Examples:\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    36\n    >>> max_product_tuple([(1, 2), (3, 4), (5, 6)])\n    30\n    >>> max_product_tuple([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> max_product_tuple([(1, 2), (3, 4, 5)])\n    Traceback (most recent call last):\n        ...\n    ValueError: All elements in the list must be tuples.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    for tup in lst:\n        if not isinstance(tup, tuple):\n            raise ValueError(\"All elements in the list must be tuples.\")\n\n    max_product = float('-inf')\n\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][1])\n            if product > max_product:\n                max_product = product\n\n    return max_product"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        divisors_sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                divisors_sum += i\n                if i != num // i:\n                    divisors_sum += num // i\n        return divisors_sum\n\n    amicable_sum = 0\n    for num in range(2, n + 1):\n        if num == sum_proper_divisors(sum_proper_divisors(num)) and num != sum_proper_divisors(num):\n            amicable_sum += num\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    TypeError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+0j)\n    0.0\n    >>> angle_complex(0-1j)\n    -1.5707963267948966\n    \"\"\"\n    if not isinstance(z, complex):\n        raise TypeError(\"Input must be a complex number\")\n\n    angle = cmath.phase(z)\n    return angle\n\n# Test the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n\n        diff = count_zeros - count_ones\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n# Test cases\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the sum of their common divisors.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of the common divisors of a and b.\n    \"\"\"\n    def get_divisors(n):\n        \"\"\"\n        This helper function takes a number as input and returns a list of its divisors.\n\n        Parameters:\n        n (int): The number.\n\n        Returns:\n        list: A list of divisors of n.\n        \"\"\"\n        divisors = []\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisors.append(i)\n        return divisors\n\n    common_divisors = set(get_divisors(a)).intersection(get_divisors(b))\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: Product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = n * (n ** 2 + 1) // 2\n    row_sums = [sum(row) for row in matrix]\n    col_sums = [sum(col) for col in zip(*matrix)]\n    diag_sums = [sum(matrix[i][i] for i in range(n)), sum(matrix[i][n-i-1] for i in range(n))]\n    \n    if all(sums == expected_sum for sums in row_sums + col_sums + diag_sums):\n        return True\n    else:\n        return False\n\n# Test cases\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The item with maximum frequency.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    2\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    freq_dict = {}\n    max_freq = 0\n    max_item = None\n\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string = list(string)\n    start = 0\n    end = len(string) - 1\n\n    while start < end:\n        if string[start].lower() in vowels:\n            while end > start and string[end].lower() not in vowels:\n                end -= 1\n            if start < end:\n                string[start], string[end] = string[end], string[start]\n        start += 1\n\n    return ''.join(string)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World\") == \"Hollo Werld\"\nassert reverse_vowels(\"aeiou\") == \"uoiea\"\nassert reverse_vowels(\"rhythm\") == \"rhythm\"\nassert reverse_vowels(\"\") == \"\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n    \"\"\"\n    return sum([num for num in numbers if num < 0])\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be found.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    ratio = zero_count / non_zero_count\n    return ratio\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(num):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    # Check if num is a power of 2\n    if num & (num - 1) == 0:\n        return True\n\n    # Check if num can be represented as sum of non-zero powers of 2\n    for i in range(1, num):\n        if is_sum_of_powers_of_two(num - i) and is_power_of_two(i):\n            return True\n\n    return False\n\ndef is_power_of_two(num):\n    \"\"\"\n    Check whether the given number is a power of 2.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a power of 2, False otherwise.\n    \"\"\"\n    return num != 0 and (num & (num - 1) == 0)\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    set: A set of numbers extracted from the input list.\n\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        flattened_set.update(sublist)\n    return flattened_set\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n\n    \"\"\"\n\n    def flip(lst, end):\n        \"\"\"\n        Reverses the order of the first 'end' elements in the list.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        end (int): The index up to which the list should be flipped.\n\n        Returns:\n        list: The flipped list.\n\n        \"\"\"\n        start = 0\n        while start < end:\n            lst[start], lst[end] = lst[end], lst[start]\n            start += 1\n            end -= 1\n        return lst\n\n    def find_max_index(lst, end):\n        \"\"\"\n        Finds the index of the maximum element in the list up to 'end'.\n\n        Parameters:\n        lst (list): The list to search.\n        end (int): The index up to which the search should be performed.\n\n        Returns:\n        int: The index of the maximum element.\n\n        \"\"\"\n        max_index = 0\n        for i in range(1, end + 1):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n - 1, 0, -1):\n        max_index = find_max_index(lst, i)\n        lst = flip(lst, max_index)\n        lst = flip(lst, i)\n    return lst\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])\n        3\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n\n    Returns:\n    int: The maximum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((-5, -2, -8, -1))\n    7\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    min_val = arr[0]\n    max_diff = 0\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        elif num - min_val > max_diff:\n            max_diff = num - min_val\n\n    return max_diff"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The coefficient of x.\n    b (int): The coefficient of y.\n    n (int): The desired value.\n\n    Returns:\n    tuple or None: A tuple (x, y) that satisfies ax + by = n, or None if no solution exists.\n\n    \"\"\"\n    # Check if n is divisible by the greatest common divisor (gcd) of a and b\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n\n    # Find the multiplicative inverse of b/gcd modulo a/gcd\n    inverse = pow(b // gcd, -1, a // gcd)\n\n    # Calculate x and y using the Chinese Remainder Theorem\n    x = (n // gcd) * inverse\n    y = (n - a * x) // b\n\n    return x, y"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst (list): The original list.\n        elements_to_remove (list): The elements to be removed from the list.\n\n    Returns:\n        list: The modified list with the specified elements removed.\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(ord('a') + i):\n            count += 1\n    return count\n\n# Test cases\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcde\") == 5\nassert count_char_position(\"Xbcefg\") == 2\nassert count_char_position(\"\") == 0"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length())\n\n# Test cases\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n    lst (list): The list to search for the number.\n    num: The number to count occurrences of.\n\n    Returns:\n    int: The number of occurrences of the given number in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count\n\n# Test cases\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculate the sum of numbers in a list within a specified range.\n\n    Args:\n        lst (list): The input list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n\n    Raises:\n        ValueError: If the start or end indices are out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"Invalid range indices\")\n\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25.0\n    >>> perimeter_pentagon(10)\n    50.0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    perimeter = 5 * side_length\n    return perimeter\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurrence(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The number of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Test the function\nassert count_occurrence(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if len(t) == 0:\n        return False\n\n    first_type = type(t[0])\n    for element in t[1:]:\n        if type(element) != first_type:\n            return False\n\n    return True\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type(()) == False\nassert check_type((1, \"2\", 3)) == False\nassert check_type((1, 2, 3)) == True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Check if the element occurs more than n/2 times\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number for which set bits need to be counted.\n\n    Returns:\n    int: The number of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    \"\"\"\n    Remove characters with odd index values from the given string.\n\n    Args:\n        input_string (str): The input string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return input_string[::2]\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in the given string with the specified character and returns the modified string.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    modified_string = string.replace(' ', character)\n    return modified_string\n\n# Test the function\nassert replace_blank(\"hello people\", '@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Examples:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([1, 2, 3, 4, 5], 3)\n    [3, 4, 5]\n    >>> larg_nnum([10, 20, 30, 40, 50], 1)\n    [50]\n    \"\"\"\n    lst.sort(reverse=True)  # Sort the list in descending order\n    return lst[:n]  # Return the first n items from the sorted list\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    \"\"\"\n    base_area = math.pi * radius**2\n    lateral_area = 2 * math.pi * radius * height\n    return 2 * base_area + lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float or int: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Args:\n        num (int): The number for which even bits need to be set.\n\n    Returns:\n        int: The number with even bits set.\n\n    Examples:\n        >>> even_bit_set_number(10)\n        10\n        >>> even_bit_set_number(11)\n        10\n        >>> even_bit_set_number(12)\n        14\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Apply the mask to set even bits\n    return num | mask"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    count_dict = {}\n    for tup in lst:\n        if tup in count_dict:\n            count_dict[tup] += 1\n        else:\n            count_dict[tup] = 1\n    return count_dict\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings of the input string.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"ab\")\n    2\n    >>> number_of_substrings(\"\")\n    0\n    \"\"\"\n    count = 0\n    length = len(string)\n\n    for i in range(length):\n        for j in range(i+1, length+1):\n            if string[i:j]:\n                count += 1\n\n    return count\n\n# Testing the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Function to find the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The upper limit for the elements in the sequences.\n    n (int): The length of the sequences.\n\n    Returns:\n    int: The number of possible sequences.\n\n    \"\"\"\n\n    # Base case: If n is 1, there is only one possible sequence\n    if n == 1:\n        return 1\n\n    # Initialize a list to store the number of possible sequences for each value of n\n    sequences = [0] * (n + 1)\n\n    # Base case: If n is 2, there are m//2 possible sequences (each element can be 1, 2, ..., m//2)\n    sequences[2] = m // 2\n\n    # Calculate the number of possible sequences for each value of n\n    for i in range(3, n + 1):\n        sequences[i] = (m - 2 * (i - 1)) + 1\n\n    return sequences[n]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified list.\n\n    Raises:\n        ValueError: If either list1 or list2 is empty.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    if not list1 or not list2:\n        raise ValueError(\"Both lists must be non-empty.\")\n\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the input number.\n\n    \"\"\"\n    # Find the square root of the input number\n    sqrt_num = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt_num ** 2 == num:\n        # If the square root is a perfect square, increment it to get the next perfect square\n        next_perfect_square = (sqrt_num + 1) ** 2\n    else:\n        # If the square root is not a perfect square, find the next perfect square by incrementing the square root\n        next_perfect_square = (sqrt_num + 1) ** 2\n\n    return next_perfect_square\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Calculate the maximum sum of increasing subsequence from the start\n    inc_sum = [0] * n\n    inc_sum[0] = arr[0]\n    for i in range(1, peak+1):\n        inc_sum[i] = max(inc_sum[i-1], arr[i])\n\n    # Calculate the maximum sum of decreasing subsequence from the end\n    dec_sum = [0] * n\n    dec_sum[-1] = arr[-1]\n    for i in range(n-2, peak-1, -1):\n        dec_sum[i] = max(dec_sum[i+1], arr[i])\n\n    # Calculate the maximum sum of bitonic subsequence\n    max_sum = [0] * n\n    for i in range(n):\n        max_sum[i] = inc_sum[i] + dec_sum[i] - arr[i]\n\n    return max(max_sum)\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCDAB\")\n    1\n    >>> lps(\"ABBCDAB\")\n    3\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for cl in range(2, n+1):\n        for i in range(n - cl + 1):\n            j = i + cl - 1\n            if s[i] == s[j] and cl == 2:\n                dp[i][j] = 2\n            elif s[i] == s[j]:\n                dp[i][j] = dp[i+1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i+1][j])\n\n    return dp[0][n-1]\n\n\n# Test cases\nassert lps(\"TENS FOR TENS\") == 5\nassert lps(\"ABCDAB\") == 1\nassert lps(\"ABBCDAB\") == 3"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    z (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n\n    Examples:\n    >>> convert(1)\n    (1.0, 0.0)\n    >>> convert(2 + 3j)\n    (3.605551275463989, 0.982793723247329)\n    \"\"\"\n    magnitude = abs(z)\n    angle = cmath.phase(z)\n    return (magnitude, angle)\n\n# Testing the function\nassert convert(1) == (1.0, 0.0)\nassert convert(2 + 3j) == (3.605551275463989, 0.982793723247329)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n    Args:\n    lst (list): The input list.\n    n (int): The length of each combination.\n\n    Returns:\n    list: A list with a tuple for each combination.\n\n    Example:\n    >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n    [('Red',), ('Green',), ('Blue',)]\n    \"\"\"\n    return list(product(lst, repeat=n))\n\n# Test the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than n.\n\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count\n\n# Test the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    tuple: A tuple with the second number and then the first number.\n    \"\"\"\n    return b, a\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple where each element is the maximum of the corresponding elements in the input tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple where each element is the maximum of the corresponding elements in the input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> maximize_elements((1, 3), (4, 5))\n    (4, 5)\n    >>> maximize_elements((1, 3, 2), (4, 5, 9))\n    (4, 5, 9)\n    >>> maximize_elements((1, 3, 2, 10), (4, 5, 9, 1))\n    (4, 5, 9, 10)\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n\n\n# Test the function\nassert maximize_elements((1, 3), (4, 5)) == (4, 5)\nassert maximize_elements((1, 3, 2), (4, 5, 9)) == (4, 5, 9)\nassert maximize_elements((1, 3, 2, 10), (4, 5, 9, 1)) == (4, 5, 9, 10)"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    primes = [2, 3]  # Start with the first two prime numbers\n\n    def is_prime(num):\n        \"\"\"\n        Check if a number is prime.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is prime, False otherwise.\n\n        \"\"\"\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    while len(primes) < n:\n        num = primes[-1] + primes[-2]  # Calculate the next number\n        if is_prime(num):\n            primes.append(num)\n        else:\n            primes[-1] += 1  # Increment the last prime number if it's not prime\n\n    return primes[-1]\n\n\n# Test the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across two tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the result of element-wise division across the input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n    ZeroDivisionError: If any element in the second tuple is zero.\n\n    Examples:\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    >>> division_elements((10, 4, 6, 9), (2, 0, 3, 3))\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n    lst (list): The input list.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two resulting lists.\n\n    Raises:\n    ValueError: If L is greater than the length of the input list.\n\n    Examples:\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of the first part cannot be greater than the length of the input list.\")\n\n    return (lst[:L], lst[L:])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    \"\"\"\n    if not isinstance(human_age, int) or human_age <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test the function\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length ** 2\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_of_squares\n\n# Test the function\nassert square_sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a triangular number that is also a pentagonal number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    92\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    def is_pentagonal(num):\n        \"\"\"\n        Check if a number is pentagonal.\n\n        A pentagonal number is a number that can be represented as n*(3*n-1)/2 for some integer n.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is pentagonal, False otherwise.\n        \"\"\"\n        n = (1 + (24 * num + 1) ** 0.5) / 6\n        return n.is_integer()\n\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is triangular.\n\n        A triangular number is a number that can be represented as n*(n+1)/2 for some integer n.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is triangular, False otherwise.\n        \"\"\"\n        n = (1 + (8 * num + 1) ** 0.5) / 2\n        return n.is_integer()\n\n    count = 0\n    num = 1\n    while count < n:\n        num += 1\n        if is_pentagonal(num) and is_triangular(num):\n            count += 1\n\n    return num"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character whose ASCII value is to be determined.\n\n    Returns:\n    int: The ASCII value of the input character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('1')\n    49\n    >>> ascii_value('$')\n    36\n    \"\"\"\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character\")\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n    \"\"\"\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    count = 0\n    num = 2\n\n    while count < n:\n        sum_of_powers += num ** 5\n        num += 2\n        count += 1\n\n    return sum_of_powers\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in the given list and returns a list of rear elements.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in tuples_list:\n        rear_elements.append(tup[-1])\n    return rear_elements\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> subtract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    subtracted_elements = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return subtracted_elements\n\n# Test the function\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): The positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    # Initialize the sum to 0\n    sum_even_coeff = 0\n\n    # Loop through even indices from 0 to n\n    for k in range(0, n+1, 2):\n        # Calculate the binomial coefficient using the formula C(n, k) = nappa(n, k) / nappa(k, k)\n        binomial_coeff = calculate_binomial_coeff(n, k)\n        sum_even_coeff += binomial_coeff\n\n    return sum_even_coeff\n\n\ndef calculate_binomial_coeff(n, k):\n    \"\"\"\n    This function calculates the binomial coefficient C(n, k) using the formula C(n, k) = nappa(n, k) / nappa(k, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient.\n\n    Raises:\n    ValueError: If n or k is not a non-negative integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0 or not isinstance(k, int) or k < 0:\n        raise ValueError(\"n and k must be non-negative integers\")\n\n    # Calculate the binomial coefficient using the formula C(n, k) = nappa(n, k) / nappa(k, k)\n    binomial_coeff = factorial(n) // (factorial(k) * factorial(n - k))\n\n    return binomial_coeff\n\n\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The factorial of n.\n\n    Raises:\n    ValueError: If n is not a non-negative integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    # Calculate the factorial using a loop\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n\n    return result\n\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i, num in enumerate(arr):\n        if num == element:\n            return True, i\n    return False, -1\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2, 3]) == False\nassert all_unique([]) == True"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtract two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: The subtracted list.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n\n        >>> sub_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        digit_count = num_str.count(digit)\n        if digit_count > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(12234) == False\nassert validate(10000) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The list to be checked.\n        element: The element to compare against.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False\nassert check_element([\"blue\", \"blue\", \"blue\", \"blue\"], 'blue') == True\nassert check_element([1, 1, 1, 1], 1) == True\nassert check_element([], 'any') == True"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check if the string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the input array.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array.\n\n    \"\"\"\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    max_repeated_sum = max(max_sum, total_sum * max(0, k - 2) + max_sum)\n\n    return max_repeated_sum\n\n\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> square_Sum(2)\n    20\n    >>> square_Sum(3)\n    40\n    >>> square_Sum(0)\n    0\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i**2 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    tuple: A tuple containing the length of the longest list and the longest list itself.\n\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for sub_list in lst:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n\n    return max_len, max_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the first number divided by the second number, rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division, rounded down to the nearest integer.\n\n    Example:\n    >>> find(10, 3)\n    3\n    \"\"\"\n    quotient = dividend // divisor\n    return quotient\n\n# Test the function\nassert find(10, 3) == 3"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is less than or equal to 0.\n\n    \"\"\"\n    if side1 <= 0 or side2 <= 0:\n        raise ValueError(\"Both sides of the triangle must be positive.\")\n\n    return math.sqrt(side1**2 + side2**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input heterogeneous list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    max_val = lst[0]\n    for item in lst:\n        if item > max_val:\n            max_val = item\n\n    return max_val\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The count of inversions in the array.\n\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    lst (list): A list of tuples where each tuple contains a name and a numeric value.\n\n    Returns:\n    tuple: A tuple containing the name and the maximum aggregate value.\n\n    \"\"\"\n    aggregates = {}\n    for name, value in lst:\n        if name in aggregates:\n            aggregates[name] += value\n        else:\n            aggregates[name] = value\n\n    max_name = max(aggregates, key=aggregates.get)\n    max_aggregate = aggregates[max_name]\n\n    return max_name, max_aggregate\n\n# Test the function\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): Length of binary sequence divided by 2.\n\n    Returns:\n    float: Count of binary sequences satisfying the condition.\n\n    \"\"\"\n    def count_binary_seq_helper(n, sum_diff, count):\n        if n == 0:\n            return count\n        count = count_binary_seq_helper(n - 1, sum_diff + 2, count * 2)\n        count = count_binary_seq_helper(n - 1, sum_diff - 2, count)\n        return count\n\n    return count_binary_seq_helper(n, 0, 1)\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the depth of the dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    Raises:\n    TypeError: If the input is not a dictionary.\n\n    Examples:\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4, 'l': {'m': {}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4, 'l': {'m': {}}, 'n': 5})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4, 'l': {'m': {}}, 'n': 5, 'o': {'p': {}}})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4, 'l': {'m': {}}, 'n': 5, 'o': {'p': {}}, 'q': 6})\n    4\n    >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}, 'e': 2, 'f': {'g': {}}, 'h': 3, 'i': {'j': {}}, 'k': 4, 'l': {'m': {}}, 'n': 5, 'o': {'p': {}}, 'q': 6, 'r': {'s': {}}})\n    4\n    >>>"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            return word.split()\n    return None\n\n# Test the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n:\n        return 0\n\n    max_sum = 0\n    for j in range(i, n):\n        if arr[j] > arr[i-1] and arr[j] < arr[k]:\n            max_sum = max(max_sum, max_sum_increasing_subseq(arr, n, j+1, k) + arr[j])\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_products):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num_products (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If num_products is greater than the length of either list1 or list2.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num_products > len(list1) or num_products > len(list2):\n        raise ValueError(\"num_products cannot be greater than the length of either list1 or list2.\")\n\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:num_products]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        tuple: A tuple of characters representing the input string.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns the result of setting the left most unset bit.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    int: The result of setting the left most unset bit.\n\n    Examples:\n    >>> set_left_most_unset_bit(10)\n    14\n    >>> set_left_most_unset_bit(0)\n    1\n    >>> set_left_most_unset_bit(15)\n    15\n    \"\"\"\n    # Find the position of the left most unset bit\n    bit_pos = 0\n    while num & (1 << bit_pos):\n        bit_pos += 1\n\n    # Set the left most unset bit\n    return num | (1 << bit_pos)"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive\")\n\n    volume = (math.pi * radius**2 * height) / 3\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test the function\nassert highest_power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        lucas_nums = [2, 1]\n        for i in range(2, n):\n            lucas_nums.append(lucas_nums[i-1] + lucas_nums[i-2])\n        return lucas_nums[-1]\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The list of elements to apply the format string to.\n        format_str (str): The format string to apply.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(item) for item in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*args):\n    if len(args) == 0:\n        return []\n\n    keys = args[0]\n    values = args[1]\n    nested_dict = []\n\n    for i in range(len(keys)):\n        inner_dict = {keys[i]: {values[i]: args[2][i]}}\n        nested_dict.append(inner_dict)\n\n    return nested_dict\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Tests\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    This function takes three numbers as input and returns the median value.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n    num3 (int or float): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n\n    Raises:\n    ValueError: If any of the input numbers are not numeric.\n\n    Examples:\n    >>> median_numbers(25, 55, 65)\n    55.0\n    >>> median_numbers(10, 20, 30)\n    20.0\n    >>> median_numbers(1, 2, 3)\n    2.0\n    \"\"\"\n    # Check if all input numbers are numeric\n    if not all(isinstance(num, (int, float)) for num in (num1, num2, num3)):\n        raise ValueError(\"All input numbers must be numeric.\")\n\n    # Sort the numbers in ascending order\n    sorted_nums = sorted([num1, num2, num3])\n\n    # Return the middle number as the median\n    return sorted_nums[1]\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list of the sums of digits for each number.\n\n    Examples:\n    >>> sum_of_digits([10, 2, 56])\n    [1, 2, 11]\n    \"\"\"\n    digit_sums = []\n    for num in numbers:\n        digit_sum = sum(int(digit) for digit in str(num))\n        digit_sums.append(digit_sum)\n    return digit_sums\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for within the tuple.\n\n    Returns:\n        bool: True if the element exists within the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check parity.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The minimum product of any pair of tuples.\n\n    Raises:\n    ValueError: If the input list is empty or contains tuples of different lengths.\n\n    Examples:\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    >>> min_product_tuple([(3, 4), (5, 6), (7, 8)])\n    12\n    >>> min_product_tuple([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list cannot be empty.\n    >>> min_product_tuple([(2, 3, 4), (5, 6)])\n    Traceback (most recent call last):\n        ...\n    ValueError: All tuples in the list must have the same length.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    first_tuple_length = len(lst[0])\n    for tup in lst:\n        if len(tup) != first_tuple_length:\n            raise ValueError(\"All tuples in the list must have the same length.\")\n\n    min_product = float('inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = lst[i][0] * lst[j][0]\n            if product < min_product:\n                min_product = product\n\n    return min_product"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n\n    return min_val\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list with odd numbers removed.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Test the function\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)\n        [98, 97, 91, 94]\n    \"\"\"\n    return [t[n] for t in lst]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list or set or tuple): The first sequence.\n        seq2 (list or set or tuple): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)\n\n# Test cases\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False\nassert overlapping([1, 2, 3, 4, 5], [3, 4, 5, 6, 7]) == True\nassert overlapping([], [1, 2, 3]) == False\nassert overlapping([1, 2, 3], []) == False\nassert overlapping([1, 2, 3], [3, 4, 5]) == True\nassert overlapping([1, 2, 3], [4, 5, 6]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the pair of integers with the highest product.\n\n    Raises:\n    ValueError: If the input list has less than 2 integers.\n\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must have at least 2 integers.\")\n\n    max_product = float('-inf')\n    pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair\n\n# Test the function\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the element with the maximum length.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The element with the maximum length.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A', 'B', 'C']\n    >>> Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D']])\n    ['A', 'B', 'C', 'D']\n    >>> Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D'],['A','B','C','D','E']])\n    ['A', 'B', 'C', 'D', 'E']\n    \"\"\"\n\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists\")\n\n    return max(lst, key=len)\n\n# Test cases\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D']]) == ['A','B','C','D']\nassert Find_Max([['A'],['A','B'],['A','B','C'],['A','B','C','D'],['A','B','C','D','E']]) == ['A','B','C','D','E']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive even integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive even integer.\n    >>> cube_sum(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive even integer.\n    >>> cube_sum(1.5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive even integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0 or n % 2 != 0:\n        raise ValueError(\"n must be a positive even integer.\")\n\n    return sum(i**3 for i in range(2, 2*n+1, 2))"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple by the given delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to be used for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(element) for element in t)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n    tup (tuple): The input tuple containing strings.\n\n    Returns:\n    list: A list of rear index elements extracted from the strings in the tuple.\n    \"\"\"\n    rear_elements = []\n    for string in tup:\n        rear_elements.append(string[-1])\n    return rear_elements\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n    lst (list): The input list of sublists.\n    element: The element to count in the sublists.\n\n    Returns:\n    int: The count of sublists containing the element.\n\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters out odd numbers from a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n    \"\"\"\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the elementwise and of the input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    >>> and_tuples((1, 2, 3), (4, 5, 6))\n    (4, 4, 2)\n    >>> and_tuples((1, 2, 3), (4, 5))\n    ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(x & y for x, y in zip(t1, t2))\n\n# Test cases\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3), (4, 5, 6)) == (4, 4, 2)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes in the coefficients of a parabola (a, b, c) and returns the directrix of the parabola.\n\n    Parameters:\n    a (int or float): Coefficient of x^2.\n    b (int or float): Coefficient of x.\n    c (int or float): Constant term.\n\n    Returns:\n    int or float: The directrix of the parabola.\n\n    Raises:\n    ValueError: If the parabola is not defined.\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"Parabola is not defined.\")\n\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"Parabola has no directrix.\")\n\n    directrix = -b / (2*a)\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    base1 (float): Length of the first base of the trapezium.\n    base2 (float): Length of the second base of the trapezium.\n    height (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values are negative or if the bases are not parallel.\n\n    \"\"\"\n    if base1 < 0 or base2 < 0 or height < 0:\n        raise ValueError(\"Input values cannot be negative.\")\n\n    if base1 != base2:\n        raise ValueError(\"The bases of the trapezium must be parallel.\")\n\n    median = height * (base1 + base2) / (2 * base1)\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The array of numbers.\n    num (int or float): The number to compare against the array elements.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    return all(element < num for element in arr)\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The number for which the last digit needs to be found.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n    \"\"\"\n    return ''.join([char for index, char in enumerate(string) if index % 2 == 0])\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    if not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"All elements in the list must be integers\")\n\n    joined_num = int(''.join(map(str, numbers)))\n    return joined_num\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the position of the first adverb, the adverb itself, and the original sentence.\n\n    \"\"\"\n    adverbs = ['clearly', 'often', 'always', 'never', 'suddenly']  # Example list of adverbs\n\n    for word in sentence.split():\n        if word.lower() in adverbs:\n            position = sentence.index(word)\n            return position, position + len(word), word, sentence\n\n    return None\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly', 'clearly!! we can see the sky')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The length of one side of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is not a positive integer.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Size must be a positive integer.\n    \"\"\"\n    if not isinstance(size, int) or size <= 0:\n        raise ValueError(\"Size must be a positive integer.\")\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = tuple(a * b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Parameters:\n    nums (list): List of numbers.\n\n    Returns:\n    list: List of cubes of individual elements in the input list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    perrin_numbers = [3, 0, 2]\n    while len(perrin_numbers) < n + 1:\n        perrin_numbers.append(perrin_numbers[-1] + perrin_numbers[-2])\n\n    return sum(perrin_numbers[:n])\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of specified size from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The desired size of the extracted strings.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [string for string in string_list if len(string) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string without any whitespaces.\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    factors = [i for i in range(1, n+1) if n % i == 0 and i % 2 == 0]\n    return sum(factors)\n\n# Test cases\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number == 2:\n        return False\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False\n\n# Test cases\nassert check_month_number(5) == True\nassert check_month_number(2) == False\nassert check_month_number(13) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_string = string[::-1]\n        reversed_list.append(reversed_string)\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def find_min_sublist(lst):\n    \"\"\"\n    Find the sublist with the minimum length.\n\n    Args:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: The sublist with the minimum length.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> find_min_sublist([[1], [1, 2], [1, 2, 3]])\n    [1]\n    >>> find_min_sublist([[1, 2], [3, 4], [5, 6, 7]])\n    [1, 2]\n    >>> find_min_sublist([])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    min_sublist = [sublist for sublist in lst if len(sublist) == min_length][0]\n\n    return min_sublist\n\n# Test cases\nassert find_min_sublist([[1], [1, 2], [1, 2, 3]]) == [1]\nassert find_min_sublist([[1, 2], [3, 4], [5, 6, 7]]) == [1, 2]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(5.5, 3.2)\n    17.1\n    >>> rectangle_area(-5, 10)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length and width must be positive.\n    \"\"\"\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be positive.\")\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n    \"\"\"\n    result = ''\n    for char in string:\n        if not char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n\ndef test_Extract():\n    assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\n\ntest_Extract()"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result += [x + [lst[i]] for x in result]\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product of a subarray.\n\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_product = arr[0]\n    min_product = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        if max_product > current_product:\n            current_product = max_product\n\n    return current_product\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n\n    # Initialize the maximum product to the smallest possible value\n    max_product = float('-inf')\n\n    # Iterate through the array\n    for i in range(len(arr)):\n        current_product = 1\n        for j in range(i, len(arr)):\n            # Check if the current subsequence is increasing\n            if arr[j] > arr[i]:\n                current_product *= arr[j]\n                max_product = max(max_product, current_product)\n\n    return max_product\n\n# Test the function\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple with the pairwise addition of neighboring elements.\n\n    Raises:\n    ValueError: If the input is not a tuple or if it is an empty tuple.\n\n    Examples:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise((1,))\n    (1,)\n    >>> add_pairwise(())\n    Traceback (most recent call last):\n        ...\n    ValueError: Input is an empty tuple.\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise ValueError(\"Input is not a tuple.\")\n    if len(t) == 0:\n        raise ValueError(\"Input is an empty tuple.\")\n\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] + t[i+1])\n    return tuple(result)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array 'arr' and a number 'n' as input and returns the product of the array elements modulo 'n'.\n\n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The modulo number.\n\n    Returns:\n    int: The product of the array elements modulo 'n'.\n\n    Example:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n\n    return product\n\n# Test the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The input list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    diff = lst[1] - lst[0]\n    for i in range(1, len(lst) - 1):\n        if lst[i + 1] - lst[i] != diff:\n            return False\n\n    return True\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 5, 7, 9]) == True\nassert check_Consecutive([2, 4, 6, 8, 10]) == True\nassert check_Consecutive([1, 2, 4, 5, 6]) == False\nassert check_Consecutive([1, 2, 3, 5, 6]) == False\nassert check_Consecutive([1]) == False\nassert check_Consecutive([]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    tuple_list1 (list): The first tuple list.\n    tuple_list2 (list): The second tuple list.\n\n    Returns:\n    set: The set of tuples that are present in both tuple_list1 and tuple_list2.\n\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a given character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character with.\n\n    Returns:\n        str: The modified string with replaced characters.\n\n    Examples:\n        >>> replace_char(\"polygon\", 'y', 'l')\n        'pollgon'\n        >>> replace_char(\"hello world\", 'o', 'a')\n        'hella warld'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in descending order.\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n\n# Test the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([-1, -2, -3])\n    -4\n    >>> big_sum([0, 0, 0])\n    0\n    \"\"\"\n    if not arr:\n        return 0\n\n    min_val = min(arr)\n    max_val = max(arr)\n\n    return min_val + max_val\n\n# Testing the function\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([-1, -2, -3]) == -4\nassert big_sum([0, 0, 0]) == 0"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert convert_to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The input string with lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    number (int): The number for which the first digit needs to be found.\n\n    Returns:\n    int: The first digit of the input number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer and return it\n    return int(first_digit)\n\n# Test the function\nassert first_digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def split_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A list of odd integers.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert split_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        elif char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string\n\n# Test the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Raises:\n        TypeError: If either num1 or num2 is not an integer.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        6\n        >>> digit_distance_nums(9876, 5678)\n        24\n    \"\"\"\n    if not isinstance(num1, int) or not isinstance(num2, int):\n        raise TypeError(\"Both inputs must be integers.\")\n\n    num1_digits = [int(digit) for digit in str(num1)]\n    num2_digits = [int(digit) for digit in str(num2)]\n\n    # Pad the smaller list with zeros to make both lists equal in length\n    if len(num1_digits) < len(num2_digits):\n        num1_digits.extend([0] * (len(num2_digits) - len(num1_digits)))\n    elif len(num2_digits) < len(num1_digits):\n        num2_digits.extend([0] * (len(num1_digits) - len(num2_digits)))\n\n    # Calculate the per-digit difference and sum them up\n    distance = sum(abs(d1 - d2) for d1, d2 in zip(num1_digits, num2_digits))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the union of elements from both input tuples, sorted in ascending order.\n    \"\"\"\n    union = tuple1 + tuple2  # concatenate the two tuples\n    union = tuple(sorted(set(union)))  # convert to set to remove duplicates, then sort, and convert back to tuple\n    return union\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    max_length = 0\n    for sublist in sublists:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Test cases\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    return re.findall(r'\"([^\"]+)\"', string)\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n\n    Example:\n    >>> count_Pairs([1, 2, 1], 3)\n    2\n    \"\"\"\n\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test the function\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    \"\"\"\n    Split a string into characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Function to get the sum of the digits of a non-negative integer.\n\n    Parameters:\n    num (int): The non-negative integer for which the sum of digits is to be calculated.\n\n    Returns:\n    int: The sum of the digits of the input number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(99999)\n    45\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative\")\n\n    digit_sum = 0\n    while num > 0:\n        digit_sum += num % 10\n        num //= 10\n\n    return digit_sum"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    \"\"\"\n    Remove duplicate numbers from a given number of lists.\n\n    Args:\n    - nums: A list of numbers.\n\n    Returns:\n    - A list of numbers with only two unique elements.\n\n    Example:\n    >>> two_unique_nums([1,2,3,2,3,4,5])\n    [1, 4, 5]\n    \"\"\"\n    unique_nums = list(set(nums))  # Get unique numbers using set\n    return unique_nums[:2]  # Return the first two unique numbers\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub_arr):\n    \"\"\"\n    Check whether a list is sublist of another or not.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to check.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2, 3, 4, 5], [2, 3]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], [6, 7]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The last digit in the factorial of the input number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    4\n    >>> last_digit_factorial(0)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(*lists):\n    if any(len(lst) != len(lists[0]) for lst in lists):\n        raise ValueError(\"All lists must have the same length\")\n\n    interleaved_list = []\n    for items in zip(*lists):\n        interleaved_list.extend(items)\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: The modified nested mixed tuple with uneven elements removed.\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    \"\"\"\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive.\")\n\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge ** 2) / 2\n    surface_area = base_area + lateral_area\n\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is a negative number.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative number\")\n\n    # Calculate the nth Catalan number using the formula: Cn = (2n)! / ((n+1)! * n!)\n    def factorial(num):\n        if num == 0 or num == 1:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    result = factorial(2 * n) // (factorial(n + 1) * factorial(n))\n    return result\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in the given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries, where each dictionary represents an item with 'name' and 'price' keys.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty\")\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    sorted_items = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_items[:n]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list.\n        n (int): The index at which to split the list.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Raises:\n        IndexError: If the index n is out of range for the input list.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36], 2)\n        [5, 6, 52, 36, 12, 10]\n\n        >>> split_Arr([1, 2, 3, 4, 5], 0)\n        [1, 2, 3, 4, 5]\n\n        >>> split_Arr([1, 2, 3, 4, 5], 5)\n        [1, 2, 3, 4, 5]\n    \"\"\"\n    if n < 0 or n >= len(arr):\n        raise IndexError(\"Index out of range\")\n\n    return arr[n:] + arr[:n]\n\n# Testing the function\nassert split_Arr([12,10,5,6,52,36], 2) == [5, 6, 52, 36, 12, 10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n    nums (list): A list of integers.\n\n    Returns:\n    int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if len(nums) == 0:\n        return 0\n\n    min_val = nums[0]\n    max_val = nums[0]\n\n    for num in nums:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    return max_val - min_val\n\n# Test cases\nassert big_diff([1, 2, 3, 4]) == 3\nassert big_diff([10, 2, 5, 100]) == 98\nassert big_diff([5, 5, 5, 5]) == 0\nassert big_diff([]) == 0"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect square numbers between start and end (inclusive).\n\n    Raises:\n        ValueError: If start is greater than end.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n        >>> perfect_squares(100, 200)\n        [121, 144, 169, 196, 225, 256, 289, 324, 361, 400, 441, 484]\n    \"\"\"\n    if start > end:\n        raise ValueError(\"start must be less than or equal to end\")\n\n    perfect_squares_list = []\n    for num in range(start, end+1):\n        if is_perfect_square(num):\n            perfect_squares_list.append(num)\n\n    return perfect_squares_list\n\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if a number is a perfect square.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    if num == 0:\n        return True\n\n    left = 1\n    right = num\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with the first and last elements swapped.\n\n    Examples:\n    >>> swap_list([12, 35, 9, 56, 24])\n    [24, 35, 9, 56, 12]\n    >>> swap_list([])\n    []\n    >>> swap_list([1])\n    [1]\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[-1]] + lst[1:-1] + [lst[0]]\n\n# Testing the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient (n choose k).\n    \"\"\"\n    if k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Using dynamic programming approach to calculate binomial coefficient\n    dp = [[0] * (k + 1) for _ in range(n + 1)]\n    dp[0][0] = 1\n\n    for i in range(1, n + 1):\n        dp[i][0] = 1\n        for j in range(1, k + 1):\n            dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j]\n\n    return dp[n][k]\n\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial co-efficients to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n + i - 1, i) * binomial_coefficient(n + i, i - 1)\n    return total_sum\n\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip_address = '.'.join(cleaned_octets)\n    return cleaned_ip_address\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The difference between the first even and first odd number.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd number.\n\n    Examples:\n    >>> diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])\n    3\n    >>> diff_even_odd([2, 4, 6, 8])\n    0\n    >>> diff_even_odd([1, 3, 5])\n    -2\n    \"\"\"\n\n    even_num = None\n    odd_num = None\n\n    for num in numbers:\n        if num % 2 == 0:\n            even_num = num\n            break\n\n    for num in numbers:\n        if num % 2 != 0:\n            odd_num = num\n            break\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"The list does not contain any even or odd number.\")\n\n    return even_num - odd_num\n\n\n# Test cases\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3\nassert diff_even_odd([2, 4, 6, 8]) == 0\nassert diff_even_odd([1, 3, 5]) == -2"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The index of the element to find.\n\n    Returns:\n    int: The kth element from the merged sorted array.\n\n    Raises:\n    ValueError: If either arr1 or arr2 is empty.\n    IndexError: If k is out of bounds for the merged array.\n\n    \"\"\"\n\n    if not arr1:\n        if k <= len(arr2):\n            return arr2[k-1]\n        else:\n            raise IndexError(\"k is out of bounds for the merged array.\")\n\n    if not arr2:\n        if k <= len(arr1):\n            return arr1[k-1]\n        else:\n            raise IndexError(\"k is out of bounds for the merged array.\")\n\n    if k == 1:\n        return min(arr1[0], arr2[0])\n\n    mid1 = len(arr1) // 2\n    mid2 = len(arr2) // 2\n\n    if arr1[mid1] > arr2[mid2]:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1[:mid1], arr2, k)\n        else:\n            return find_kth(arr1, arr2[mid2+1:], k - mid2 - 1)\n    else:\n        if k <= mid1 + mid2 + 1:\n            return find_kth(arr1, arr2[:mid2], k)\n        else:\n            return find_kth(arr1[mid1+1:], arr2, k - mid1 - 1)\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits, each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to count the number of digits\n    num_str = str(num)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    num_power_sum = sum(int(digit) ** len(num_str) for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return num_power_sum == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    sum_of_numbers = (n * (n + 1)) / 2\n\n    # Calculate the average of the first n natural numbers\n    average = sum_of_numbers / n\n\n    return sum_of_numbers, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test cases\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated character is found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None\n\n# Test cases\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") == None\nassert first_repeated_char(\"aabbcc\") == \"a\"\nassert first_repeated_char(\"\") == None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for the lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n\n    \"\"\"\n    def is_lucid(num):\n        \"\"\"\n        Checks if a number is lucid.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is lucid, False otherwise.\n\n        \"\"\"\n        if num == 1:\n            return True\n        if num % 2 == 0:\n            return False\n\n        while num > 1:\n            if num % 2 == 0:\n                return False\n            num = num // 3 if num % 3 == 0 else num - 1\n\n        return True\n\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n\n    return lucid_numbers\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse words seperated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The reversed string with words separated by spaces.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the integer is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test cases\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Function to find nth bell number.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The nth bell number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Test the function\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Parameters:\n    lst (list): The input list.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: The modified list with the k'th element removed.\n\n    Example:\n    >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n    [1, 1, 3, 4, 4, 5, 1]\n    \"\"\"\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of a matrix.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The index of the column to find the maximum value in.\n\n    Returns:\n        int: The maximum value in the nth column of the matrix.\n\n    Raises:\n        IndexError: If the matrix is empty or the column index is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[1, 2, 3], [4, 5, 6]], 0)\n        4\n    \"\"\"\n    if not matrix:\n        raise IndexError(\"Matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise IndexError(\"Column index out of range\")\n\n    max_val = matrix[0][n]\n    for row in matrix:\n        if row[n] > max_val:\n            max_val = row[n]\n\n    return max_val"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        average = sum(tup) / len(tup)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Args:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple with the element-wise modulo results.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    \"\"\"\n\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(a % b for a, b in zip(t1, t2))\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Function to divide two lists element wise.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n    ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n    >>> div_list([4,5,6],[1, 2, 3])\n    [4.0, 2.5, 2.0]\n\n    >>> div_list([1, 2, 3], [0, 0, 0])\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of list1 and list2 must be equal.\")\n\n    result = []\n    for i in range(len(list1)):\n        try:\n            result.append(list1[i] / list2[i])\n        except ZeroDivisionError:\n            raise\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    nums = ''\n    letters = ''\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The size of the largest subset of numbers where every pair is divisible.\n\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Check if two numbers are divisible.\n\n        Args:\n        a (int): The first number.\n        b (int): The second number.\n\n        Returns:\n        bool: True if the numbers are divisible, False otherwise.\n\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, current_subset, index):\n        \"\"\"\n        Recursive function to find the largest subset of numbers.\n\n        Args:\n        numbers (list): A list of numbers.\n        current_subset (list): The current subset being considered.\n        index (int): The current index in the numbers list.\n\n        Returns:\n        int: The size of the largest subset of numbers where every pair is divisible.\n\n        \"\"\"\n        if index == len(numbers):\n            return len(current_subset)\n\n        # Include the current number in the subset\n        new_subset = current_subset + [numbers[index]]\n        include_size = find_subset(numbers, new_subset, index + 1)\n\n        # Exclude the current number from the subset\n        exclude_size = find_subset(numbers, current_subset, index + 1)\n\n        return max(include_size, exclude_size)\n\n    return find_subset(numbers, [], 0)\n\n# Test the function\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        mid = n // 2\n        median = (merged_list[mid - 1] + merged_list[mid]) / 2\n    else:\n        mid = n // 2\n        median = merged_list[mid]\n    return median\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n    - nums: A list of numbers.\n    - n: The power to raise each number to.\n\n    Returns:\n    - A new list with the n-th power of each number in the input list.\n\n    Example:\n    >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\nassert convert_to_uppercase(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = 0.5 * radius**2 * math.acos(1 - height/radius)\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == 0.7853981633974483\nassert triangle_area(2) == 6.283185307179586"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by underscores and vice versa.\n    \"\"\"\n    return string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Count the number of zeroes in the list\n    zero_count = lst.count(0)\n\n    # Remove all zeroes from the list\n    lst = [num for num in lst if num != 0]\n\n    # Append the counted number of zeroes to the end of the list\n    lst.extend([0] * zero_count)\n\n    return lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculates the sum of XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): The list of numbers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers.\n\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result\n\n# Test the function\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n    return arr\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n    amount (float): The actual amount.\n    expected_amount (float): The expected amount.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -20\u00b0C or greater than 50\u00b0C.\n\n    \"\"\"\n    if velocity > 150 or temperature < -20 or temperature > 50:\n        raise ValueError(\"Invalid input. Wind velocity must be less than or equal to 150 km/h and temperature must be between -20\u00b0C and 50\u00b0C.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (velocity ** 0.16) + 0.3965 * temperature * (velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    325\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 11\nassert is_nonagonal(3) == 325"}
{"task_id": "Mbpp/643", "solution": "import re\n\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    pattern = r'\\Bz\\B'\n    match = re.search(pattern, text)\n    return bool(match)\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonz\") == True\nassert text_match_wordz_middle(\"pythonabc.\") == False\nassert text_match_wordz_middle(\"z\") == False\nassert text_match_wordz_middle(\"z.\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array up to a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position up to which the array should be reversed.\n\n    Returns:\n    list: The reversed array up to the given position.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 2)\n    [2, 1, 3, 4, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    \"\"\"\n    Add a dictionary to the tuple and return the updated tuple.\n\n    Args:\n    t (tuple): The input tuple.\n    d (dict): The input dictionary.\n\n    Returns:\n    tuple: The updated tuple with the dictionary added.\n    \"\"\"\n    return t + (d,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * (n+1) for _ in range(n+1)]\n    \n    for i in range(1, n+1):\n        for j in range(1, n+1):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i-1][j-1]\n    \n    total_cost = dp[n][n]\n    max_average = total_cost / (n*n)\n    \n    return max_average\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\nexpected_output = {'Cierra Vega': (6.2, 70)}\nassert filter_data(students, min_height, min_weight) == expected_output"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    int: The number of indices where the lists have the same values.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    Examples:\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    >>> count_same_pair([1, 2, 3], [4, 5, 6])\n    0\n    >>> count_same_pair([1, 2, 3], [1, 2, 3, 4])\n    Traceback (most recent call last):\n        ...\n    ValueError: Input lists must be of the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: The list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n    ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    >>> sum_list([1, 2, 3], [4, 5])\n    Traceback (most recent call last):\n        ...\n    ValueError: The lengths of the input lists are not equal.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of the input lists are not equal.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n    \"\"\"\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius r and height h.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either r or h is negative.\n\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be positive\")\n\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced by colons.\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array to search.\n        target: The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number, or -1 if it is not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists of the input list.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    >>> sum_Of_Subarray_Prod([4, 5, 6])\n    180\n    \"\"\"\n\n    def sublist_product(sublist):\n        \"\"\"\n        Calculate the product of a sublist.\n\n        Parameters:\n        sublist (list): The input sublist.\n\n        Returns:\n        int: The product of the input sublist.\n        \"\"\"\n        product = 1\n        for num in sublist:\n            product *= num\n        return product\n\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i + 1, len(lst) + 1):\n            sublist = lst[i:j]\n            total_sum += sublist_product(sublist)\n\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number whose middle bits need to be toggled.\n\n    Returns:\n        int: The number with toggled middle bits.\n\n    Raises:\n        ValueError: If the input number is less than 3.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n        >>> toggle_middle_bits(15)\n        15\n    \"\"\"\n    if num < 3:\n        raise ValueError(\"Input number must be greater than or equal to 3\")\n\n    # Calculate the number of bits in the given number\n    num_bits = num.bit_length()\n\n    # Calculate the mask to toggle all bits except the first and last bit\n    mask = (1 << (num_bits - 2)) - 1\n\n    # Toggle the middle bits using the mask\n    toggled_num = num ^ mask\n\n    return toggled_num"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): The sorted list of numbers.\n    value (int or float): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain the sorted order.\n\n    Examples:\n    >>> left_insertion([1, 2, 4, 5], 6)\n    4\n    >>> left_insertion([1, 2, 4, 5], 3)\n    2\n    >>> left_insertion([1, 2, 4, 5], 1)\n    0\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num >= value:\n            return i\n    return len(arr)\n\n# Test cases\nassert left_insertion([1, 2, 4, 5], 6) == 4\nassert left_insertion([1, 2, 4, 5], 3) == 2\nassert left_insertion([1, 2, 4, 5], 1) == 0"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Test cases\nassert check_str(\"annie\") == True\nassert check_str(\"banana\") == False\nassert check_str(\"apple\") == True\nassert check_str(\"elephant\") == False\nassert check_str(\"iguana\") == False"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n    index = 1\n    triangular_number = 1\n\n    while True:\n        digits = len(str(triangular_number))\n        if digits >= n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the input tuple has an odd length.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length\")\n\n    result = {}\n    for i in range(0, len(t), 2):\n        key = t[i]\n        value = t[i+1]\n        result[key] = value\n\n    return result\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) == 0:\n        return False\n\n    first_char = string[0]\n    for char in string:\n        if char != first_char:\n            return False\n\n    return True\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"\") == False\nassert all_Characters_Same(\"aaaaaa\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    # Calculate the height of the equilateral triangle formed by the base of the tetrahedron\n    height = math.sqrt(2/3) * side_length\n\n    # Calculate the area of the base triangle\n    base_area = (math.sqrt(3) / 4) * side_length**2\n\n    # Calculate the total surface area of the tetrahedron\n    total_area = 4 * base_area + height**2\n\n    return total_area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst (list): The list to be rotated.\n    num_items (int): The number of items to rotate.\n\n    Returns:\n    list: The rotated list.\n\n    Examples:\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    rotated_lst = lst[-num_items:] + lst[:-num_items]\n    return rotated_lst\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(v is None for v in t)\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False\nassert check_none(()) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper() and len(word) > 1:\n            modified_words.append(word[0] + ' ' + word[1:])\n        else:\n            modified_words.append(word)\n    return ' '.join(modified_words)\n\n# Test cases\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"HelloWorld\") == 'Hello World'\nassert capital_words_spaces(\"PythonProgramming\") == 'Python Programming'\nassert capital_words_spaces(\"ThisIsATest\") == 'This Is A Test'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        numbers (list): A list of strings representing numbers.\n\n    Returns:\n        list: A sorted list of numbers.\n\n    Raises:\n        TypeError: If the input is not a list of strings.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    if not isinstance(numbers, list) or not all(isinstance(num, str) for num in numbers):\n        raise TypeError(\"Input must be a list of strings\")\n\n    return sorted(numbers, key=lambda x: int(x))\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Add the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    return lst + list(tup)\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not heapify(arr, i, n):\n            return False\n    return True\n\ndef heapify(arr, i, n):\n    \"\"\"\n    Helper function to heapify a subtree rooted at index i.\n\n    Parameters:\n    arr (list): The input array.\n    i (int): The index of the current root.\n    n (int): The size of the heap.\n\n    Returns:\n    bool: True if the subtree rooted at index i is a min heap, False otherwise.\n    \"\"\"\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[i] > arr[left]:\n        smallest = left\n\n    if right < n and arr[smallest] > arr[right]:\n        smallest = right\n\n    if smallest != i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return heapify(arr, smallest, n)\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 5, 3, 2, 4, 6]) == False\nassert check_min_heap([1, 3, 2, 5, 4, 6]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples representing records.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of tuples representing the minimum k records.\n\n    Raises:\n        ValueError: If the value of k is greater than the length of the records list.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"Value of k cannot be greater than the length of the records list.\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the second element of each tuple\n    return sorted_records[:k]  # Return the first k records\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two numbers.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1])\n        Traceback (most recent call last):\n            ...\n        ValueError: List must have at least two numbers.\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two numbers.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    \"\"\"\n    Count the pairs of reverse strings in the given string list.\n\n    Args:\n    string_list (list): A list of strings.\n\n    Returns:\n    int: The number of pairs of reverse strings in the list.\n    \"\"\"\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == True\nassert is_decimal('123.1') == True\nassert is_decimal('123.111') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([1]) == True\nassert unique_Element([]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    else:\n        return False\n\n# Test cases\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty or the size is less than 2.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((4, 9, 15, 12, 2, 11), 6)\n    1\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array size must be at least 2\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff\n\n# Test cases\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1\nassert find_min_diff((4, 9, 15, 12, 2, 11), 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of digits in the string.\n\n    Examples:\n    >>> number_ctr('program2bedone')\n    1\n    >>> number_ctr('12345')\n    5\n    >>> number_ctr('abcdef')\n    0\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test cases\nassert number_ctr('program2bedone') == 1\nassert number_ctr('12345') == 5\nassert number_ctr('abcdef') == 0"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test cases\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of tuples, where each tuple contains two consecutive items from the input list.\n\n    Example:\n    >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n    [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to 'sum'.\n\n    Args:\n    - nums: A list of numbers.\n    - target_sum: The target sum.\n\n    Returns:\n    - The count of pairs whose sum is equal to 'sum'.\n\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target_sum - num\n        count += num_counts.get(complement, 0)\n        num_counts[num] = num_counts.get(num, 0) + 1\n\n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    # Calculate the sum of the first n odd natural numbers\n    odd_sum = sum(range(1, 2*n, 2))\n\n    # Calculate the sum of the fourth power of the first n odd natural numbers\n    fourth_power_sum = sum(i**4 for i in range(1, 2*n, 2))\n\n    return fourth_power_sum\n\n# Test the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = set(['(', '[', '{'])\n    closing_brackets = set([')', ']', '}'])\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack[-1] != bracket_pairs[char]:\n                return False\n            stack.pop()\n\n    return not stack\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"({[)]}\") == False\nassert check_expression(\"{[()]}\") == True\nassert check_expression(\"{[}]\") == False"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def find_occurrence_position(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n    string (str): The main string to search within.\n    substring (str): The substring to find within the main string.\n\n    Returns:\n    tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n          If there is no match, returns None.\n\n    \"\"\"\n    if substring not in string:\n        return None\n\n    first_occurrence = string.index(substring)\n    last_occurrence = string.rindex(substring)\n\n    return substring, first_occurrence, last_occurrence\n\n# Test the function\nassert find_occurrence_position('python programming, python language', 'python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([1,3,5,7,9]) == True\nassert odd_position([2,4,6,8,10]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of non-repeated elements.\n\n    Raises:\n    TypeError: If the input is not a list.\n\n    Examples:\n    >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n    21\n    >>> find_sum([])\n    0\n    >>> find_sum([1, 1, 1, 1])\n    0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    count_dict = {}\n    for num in lst:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    non_repeated_sum = 0\n    for num, count in count_dict.items():\n        if count == 1:\n            non_repeated_sum += num\n\n    return non_repeated_sum"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] == lst[i-1]:\n            current_sublist.append(lst[i])\n        else:\n            result.append(current_sublist)\n            current_sublist = [lst[i]]\n\n    result.append(current_sublist)\n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples_list):\n    result = []\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            result.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n    return result\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10) == True"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculates the sum of all odd length subarrays of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    >>> odd_length_sum([1, 2, 3, 4, 5])\n    35\n    >>> odd_length_sum([1, 2, 3, 4, 5, 6])\n    46\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i + 1, n + 1, 2):\n            result += sum(arr[i:j])\n\n    return result\n\n# Test cases\nassert odd_length_sum([1, 2, 4]) == 14\nassert odd_length_sum([1, 2, 3, 4, 5]) == 35\nassert odd_length_sum([1, 2, 3, 4, 5, 6]) == 46"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_num = None\n    odd_num = None\n    \n    for num in lst:\n        if num % 2 == 0:\n            if even_num is None:\n                even_num = num\n            else:\n                even_num *= num\n        else:\n            if odd_num is None:\n                odd_num = num\n            else:\n                odd_num *= num\n    \n    if even_num is None or odd_num is None:\n        return None\n    else:\n        return even_num * odd_num\n\n# Test cases\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert mul_even_odd([2, 4, 6, 8]) == 32\nassert mul_even_odd([1, 3, 5]) is None\nassert mul_even_odd([]) is None"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5)\")\n        (1, 2, 3, 4, 5)\n        >>> tuple_str_int(\"(1, 2, 3, '4', 5)\")\n        Traceback (most recent call last):\n            ...\n        ValueError: Invalid tuple representation.\n    \"\"\"\n    try:\n        # Remove the leading and trailing parentheses\n        stripped_str = tuple_str.strip(\"()\")\n        # Split the string by commas and convert each element to integer\n        int_tuple = tuple(int(element) for element in stripped_str.split(\",\"))\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation.\")\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted to maintain the sorted order.\n\n    Examples:\n    >>> right_insertion([1, 2, 4, 5], 6)\n    4\n    >>> right_insertion([1, 2, 4, 5], 3)\n    2\n    >>> right_insertion([1, 2, 4, 5], 7)\n    4\n    \"\"\"\n    for i, num in enumerate(arr):\n        if num >= value:\n            return i\n    return len(arr)\n\n# Test cases\nassert right_insertion([1, 2, 4, 5], 6) == 4\nassert right_insertion([1, 2, 4, 5], 3) == 2\nassert right_insertion([1, 2, 4, 5], 7) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n    lst (list): A list of strings.\n    string (str): A string.\n\n    Returns:\n    tuple: A new tuple containing the elements from the list and the string.\n    \"\"\"\n    return tuple(lst + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False\nassert even_position([2,4,6,8,10]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with nested tuples removed.\n    \"\"\"\n    return tuple(item for item in tup if not isinstance(item, tuple))\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lists (list): A list of lists.\n\n    Returns:\n        int: The number of lists in the given list of lists.\n    \"\"\"\n    return len(lists)\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The index of the last position of the element in the array, or -1 if the element is not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 2, 3], 2) == 1\nassert last([1, 2, 3], 3) == 2\nassert last([1, 2, 3], 4) == -1\nassert last([1, 2, 2, 3], 2) == 2\nassert last([1, 2, 2, 3], 4) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the input string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r\"a.*b$\"\n    return bool(re.match(pattern, text))\n\n# Test cases\nassert text_starta_endb(\"aabbbb\") == True\nassert text_starta_endb(\"ab\") == True\nassert text_starta_endb(\"a1b\") == True\nassert text_starta_endb(\"aaab\") == True\nassert text_starta_endb(\"bab\") == False\nassert text_starta_endb(\"abab\") == False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): A dictionary containing key-value pairs.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Raises:\n    ValueError: If l is greater than r.\n\n    Examples:\n    >>> sum_in_range(2, 5)\n    8\n    >>> sum_in_range(1, 10)\n    38\n    >>> sum_in_range(10, 1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Lower bound must be less than or equal to the upper bound.\n    \"\"\"\n    if l > r:\n        raise ValueError(\"Lower bound must be less than or equal to the upper bound.\")\n\n    odd_sum = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n\n    Examples:\n    >>> _sum([1, 2, 3])\n    6\n    >>> _sum([-1, 0, 1])\n    0\n    >>> _sum([10, -5, 8, 3])\n    16\n    \"\"\"\n    return sum(arr)\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n    num (int): The number to be rotated.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n\n    Raises:\n    ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n    >>> left_rotate(16, 2)\n    64\n    >>> left_rotate(10, 3)\n    320\n    \"\"\"\n\n    if not isinstance(num, int) or not isinstance(d, int):\n        raise ValueError(\"Both arguments must be integers.\")\n\n    if num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    rotated_num = (num << d) | (num >> (32 - d))\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or a == c or b == c:\n        return 2\n    else:\n        return 0\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0:\n        return True\n\n    left = 1\n    right = num // 2\n\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False\n\n# Test cases\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test the function\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([2, 5, 6]) == False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the list in the list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The list in the list of lists whose sum of elements is the highest.\n\n    Example:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = []\n\n    for sub_list in lst:\n        sub_list_sum = sum(sub_list)\n        if sub_list_sum > max_sum:\n            max_sum = sub_list_sum\n            max_list = sub_list\n\n    return max_list\n\n# Test the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == None\nassert first_odd([2, 3, 4, 5, 6]) == 3\nassert first_odd([4, 6, 8]) == None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n    tup (tuple): The input tuple.\n    k: The value to check if it exists in the tuple.\n\n    Returns:\n    bool: True if the k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of the second tuple is smaller than its corresponding element in the first tuple,\n              False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\n# Test cases\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 2, 4)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == False\nassert check_smaller((1, 2, 3), (4, 5, 6)) == True"}
