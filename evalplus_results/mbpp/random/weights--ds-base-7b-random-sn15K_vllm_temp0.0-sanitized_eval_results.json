{"date": "2025-02-04 12:22", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuples_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuples_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Raises:\n        ValueError: If the input list is empty or contains tuples with less than two elements.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_diff = float('-inf')\n    for i in range(len(tuples_list)):\n        if len(tuples_list[i]) < 2:\n            raise ValueError(\"Tuples in the list should have at least two elements.\")\n        for j in range(i+1, len(tuples_list)):\n            diff = abs(tuples_list[i][0] - tuples_list[j][0])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A list of shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    return list(set(list1) & set(list2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    clean_string = ''.join([char for char in string1 if char not in string2])\n    return clean_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Removes the first and last occurrence of a given character from the string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the first and last occurrence of the character in the string\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n\n    # Remove the first and last occurrence of the character from the string\n    modified_string = string.replace(char, '', 1)\n    modified_string = modified_string.replace(char, '', len(modified_string) - last_index - 1)\n\n    return modified_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): A list of numbers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of the n largest integers, in descending order.\n\n    Raises:\n        ValueError: If n is greater than the length of the numbers list.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n should not be greater than the length of the numbers list.\")\n\n    # Use heapq.nlargest() to find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    # Reverse the list to get descending order\n    largest_numbers.reverse()\n\n    return largest_numbers", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3]]}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = num1 ^ num2\n    return xor_result and not (xor_result & (xor_result - 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the squares of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the squares of each number.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5])\n        [1, 4, 9, 16, 25]\n\n        >>> square_nums([-1, -2, -3, -4, -5])\n        [1, 4, 9, 16, 25]\n\n        >>> square_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words which are at least 4 characters long in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of words that are at least 4 characters long.\n\n    Examples:\n        >>> find_char_long('Please move back to stream')\n        ['Please', 'move', 'back', 'stream']\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n\n    # Calculate the sum of odd-positioned digits and the sum of even-positioned digits\n    odd_sum = sum(int(num_str[i]) for i in range(0, len(num_str), 2))\n    even_sum = sum(int(num_str[i]) for i in range(1, len(num_str), 2))\n\n    # Check if the difference between the sums is divisible by 11\n    return (odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists containing elements.\n\n    Returns:\n        list: A list of common elements found in all the nested lists.\n\n    Raises:\n        TypeError: If the input is not a list of lists.\n\n    Examples:\n        >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n        [18, 12]\n    \"\"\"\n    if not isinstance(nested_lists, list) or not all(isinstance(lst, list) for lst in nested_lists):\n        raise TypeError(\"Input must be a list of lists.\")\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> square_perimeter(10)\n    40.0\n    >>> square_perimeter(0)\n    0.0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to be calculated.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(10)\n    121\n    \"\"\"\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The input matrix.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    return sorted(matrix, key=lambda row: sum(row))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    # Convert the number to a string to reverse it\n    num_str = str(num)\n\n    # Reverse the string representation of the number\n    num_str_reversed = num_str[::-1]\n\n    # Convert the reversed string back to an integer\n    num_reversed = int(num_str_reversed)\n\n    # Check if the number is one less than twice its reverse\n    return num - 1 == 2 * num_reversed", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[1]]}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) is the number of permutations of the integers 1 to n with exactly m cycles.\n\n    Args:\n        n (int): The upper limit of the range of integers.\n        m (int): The number of cycles.\n\n    Returns:\n        int: The Eulerian number a(n, m).\n\n    Raises:\n        ValueError: If n or m is negative.\n\n    Examples:\n        >>> eulerian_num(3, 1)\n        4\n        >>> eulerian_num(4, 2)\n        10\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n\n    if n == 0:\n        return 0\n\n    return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples_list):\n    \"\"\"\n    Check if all tuples in the given list have equal length.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    if not tuples_list:\n        return True\n\n    length = len(tuples_list[0])\n    for tup in tuples_list:\n        if len(tup) != length:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    return 4 * math.pi * radius**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative.\")\n    volume = (4 / 3) * math.pi * (radius ** 3)\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(x, y):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n    x (int): The first integer.\n    y (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite sign, False otherwise.\n    \"\"\"\n    return (x ^ y) < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    This function takes a list of digits as input and returns the largest number that can be formed with those digits.\n\n    Parameters:\n    digits (list): A list of digits.\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n\n    # Convert the sorted digits to a string and join them to form the largest number\n    max_num = int(''.join(map(str, sorted_digits)))\n\n    return max_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    return all(arr[i] <= arr[i+1] for i in range(len(arr)-1)) or all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n\n# Test the function\ndef test_is_monotonic():\n    \"\"\"\n    Test the is_monotonic function.\n    \"\"\"\n    assert is_monotonic([6, 5, 4, 4]) == True\n    assert is_monotonic([1, 2, 3, 4]) == True\n    assert is_monotonic([4, 3, 2, 1]) == True\n    assert is_monotonic([1, 2, 1, 4]) == False\n    assert is_monotonic([1, 3, 2, 4]) == False\n\ntest_is_monotonic()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n        lst (list): The main list to be checked.\n        sublst (list): The sublist to be searched for.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    return sublst in lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 4, 3, 5, 7], [4, 3]]], "plus_fail_tests": [[[], []]]}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to be calculated.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number in which the digits alternate between odd and even.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) % 2 == int(num_str[i-1]) % 2:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212123]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer, returned as an integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The next smallest palindrome of the input integer.\n\n    Raises:\n        ValueError: If the input integer is negative.\n\n    Examples:\n        >>> next_smallest_palindrome(99)\n        101\n        >>> next_smallest_palindrome(1234)\n        1331\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input integer must be non-negative.\")\n\n    # Convert the input integer to a string\n    n_str = str(n)\n\n    # Find the length of the input integer\n    length = len(n_str)\n\n    # Check if the input integer is already a palindrome\n    if n_str == n_str[::-1]:\n        # If it is, increment the middle digit and return the resulting palindrome\n        mid_digit = int(n_str[length // 2])\n        if length % 2 == 0:\n            incremented_mid_digit = mid_digit + 1\n        else:\n            incremented_mid_digit = mid_digit\n        return int(n_str[:length // 2] + str(incremented_mid_digit) + n_str[length // 2:])\n\n    # Find the first digit that is smaller than the previous digit\n    for i in range(length // 2):\n        if int(n_str[i]) < int(n_str[length - i - 1]):\n            break\n\n    # Increment the digit at the current position\n    incremented_digit = int(n_str[i]) + 1\n\n    # Create the resulting palindrome by replacing the current digit with the incremented digit\n    palindrome = int(n_str[:i] + str(incremented_digit) + n_str[i + 1:])\n\n    # If the resulting palindrome is smaller than the input integer, return it\n    if palindrome < n:\n        return palindrome\n\n    # If the resulting palindrome is equal to the input integer, increment the middle digit and return the resulting palindrome\n    if length % 2 == 0:\n        incremented_mid_digit = int(n_str[length // 2]) + 1\n    else:\n        incremented_mid_digit = int(n_str[length // 2])\n    return int(n_str[:length // 2] + str(incremented_mid_digit) + n_str[length // 2:])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[0]]}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    int: The length of the longest word.\n    \"\"\"\n    longest_length = 0\n    for word in words:\n        word_length = len(word)\n        if word_length > longest_length:\n            longest_length = word_length\n    return longest_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n\n        >>> smallest_num([])\n        Traceback (most recent call last):\n            ...\n        ValueError: Input list is empty.\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list is empty.\")\n    return min(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    # Initialize the list to store Bell numbers\n    bell = [0] * (n + 1)\n\n    # Base case\n    bell[0] = 1\n\n    # Calculate the Bell numbers\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] * (i + 1) // i\n\n    return bell[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0]]}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Raises:\n    ValueError: If n is less than or equal to 1.\n\n    Examples:\n    >>> closest_num(11)\n    10\n    >>> closest_num(10)\n    9\n    >>> closest_num(1)\n    Traceback (most recent call last):\n        ...\n    ValueError: n should be greater than 1.\n    \"\"\"\n    if n <= 1:\n        raise ValueError(\"n should be greater than 1.\")\n    return n - 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n\n        >>> multiply_num([])\n        Traceback (most recent call last):\n        ...\n        ValueError: List is empty.\n\n        >>> multiply_num(10)\n        Traceback (most recent call last):\n        ...\n        TypeError: Input is not a list.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input is not a list.\")\n    if len(numbers) == 0:\n        raise ValueError(\"List is empty.\")\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        sequence = [1, 1]\n        for i in range(2, n):\n            sequence.append(sequence[sequence[i-1]-1] + sequence[i-sequence[i-1]])\n        return sequence[-1]\n\n# Test the function\ndef test_sequence():\n    assert newman_conway(10) == 6\n\ntest_sequence()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Args:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(n**0.5) + 1):\n        j = int((n - i*i) ** 0.5)\n        if i*i + j*j == n:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[991]]}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the comb sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> comb_sort([5, 15, 37, 25, 79])\n    [5, 15, 25, 37, 79]\n    \"\"\"\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    Raises:\n    ValueError: If any of the input parameters are negative.\n\n    \"\"\"\n    if base < 0 or height < 0 or length < 0:\n        raise ValueError(\"Input parameters cannot be negative.\")\n\n    volume = (base * height * length) / 2\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the number of divisors of 'n'.\n\n    Parameters:\n    n (int): The input integer.\n\n    Returns:\n    int: The number of divisors of 'n'.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists with sorted sublists.\n\n    Examples:\n        >>> sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Args:\n        a (int or float): The base number.\n        b (int or float): The exponent.\n\n    Returns:\n        int or float: The value of 'a' raised to the power 'b'.\n\n    Raises:\n        ValueError: If 'b' is negative.\n\n    Examples:\n        >>> power(3, 4)\n        81\n        >>> power(2, 3)\n        8\n        >>> power(5, 0)\n        1\n    \"\"\"\n    if b < 0:\n        raise ValueError(\"Exponent 'b' cannot be negative.\")\n    result = 1\n    for _ in range(b):\n        result *= a\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[4, -2]]}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    The nth tetrahedral number is defined as the sum of the first n natural numbers,\n    where n is the input parameter.\n\n    Args:\n        n (int): The input parameter representing the position of the tetrahedral number.\n\n    Returns:\n        int: The nth tetrahedral number.\n\n    Raises:\n        ValueError: If the input parameter n is not a positive integer.\n\n    Examples:\n        >>> tetrahedral_number(5)\n        35\n        >>> tetrahedral_number(10)\n        120\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"Input parameter n must be a positive integer.\")\n    return n * (n + 1) * (n + 2) // 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to convert.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    parts = snake_str.split('_')\n    camel_str = ''.join(x.title() for x in parts)\n    return camel_str", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["___python_program"]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        t (tuple): The input tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the input tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple or contains non-positive integers.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n\n        >>> tuple_to_int((4, 5, 6))\n        456\n\n        >>> tuple_to_int((7, 8, 9))\n        789\n    \"\"\"\n    if not isinstance(t, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    for num in t:\n        if not isinstance(num, int) or num <= 0:\n            raise TypeError(\"Tuple must contain only positive integers.\")\n\n    return int(''.join(map(str, t)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The count of True values in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> count([True, False, True])\n        2\n        >>> count([False, False, False])\n        0\n        >>> count([])\n        0\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n    return sum(1 for item in lst if item)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    This function takes a list as input and returns the count of positive numbers in the list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    This function takes a binary string and the number of rotations as input and returns the count of numbers with an odd value when rotating the binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of rotations to be performed.\n\n    Returns:\n    int: The count of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n    count = 0\n    for i in range(num_rotations):\n        binary_string = binary_string[-1] + binary_string[:-1]  # Rotate the binary string by one position\n        decimal_value = int(binary_string, 2)  # Convert the rotated binary string to decimal\n        if decimal_value % 2 != 0:  # Check if the decimal value is odd\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["10000100110011", 5]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    return any(char.islower() and char != '_' and not char.isupper() for char in input_string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aab_Abbbc"]], "plus_fail_tests": [["_abc"]]}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    Finds the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> Find_Min_Length([[1],[1,2]])\n        1\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists\")\n\n    if not lst:\n        return 0\n\n    return min(len(sublist) for sublist in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tpl (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple with the list appended.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tpl + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        if all(elem % k == 0 for elem in t):\n            result.append(t)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The position of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        IndexError: If the kth element does not exist in the array.\n\n    Examples:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n        >>> kth_element([12,3,5,7,19], 5)\n        19\n        >>> kth_element([12,3,5,7,19], 6)\n        Traceback (most recent call last):\n        ...\n        IndexError: kth element does not exist in the array\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"kth element does not exist in the array\")\n    return sorted(arr)[k-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Check if the number is divisible by 2^k - 1 for any k > 1\n    for k in range(2, int(n**0.5) + 1):\n        if n % (2**k - 1) == 0:\n            return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[383]], "plus_fail_tests": [[123456789]]}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the sequence follows the patterns given in the array.\n\n    Args:\n    patterns (list): A list of patterns to be checked.\n    sequence (list): A list of elements to be checked against the patterns.\n\n    Returns:\n    bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        list: A list of strings split on the space character.\n\n    Examples:\n        >>> string_to_list(\"python programming\")\n        ['python', 'programming']\n    \"\"\"\n    return string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(x, y):\n    \"\"\"\n    Multiply two integers.\n\n    Args:\n        x (int): The first integer.\n        y (int): The second integer.\n\n    Returns:\n        int: The product of the two integers.\n    \"\"\"\n    return x * y", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    This function finds the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        This function calculates the greatest common divisor (GCD) of two numbers.\n\n        Parameters:\n        x (int): The first number.\n        y (int): The second number.\n\n        Returns:\n        int: The GCD of x and y.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    def sum_divisors(n):\n        \"\"\"\n        This function calculates the sum of divisors of a given number.\n\n        Parameters:\n        n (int): The number.\n\n        Returns:\n        int: The sum of divisors of n.\n        \"\"\"\n        result = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result += i\n                if i != n // i:\n                    result += n // i\n        return result\n\n    gcd_value = gcd(a, b)\n    return sum_divisors(gcd_value)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string_list = list(string)\n    start = 0\n    end = len(string_list) - 1\n\n    while start < end:\n        if string_list[start].lower() in vowels:\n            while end > start:\n                if string_list[end].lower() in vowels:\n                    string_list[start], string_list[end] = string_list[end], string_list[start]\n                    start += 1\n                    break\n                end -= 1\n        start += 1\n\n    return ''.join(string_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array does not have exactly one element that appears only once.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n\n        >>> search([1,1,2,2,3,3])\n        ValueError: Input array does not have exactly one element that appears only once.\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array is empty.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                left = mid + 1\n            else:\n                right = mid - 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                right = mid - 1\n            else:\n                left = mid + 1\n        else:\n            return arr[mid]\n\n    return arr[left]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 2, 3]]], "plus_fail_tests": [[[]]]}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Raises:\n        ValueError: If the input is not a list of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n    \"\"\"\n    if not all(isinstance(t, tuple) for t in lst):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_product = float('-inf')\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            max_product = max(max_product, product)\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[2, 7], [2, 6], [1, 8], [4, 9]]]], "plus_fail_tests": [[[[-10, 20], [15, -2], [-5, 10]]]]}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle in radians.\n\n    Raises:\n    ValueError: If the input is not a complex number.\n\n    Examples:\n    >>> angle_complex(0+1j)\n    1.5707963267948966\n    >>> angle_complex(1+1j)\n    0.7853981633974483\n    >>> angle_complex(1+0j)\n    0.0\n    >>> angle_complex(0+0j)\n    Traceback (most recent call last):\n        ...\n    ValueError: Cannot calculate angle of zero.\n    \"\"\"\n    if z == 0j:\n        raise ValueError(\"Cannot calculate angle of zero.\")\n    return cmath.phase(z)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list of numbers.\")\n\n    return sum(num for num in numbers if num < 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_list = [item for sublist in lst for item in sublist]\n    return set(flattened_list)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeros = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeros += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeros\n        max_diff = max(max_diff, diff)\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["0000000011111111"]]}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): The input list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers in the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end > len(lst) - 1 or start > end:\n        raise ValueError(\"Invalid range specified\")\n\n    return sum(lst[start:end+1])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[10, 20, 30, 40, 50, 60, 70, 80, 90, 100], 7, 5]]}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "import math\ndef next_Perfect_Square(num):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    Examples:\n    >>> next_Perfect_Square(35)\n    36\n    >>> next_Perfect_Square(100)\n    121\n    >>> next_Perfect_Square(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a positive integer.\n    \"\"\"\n    if not isinstance(num, int) or num <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    # Find the square root of the given number\n    sqrt_num = math.sqrt(num)\n\n    # Check if the square root is an integer\n    if sqrt_num.is_integer():\n        return int(sqrt_num + 1) ** 2\n\n    # Find the next integer greater than the square root\n    next_int = int(sqrt_num) + 1\n\n    # Return the next perfect square\n    return next_int ** 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy the equation ax + by = n.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        n (int): The target value.\n\n    Returns:\n        tuple: A tuple containing x and y, or None if no solution exists.\n\n    Examples:\n        >>> find_solution(2, 3, 7)\n        (2, 1)\n        >>> find_solution(4, 6, 12)\n        (2, 0)\n        >>> find_solution(3, 5, 10)\n        None\n    \"\"\"\n    # Check if n is divisible by the greatest common divisor of a and b\n    gcd = math.gcd(a, b)\n    if n % gcd != 0:\n        return None\n\n    # Find the multiplicative inverse of b modulo a\n    b_inverse = pow(b, -1, a)\n\n    # Calculate x and y using the extended Euclidean algorithm\n    x = (n // gcd) * b_inverse\n    y = (n - a * x) // b\n\n    return x, y", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurrence(string):\n    \"\"\"\n    Count the number of occurrences of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n        int: The count of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while True:\n        index = string.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n\n# Test the function\nassert count_occurrence(\"letstdlenstdporstd\") == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n\n    Examples:\n    >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n    [100, 90]\n    >>> larg_nnum([1, 2, 3, 4, 5], 3)\n    [3, 4, 5]\n    >>> larg_nnum([10, 20, 30, 40, 50], 1)\n    [50]\n    \"\"\"\n    return sorted(lst, reverse=True)[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        sentence (str): The input sentence containing words.\n\n    Returns:\n        list: A list of words longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    words = sentence.split()\n    long_words_list = [word for word in words if len(word) > n]\n    return long_words_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to be calculated.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> hexagonal_num(10)\n    190\n    >>> hexagonal_num(1)\n    1\n    >>> hexagonal_num(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    # Count the occurrences of each item in the list\n    count_dict = {}\n    for item in lst:\n        count_dict[item] = count_dict.get(item, 0) + 1\n\n    # Find the item with maximum frequency\n    max_item = max(count_dict, key=count_dict.get)\n\n    return max_item", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Args:\n        lst (list): The list of elements to be sorted.\n\n    Returns:\n        list: The sorted list of elements.\n\n    Examples:\n        >>> pancake_sort([15, 79, 25, 38, 69])\n        [15, 25, 38, 69, 79]\n    \"\"\"\n    def flip(arr, k):\n        \"\"\"\n        Reverses the first k elements of the given list.\n\n        Args:\n            arr (list): The list to be flipped.\n            k (int): The number of elements to be flipped.\n\n        Returns:\n            list: The flipped list.\n        \"\"\"\n        return arr[:k][::-1] + arr[k:]\n\n    def find_max_index(arr, end):\n        \"\"\"\n        Finds the index of the maximum element in the given list up to the specified end index.\n\n        Args:\n            arr (list): The list to search for the maximum element.\n            end (int): The end index up to which to search for the maximum element.\n\n        Returns:\n            int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(end):\n            if arr[i] > arr[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n-1, 0, -1):\n        max_index = find_max_index(lst, i)\n        lst = flip(lst, max_index)\n        lst = flip(lst, i)\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[15, 79, 25, 38, 69]]], "plus_fail_tests": [[[54, 28, 91, 12, 78, 37, 66, 42, 84, 59]]]}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    # Base case: 0 can be represented as sum of non-zero powers of 2\n    if n == 0:\n        return True\n\n    # Iterate through all possible powers of 2 from 1 to n/2\n    for i in range(1, n):\n        # Check if the current power of 2 is a factor of n\n        if n % (2 ** i) == 0:\n            # Recursively check if the remaining part of n can be represented as sum of non-zero powers of 2\n            if is_sum_of_powers_of_two(n - (2 ** i)):\n                return True\n\n    # If no combination of powers of 2 sum up to n, return False\n    return False\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The input list.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    # Calculate the expected sum of a row or column\n    expected_sum = n * (n * n + 1) // 2\n    \n    # Check rows\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n    \n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != expected_sum:\n            return False\n    \n    # Check diagonals\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(n):\n        diag1_sum += matrix[i][i]\n        diag2_sum += matrix[i][n-1-i]\n    if diag1_sum != expected_sum or diag2_sum != expected_sum:\n        return False\n    \n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[7, 7], [7, 7]]]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The count of items that are identical in the same position of the three lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [5, 4, 3, 2, 1], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from lst1 present in lst2.\n\n    Args:\n        lst1 (list): The list from which elements will be removed.\n        lst2 (list): The list containing elements to be removed.\n\n    Returns:\n        list: The updated list with elements removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n\n    Examples:\n        >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n        'exercises'\n    \"\"\"\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple or list): The input array.\n\n    Returns:\n    int: The maximum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> max_Abs_Diff((2,1,5,3))\n    4\n    >>> max_Abs_Diff((-2,-1,-5,-3))\n    2\n    >>> max_Abs_Diff((1,1,1,1))\n    0\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n\n    min_val = float('inf')\n    max_val = float('-inf')\n\n    for num in arr:\n        if num < min_val:\n            min_val = num\n        if num > max_val:\n            max_val = num\n\n    return max_val - min_val", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurrences of the element in the tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    element: The element to count occurrences of.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the smallest power of 2 greater than or equal to 'n'.\n\n    Parameters:\n    n (int): The input integer.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to 'n'.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n.bit_length())", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number with all even bits set.\n\n    Examples:\n        >>> even_bit_set_number(10)\n        10\n        >>> even_bit_set_number(11)\n        10\n        >>> even_bit_set_number(12)\n        14\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0xAAAAAAAA\n\n    # Set the even bits of the number using bitwise AND\n    return num | mask", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The sum of the series.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> sum_series(6)\n        12\n        >>> sum_series(10)\n        20\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    return sum(n - 2*i for i in range(n//2 + 1))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of them.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three input numbers.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return sum(arr)\n\n    # Find the peak element\n    peak = arr.index(max(arr))\n\n    # Calculate the maximum sum of increasing subsequence from the left side of the peak\n    max_sum_left = 0\n    current_sum = 0\n    for i in range(peak):\n        if arr[i] < arr[i+1]:\n            current_sum += arr[i]\n        else:\n            max_sum_left = max(max_sum_left, current_sum)\n            current_sum = arr[i]\n    max_sum_left = max(max_sum_left, current_sum)\n\n    # Calculate the maximum sum of increasing subsequence from the right side of the peak\n    max_sum_right = 0\n    current_sum = 0\n    for i in range(peak, n-1):\n        if arr[i] < arr[i+1]:\n            current_sum += arr[i]\n        else:\n            max_sum_right = max(max_sum_right, current_sum)\n            current_sum = arr[i]\n    max_sum_right = max(max_sum_right, current_sum)\n\n    # Calculate the maximum bitonic subsequence sum\n    max_sum_bitonic = max_sum_left + max_sum_right + arr[peak]\n\n    return max_sum_bitonic", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 3, 2, 1]]]}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i, char in enumerate(string.lower()):\n        if char == chr(97 + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(input_string):\n    \"\"\"\n    Remove characters with odd index values from the given string.\n\n    Args:\n        input_string (str): The input string from which characters with odd index values are to be removed.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    return input_string[::2]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in the tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    if len(t) == 0:\n        return True\n\n    first_type = type(t[0])\n    for element in t:\n        if not isinstance(element, first_type):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    This function counts the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The count of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in the given string with the specified character and returns the modified string.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the specified character.\n    \"\"\"\n    modified_string = string.replace(\" \", character)\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    >>> number_of_substrings(\"ab\")\n    2\n    >>> number_of_substrings(\"a\")\n    1\n    \"\"\"\n    if len(string) == 0:\n        return 0\n    else:\n        return len(string) * (len(string) + 1) // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    This function takes in positive integers m and n and finds the number of possible sequences of length n,\n    such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The maximum value allowed in the sequence.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of possible sequences of length n.\n\n    Examples:\n    >>> get_total_number_of_sequences(10, 4)\n    4\n    \"\"\"\n    # Base case: If n is 1, there is only one possible sequence\n    if n == 1:\n        return 1\n\n    # Initialize a list to store the number of sequences for each value of n\n    sequences = [0] * (n + 1)\n\n    # Base case: There is only one sequence of length 1\n    sequences[1] = 1\n\n    # Iterate through the remaining lengths of the sequence\n    for i in range(2, n + 1):\n        # Calculate the number of sequences for the current length\n        for j in range(1, m + 1):\n            if j >= 2 * sequences[i - 1]:\n                sequences[i] += sequences[i - 1]\n\n    return sequences[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[50, 5]]}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(10)\n    50\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 5 * side_length", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10]]}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import cmath\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    z (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates of the complex number.\n    \"\"\"\n    r, phi = cmath.polar(z)\n    return r, phi", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if (lst[i] ^ lst[j]) % 2 == 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified list with the last element replaced by the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Raises:\n        ValueError: If the input string is empty.\n\n    Examples:\n        >>> find_Rotations(\"aaaa\")\n        1\n        >>> find_Rotations(\"abcd\")\n        2\n        >>> find_Rotations(\"xyzx\")\n        3\n    \"\"\"\n    if not string:\n        raise ValueError(\"Input string cannot be empty\")\n\n    rotations = 1\n    while string[1:] + string[0] != string:\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["ab"]], "plus_fail_tests": [["aaaaaaaaaaaaaaaab"]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    \"\"\"\n    Inserts the given element before each element in the list and returns the resulting list.\n\n    Args:\n        lst (list): The input list.\n        element: The element to be inserted before each element in the list.\n\n    Returns:\n        list: The resulting list with the element inserted before each element.\n    \"\"\"\n    return [element] + [element + x for x in lst]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Black"], "c"]], "plus_fail_tests": [[[], "hello"]]}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(1.5)\n    3.375\n    >>> volume_cube(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    >>> lps(\"ABCDE\")\n    1\n    >>> lps(\"ABCCBA\")\n    5\n    \"\"\"\n\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def divisor_sum(num):\n        div_sum = 1\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                div_sum += i\n                if i != num // i:\n                    div_sum += num // i\n        return div_sum\n\n    amicable_sum = 0\n    for i in range(2, n+1):\n        j = divisor_sum(i)\n        if i != j and divisor_sum(j) == i:\n            amicable_sum += i\n    return amicable_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    This function takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than the given non-negative number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for i in range(2, n):\n        if is_prime(i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a number that can be represented as the sum of n consecutive positive integers.\n\n    Args:\n        n (int): The value of n.\n\n    Returns:\n        int: The n'th star number.\n\n    Raises:\n        ValueError: If n is less than or equal to 0.\n\n    Examples:\n        >>> find_star_num(3)\n        37\n        >>> find_star_num(5)\n        61\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    # Calculate the n'th star number\n    star_num = n * (n + 1) // 2\n\n    return star_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): The positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n    \"\"\"\n    # Calculate the binomial coefficients using Pascal's triangle\n    binomial_coeffs = [1]\n    for i in range(1, n+1):\n        binomial_coeffs.append(binomial_coeffs[i-1] * (n-i+1) // i)\n\n    # Calculate the sum of even index binomial coefficients\n    even_index_sum = sum(binomial_coeffs[i] for i in range(0, len(binomial_coeffs), 2))\n\n    return even_index_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across the given tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the result of element-wise division.\n\n    Raises:\n        ValueError: If the length of the input tuples are different.\n        ZeroDivisionError: If an element in tuple2 is zero.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n\n        >>> division_elements((10, 4, 6, 9), (5, 2, 0, 3))\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: Division by zero is not allowed.\n\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3))\n        Traceback (most recent call last):\n        ...\n        ValueError: Input tuples must have the same length.\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2) if b != 0)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if all elements in the list are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Raises:\n        ValueError: If L is greater than the length of the input list.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    if L > len(lst):\n        raise ValueError(\"Length of the first part cannot be greater than the length of the input list.\")\n\n    return (lst[:L], lst[L:])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters the input dictionary to only include entries with values greater than or equal to the given integer n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter the dictionary entries.\n\n    Returns:\n        dict: The filtered dictionary.\n\n    Examples:\n        >>> dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\n        {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value >= n}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n    \"\"\"\n    return sum(num for index, num in enumerate(lst) if index % 2 == 0 and num % 2 == 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns a new tuple with the maximum elements from each input tuple.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the maximum elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n        ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    return tuple(max(x, y) for x, y in zip(tuple1, tuple2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character for which the ASCII value needs to be determined.\n\n    Returns:\n    int: The ASCII value of the input character.\n    \"\"\"\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): Length of the binary sequence.\n\n    Returns:\n    float: Count of binary sequences satisfying the condition.\n\n    \"\"\"\n    # Base case: If n is 1, there are only two possible sequences: 00 and 11\n    if n == 1:\n        return 2.0\n\n    # Recursive case: Count the number of sequences with n-1 bits and add 2 to account for the two possible sequences with nth bit\n    return 2 * count_binary_seq(n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Finds the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the input array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n\n    Raises:\n        ValueError: If the input array is empty or the number of repetitions is less than 1.\n\n    Examples:\n        >>> max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)\n        30\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty.\")\n    if k < 1:\n        raise ValueError(\"Number of repetitions should be at least 1.\")\n\n    # Calculate the total sum of the array\n    total_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray using Kadane's algorithm\n    max_sum = float('-inf')\n    current_sum = 0\n    for i in range(k * n):\n        current_sum += arr[i % n]\n        max_sum = max(max_sum, current_sum)\n        if current_sum < 0:\n            current_sum = 0\n\n    # Calculate the maximum sum of a contiguous subarray with repetitions\n    max_sum_with_repetitions = max(max_sum, total_sum * (k - 1) + max_sum)\n\n    return max_sum_with_repetitions", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    \"\"\"\n    if not isinstance(human_age, int) or human_age <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer 'num' as input and returns the value with the leftmost unset bit set to 1.\n\n    Args:\n    num (int): The input integer.\n\n    Returns:\n    int: The value with the leftmost unset bit set to 1.\n    \"\"\"\n    # Find the position of the leftmost unset bit\n    pos = num.bit_length()\n\n    # Set the leftmost unset bit to 1\n    set_bit = num | (1 << pos)\n\n    return set_bit", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[125]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    0\n    >>> lateralsurface_cube(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    base_area = math.pi * radius**2\n    volume = base_area * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    return tuple(x - y for x, y in zip(tuple1, tuple2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Check if the input string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        tuple: A tuple of characters.\n\n    Examples:\n        >>> string_to_tuple(\"python 3.0\")\n        ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n        lst (list): The input list of elements.\n        format_str (str): The format string to apply.\n\n    Returns:\n        list: A new list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(item) for item in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum\n    max_sum = 0\n\n    # Iterate through the array from index i to n-1\n    for j in range(i, n):\n        # Check if the current element is greater than the given k\n        if arr[j] > k:\n            # Update the maximum sum with the current element\n            max_sum = max(max_sum, arr[j])\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to check for equality.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two input numbers.\n    \"\"\"\n    return max(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the division rounded down to the nearest integer.\n\n    Parameters:\n    dividend (int): The number to be divided.\n    divisor (int): The number to divide by.\n\n    Returns:\n    int: The quotient of the division rounded down to the nearest integer.\n    \"\"\"\n    quotient = dividend // divisor\n    return quotient", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    Swaps the positions of two numbers and returns a tuple with the second number first and then the first number.\n\n    Args:\n        num1 (int or float): The first number.\n        num2 (int or float): The second number.\n\n    Returns:\n        tuple: A tuple with the second number first and then the first number.\n\n    Examples:\n        >>> swap_numbers(10, 20)\n        (20, 10)\n\n        >>> swap_numbers(3.14, 2.71)\n        (2.71, 3.14)\n    \"\"\"\n    return num2, num1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    sums = []\n    for num in numbers:\n        digit_sum = sum(int(digit) for digit in str(num))\n        sums.append(digit_sum)\n    return sums", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in the given list of tuples and returns a list of these rear elements.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = []\n    for tup in tuples_list:\n        rear_elements.append(tup[-1])\n    return rear_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list with the element-wise subtraction of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n\n        >>> sub_list([10, 20, 30], [5, 10, 15])\n        [5, 10, 15]\n\n        >>> sub_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples where each tuple contains a name and an aggregate score.\n\n    Returns:\n        tuple: A tuple containing the name with the maximum aggregate score and the maximum aggregate score.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    if not tuples_list:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    max_aggregate_score = float('-inf')\n    max_aggregate_name = None\n\n    for name, score in tuples_list:\n        if score > max_aggregate_score:\n            max_aggregate_score = score\n            max_aggregate_name = name\n\n    return max_aggregate_name, max_aggregate_score", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Juan Whelan", 90], ["Sabah Colley", 88], ["Peter Nichols", 7], ["Juan Whelan", 122], ["Sabah Colley", 84]]]], "plus_fail_tests": [[[["Alice", 80], ["Bob", 90], ["Charlie", 70], ["Alice", 60], ["Bob", 50], ["Charlie", 40]]]]}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        words_list = word.split()\n        for w in words_list:\n            if w.startswith('p'):\n                return w, words_list[words_list.index(w) + 1]\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive\")\n\n    volume = (math.pi * radius**2 * height) / 3\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    \"\"\"\n    This function finds the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power\n\n# Test the function\nassert highest_power_of_2(10) == 8", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): List of integers.\n\n    Returns:\n        tuple: Pair of integers with the highest product.\n\n    Raises:\n        ValueError: If the input list has less than two elements.\n\n    Examples:\n        >>> max_Product([1,2,3,4,7,0,8,4])\n        (7, 8)\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input list should have at least two elements.\")\n\n    max1 = max2 = float('-inf')\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n    return (max2, max1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[0, -1, -2, -4, 5, 0, -6]]], "plus_fail_tests": [[[10, -20, 30, -40, 50, -60, 70, -80, 90, -100]]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    primes = [2, 3, 5]  # Initial list of primes\n    count = 3  # Count of primes found\n\n    while count < n:\n        num = primes[-1] + 2  # Start checking from the last prime + 2\n        is_prime = True\n\n        for prime in primes:\n            if prime * prime > num:\n                break\n            if num % prime == 0:\n                is_prime = False\n                break\n\n        if is_prime:\n            primes.append(num)\n            count += 1\n\n    return primes[n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If num is greater than the length of either list.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if num > len(list1) or num > len(list2):\n        raise ValueError(\"num is greater than the length of either list.\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[i] * list2[0], list1[0] * list2[i])\n        max_index = (0, 0)\n        for j in range(i+1):\n            for k in range(i+1):\n                if j + k == i:\n                    product = list1[j] * list2[k]\n                    if product > max_product:\n                        max_product = product\n                        max_index = (j, k)\n        products.append(max_product)\n        list1.pop(max_index[0])\n        list2.pop(max_index[1])\n\n    return products", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3]], "plus_fail_tests": [[[61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], [61.017129591114184, 19.303378474526568, 49.402419273875154, 49.402419273875154, -6.658136072450631, 55.36349167122134, 6.408487552626596, -22.555835342170255, -61.03464372753109, 76.32506038662768, 61.017129591114184], true]]}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the length of the maximum list and the maximum list itself.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len][0]\n\n    return max_len, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples and returns a list of extracted elements.\n\n    Args:\n        lst (list): The input list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list of extracted elements.\n\n    Raises:\n        IndexError: If the index is out of range.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [t[n] for t in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check parity.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle given the lengths of the other two sides.\n\n    Parameters:\n    side1 (float): Length of the first side of the triangle.\n    side2 (float): Length of the second side of the triangle.\n\n    Returns:\n    float: Length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is negative.\n\n    \"\"\"\n    if side1 < 0 or side2 < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    return math.sqrt(side1**2 + side2**2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): Input array.\n\n    Returns:\n    int: Number of inversions in the array.\n    \"\"\"\n    def merge_and_count(arr, temp, left, mid, right):\n        \"\"\"\n        Helper function to merge and count inversions while merging.\n\n        Parameters:\n        arr (list): Input array.\n        temp (list): Temporary array to store merged result.\n        left (int): Starting index of the left subarray.\n        mid (int): Middle index of the array.\n        right (int): Ending index of the right subarray.\n\n        Returns:\n        int: Number of inversions in the merged subarray.\n        \"\"\"\n        i = left\n        j = mid + 1\n        k = left\n        inv_count = 0\n\n        while i <= mid and j <= right:\n            if arr[i] <= arr[j]:\n                temp[k] = arr[i]\n                i += 1\n            else:\n                temp[k] = arr[j]\n                j += 1\n                inv_count += mid - i + 1\n            k += 1\n\n        while i <= mid:\n            temp[k] = arr[i]\n            i += 1\n            k += 1\n\n        while j <= right:\n            temp[k] = arr[j]\n            j += 1\n            k += 1\n\n        for m in range(left, right + 1):\n            arr[m] = temp[m]\n\n        return inv_count\n\n    def merge_sort_and_count(arr, temp, left, right):\n        \"\"\"\n        Helper function to perform merge sort and count inversions.\n\n        Parameters:\n        arr (list): Input array.\n        temp (list): Temporary array to store merged result.\n        left (int): Starting index of the subarray.\n        right (int): Ending index of the subarray.\n\n        Returns:\n        int: Number of inversions in the subarray.\n        \"\"\"\n        inv_count = 0\n\n        if left < right:\n            mid = (left + right) // 2\n            inv_count += merge_sort_and_count(arr, temp, left, mid)\n            inv_count += merge_sort_and_count(arr, temp, mid + 1, right)\n            inv_count += merge_and_count(arr, temp, left, mid, right)\n\n        return inv_count\n\n    temp = [0] * len(arr)\n    return merge_sort_and_count(arr, temp, 0, len(arr) - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursively finds the depth of a dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        int: The depth of the dictionary.\n\n    Raises:\n        TypeError: If the input is not a dictionary.\n\n    Examples:\n        >>> dict_depth({'a':1, 'b': {'c': {'d': {}}}})\n        4\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        raise TypeError(\"Input must be a dictionary.\")\n\n    if not dictionary:\n        return 1\n\n    depths = [dict_depth(value) for value in dictionary.values()]\n    return max(depths) + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"a": 1, "b": {"c": {"d": {}}}}]], "plus_fail_tests": [[{"a": 1, "b": {"c": {"d": {"e": {"f": {}}}}}}]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers where each number is the sum of its two preceding numbers.\n    The first two Lucas numbers are 2 and 1.\n\n    Args:\n        n (int): The index of the Lucas number to find.\n\n    Returns:\n        int: The n'th Lucas number.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> find_lucas(1)\n        1\n        >>> find_lucas(9)\n        76\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n - 1) + find_lucas(n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[15]]}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n        c (int or float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n\n    Raises:\n        TypeError: If any of the input values is not a number.\n\n    Examples:\n        >>> median_numbers(25, 55, 65)\n        55.0\n        >>> median_numbers(10, 20, 30)\n        20.0\n    \"\"\"\n    # Check if all input values are numbers\n    if not all(isinstance(x, (int, float)) for x in (a, b, c)):\n        raise TypeError(\"All input values must be numbers.\")\n\n    # Find the median\n    median = sorted([a, b, c])[1]\n\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        int: The minimum product of the pairs of tuples.\n\n    Raises:\n        ValueError: If the input list is empty or contains non-tuple elements.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )\n        8\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_product = float('inf')\n    for tup in lst:\n        if not isinstance(tup, tuple) or len(tup) != 2:\n            raise ValueError(\"Input list should contain tuples of length 2.\")\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (sequence): The first sequence.\n        seq2 (sequence): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    for char in string:\n        if char_count[char] == 1:\n            return char\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Find the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not lst:\n        raise ValueError(\"List cannot be empty\")\n    return max(lst, key=lambda x: (isinstance(x, int), x))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["Python", 3.14, 5, "version", 10, 7.5, 2, "3.14"]]]}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list or if the list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n\n        >>> min_val([])\n        Traceback (most recent call last):\n            ...\n        TypeError: List is empty.\n\n        >>> min_val(123)\n        Traceback (most recent call last):\n            ...\n        TypeError: Input is not a list.\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input is not a list.\")\n    if not lst:\n        raise TypeError(\"List is empty.\")\n\n    return min(lst)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n    \"\"\"\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for existence in the tuple.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A new list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([10, 12, 14, 16])\n        [12, 14, 16]\n    \"\"\"\n    return [x for x in lst if x % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    This function filters out odd numbers from a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list containing only the even numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]]], "plus_fail_tests": [[[-5, 0, 5, -10, 15, 20, -25, 30]]]}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the element of a list with maximum length.\n\n    Args:\n        lst (list): A list of elements.\n\n    Returns:\n        list: The element with maximum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n    return max(lst, key=len)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Invalid date format. Expected format is yyyy-mm-dd.\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple by the given delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to be used. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n        'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the starting position, ending position, and the adverb found.\n\n    Raises:\n        ValueError: If no adverb is found in the sentence.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n    \"\"\"\n    adverbs = ['clearly', 'obviously', 'simply', 'easily', 'quickly', 'rapidly', 'suddenly', 'urgently', 'tremendously']\n\n    for word in sentence.split():\n        if word.lower() in adverbs:\n            start_pos = sentence.index(word)\n            end_pos = start_pos + len(word)\n            return start_pos, end_pos, word\n\n    raise ValueError(\"No adverb found in the sentence.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["clearly!! we can see the sky"]], "plus_fail_tests": [["heavily and quickly we ran down the steep hill"]]}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    172\n    >>> cube_sum(4)\n    306\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i ** 3 for i in range(2, 2 * n + 1, 2))\n\n# Test the function\nassert cube_sum(2) == 72", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using shell sort.\n\n    Parameters:\n    arr (list): The input array to be sorted.\n\n    Returns:\n    list: The sorted array.\n\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Perrin numbers are a sequence of numbers where each number is the sum of the two preceding numbers.\n    The first three Perrin numbers are 3, 0, 2.\n\n    Args:\n        n (int): The number of Perrin numbers to sum.\n\n    Returns:\n        int: The sum of the first n Perrin numbers.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> cal_sum(9)\n        49\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 3\n\n    a, b, c = 3, 0, 2\n    total = a + b + c\n\n    for _ in range(3, n):\n        a, b, c = b, c, a + b + c\n        total += c\n\n    return total", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n        lst (list): The input list of sublists.\n        element: The element to count.\n\n    Returns:\n        int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n    \"\"\"\n    # Calculate the sum of cubes of the first n natural numbers\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n\n    # Calculate the average of cubes\n    average_of_cubes = sum_of_cubes / n\n\n    return average_of_cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Extracts the elementwise and of the given two tuples.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The elementwise and of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    return tuple(x & y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    # Create a dictionary mapping month numbers to their respective number of days\n    month_days = {1: 31, 2: 28, 3: 31, 4: 30, 5: 31, 6: 30, 7: 31, 8: 31, 9: 30, 10: 31, 11: 30, 12: 31}\n\n    # Check if the given month number exists in the dictionary\n    if month_number in month_days:\n        # Return True if the number of days is 31\n        return month_days[month_number] == 31\n    else:\n        # Return False if the month number is invalid\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with index wise multiplication of elements from the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list with the cubes of each number.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        list: A new list with the cubes of each number.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5])\n        [1, 8, 27, 64, 125]\n\n        >>> cube_nums([-1, -2, -3, -4, -5])\n        [-1, -8, -27, -64, -125]\n\n        >>> cube_nums([0, 0, 0, 0, 0])\n        [0, 0, 0, 0, 0]\n    \"\"\"\n    return [num ** 3 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its standard form coefficients a, b, and c.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: Directrix of the parabola.\n\n    Raises:\n    ValueError: If the parabola does not have a directrix.\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The parabola is not in standard form.\")\n\n    # Calculate the directrix using the quadratic formula\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"The parabola does not have a directrix.\")\n\n    directrix = (-b - (b**2 - 4*a*c)**0.5) / (2*a)\n    return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of that number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The first digit of the input number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer and return it\n    return int(first_digit)\n\n# Test the function\nassert first_digit(123) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array of numbers.\n        num (int): The number to compare against the elements of the array.\n\n    Returns:\n        bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    return all(element < num for element in arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): The input tuple of strings.\n\n    Returns:\n        list: A list of rear index elements extracted from the strings in the tuple.\n\n    Raises:\n        TypeError: If the input is not a tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    if not isinstance(tup, tuple):\n        raise TypeError(\"Input must be a tuple.\")\n\n    return [s[-1] for s in tup]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(base1, base2, height):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    base1 (float): The length of the first base of the trapezium.\n    base2 (float): The length of the second base of the trapezium.\n    height (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If either base1 or base2 is negative.\n\n    \"\"\"\n    if base1 < 0 or base2 < 0:\n        raise ValueError(\"Bases cannot be negative.\")\n\n    median = (base1 + base2) / 2\n    return median", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-88, 999999, 10000001]]}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of that number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list of integers.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    if not isinstance(numbers, list) or not all(isinstance(num, int) for num in numbers):\n        raise TypeError(\"Input must be a list of integers.\")\n\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A new list with each string reversed.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    return [s[::-1] for s in string_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product of a subarray.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array is empty\")\n\n    max_product = arr[0]\n    current_product = arr[0]\n    for i in range(1, len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n        if arr[i] == 0:\n            current_product = arr[i]\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, -2, -3, 0, 7, -8, -2]]], "plus_fail_tests": [[[-2, -2, 4, -6, 8, 10, -12, -16, 8]]]}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n    \"\"\"\n    return ''.join([char for i, char in enumerate(string) if i % 2 == 0])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are present in both tuple_list1 and tuple_list2.\n\n    \"\"\"\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[4, 1], [7, 4], [11, 13], [17, 14]], [[1, 4], [7, 4], [16, 12], [10, 13]]]], "plus_fail_tests": [[[[2, 3, 1], [6, 5, 4], [11, 12, 10]], [[2, 3, 1], [6, 5, 4], [11, 12, 10]]]]}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        int: The maximum product formed by multiplying numbers of an increasing subsequence.\n\n    Raises:\n        ValueError: If the input array is empty.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    max_product = 1\n    current_product = 1\n\n    for i in range(len(arr)):\n        current_product *= arr[i]\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int or float): The length of one side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n\n    Raises:\n    ValueError: If the size is negative.\n\n    Examples:\n    >>> surfacearea_cube(5)\n    150\n    >>> surfacearea_cube(0)\n    0\n    >>> surfacearea_cube(-1)\n    Traceback (most recent call last):\n        ...\n    ValueError: Size cannot be negative.\n    \"\"\"\n    if size < 0:\n        raise ValueError(\"Size cannot be negative.\")\n    return 6 * size ** 2", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-3]]}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Raises:\n    ValueError: If the input array is empty.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([-1, -2, -3])\n    -4\n    >>> big_sum([10, 20, 30, 40, 50])\n    50\n    \"\"\"\n    if not arr:\n        raise ValueError(\"Input array cannot be empty\")\n\n    smallest = min(arr)\n    largest = max(arr)\n    return smallest + largest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in ascending order and returns a list of tuples.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples sorted by value in ascending order.\n\n    Examples:\n        >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1])\n    return sorted_items", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[{"Math": 81, "Physics": 83, "Chemistry": 87}]], "plus_fail_tests": [[{"A": -10, "B": 20, "C": -5, "D": 15, "E": 0}]]}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in the given list.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        list: The sublist with the minimum length.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n\n        >>> Find_Min([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot be empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_length = min(len(sublist) for sublist in lst)\n    return [sublist for sublist in lst if len(sublist) == min_length]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1], [1, 2], [1, 2, 3]]]], "plus_fail_tests": [[[[], [], []]]]}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n    \"\"\"\n    modified_string = ''\n    for char in string:\n        if not char.isupper():\n            modified_string += char\n    return modified_string", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["ThiS%^%!s&a(mY)TesTStR%i*ng"]]}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = arr[0]\n    current_sum = arr[0]\n\n    for i in range(1, n):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a given character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old_char.\n\n    Returns:\n        str: The modified string with all occurrences of old_char replaced by new_char.\n    \"\"\"\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(99999)\n    45\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return sum(int(digit) for digit in str(n))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    This function matches a word containing 'z'.\n\n    Args:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word containing 'z' is found, False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(width, height):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Args:\n        width (int or float): The width of the rectangle.\n        height (int or float): The height of the rectangle.\n\n    Returns:\n        int or float: The area of the rectangle.\n\n    Raises:\n        ValueError: If either width or height is negative.\n\n    Examples:\n        >>> rectangle_area(10, 20)\n        200\n        >>> rectangle_area(5.5, 3.2)\n        17.6\n    \"\"\"\n    if width < 0 or height < 0:\n        raise ValueError(\"Width and height must be positive\")\n    return width * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of the strings to extract.\n\n    Returns:\n        list: A list of strings with the specified size.\n\n    Raises:\n        ValueError: If the size is negative or not an integer.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    if not isinstance(size, int) or size < 0:\n        raise ValueError(\"Size must be a positive integer.\")\n\n    return [s for s in string_list if len(s) == size]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["abc", "defg"], -1]]}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of all possible combinations of the elements of the input list.\n    \"\"\"\n    def helper(lst, index, current_combination, result):\n        if index == len(lst):\n            result.append(current_combination[:])\n            return\n\n        # Include the current element\n        current_combination.append(lst[index])\n        helper(lst, index + 1, current_combination, result)\n        current_combination.pop()\n\n        # Exclude the current element\n        helper(lst, index + 1, current_combination, result)\n\n    result = []\n    helper(lst, 0, [], result)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Split a string into characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000]]}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    This function calculates the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the factorial is to be calculated.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Raises:\n    ValueError: If the input number is negative.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    4\n    >>> last_digit_factorial(0)\n    1\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number cannot be negative.\")\n\n    # Calculate the factorial using the property that the last digit in the factorial\n    # is the product of the last digits of the factorial of the individual numbers\n    last_digit = 1\n    for i in range(1, n+1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test the function\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 4\nassert last_digit_factorial(0) == 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n    \"\"\"\n    modified_string = ''.join([char for char in string if not char.islower()])\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists with sorted sublists.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Converts the given string to lower case.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The converted string in lower case.\n    \"\"\"\n    return string.lower()\n\n# Test the function\ndef test_convert_to_lower():\n    \"\"\"\n    Tests the convert_to_lower function.\n    \"\"\"\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n\n# Run the test\ntest_convert_to_lower()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd numbers.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\ndef test_get_odd_numbers():\n    \"\"\"\n    Test the get_odd_numbers function.\n    \"\"\"\n    assert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]\n\n# Run the test\ntest_get_odd_numbers()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(t1, t2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the union of elements from t1 and t2 in sorted order.\n    \"\"\"\n    union = tuple(sorted(set(t1 + t2)))\n    return union", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = list(set(nums))\n    return [num for num in nums if nums.count(num) == 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublist in a given list of sublists.\n\n    Args:\n        lst (list): A list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Raises:\n        TypeError: If the input is not a list of sublists.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise TypeError(\"Input must be a list of sublists\")\n\n    max_length = max(len(sublist) for sublist in lst)\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        6\n        >>> digit_distance_nums(100, 200)\n        0\n    \"\"\"\n    # Convert the integers to strings to access individual digits\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Calculate the per-digit difference and sum them up\n    distance = sum(abs(int(num1_str[i]) - int(num2_str[i])) for i in range(max(len(num1_str), len(num2_str))))\n\n    return distance", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[12345, 9]]}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with toggled case.\n\n    Examples:\n        >>> toggle_string(\"Python\")\n        'pYTHON'\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Raises:\n        TypeError: If n is not an integer.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    \"\"\"\n    Calculate the product of the unique numbers in a given list.\n\n    Args:\n        lst (list): The input list of numbers.\n\n    Returns:\n        int: The product of the unique numbers.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> unique_product([10, 20, 30, 40, 20, 50, 60, 40])\n        720000000\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    This function takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n\n    Parameters:\n    lst (list): A list of integers.\n    n (int): The size of the list.\n\n    Returns:\n    int: The count of unordered pairs where both elements are unequal.\n\n    Examples:\n    >>> count_Pairs([1,2,1],3)\n    2\n    >>> count_Pairs([1,2,3,4,5],5)\n    10\n    >>> count_Pairs([1,1,1,1],4)\n    0\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only the even elements from the input tuple.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n        ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n        str: The IP address with leading zeroes removed.\n\n    Examples:\n        >>> removezero_ip(\"216.08.094.196\")\n        '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    new_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(new_octets)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        ValueError: If the input is not a list.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n\n        >>> swap_list([])\n        []\n\n        >>> swap_list([1])\n        [1]\n\n        >>> swap_list([1, 2, 3])\n        [3, 2, 1]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list.\")\n\n    if len(lst) < 2:\n        return lst\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import cmath\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a modulo value n as input.\n    It calculates the product of the array elements modulo n and returns the result.\n\n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array elements modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    This function returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    if n == 0:\n        return 1\n\n    catalan_numbers = [1]\n    for i in range(1, n + 1):\n        catalan_numbers.append(int((2 * (2 * i + 1) * catalan_numbers[i - 1]) / (i + 2)))\n\n    return catalan_numbers[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1]]}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "import math\ndef perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect square numbers between the given range.\n\n    Raises:\n        ValueError: If start is greater than end.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n    \"\"\"\n    if start > end:\n        raise ValueError(\"Start number should be less than or equal to the end number.\")\n\n    perfect_squares_list = []\n    for num in range(start, end+1):\n        if math.isqrt(num) ** 2 == num:\n            perfect_squares_list.append(num)\n\n    return perfect_squares_list", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-10, -1]]}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest values.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 20, 30, 40])\n        30\n        >>> big_diff([5, 5, 5, 5])\n        0\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    return max(nums) - min(nums)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Args:\n        string (str): The input string to search.\n        pattern (str): The regex pattern to match.\n\n    Returns:\n        tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n        ValueError: If the pattern does not match any substrings in the string.\n\n    Examples:\n        >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n        ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(\"Pattern not found in the string.\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    \"\"\"\n    This function calculates the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial coefficients to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial coefficients.\n\n    Raises:\n    ValueError: If n is less than or equal to 0.\n\n    Examples:\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    40\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n should be greater than 0\")\n\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the range of consecutive binomial coefficients\n    for i in range(1, n+1):\n        # Calculate the product of consecutive binomial coefficients\n        product = 1\n        for j in range(1, i+1):\n            product *= (n + j) // j\n\n        # Add the product to the total sum\n        total_sum += product\n\n    return total_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[10]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    sorted_items = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub_arr):\n    \"\"\"\n    Check whether a list is a sublist of another.\n\n    Args:\n        arr (list): The main list.\n        sub_arr (list): The sublist to check.\n\n    Returns:\n        bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) > len(arr):\n        return False\n\n    for i in range(len(arr) - len(sub_arr) + 1):\n        if arr[i:i+len(sub_arr)] == sub_arr:\n            return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float or int): The length of the base edge of the square pyramid.\n    height (float or int): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    Examples:\n    >>> surface_area(3, 4)\n    33.0\n    >>> surface_area(5, 2)\n    25.0\n    \"\"\"\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive.\")\n\n    base_area = base_edge ** 2\n    lateral_area = 4 * (base_edge ** 2) / 2\n    surface_area = base_area + lateral_area\n\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits each raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access its digits\n    num_str = str(num)\n\n    # Calculate the number of digits in the number\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    armstrong_sum = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    if armstrong_sum == num:\n        return True\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Args:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    sum_nums = n * (n + 1) // 2\n    avg_nums = sum_nums / n\n\n    return sum_nums, avg_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the words seperated by spaces in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with words reversed.\n\n    Examples:\n        >>> reverse_words(\"python program\")\n        'program python'\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The position of the element to find.\n\n    Returns:\n        int: The kth element.\n\n    Raises:\n        ValueError: If k is out of range.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n    \"\"\"\n    if not (1 <= k <= len(arr1) + len(arr2)):\n        raise ValueError(\"k is out of range\")\n\n    i, j = 0, 0\n    while True:\n        if i == len(arr1):\n            return arr2[j + k - 1]\n        if j == len(arr2):\n            return arr1[i + k - 1]\n        if k == 1:\n            return min(arr1[i], arr2[j])\n\n        mid = k // 2\n        new_i = min(i + mid, len(arr1)) - 1\n        new_j = min(j + mid, len(arr2)) - 1\n\n        if arr1[new_i] <= arr2[new_j]:\n            k -= new_i - i + 1\n            i = new_i + 1\n        else:\n            k -= new_j - j + 1\n            j = new_j + 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 1], [], 3]]}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_prime(i) and i % 4 == 1:\n            lucid_numbers.append(i)\n    return lucid_numbers\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo on two tuples of the same length.\n\n    Args:\n        t1 (tuple): The first input tuple.\n        t2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple with the element-wise modulo results.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    return tuple(x % y for x, y in zip(t1, t2))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        average = sum(t) / len(t)\n        averages.append(average)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string, or None if no repeated character is found.\n    \"\"\"\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            return char\n        else:\n            char_count[char] = 1\n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Find the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two sorted lists.\n\n    Raises:\n        ValueError: If the size of the lists is not the same.\n\n    \"\"\"\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"The size of the lists should be the same.\")\n\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        median = (merged_list[n//2 - 1] + merged_list[n//2]) / 2\n    else:\n        median = merged_list[n//2]\n\n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the n'th column of the given matrix.\n\n    Args:\n        matrix (list of lists): The matrix represented as a list of lists.\n        n (int): The column number (0-indexed).\n\n    Returns:\n        int: The maximum value in the n'th column.\n\n    Raises:\n        IndexError: If the column number is out of range.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[1, 2, 3], [4, 5, 6]], 1)\n        5\n    \"\"\"\n    if n < 0 or n >= len(matrix[0]):\n        raise IndexError(\"Column number is out of range\")\n\n    return max(row[n] for row in matrix)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    sorted_lst = sorted(lst)\n    return sorted_lst == list(range(sorted_lst[0], sorted_lst[-1] + 1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): A list of numbers.\n        n (int): The power to raise each number to.\n\n    Returns:\n        list: A new list with the n-th power of each number.\n\n    Raises:\n        TypeError: If nums is not a list or n is not an integer.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    if not isinstance(nums, list):\n        raise TypeError(\"nums must be a list\")\n    if not isinstance(n, int):\n        raise TypeError(\"n must be an integer\")\n\n    return [num ** n for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(*lists):\n    \"\"\"\n    Interleaves multiple lists into a single flat list.\n\n    Args:\n        *lists: Variable number of lists of the same length.\n\n    Returns:\n        A flat list with elements from each list interleaved.\n\n    Raises:\n        ValueError: If the lengths of the input lists are not the same.\n\n    Examples:\n        >>> interleave_lists([1, 2, 3], [4, 5, 6])\n        [1, 4, 2, 5, 3, 6]\n\n        >>> interleave_lists([1, 2, 3, 4], [5, 6, 7, 8])\n        [1, 5, 2, 6, 3, 7, 4, 8]\n\n        >>> interleave_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])\n        [1, 4, 7, 2, 5, 8, 3, 6, 9]\n    \"\"\"\n    if any(len(lst) != len(lists[0]) for lst in lists):\n        raise ValueError(\"All input lists must have the same length.\")\n\n    interleaved_list = []\n    for i in range(len(lists[0])):\n        for lst in lists:\n            interleaved_list.append(lst[i])\n\n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = (radius**2) * math.pi / 2\n        return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\ndef test_find_even_numbers():\n    \"\"\"\n    Test the find_even_numbers function.\n    \"\"\"\n    assert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]\n\n# Run the test\ntest_find_even_numbers()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    nums = ''\n    letters = ''\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n        ZeroDivisionError: If an element in list2 is zero.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n\n        >>> div_list([1, 2, 3], [0, 4, 0])\n        Traceback (most recent call last):\n        ...\n        ZeroDivisionError: Division by zero in index 2.\n\n        >>> div_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists have different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists have different lengths.\")\n\n    result = []\n    for i in range(len(list1)):\n        if list2[i] == 0:\n            raise ZeroDivisionError(f\"Division by zero in index {i}.\")\n        result.append(list1[i] / list2[i])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\ndef test_convert_to_uppercase():\n    \"\"\"\n    Tests the convert_to_uppercase function.\n    \"\"\"\n    assert convert_to_uppercase(\"person\") == \"PERSON\"\n\n# Run the tests\ntest_convert_to_uppercase()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces all spaces in the given string with '%20'.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by '%20'.\n    \"\"\"\n    return string.replace(' ', '%20')", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n\n    Examples:\n        >>> largest_subset([1, 3, 6, 13, 17, 18])\n        4\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Check if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(start, current_subset):\n        \"\"\"\n        Recursive function to find the largest subset starting from a given index.\n\n        Args:\n            start (int): The starting index.\n            current_subset (list): The current subset being considered.\n\n        Returns:\n            int: The size of the largest subset.\n        \"\"\"\n        if start == len(numbers):\n            return len(current_subset)\n\n        if all(is_divisible(numbers[start], x) for x in current_subset):\n            return max(find_subset(start + 1, current_subset), find_subset(start + 1, current_subset + [numbers[start]]))\n        else:\n            return find_subset(start + 1, current_subset)\n\n    return find_subset(0, [])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    This function calculates the nth Bell number.\n\n    Parameters:\n    n (int): The position of the Bell number to be calculated.\n\n    Returns:\n    int: The nth Bell number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(3)\n    5\n    >>> bell_Number(4)\n    15\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n should be a non-negative integer.\")\n\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i][j - 1] + bell[i - 1][j - 1]\n\n    return bell[n][0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        lst (list): The input list of numbers.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Raises:\n        ValueError: If the input list does not contain any even or odd number.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n        >>> diff_even_odd([2,4,6,8])\n        0\n        >>> diff_even_odd([1,3,5,7])\n        Traceback (most recent call last):\n        ...\n        ValueError: The input list does not contain any even or odd number.\n    \"\"\"\n    even_num = next((x for x in lst if x % 2 == 0), None)\n    odd_num = next((x for x in lst if x % 2 != 0), None)\n\n    if even_num is None or odd_num is None:\n        raise ValueError(\"The input list does not contain any even or odd number.\")\n\n    return even_num - odd_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with special characters replaced by colons.\n    \"\"\"\n    modified_string = string.replace(' ', ':').replace(',', ':').replace('.', ':')\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    This function takes an integer n as input and returns the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    10\n    >>> is_nonagonal(3)\n    27\n    >>> is_nonagonal(4)\n    55\n    >>> is_nonagonal(5)\n    96\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 120 km/h or the temperature is less than -273.15 celsius.\n\n    \"\"\"\n    if velocity > 120 or temperature < -273.15:\n        raise ValueError(\"Invalid input. Wind velocity should be less than or equal to 120 km/h and temperature should be greater than or equal to -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n    return round(wind_chill_index)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500, -50]]}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["3.124587"]], "plus_fail_tests": [["123.1111"]]}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    return sum(len(name) for name in names if not name[0].islower())\n\n# Test the function\ndef test_sum_name_lengths():\n    \"\"\"\n    Test the sum_name_lengths function.\n    \"\"\"\n    assert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16\n\n# Run the tests\ntest_sum_name_lengths()", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1, 2, 3, 4, 0, 0]\n    \"\"\"\n    count_zero = lst.count(0)\n    lst = [x for x in lst if x != 0]\n    lst.extend([0] * count_zero)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the two input lists have the same values.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        int: The count of indices where the lists have the same values.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function counts the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "import re\ndef text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    pattern = r'\\Bz'\n    match = re.search(pattern, text)\n    return bool(match)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["baaz"]]}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced by underscores and vice versa.\n    \"\"\"\n    modified_string = string.replace(' ', '_')\n    return modified_string", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["The_Avengers"]], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for string in string_list:\n        reverse_string = string[::-1]\n        if reverse_string in string_list:\n            count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["julia", "best", "tseb", "for", "ailuj"]]], "plus_fail_tests": [[["app", "123", "ad3", "apple", "elppa", "xyx", "bat", "tab", "tacocat", "racecar", "abc", "zyx", "def", "fed"]]]}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number with toggled bits.\n\n    Raises:\n        ValueError: If the input number is negative.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n        >>> toggle_middle_bits(10)\n        14\n        >>> toggle_middle_bits(15)\n        15\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number cannot be negative.\")\n\n    # Find the number of bits in the input number\n    num_bits = num.bit_length()\n\n    # Check if the number of bits is greater than 2\n    if num_bits > 2:\n        # Create a mask to toggle all bits except the first and last bit\n        mask = (1 << (num_bits - 2)) - 1\n\n        # Toggle the middle bits using bitwise XOR with the mask\n        toggled_num = num ^ mask\n    else:\n        # If the number of bits is less than or equal to 2, return the original number\n        toggled_num = num\n\n    return toggled_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    \"\"\"\n    Adds a dictionary to the tuple and returns the updated tuple.\n\n    Args:\n        t (tuple): The input tuple.\n        d (dict): The input dictionary.\n\n    Returns:\n        tuple: The updated tuple with the dictionary added.\n    \"\"\"\n    return t + (d,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array upto the given position.\n\n    Examples:\n    >>> reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4)\n    [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculate the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): The input list of numbers.\n        n (int): The length of the input list.\n\n    Returns:\n        int: The sum of xor of all pairs of numbers.\n\n    Raises:\n        ValueError: If the length of the input list is not equal to n.\n\n    Examples:\n        >>> pair_xor_Sum([5,9,7,6],4)\n        47\n    \"\"\"\n    if len(nums) != n:\n        raise ValueError(\"Length of the input list should be equal to n.\")\n\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += nums[i] ^ nums[j]\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 2, 1, 2, 3, 4, 5, 4, 5, 3], 11]]}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}\n    return filtered_students\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The actual amount.\n        expected_amount (float): The expected amount.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of tuples representing pairs of consecutive items.\n\n    Examples:\n        >>> pair_wise([1, 1, 2, 3, 3, 4, 4, 5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heap_sort(arr):\n        n = len(arr)\n\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[0], arr[i] = arr[i], arr[0]\n            heapify(arr, i, 0)\n\n        return arr\n\n    return heap_sort(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array size is less than 2.\n\n    \"\"\"\n    if n < 2:\n        raise ValueError(\"Array size must be at least 2.\")\n\n    arr = sorted(arr)\n    min_diff = float('inf')\n\n    for i in range(1, n):\n        diff = arr[i] - arr[i-1]\n        if diff < min_diff:\n            min_diff = diff\n\n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    N = len(matrix)\n    dp = [[0] * N for _ in range(N)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, N):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, N):\n        for j in range(1, N):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[N-1][N-1] / (N * N)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    \"\"\"\n    Find the minimum k records from a list of tuples.\n\n    Args:\n        records (list): A list of tuples representing records with values.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records.\n\n    Raises:\n        ValueError: If k is greater than the number of records.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(records):\n        raise ValueError(\"k cannot be greater than the number of records\")\n\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the values\n    return sorted_records[:k]  # Return the first k records", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    # Count the occurrences of each element in the list\n    count_dict = {}\n    for num in lst:\n        count_dict[num] = count_dict.get(num, 0) + 1\n\n    # Sum up the non-repeated elements\n    non_repeated_sum = sum(num for num, count in count_dict.items() if count == 1)\n\n    return non_repeated_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 1, 1, 4, 5, 6]]], "plus_fail_tests": [[[-1, -2, -3, -1, -1, -4, -5, -6]]]}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    >>> sum_Of_Subarray_Prod([4, 5, 6])\n    180\n    \"\"\"\n    n = len(lst)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return lst[0]\n    else:\n        prod = 1\n        for num in lst:\n            prod *= num\n        return prod + sum_Of_Subarray_Prod(lst[1:])", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [[[1, 2, 3]]], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two numbers.\n\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List should have at least two numbers.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    This function counts the number of pairs whose sum is equal to the target sum.\n\n    Args:\n    numbers (list): A list of numbers.\n    target_sum (int): The target sum.\n\n    Returns:\n    int: The count of pairs whose sum is equal to the target sum.\n    \"\"\"\n    count = 0\n    num_counts = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples_list):\n    combinations = []\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            combinations.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum+1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(v is None for v in t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    bracket_pairs = {')': '(', ']': '[', '}': '{'}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or bracket_pairs[char] != stack.pop():\n                return False\n\n    return not stack", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to be checked.\n\n    Returns:\n        bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    # Create a dictionary mapping month numbers to their respective number of days\n    month_days = {\n        1: 31,\n        2: 28,\n        3: 31,\n        4: 30,\n        5: 31,\n        6: 30,\n        7: 31,\n        8: 31,\n        9: 30,\n        10: 31,\n        11: 30,\n        12: 31\n    }\n\n    # Check if the given month number exists in the dictionary\n    if month_number in month_days:\n        # Return True if the number of days is 30\n        return month_days[month_number] == 30\n    else:\n        # Return False if the month number is invalid\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list with the element-wise sum of the input lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: A new list with the element-wise sum of the input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n\n        >>> sum_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x + y for x, y in zip(list1, list2)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n        string (str): The input string to search for the substring.\n        substring (str): The substring to search for within the string.\n\n    Returns:\n        tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n               Returns None if there is no match.\n\n    Examples:\n        >>> occurrence_substring('python programming, python language', 'python')\n        ('python', 0, 6)\n\n        >>> occurrence_substring('python programming, python language', 'java')\n        None\n    \"\"\"\n    if substring in string:\n        first_occurrence = string.index(substring)\n        last_occurrence = string.rindex(substring)\n        return substring, first_occurrence, last_occurrence\n    else:\n        return None\n\n# Test the function\nassert occurrence_substring('python programming, python language', 'python') == ('python', 0, 6)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Packs consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of an element.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            current_sublist = [lst[i]]\n            result.append(current_sublist)\n        else:\n            current_sublist.append(lst[i])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    Raises:\n    ValueError: If either r or h is negative.\n\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be positive.\")\n\n    # Calculate the lateral surface area using the formula:\n    # A = \u03c0 * r * \u221a(r^2 + h^2)\n    area = math.pi * r * math.sqrt(r**2 + h**2)\n\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Args:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n    \"\"\"\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return sum(num ** 4 for num in odd_numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    modified_words = [word for word in words if len(word) != k]\n    modified_string = ' '.join(modified_words)\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The list to be rotated.\n        num_items (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    if num_items < 0:\n        raise ValueError(\"Number of items to rotate should be positive.\")\n    if num_items == 0:\n        return lst\n\n    num_items = num_items % len(lst)  # Adjust num_items if it is greater than the length of the list\n    return lst[-num_items:] + lst[:-num_items]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiou]'\n    return bool(re.match(pattern, string))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Else"]], "plus_fail_tests": [["Anna18"]]}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one side of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n\n    # Calculate the area using the formula for a tetrahedron\n    area = math.sqrt(3) * side_length ** 2\n\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Raises:\n        ValueError: If the length of the input tuple is not even.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(t) % 2 != 0:\n        raise ValueError(\"Input tuple must have an even length.\")\n\n    return dict(zip(t[::2], t[1::2]))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same or not.\n\n    Args:\n        string (str): The input string to be checked.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) < 1:\n        return False\n    first_char = string[0]\n    for char in string:\n        if char != first_char:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd length subarrays in the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n\n    Examples:\n        >>> odd_length_sum([1, 2, 4])\n        14\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    \n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    \n    return even_product * odd_product", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 4, 1, 6, 8]]], "plus_fail_tests": [[[-10, -5, 0, 5, 10]]]}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list of values.\n        value: The value to be inserted.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Raises:\n        ValueError: If the input list is not sorted.\n\n    Examples:\n        >>> left_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    if not all(arr[i] <= arr[i+1] for i in range(len(arr)-1)):\n        raise ValueError(\"Input list is not sorted.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 4, 5], 6]], "plus_fail_tests": [[[false, true, true], 26]]}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            if i != n // i:\n                count += 2\n            else:\n                count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list of values.\n        value: The value to be inserted.\n\n    Returns:\n        int: The index at which the value should be inserted to maintain sorted order.\n\n    Examples:\n        >>> right_insertion([1,2,4,5], 6)\n        4\n    \"\"\"\n    for i, v in enumerate(arr):\n        if v >= value:\n            return i\n    return len(arr)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, 90.05081633927793, -90.20293226837086, -12.02758648076636, -35.964731488229475], 7]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The count of equal numbers.\n\n    Examples:\n        >>> test_three_equal(1, 1, 1)\n        3\n        >>> test_three_equal(1, 2, 3)\n        0\n        >>> test_three_equal(1, 1, 2)\n        2\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 2, 2]], "plus_fail_tests": [[10, 10, 20]]}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Args:\n        text (str): The input string to be checked.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "import math\ndef is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    sqrt_num = math.isqrt(num)\n    return sqrt_num * sqrt_num == num", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-9]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        target: The element to find the last position of.\n\n    Returns:\n        int: The last position of the element in the array, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    return tuple(item for item in tup if not isinstance(item, tuple))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n    \"\"\"\n    return sum(arr)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    This function finds the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    index = 1\n    triangular_number = 1\n\n    while True:\n        digits = len(str(triangular_number))\n        if digits >= n:\n            return index\n        index += 1\n        triangular_number += index", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input text to be checked.\n\n    Returns:\n        bool: True if the input text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): A list of strings of numbers.\n\n    Returns:\n        list: A sorted list of numbers.\n\n    Raises:\n        ValueError: If any element in the input list is not a valid number.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    try:\n        # Convert all elements to integers\n        lst = [int(x) for x in lst]\n        # Sort the list numerically\n        lst.sort()\n        return lst\n    except ValueError:\n        raise ValueError(\"Invalid input. All elements in the list must be valid numbers.\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(*args):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        *args: Variable-length arguments. The first argument should be a list, and the second argument should be a string.\n\n    Returns:\n        tuple: A new tuple containing the elements from the list and the string.\n\n    Raises:\n        TypeError: If the first argument is not a list or the second argument is not a string.\n\n    Examples:\n        >>> new_tuple([\"WEB\", \"is\"], \"best\")\n        ('WEB', 'is', 'best')\n    \"\"\"\n    if not isinstance(args[0], list) or not isinstance(args[1], str):\n        raise TypeError(\"Invalid arguments. The first argument should be a list, and the second argument should be a string.\")\n    return tuple(args[0] + [args[1]])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The list with the highest sum of elements.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    if not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_sum = float('-inf')\n    max_list = []\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If no odd number is found in the list.\n\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd number found in the list.\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the left bits of a given number by d bits.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(0b110101, 3)\n        0b010111\n    \"\"\"\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer.\")\n\n    # Rotate the bits\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        int: The count of lists in the input list.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of the second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of the second tuple is smaller than its corresponding element in the first tuple, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n\n    Examples:\n        >>> add_tuple([5, 6, 7], (9, 10))\n        [5, 6, 7, 9, 10]\n    \"\"\"\n    return lst + list(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tup (tuple): The input tuple.\n        k: The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The sorted array in which to search for the target number.\n        target: The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper():\n            modified_words.append(word)\n        else:\n            modified_words.append(word.capitalize())\n    return ' '.join(modified_words)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PythonProgrammingExamples"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    This function finds the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Initialize the sum to 0\n    total_sum = 0\n\n    # Iterate through the range from l to r\n    for num in range(l, r+1):\n        # Check if the number is odd\n        if num % 2 != 0:\n            # Add the odd number to the sum\n            total_sum += num\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(-1, 2):\n        for j in range(-1, 2):\n            if i != 0 or j != 0:\n                adjacent_coordinates.append([x + i, y + j])\n    return adjacent_coordinates", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function takes a number 'n' as input and returns the sum of all even factors of 'n'.\n\n    Parameters:\n    n (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of 'n'.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "import itertools\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of the list and return a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of each combination.\n\n    Returns:\n        list: A list with tuples representing combinations of the elements of the input list.\n\n    Examples:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n        [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    combinations = list(itertools.product(lst, repeat=n))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}]}}