{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Finds the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A list of shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        [4, 5]\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    return list(set1.intersection(set2))\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test the function\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n        numbers (list): The list of numbers from which to find the n largest integers.\n        n (int): The number of largest integers to find.\n\n    Returns:\n        list: A list of n largest integers in descending order.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)\n        [85, 75, 65]\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    # Create a min-heap using the heapq module\n    heap = []\n    for num in numbers:\n        heapq.heappush(heap, num)\n        if len(heap) > n:\n            heapq.heappop(heap)\n\n    # Reverse the heap to get the n largest integers in descending order\n    largest_numbers = []\n    while heap:\n        largest_numbers.append(heapq.heappop(heap))\n    largest_numbers.reverse()\n\n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check if two numbers differ at one bit position only.\n\n    Args:\n        num1 (int): The first number.\n        num2 (int): The second number.\n\n    Returns:\n        bool: True if the numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = num1 ^ num2\n    return bin(xor_result).count('1') == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True\nassert differ_At_One_Bit_Pos(10, 12) == False\nassert differ_At_One_Bit_Pos(1, 2) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Find squares of individual elements in a list.\n\n    Args:\n        nums (list): List of numbers.\n\n    Returns:\n        list: List of squares of individual elements.\n\n    Examples:\n        >>> square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The minimum number of rotations required.\n\n    Examples:\n        >>> find_Rotations(\"aaaa\")\n        1\n        >>> find_Rotations(\"abcde\")\n        5\n        >>> find_Rotations(\"abcd\")\n        4\n    \"\"\"\n    n = len(string)\n    if n <= 1:\n        return 0\n\n    rotations = 1\n    while rotations < n:\n        if string[rotations:] + string[:rotations] == string:\n            return rotations\n        rotations += 1\n\n    return n\n\n# Test the function\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abcde\") == 5\nassert find_Rotations(\"abcd\") == 4"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from a string.\n\n    Args:\n        string (str): The input string.\n        char (str): The character to be removed.\n\n    Returns:\n        str: The modified string.\n\n    Examples:\n        >>> remove_Occ(\"hello\", \"l\")\n        'heo'\n        >>> remove_Occ(\"hello\", \"x\")\n        'hello'\n    \"\"\"\n    if char in string:\n        first_index = string.find(char)\n        last_index = string.rfind(char)\n        modified_string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n        return modified_string\n    else:\n        return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\"\nassert remove_Occ(\"hello\", \"x\") == \"hello\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n        matrix (list): The input matrix to be sorted.\n\n    Returns:\n        list: The sorted matrix.\n\n    Examples:\n        >>> sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])\n        [[1, 1, 1], [1, 2, 3], [2, 4, 5]]\n    \"\"\"\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    Calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The length of the base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the side of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n        input_string (str): The input string to check.\n\n    Returns:\n        bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Check if the input string contains sequences of lowercase letters joined with an underscore\n    if input_string.islower() and '_' in input_string:\n        return True\n    else:\n        return False\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"AAB_CBBBC\") == False\nassert text_lowercase_underscore(\"aab_CBBBC\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_\") == False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculates the perimeter of a square given its side length.\n\n    Args:\n        side_length (float): The length of each side of the square.\n\n    Returns:\n        float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length\n\n# Test the function\nassert square_perimeter(10) == 40"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    # Create a set of characters from string2\n    set_string2 = set(string2)\n\n    # Remove characters from string1 if they are present in set_string2\n    modified_string = ''.join(char for char in string1 if char not in set_string2)\n\n    return modified_string\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test the function\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 5, 1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    if n < 10:\n        return False\n\n    while n > 9:\n        product = 1\n        for digit in str(n):\n            if digit != '0':\n                product *= int(digit)\n        n = product\n\n    return n == 1\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse = int(str(num)[::-1])\n    twice_reverse = reverse * 2\n    return num == twice_reverse - 1\n\n# Test the function\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Finds the largest number that can be formed with the given list of digits.\n\n    Args:\n        digits (list): A list of digits.\n\n    Returns:\n        int: The largest number that can be formed with the given digits.\n    \"\"\"\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted digits to an integer\n    max_num = int(''.join(map(str, digits)))\n\n    return max_num\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check if the given two integers have opposite signs.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test the function\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(1, 2) == False\nassert opposite_Signs(-1, 2) == False\nassert opposite_Signs(-1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    Parameters:\n    n (int): The index of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(num_list):\n    \"\"\"\n    Finds the smallest number in a list.\n\n    Args:\n        num_list (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-10, -20, -1, -45, -99])\n        -99\n        >>> smallest_num([])\n        ValueError: Input list is empty.\n    \"\"\"\n\n    if not num_list:\n        raise ValueError(\"Input list is empty.\")\n\n    smallest = num_list[0]\n    for num in num_list:\n        if num < smallest:\n            smallest = num\n\n    return smallest\n\n\n# Test the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([-10, -20, -1, -45, -99]) == -99\ntry:\n    smallest_num([])\nexcept ValueError as e:\n    assert str(e) == \"Input list is empty.\""}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum difference between available pairs.\n\n    Examples:\n        >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n        7\n    \"\"\"\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples based on the second value of each tuple.\n\n    Args:\n        marks (list): A list of tuples, where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n        list: The sorted list of tuples based on the second value of each tuple.\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n        lst (list): The input list to be flattened and summed.\n\n    Returns:\n        int: The sum of all elements in the flattened list.\n\n    Examples:\n        >>> recursive_list_sum([1, 2, [3,4],[5,6]])\n        21\n    \"\"\"\n    total = 0\n    for item in lst:\n        if isinstance(item, list):\n            total += recursive_list_sum(item)\n        else:\n            total += item\n    return total\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    \"\"\"\n    Counts the number of positive numbers in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    >>> bell_number(3)\n    5\n    >>> bell_number(4)\n    15\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        bell = [0] * (n + 1)\n        bell[0] = 1\n        bell[1] = 1\n        for i in range(2, n + 1):\n            bell[i] = 0\n            for j in range(i):\n                bell[i] += bell[j] * bell[i - j - 1]\n        return bell[n]\n\n# Test the function\nassert bell_number(2) == 2\nassert bell_number(3) == 5\nassert bell_number(4) == 15"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check if the given array is monotonic.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True\nassert is_monotonic([1, 2, 3, 4]) == True\nassert is_monotonic([4, 3, 2, 1]) == True\nassert is_monotonic([1, 2, 1, 4]) == False\nassert is_monotonic([1, 2, 3, 1]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sub):\n    \"\"\"\n    Check if a list contains the given sublist.\n\n    Args:\n        lst (list): The main list.\n        sub (list): The sublist to check.\n\n    Returns:\n        bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    if len(sub) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sub) + 1):\n        if lst[i:i+len(sub)] == sub:\n            return True\n\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([2,4,3,5,7],[3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7]) == True\nassert is_sublist([2,4,3,5,7],[2,4,3,5,7,8]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Find whether all the given tuples have equal length or not.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    gap = len(lst)\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n\n        for i in range(0, len(lst) - gap):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check if a given number can be represented as the difference of two squares.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(1, int(n**0.5) + 1):\n        for j in range(i, int(n**0.5) + 1):\n            if i**2 + j**2 == n:\n                return True\n    return False\n\n# Test the function\nassert dif_Square(5) == True\nassert dif_Square(10) == True\nassert dif_Square(15) == False"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check if the sequence follows the patterns given in the array.\n\n    Args:\n        patterns (list): List of patterns to be checked.\n        sequence (list): List of elements to be checked against the patterns.\n\n    Returns:\n        bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"]) == False\nassert is_samepatterns([\"red\", \"green\"], [\"a\", \"b\", \"c\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples (list): List of tuples.\n        k (int): Divisor.\n\n    Returns:\n        list: List of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in tuples:\n        if all(x % k == 0 for x in t):\n            result.append(t)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string and calculate the sum of its digits\n    num_str = str(num)\n    digit_sum = sum(int(digit) for digit in num_str)\n\n    # Check if the digit sum is divisible by 11\n    return digit_sum % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check if the length of a word is odd or not.\n\n    Args:\n        word (str): The input word.\n\n    Returns:\n        bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == True"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Find the nth tetrahedral number.\n\n    Parameters:\n    n (int): The value of n.\n\n    Returns:\n    int: The nth tetrahedral number.\n    \"\"\"\n    return n * (n + 1) * (n + 2) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * radius**3\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman-Conway sequence.\n\n    Args:\n        n (int): The index of the number to find.\n\n    Returns:\n        int: The nth number in the Newman-Conway sequence.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> newman_conway(10)\n        6\n        >>> newman_conway(1)\n        1\n        >>> newman_conway(2)\n        1\n        >>> newman_conway(3)\n        1\n        >>> newman_conway(4)\n        2\n        >>> newman_conway(5)\n        2\n        >>> newman_conway(6)\n        3\n        >>> newman_conway(7)\n        4\n        >>> newman_conway(8)\n        4\n        >>> newman_conway(9)\n        5\n        >>> newman_conway(10)\n        6\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The index of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq = {}\n    for num in lst:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    return freq\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Finds the closest smaller number than n.\n\n    Args:\n        n (int): The number to find the closest smaller number for.\n\n    Returns:\n        int: The closest smaller number than n.\n\n    Examples:\n        >>> closest_num(11)\n        10\n        >>> closest_num(10)\n        9\n        >>> closest_num(1)\n        0\n    \"\"\"\n    if n <= 1:\n        return 0\n    else:\n        return n - 1\n\n# Test the function\nassert closest_num(11) == 10\nassert closest_num(10) == 9\nassert closest_num(1) == 0"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of strings representing words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n    \"\"\"\n    longest_length = 0\n    for word in words:\n        if len(word) > longest_length:\n            longest_length = len(word)\n    return longest_length\n\n# Test the function\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): List of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"blue\") == False"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check if a given number is undulating.\n\n    An undulating number is a number in which the digits alternate between even and odd.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if int(num_str[i]) % 2 == int(num_str[i-1]) % 2:\n            return False\n    return True\n\n# Test the function\nassert is_undulating(1212121) == True\nassert is_undulating(1212122) == False\nassert is_undulating(123456789) == True\nassert is_undulating(1234567890) == False"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(tuples):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n        tuples (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not tuples:\n        return None\n\n    min_tuple = tuples[0]\n    for t in tuples:\n        if t[1] < min_tuple[1]:\n            min_tuple = t\n\n    return min_tuple[0]\n\n# Test the function\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        int: The length of the smallest list.\n\n    Raises:\n        ValueError: If the input is not a list of lists.\n\n    Examples:\n        >>> find_min_length([[1], [1, 2]])\n        1\n        >>> find_min_length([[1, 2], [1, 2, 3]])\n        2\n        >>> find_min_length([[1, 2, 3], [1, 2]])\n        2\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4]])\n        3\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5]])\n        4\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]])\n        5\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7]])\n        6\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8]])\n        7\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7, 8, 9]])\n        8\n        >>> find_min_length([[1, 2, 3], [1, 2, 3, 4], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 5, 6, 7, 8], [1, 2"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Find the number of divisors of a given integer.\n\n    Args:\n        n (int): The integer for which to find the number of divisors.\n\n    Returns:\n        int: The number of divisors of the given integer.\n\n    Examples:\n        >>> divisor(15)\n        4\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for sublist in flattened_list:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> multiply_num([8, 2, 3, -1, 7])\n        -67.2\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    product = 1\n    for num in numbers:\n        product *= num\n\n    return product / len(numbers)\n\n# Test the function\nassert math.isclose(multiply_num([8, 2, 3, -1, 7]), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    \"\"\"\n    Convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n\n    Args:\n        decimal (int): The decimal number to convert.\n\n    Returns:\n        str: The binary equivalent of the decimal number, represented as a string with no leading zeros.\n\n    Examples:\n        >>> decimal_to_binary(8)\n        '1000'\n        >>> decimal_to_binary(10)\n        '1010'\n        >>> decimal_to_binary(0)\n        '0'\n    \"\"\"\n    if decimal == 0:\n        return '0'\n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal //= 2\n\n    return binary\n\n# Test the function\nassert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(10) == '1010'\nassert decimal_to_binary(0) == '0'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n        n (int): The input integer.\n\n    Returns:\n        int: The next smallest palindrome of the input integer.\n\n    Examples:\n        >>> next_smallest_palindrome(99)\n        101\n        >>> next_smallest_palindrome(100)\n        101\n        >>> next_smallest_palindrome(101)\n        111\n    \"\"\"\n\n    # Convert the input integer to a string\n    n_str = str(n)\n\n    # Find the length of the input integer\n    length = len(n_str)\n\n    # Check if the input integer is already a palindrome\n    if n_str == n_str[::-1]:\n        # If the input integer is a palindrome, increment it by 1\n        n += 1\n    else:\n        # If the input integer is not a palindrome, find the next smallest palindrome\n        while True:\n            # Increment the input integer by 1\n            n += 1\n\n            # Convert the incremented integer to a string\n            n_str = str(n)\n\n            # Check if the incremented integer is a palindrome\n            if n_str == n_str[::-1]:\n                # If the incremented integer is a palindrome, return it\n                return n\n\n# Test the function\nassert next_smallest_palindrome(99) == 101\nassert next_smallest_palindrome(100) == 101\nassert next_smallest_palindrome(101) == 111"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n        arr (list): The input array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element in the array.\n\n    Raises:\n        ValueError: If the k is out of range.\n\n    Examples:\n        >>> kth_element([12,3,5,7,19], 2)\n        3\n        >>> kth_element([12,3,5,7,19], 5)\n        19\n        >>> kth_element([12,3,5,7,19], 6)\n        ValueError: k is out of range\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"k is out of range\")\n    return arr[k-1]\n\n# Test the function\nassert kth_element([12,3,5,7,19], 2) == 3\nassert kth_element([12,3,5,7,19], 5) == 19\ntry:\n    kth_element([12,3,5,7,19], 6)\nexcept ValueError:\n    pass\nelse:\n    raise AssertionError(\"ValueError not raised for out-of-range k\")"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to convert.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() for word in words)\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Find the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): The first parameter.\n    m (int): The second parameter.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n - 1, m - 1)\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list of lists, where each sublist is sorted.\n\n    Examples:\n        >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count_true_booleans(lst):\n    \"\"\"\n    Counts the number of true booleans in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The count of true booleans in the list.\n\n    Examples:\n        >>> count_true_booleans([True, False, True])\n        2\n        >>> count_true_booleans([False, False, False])\n        0\n        >>> count_true_booleans([True, True, True])\n        3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count\n\n# Test the function\nassert count_true_booleans([True, False, True]) == 2\nassert count_true_booleans([False, False, False]) == 0\nassert count_true_booleans([True, True, True]) == 3"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n        lst (list): The list to be appended.\n        tup (tuple): The tuple to which the list is to be appended.\n\n    Returns:\n        tuple: The resulting tuple after appending the list.\n\n    Examples:\n        >>> add_lists([5, 6, 7], (9, 10))\n        (9, 10, 5, 6, 7)\n    \"\"\"\n    return tup + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times to rotate the binary string.\n\n    Returns:\n    int: The number of numbers with an odd value when rotating the binary string the given number of times.\n    \"\"\"\n\n    def rotate_binary_string(binary_string, num_rotations):\n        \"\"\"\n        Rotate a binary string the given number of times.\n\n        Parameters:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of times to rotate the binary string.\n\n        Returns:\n        str: The rotated binary string.\n        \"\"\"\n        binary_string = binary_string[-num_rotations:] + binary_string[:-num_rotations]\n        return binary_string\n\n    def count_odd_numbers(binary_string):\n        \"\"\"\n        Count the number of numbers with an odd value in a binary string.\n\n        Parameters:\n        binary_string (str): The binary string to be evaluated.\n\n        Returns:\n        int: The number of numbers with an odd value in the binary string.\n        \"\"\"\n        count = 0\n        for char in binary_string:\n            if int(char) % 2 != 0:\n                count += 1\n        return count\n\n    rotated_string = binary_string\n    for _ in range(num_rotations):\n        rotated_string = rotate_binary_string(rotated_string, 1)\n        count = count_odd_numbers(rotated_string)\n\n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n        nested_lists (list): A list of lists.\n\n    Returns:\n        list: A list of common elements.\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(set(lst))\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test the function\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"123.45\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Args:\n        tup (tuple): The input tuple of positive integers.\n\n    Returns:\n        int: The single integer formed by concatenating the elements of the input tuple.\n\n    Examples:\n        >>> tuple_to_int((1, 2, 3))\n        123\n        >>> tuple_to_int((4, 5, 6))\n        456\n    \"\"\"\n    return int(''.join(map(str, tup)))\n\n# Test the function\nassert tuple_to_int((1, 2, 3)) == 123\nassert tuple_to_int((4, 5, 6)) == 456"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): The input sorted array.\n\n    Returns:\n        int: The element that appears only once.\n\n    Raises:\n        ValueError: If the input array is empty or has an odd length.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n        >>> search([1,1,2,2,3,3,4,4,5])\n        5\n        >>> search([1,1,2,2,3,3,4,4])\n        ValueError: The input array has an odd length.\n        >>> search([])\n        ValueError: The input array is empty.\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"The input array is empty.\")\n\n    if len(arr) % 2 == 0:\n        raise ValueError(\"The input array has an odd length.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n\n# Test the function\nassert search([1, 1, 2, 2, 3]) == 3\nassert search([1, 1, 2, 2, 3, 3, 4, 4, 5]) == 5\nassert search([1, 1, 2, 2, 3, 3, 4, 4]) == ValueError(\"The input array has an odd length.\")\nassert search([]) == ValueError(\"The input array is empty.\")"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(tuples_list):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        int: The maximum absolute product between numbers in pairs of tuples.\n\n    Examples:\n        >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        36\n    \"\"\"\n    max_product = 0\n    for i in range(len(tuples_list)):\n        for j in range(i+1, len(tuples_list)):\n            product = abs(tuples_list[i][0] * tuples_list[j][0]) * abs(tuples_list[i][1] * tuples_list[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    \"\"\"\n    Sum all amicable numbers from 1 to a specified number.\n\n    Args:\n        n (int): The upper limit of the range.\n\n    Returns:\n        int: The sum of all amicable numbers from 1 to n.\n    \"\"\"\n    def sum_proper_divisors(num):\n        \"\"\"\n        Calculate the sum of proper divisors of a number.\n\n        Args:\n            num (int): The number for which to calculate the sum of proper divisors.\n\n        Returns:\n            int: The sum of proper divisors of num.\n        \"\"\"\n        divisors_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_sum = 0\n    for i in range(1, n+1):\n        a = sum_proper_divisors(i)\n        b = sum_proper_divisors(a)\n        if i == b and i != a:\n            amicable_sum += i\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0+1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    \"\"\"\n    Find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Args:\n        binary_string (str): The input binary string.\n\n    Returns:\n        int: The maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n\n    Examples:\n        >>> find_length(\"11000010001\")\n        6\n    \"\"\"\n    max_diff = 0\n    count_0 = 0\n    count_1 = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n\n        diff = abs(count_0 - count_1)\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test the function\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors.\n    \"\"\"\n    common_divisors = set()\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            common_divisors.add(i)\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n\n    Returns:\n        int: The product of a and b.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, words):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n        n (int): The minimum length of words to be considered.\n        words (str): A string of words separated by spaces.\n\n    Returns:\n        list: A list of words that are longer than n characters.\n\n    Examples:\n        >>> long_words(3, \"python is a programming language\")\n        ['python', 'programming', 'language']\n    \"\"\"\n    word_list = words.split()\n    long_words = [word for word in word_list if len(word) > n]\n    return long_words\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    \"\"\"\n    Check if a given matrix is a magic square.\n\n    A magic square is a square matrix in which the sum of each row, column, and diagonal is equal.\n\n    Args:\n        matrix (list): The input matrix.\n\n    Returns:\n        bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)\n\n    # Check if the matrix is square\n    if not all(len(row) == n for row in matrix):\n        return False\n\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Calculate the sum of each column\n    col_sums = [sum(col) for col in zip(*matrix)]\n\n    # Calculate the sum of the main diagonal\n    main_diag_sum = sum(matrix[i][i] for i in range(n))\n\n    # Calculate the sum of the secondary diagonal\n    sec_diag_sum = sum(matrix[i][n-i-1] for i in range(n))\n\n    # Check if all sums are equal\n    if len(set(row_sums)) == 1 and len(set(col_sums)) == 1 and row_sums[0] == col_sums[0] == main_diag_sum == sec_diag_sum:\n        return True\n    else:\n        return False\n\n# Test the function\nassert is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Finds the item with maximum frequency in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The item with maximum frequency.\n\n    Examples:\n        >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n        2\n    \"\"\"\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Find the item with maximum frequency\n    max_freq = 0\n    max_item = None\n    for item, freq in freq_dict.items():\n        if freq > max_freq:\n            max_freq = freq\n            max_item = item\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(string):\n    vowels = \"aeiouAEIOU\"\n    vowel_list = [char for char in string if char in vowels]\n    vowel_list.reverse()\n    vowel_index = 0\n    result = \"\"\n    for char in string:\n        if char in vowels:\n            result += vowel_list[vowel_index]\n            vowel_index += 1\n        else:\n            result += char\n    return result\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello World\") == \"Hollo Werld\"\nassert reverse_vowels(\"aeiou\") == \"uoiea\"\nassert reverse_vowels(\"AEIOU\") == \"UOIEA\"\nassert reverse_vowels(\"\") == \"\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        str: The converted string.\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The sum of the negative numbers in the list.\n\n    Examples:\n        >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n        -32\n    \"\"\"\n    negative_sum = 0\n    for num in numbers:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    \"\"\"\n    Find the ratio of zeroes to non-zeroes in an array of integers.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        float: The ratio of zeroes to non-zeroes in the array.\n\n    Examples:\n        >>> zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])\n        0.181818\n    \"\"\"\n    zero_count = sum(1 for num in arr if num == 0)\n    non_zero_count = len(arr) - zero_count\n    ratio = zero_count / non_zero_count\n    return ratio\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check if a given number can be represented as the sum of non-zero powers of 2.\n\n    Args:\n        n (int): The number to check.\n\n    Returns:\n        bool: True if the number can be represented as the sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n == 0:\n        return True\n\n    while n > 0:\n        if n % 2 == 0:\n            n //= 2\n        else:\n            return False\n\n    return True\n\n# Test the function\nassert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(12) == True\nassert is_Sum_Of_Powers_Of_Two(14) == False"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n        lst (list): The list of lists to be flattened.\n\n    Returns:\n        set: A set of numbers extracted from the input list.\n\n    Examples:\n        >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n        {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        flattened_set.update(sublist)\n    return flattened_set\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def flip(lst, k):\n        \"\"\"\n        Flips the first k elements of a list in place.\n\n        Parameters:\n        lst (list): The list to be flipped.\n        k (int): The number of elements to be flipped.\n\n        Returns:\n        list: The flipped list.\n        \"\"\"\n        i = 0\n        while i < k // 2:\n            lst[i], lst[k - i - 1] = lst[k - i - 1], lst[i]\n            i += 1\n        return lst\n\n    def find_max_index(lst, n):\n        \"\"\"\n        Finds the index of the maximum element in a list.\n\n        Parameters:\n        lst (list): The list to be searched.\n        n (int): The number of elements to consider.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(1, n):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    while n > 1:\n        max_index = find_max_index(lst, n)\n        if max_index != n - 1:\n            lst = flip(lst, max_index + 1)\n            lst = flip(lst, n)\n        n -= 1\n    return lst\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Counts the number of items that are identical in the same position of three given lists.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n        list3 (list): The third list.\n\n    Returns:\n        int: The number of items that are identical in the same position of the three lists.\n\n    Examples:\n        >>> count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])\n        3\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of numbers.\n\n    Returns:\n        int: The maximum absolute difference between any two elements.\n\n    Examples:\n        >>> max_Abs_Diff((2,1,5,3))\n        4\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test the function\nassert max_Abs_Diff((2,1,5,3)) == 4"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    n (int): The target value.\n\n    Returns:\n    tuple: A tuple containing x and y, or None if no solution exists.\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return x, y\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return x, y\n    else:\n        return None\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(2, 3, 8) == None\nassert find_solution(2, 3, 9) == (3, 2)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst1, lst2):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n        lst1 (list): The list from which elements are to be removed.\n        lst2 (list): The list of elements to be removed from lst1.\n\n    Returns:\n        list: The modified list with elements from lst2 removed.\n\n    Examples:\n        >>> remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 10]\n    \"\"\"\n    return [x for x in lst1 if x not in lst2]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    \"\"\"\n    Calculate the sum (n - 2*i) from i=0 to n // 2.\n\n    Parameters:\n    n (int): The value of n.\n\n    Returns:\n    int: The sum of the series.\n    \"\"\"\n    sum = 0\n    for i in range(n // 2 + 1):\n        sum += n - 2 * i\n    return sum\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of characters that occur at the same position in the string as in the English alphabet.\n\n    Examples:\n        >>> count_char_position(\"xbcefg\")\n        2\n        >>> count_char_position(\"abcdefghijklmnopqrstuvwxyz\")\n        26\n        >>> count_char_position(\"\")\n        0\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + i):\n            count += 1\n    return count\n\n# Test the function\nassert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"abcdefghijklmnopqrstuvwxyz\") == 26\nassert count_char_position(\"\") == 0"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(numbers):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if (numbers[i] ^ numbers[j]) % 2 == 0:\n                count += 1\n    return count\n\n# Test cases\nassert find_even_pair([5, 4, 7, 2, 1]) == 4\nassert find_even_pair([1, 2, 3, 4, 5]) == 6\nassert find_even_pair([1, 3, 5, 7, 9]) == 0"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n# Test the function\nassert next_power_of_2(0) == 1\nassert next_power_of_2(1) == 1\nassert next_power_of_2(2) == 2\nassert next_power_of_2(3) == 4\nassert next_power_of_2(4) == 4\nassert next_power_of_2(5) == 8\nassert next_power_of_2(6) == 8\nassert next_power_of_2(7) == 8\nassert next_power_of_2(8) == 8\nassert next_power_of_2(9) == 16\nassert next_power_of_2(10) == 16"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The input list.\n        num (int): The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count\n\n# Test the function\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Find the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n        lst (list): The input list of numbers.\n        start (int): The starting index of the range.\n        end (int): The ending index of the range.\n\n    Returns:\n        int: The sum of numbers within the specified range.\n\n    Raises:\n        ValueError: If the start or end index is out of range.\n\n    Examples:\n        >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n        29\n    \"\"\"\n    if start < 0 or end >= len(lst):\n        raise ValueError(\"Start or end index is out of range\")\n\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon.\n\n    Parameters:\n    side_length (float or int): The length of each side of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n    \"\"\"\n    perimeter = 5 * side_length\n    return perimeter\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of occurence of the string 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(tup):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(tup[0])\n    for element in tup:\n        if not isinstance(element, data_type):\n            return False\n    return True\n\n# Test the function\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((5, 6, 7, 3, 5, \"6\")) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    \"\"\"\n    Check if the given element is the majority element in the sorted array.\n\n    Args:\n        arr (list): The sorted array.\n        n (int): The length of the array.\n        element: The element to check for majority.\n\n    Returns:\n        bool: True if the element is the majority, False otherwise.\n    \"\"\"\n    # Calculate the threshold for majority\n    threshold = n // 2\n\n    # Find the first occurrence of the element\n    first_occurrence = find_first_occurrence(arr, element)\n\n    # Check if the element occurs more than n/2 times\n    if first_occurrence != -1 and first_occurrence + threshold <= n - 1 and arr[first_occurrence + threshold] == element:\n        return True\n    else:\n        return False\n\n\ndef find_first_occurrence(arr, element):\n    \"\"\"\n    Find the first occurrence of the given element in the array.\n\n    Args:\n        arr (list): The array.\n        element: The element to find.\n\n    Returns:\n        int: The index of the first occurrence of the element, or -1 if not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == element:\n            if mid == 0 or arr[mid - 1] < element:\n                return mid\n            else:\n                high = mid - 1\n        elif arr[mid] < element:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return -1\n\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number of set bits in the input number.\n\n    Examples:\n        >>> count_Set_Bits(2)\n        1\n        >>> count_Set_Bits(7)\n        3\n        >>> count_Set_Bits(0)\n        0\n    \"\"\"\n    count = 0\n    while num:\n        num &= (num - 1)\n        count += 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(7) == 3\nassert count_Set_Bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> odd_values_string('abcdef')\n        'ace'\n    \"\"\"\n    modified_string = ''\n    for i in range(len(string)):\n        if i % 2 == 0:\n            modified_string += string[i]\n    return modified_string\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Finds the minimum of three numbers.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n        c (int or float): The third number.\n\n    Returns:\n        int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character.\n\n    Args:\n        string (str): The input string.\n        character (str): The character to replace blank spaces with.\n\n    Returns:\n        str: The modified string with blank spaces replaced by the given character.\n    \"\"\"\n    return string.replace(\" \", character)\n\n# Test the function\nassert replace_blank(\"hello people\",'@')==(\"hello@people\")"}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Function to find the n largest items from a list.\n\n    Args:\n        lst (list): The input list.\n        n (int): The number of largest items to be returned.\n\n    Returns:\n        list: A list containing the n largest items from the input list.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)\n        [100, 90]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)\n        [100, 90, 80]\n        >>> larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 1)\n        [100]\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    lst_copy = lst.copy()\n    largest_items = []\n\n    for _ in range(n):\n        largest_item = max(lst_copy)\n        largest_items.append(largest_item)\n        lst_copy.remove(largest_item)\n\n    return largest_items\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculates the volume of a cube given its side length.\n\n    Args:\n        side_length (float): The length of each side of the cube.\n\n    Returns:\n        float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number with all even bits set.\n    \"\"\"\n    # Create a mask to set even bits\n    mask = 0xAAAAAAAA\n\n    # Apply the mask to set even bits\n    result = num | mask\n\n    return result\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(tuples_list):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Examples:\n        >>> check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)])\n        {(1, 3): 2, (2, 5): 2, (3, 6): 1}\n    \"\"\"\n    occurences = {}\n    for tup in tuples_list:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of non-empty substrings.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            if string[i:j]:\n                count += 1\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Args:\n        m (int): The maximum value of each element in the sequence.\n        n (int): The length of the sequence.\n\n    Returns:\n        int: The number of possible sequences.\n    \"\"\"\n    # Initialize the dynamic programming table\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base case: There is only one sequence of length 1\n    dp[1][0] = 1\n\n    # Fill the dynamic programming table\n    for i in range(2, n + 1):\n        for j in range(1, m + 1):\n            dp[i][j] = dp[i - 1][j // 2]\n\n    # Return the total number of sequences\n    return sum(dp[n])\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The modified first list.\n\n    Examples:\n        >>> replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])\n        [1, 3, 5, 7, 9, 2, 4, 6, 8]\n    \"\"\"\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        num (int): The given number.\n\n    Returns:\n        int: The next perfect square greater than the given number.\n\n    Examples:\n        >>> next_Perfect_Square(35)\n        36\n    \"\"\"\n    # Find the square root of the given number\n    sqrt = math.sqrt(num)\n\n    # Check if the square root is an integer\n    if sqrt.is_integer():\n        return int(sqrt) ** 2\n\n    # Find the next integer greater than the square root\n    next_int = int(sqrt) + 1\n\n    # Return the square of the next integer\n    return next_int ** 2\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    A bitonic subsequence is a subsequence of a given sequence in which the elements are first increasing and then decreasing.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum sum of a bitonic subsequence.\n\n    Examples:\n        >>> max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9])\n        194\n    \"\"\"\n\n    # Base case: if the array has only one element, return its value\n    if len(arr) == 1:\n        return arr[0]\n\n    # Initialize variables to store the maximum sum and the current sum\n    max_sum = 0\n    current_sum = 0\n\n    # Iterate over the array\n    for i in range(len(arr)):\n        # Update the current sum\n        current_sum += arr[i]\n\n        # Check if the current sum is greater than the maximum sum\n        if current_sum > max_sum:\n            max_sum = current_sum\n\n        # If the current sum becomes negative, reset it to 0\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the longest palindromic subsequence.\n\n    Examples:\n        >>> lps(\"TENS FOR TENS\")\n        5\n    \"\"\"\n\n    # Create a 2D table to store the lengths of palindromic subsequences\n    n = len(string)\n    dp = [[0] * n for _ in range(n)]\n\n    # Base case: single characters are palindromes of length 1\n    for i in range(n):\n        dp[i][i] = 1\n\n    # Build the table diagonally\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        element: The element to count.\n\n    Returns:\n        int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import math\n\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, theta) of the complex number.\n    \"\"\"\n    r = abs(complex_number)\n    theta = math.atan2(complex_number.imag, complex_number.real)\n    return r, theta\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Counts the number of integer elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "from itertools import product\n\ndef combinations_colors(lst, n):\n    \"\"\"\n    Generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n\n    Args:\n        lst (list): The input list.\n        n (int): The length of the combinations.\n\n    Returns:\n        list: A list with a tuple for each combination.\n\n    Examples:\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 1)\n        [('Red',), ('Green',), ('Blue',)]\n        >>> combinations_colors([\"Red\", \"Green\", \"Blue\"], 2)\n        [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]\n    \"\"\"\n    combinations = list(product(lst, repeat=n))\n    return combinations\n\n# Test the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Red'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Red'), ('Blue', 'Green'), ('Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Counts the number of prime numbers less than a given non-negative number.\n\n    Args:\n        n (int): The non-negative number.\n\n    Returns:\n        int: The number of prime numbers less than n.\n\n    Raises:\n        ValueError: If n is negative.\n\n    Examples:\n        >>> count_Primes_nums(5)\n        2\n        >>> count_Primes_nums(10)\n        4\n        >>> count_Primes_nums(100)\n        25\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    primes = [True] * (n + 1)\n    primes[0] = primes[1] = False\n\n    for i in range(2, int(n ** 0.5) + 1):\n        if primes[i]:\n            for j in range(i * i, n + 1, i):\n                primes[j] = False\n\n    return sum(primes)\n\n# Test the function\nassert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    return num2, num1\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Maximize the elements of two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple with the maximized elements.\n\n    Examples:\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n    # Check if the lengths of the tuples are equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the tuples must be equal.\")\n\n    # Create a new tuple to store the maximized elements\n    maximized_tuple = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(tuple1)):\n        # Get the maximized elements for each pair of elements\n        maximized_element = max(tuple1[i] + tuple2[i])\n        maximized_tuple.append(maximized_element)\n\n    return tuple(maximized_tuple)\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The index of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(10)\n    29\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    primes = [2, 3, 5]\n    if n <= 3:\n        return primes[n - 1]\n\n    i = 3\n    while len(primes) < n:\n        is_prime = True\n        for prime in primes:\n            if i % prime == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n        i += 1\n\n    return primes[n - 1]\n\n\n# Test the function\nassert newman_prime(3) == 7\nassert newman_prime(10) == 29"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division operation across two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A new tuple containing the result of element-wise division.\n\n    Raises:\n        ValueError: If the length of the tuples are not equal.\n\n    Examples:\n        >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n        (2, 2, 2, 3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have equal length.\")\n\n    result = tuple(a / b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n    Args:\n        lst (list): The input list to be split.\n        L (int): The length of the first part of the list.\n\n    Returns:\n        tuple: A tuple containing the two resulting lists.\n\n    Examples:\n        >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n        ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return first_part, second_part\n\n# Test the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n    \"\"\"\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test the function\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list into sublists for every nth element.\n\n    Args:\n        lst (list): The input list to be split.\n        n (int): The number of elements in each sublist.\n\n    Returns:\n        list: A list of sublists, where each sublist contains n elements from the input list.\n\n    Examples:\n        >>> list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)\n        [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of each side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    \"\"\"\n    return 6 * side_length ** 2\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculates the sum of the squares of the first n odd natural numbers.\n\n    Args:\n        n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the squares of the first n odd natural numbers.\n\n    Examples:\n        >>> square_Sum(2)\n        10\n        >>> square_Sum(3)\n        36\n        >>> square_Sum(4)\n        100\n    \"\"\"\n    odd_numbers = [2 * i + 1 for i in range(n)]\n    return sum(num ** 2 for num in odd_numbers)\n\n# Test the function\nassert square_Sum(2) == 10\nassert square_Sum(3) == 36\nassert square_Sum(4) == 100"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a number that can be represented as the sum of the factorials of its digits.\n\n    Parameters:\n    n (int): The index of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    253\n    \"\"\"\n    def factorial(num):\n        \"\"\"\n        Calculate the factorial of a number.\n\n        Parameters:\n        num (int): The number for which to calculate the factorial.\n\n        Returns:\n        int: The factorial of the given number.\n\n        Examples:\n        >>> factorial(5)\n        120\n        >>> factorial(0)\n        1\n        \"\"\"\n        if num == 0:\n            return 1\n        else:\n            return num * factorial(num - 1)\n\n    def is_star_num(num):\n        \"\"\"\n        Check if a number is a star number.\n\n        A star number is a number that can be represented as the sum of the factorials of its digits.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a star number, False otherwise.\n\n        Examples:\n        >>> is_star_num(37)\n        True\n        >>> is_star_num(123)\n        False\n        \"\"\"\n        num_str = str(num)\n        sum_of_factorials = 0\n        for digit in num_str:\n            sum_of_factorials += factorial(int(digit))\n        return sum_of_factorials == num\n\n    count = 0\n    num = 0\n    while count < n:\n        num += 1\n        if is_star_num(num):\n            count += 1\n    return num\n\n# Test the function\nassert find_star_num(3) == 37\nassert find_star_num(5) == 253"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Find the ASCII value of a character.\n\n    Parameters:\n    char (str): The character for which the ASCII value is to be found.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('C')\n    67\n    \"\"\"\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65\nassert ascii_value('B') == 66\nassert ascii_value('C') == 67"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Find the sum of even numbers at even positions in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of even numbers at even positions.\n\n    Examples:\n        >>> sum_even_and_even_index([5, 6, 12, 1, 18, 8])\n        30\n    \"\"\"\n    return sum(num for idx, num in enumerate(lst) if idx % 2 == 0 and num % 2 == 0)\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Args:\n        n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of the first n even natural numbers raised to the fifth power.\n\n    Examples:\n        >>> even_Power_Sum(2)\n        1056\n        >>> even_Power_Sum(3)\n        25336\n        >>> even_Power_Sum(4)\n        57344\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += (2*i)**5\n    return sum\n\n# Test the function\nassert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 25336\nassert even_Power_Sum(4) == 57344"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        list: A list containing the rear element of each tuple.\n\n    Examples:\n        >>> rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])\n        [21, 20, 19]\n    \"\"\"\n    rear_list = [tup[2] for tup in tuples_list]\n    return rear_list\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    Subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple with the subtracted elements.\n\n    Raises:\n        ValueError: If the length of the tuples are not equal.\n\n    Examples:\n        >>> substract_elements((10, 4, 5), (2, 5, 18))\n        (8, -1, -13)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The length of the tuples are not equal.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): The positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum = 0\n\n    # Iterate from 0 to n\n    for i in range(n + 1):\n        # Calculate the binomial coefficient using the formula\n        coeff = (n - i) * (n - i + 1) // (i + 1)\n\n        # Check if the index is even\n        if i % 2 == 0:\n            # Add the coefficient to the sum\n            sum += coeff\n\n    return sum\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7500000000002, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    \"\"\"\n    Filters a dictionary to only include entries with values greater than or equal to n.\n\n    Args:\n        dictionary (dict): The input dictionary.\n        n (int): The minimum value to filter by.\n\n    Returns:\n        dict: The filtered dictionary.\n    \"\"\"\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if all elements in a given list are unique.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test the function\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([1, 1, 2]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: The subtracted list.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [4, 5])\n        ValueError: Input lists have different lengths.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists have different lengths.\")\n    return [a - b for a, b in zip(list1, list2)]\n\n# Test the function\nassert sub_list([1, 2, 3], [4, 5, 6]) == [-3, -3, -3]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    \"\"\"\n    Check if the frequency of each digit in the integer is less than or equal to the digit itself.\n\n    Args:\n        num (int): The integer to be checked.\n\n    Returns:\n        bool: True if the frequency of each digit is less than or equal to the digit itself, False otherwise.\n    \"\"\"\n    freq = [0] * 10\n    while num > 0:\n        digit = num % 10\n        freq[digit] += 1\n        num //= 10\n\n    for i in range(10):\n        if freq[i] > i:\n            return False\n\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(1223) == False\nassert validate(123456789) == True\nassert validate(1234567890) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n        lst (list): The input list.\n        element: The element to check for.\n\n    Returns:\n        bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check if the string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"abc\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == True\nassert text_match_two_three(\"abbbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Args:\n        arr (list): The input array.\n        k (int): The number of times the array is repeated.\n        n (int): The length of the original array.\n\n    Returns:\n        int: The largest sum of a contiguous array in the modified array.\n    \"\"\"\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr, n)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum * k\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    # by considering the case where the original array is repeated\n    modified_sum_repeated = max(modified_sum, original_sum * (k - 1) + max_sum)\n\n    return modified_sum_repeated\n\n\ndef max_sub_array_sum(arr, n):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray in the given array.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n\n    Returns:\n        int: The maximum sum of a contiguous subarray.\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculates the sum of squares of the first n even natural numbers.\n\n    Args:\n        n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n        int: The sum of squares of the first n even natural numbers.\n\n    Examples:\n        >>> square_Sum(2)\n        20\n        >>> square_Sum(3)\n        45\n        >>> square_Sum(4)\n        90\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i\n    return sum\n\n# Test the function\nassert square_Sum(2) == 20\nassert square_Sum(3) == 45\nassert square_Sum(4) == 90"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        tuple: A tuple containing the maximum length and the list with maximum length.\n\n    Examples:\n        >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len]\n    return max_len, max_list[0]\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    Finds the quotient of two numbers (rounded down to the nearest integer).\n\n    Args:\n        a (int): The dividend.\n        b (int): The divisor.\n\n    Returns:\n        int: The quotient of a divided by b.\n\n    Raises:\n        ValueError: If b is zero.\n\n    Examples:\n        >>> find(10, 3)\n        3\n        >>> find(10, 0)\n        Traceback (most recent call last):\n            ...\n        ValueError: Division by zero is not allowed.\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"Division by zero is not allowed.\")\n    return a // b\n\n# Test the function\nassert find(10, 3) == 3\nassert find(10, 0)"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(a, b):\n    \"\"\"\n    Find the third side of a right angled triangle.\n\n    Parameters:\n    a (float): The length of the first side.\n    b (float): The length of the second side.\n\n    Returns:\n    float: The length of the third side.\n\n    Raises:\n    ValueError: If either a or b is negative.\n\n    Examples:\n    >>> otherside_rightangle(7, 8)\n    10.63014581273465\n    \"\"\"\n\n    if a < 0 or b < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    c = math.sqrt(a**2 + b**2)\n    return c\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Finds the maximum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The maximum value in the list.\n\n    Raises:\n        ValueError: If the list is empty.\n\n    Examples:\n        >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n        5\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty\")\n\n    max_value = lst[0]\n    for item in lst:\n        if isinstance(item, (int, float)) and item > max_value:\n            max_value = item\n\n    return max_value\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The number of inversions in the array.\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1,20,6,4,5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n        tuples (list): List of tuples where each tuple contains a name and an aggregate.\n\n    Returns:\n        tuple: The tuple with the maximum aggregate.\n\n    Examples:\n        >>> max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])\n        ('Juan Whelan', 212)\n    \"\"\"\n    max_aggregate_name = None\n    max_aggregate_value = float('-inf')\n\n    for name, aggregate in tuples:\n        if aggregate > max_aggregate_value:\n            max_aggregate_name = name\n            max_aggregate_value = aggregate\n\n    return (max_aggregate_name, max_aggregate_value)\n\n# Test the function\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Args:\n        n (int): The length of the binary sequence.\n\n    Returns:\n        float: The count of binary sequences.\n    \"\"\"\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 2\n    else:\n        return 2 * count_binary_seq(n - 1) + count_binary_seq(n - 2)\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if isinstance(dictionary, dict):\n        if dictionary:\n            return 1 + max(dict_depth(value) for value in dictionary.values())\n        else:\n            return 1\n    else:\n        return 0\n\n# Test the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None\n\n# Test the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    \"\"\"\n    Find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n\n    Args:\n        arr (list): The input array.\n        n (int): The length of the array.\n        i (int): The index up to which the subsequence is considered.\n        k (int): The index of the element to be included in the subsequence.\n\n    Returns:\n        int: The maximum sum of increasing subsequence.\n\n    Raises:\n        ValueError: If the given index i is out of range.\n        ValueError: If the given index k is out of range or is not greater than i.\n\n    Examples:\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)\n        11\n        >>> max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 3)\n        Traceback (most recent call last):\n            ...\n        ValueError: Given index k is out of range or is not greater than i.\n    \"\"\"\n\n    if i < 0 or i >= n:\n        raise ValueError(\"Given index i is out of range.\")\n\n    if k <= i or k >= n:\n        raise ValueError(\"Given index k is out of range or is not greater than i.\")\n\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Initialize the current sum of increasing subsequence\n    curr_sum = 0\n\n    # Iterate through the array from index 0 to i\n    for j in range(i + 1):\n        # If the current element is greater than the previous element\n        if arr[j] > arr[j - 1]:\n            # Add the current element to the current sum\n            curr_sum += arr[j]\n        else:\n            # Update the maximum sum if the current sum is greater\n            max_sum = max(max_sum, curr_sum)\n            # Reset the current sum\n            curr_sum = arr[j]\n\n    # Add the element at index k to the current sum\n    curr_sum += arr[k]\n\n    # Update the maximum sum if the current sum is greater\n    max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Finds the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first list of numbers.\n        list2 (list): The second list of numbers.\n        num (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the number of products to find is greater than the number of elements in the lists.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n\n    if num > len(list1) or num > len(list2):\n        raise ValueError(\"Number of products to find is greater than the number of elements in the lists.\")\n\n    products = []\n    for i in range(num):\n        max_product = max(list1[i] * list2[i] for i in range(num))\n        products.append(max_product)\n\n    return products"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    Finds the maximum of two numbers.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        int or float: The maximum of the two numbers.\n    \"\"\"\n    if a > b:\n        return a\n    else:\n        return b\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    Set the left most unset bit in a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The number with the left most unset bit set.\n\n    Examples:\n        >>> set_left_most_unset_bit(10)\n        14\n    \"\"\"\n    # Find the position of the leftmost unset bit\n    pos = 0\n    while num & (1 << pos):\n        pos += 1\n\n    # Set the leftmost unset bit\n    num |= (1 << pos)\n\n    return num\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    Find the highest power of 2 that is less than or equal to n.\n\n    Args:\n        n (int): The input number.\n\n    Returns:\n        int: The highest power of 2 that is less than or equal to n.\n\n    Examples:\n        >>> highest_Power_of_2(10)\n        8\n        >>> highest_Power_of_2(16)\n        16\n        >>> highest_Power_of_2(32)\n        32\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test the function\nassert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(16) == 16\nassert highest_Power_of_2(32) == 32"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    Parameters:\n    n (int): The index of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Examples:\n    >>> find_lucas(9)\n    76\n    \"\"\"\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all elements in a list.\n\n    Args:\n        lst (list): The input list.\n        format_str (str): The format string to apply.\n\n    Returns:\n        list: The modified list with the format string applied to each element.\n\n    Examples:\n        >>> add_string([1, 2, 3, 4], 'temp{0}')\n        ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(item) for item in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n        tup (tuple): The input tuple to check for duplicates.\n\n    Returns:\n        bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n# Test the function\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    \"\"\"\n    Finds the first non-repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first non-repeated character in the string.\n        None: If all characters in the string are repeated.\n\n    Examples:\n        >>> first_non_repeating_character(\"abcabc\")\n        None\n        >>> first_non_repeating_character(\"abcdabcd\")\n        'c'\n        >>> first_non_repeating_character(\"aabbcc\")\n        None\n    \"\"\"\n    # Create a dictionary to store the count of each character\n    char_count = {}\n\n    # Iterate over each character in the string\n    for char in string:\n        # Increment the count of the character in the dictionary\n        char_count[char] = char_count.get(char, 0) + 1\n\n    # Iterate over each character in the string\n    for char in string:\n        # Check if the count of the character is 1\n        if char_count[char] == 1:\n            return char\n\n    # If no non-repeated character is found, return None\n    return None\n\n# Test the function\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abcdabcd\") == 'c'\nassert first_non_repeating_character(\"aabbcc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(num1, num2, num3):\n    \"\"\"\n    Finds the median of three numbers.\n\n    Args:\n        num1 (float): The first number.\n        num2 (float): The second number.\n        num3 (float): The third number.\n\n    Returns:\n        float: The median of the three numbers.\n    \"\"\"\n    # Sort the numbers in ascending order\n    sorted_numbers = sorted([num1, num2, num3])\n\n    # Find the median\n    median = sorted_numbers[1]\n\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of sums of digits for each number in the input list.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        [1, 2, 11]\n    \"\"\"\n    sums = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        sums.append(digit_sum)\n    return sums\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Finds the minimum of two numbers.\n\n    Args:\n        a (int or float): The first number.\n        b (int or float): The second number.\n\n    Returns:\n        int or float: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    Finds the parity of a given number.\n\n    Parameters:\n    num (int): The number to check parity for.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test the function\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(tuples_list):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n        tuples_list (list): A list of tuples.\n\n    Returns:\n        int: The minimum product from the pairs of tuples.\n\n    Examples:\n        >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n        8\n    \"\"\"\n    min_product = float('inf')\n    for tup in tuples_list:\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Finds the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list.\")\n\n    min_val = float('inf')\n    for item in lst:\n        if isinstance(item, (int, float)) and item < min_val:\n            min_val = item\n\n    return min_val\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n        >>> remove_odd([1, 2, 3, 4, 5])\n        [2, 4]\n        >>> remove_odd([2, 4, 6])\n        [2, 4, 6]\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Test the function\nassert remove_odd([1, 2, 3]) == [2]\nassert remove_odd([1, 2, 3, 4, 5]) == [2, 4]\nassert remove_odd([2, 4, 6]) == [2, 4, 6]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n        lst (list): The input list of tuples.\n        n (int): The index of the element to extract.\n\n    Returns:\n        list: A list containing the nth element from each tuple in the input list.\n\n    Examples:\n        >>> extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)\n        ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\n    \"\"\"\n    return [tup[n] for tup in lst]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False\n\n# Test the function\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3,4,5],[3,4,5,6,7]) == True"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Finds a pair with highest product from a given array of integers.\n\n    Args:\n        arr (list): The input array of integers.\n\n    Returns:\n        tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n        ValueError: If the input array is empty or contains only one element.\n\n    Examples:\n        >>> max_Product([1,2,3,4,7,0,8,4])\n        (7, 8)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input array must contain at least two elements.\")\n\n    max_product = float('-inf')\n    max_pair = None\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                max_pair = (arr[i], arr[j])\n\n    return max_pair\n\n# Test the function\nassert max_Product([1,2,3,4,7,0,8,4]) == (7, 8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Finds the element of a list with maximum length.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The element of the list with maximum length.\n\n    Examples:\n        >>> Find_Max([['A'],['A','B'],['A','B','C']])\n        ['A', 'B', 'C']\n    \"\"\"\n    max_length = max(len(sublist) for sublist in lst)\n    max_element = [sublist for sublist in lst if len(sublist) == max_length][0]\n    return max_element\n\n# Test the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    \"\"\"\n    Find the cube sum of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Examples:\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    216\n    >>> cube_Sum(4)\n    408\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        sum += i * i * i * 2\n    return sum\n\n# Test the function\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 216\nassert cube_Sum(4) == 408"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenate each element of a tuple by the delimiter.\n\n    Args:\n        tup (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to use for concatenation. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n    \"\"\"\n    return delimiter.join(str(x) for x in tup)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Find the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n        tup (tuple): The input tuple of strings.\n\n    Returns:\n        list: A list of rear index elements extracted from the input tuple.\n\n    Examples:\n        >>> extract_rear(('Mers', 'for', 'Vers') )\n        ['s', 'r', 's']\n    \"\"\"\n    return [s[-1] for s in tup]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of odd numbers.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    year, month, day = date.split('-')\n    return f\"{day}-{month}-{year}\"\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    \"\"\"\n    Sorts the given array using Shell sort algorithm.\n\n    Args:\n        arr (list): The input array to be sorted.\n\n    Returns:\n        list: The sorted array.\n    \"\"\"\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extract the elementwise and tuples from the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The elementwise and tuples.\n\n    Examples:\n        >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n        (0, 0, 2, 1)\n    \"\"\"\n    result = tuple(a & b for a, b in zip(tuple1, tuple2))\n    return result\n\n# Test the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2 term.\n    b (float): Coefficient of x term.\n    c (float): Constant term.\n\n    Returns:\n    float: The directrix of the parabola.\n\n    Examples:\n    >>> parabola_directrix(5, 3, 2)\n    -198\n    \"\"\"\n    return -b / (2 * a)\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Find the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Examples:\n    >>> median_trapezium(15, 25, 35)\n    20.0\n    \"\"\"\n    median = (a + b) / 2\n    return median * c\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20.0"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Args:\n        arr (list): The input array.\n        num (int): The entered number.\n\n    Returns:\n        bool: True if the entered number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test the function\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    Find the last digit of a given number.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The last digit of the input number.\n\n    Examples:\n        >>> last_digit(123)\n        3\n        >>> last_digit(1000)\n        0\n        >>> last_digit(-123)\n        3\n    \"\"\"\n    return abs(number) % 10\n\n# Test the function\nassert last_digit(123) == 3\nassert last_digit(1000) == 0\nassert last_digit(-123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns the negative numbers in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list containing the negative numbers in the input list.\n\n    Examples:\n        >>> neg_nos([-1, 4, 5, -6])\n        [-1, -6]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n    \"\"\"\n    return ''.join(string[i] for i in range(len(string)) if i % 2 == 0)\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): List of integers to be joined.\n\n    Returns:\n        int: Joined integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "import re\n\ndef find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n    \"\"\"\n    adverb_pattern = r'\\b(?:very|just|really|quite|extremely|so|so much|so much so)\\b'\n    match = re.search(adverb_pattern, sentence)\n    if match:\n        start_pos = match.start()\n        end_pos = match.end()\n        adverb = match.group()\n        return start_pos, end_pos, adverb\n    else:\n        return None\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int or float): The length of each side of the cube.\n\n    Returns:\n    float: The surface area of the cube.\n    \"\"\"\n    return 6 * size ** 2\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    \"\"\"\n    Perform index wise multiplication of tuple elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: A tuple containing the index wise multiplication of the elements of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) )\n        ((6, 21), (12, 45), (2, 9), (7, 30))\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(map(lambda x, y: (x[0] * y[0], x[1] * y[1]), tuple1, tuple2))\n    return result\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_input):\n    count = 0\n    for element in list_input:\n        count += tuple_input.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Find cubes of individual elements in a list.\n\n    Args:\n        nums (list): List of numbers.\n\n    Returns:\n        list: List of cubes of individual elements.\n\n    Examples:\n        >>> cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n        [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 3\n    elif n == 2:\n        return 0\n    else:\n        a, b, c = 3, 0, 2\n        for _ in range(3, n+1):\n            a, b, c = b, c, a + b\n        return a\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): The input list of string values.\n        size (int): The size of the strings to be extracted.\n\n    Returns:\n        list: A list of strings with the specified size.\n    \"\"\"\n    return [s for s in string_list if len(s) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(' ', '')\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    Find the sum of even factors of a number.\n\n    Parameters:\n    n (int): The number for which to find the sum of even factors.\n\n    Returns:\n    int: The sum of even factors of the number.\n\n    Examples:\n    >>> sumofFactors(18)\n    26\n    >>> sumofFactors(10)\n    10\n    >>> sumofFactors(1)\n    0\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum\n\n# Test the function\nassert sumofFactors(18) == 26\nassert sumofFactors(10) == 10\nassert sumofFactors(1) == 0"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Args:\n        text (str): The input text.\n\n    Returns:\n        bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Test the function\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check if the given month number contains 31 days.\n\n    Args:\n        month_number (int): The month number to check.\n\n    Returns:\n        bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return month_number == 2\n\n# Test the function\nassert check_monthnumb_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n\n    Returns:\n        list: A list of reversed string values.\n\n    Examples:\n        >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n        ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with minimum length in a given list of lists.\n\n    Args:\n        lst (list): A list of lists.\n\n    Returns:\n        list: The sublist with minimum length.\n\n    Examples:\n        >>> Find_Min([[1],[1,2],[1,2,3]])\n        [1]\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n# Test the function\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n    \"\"\"\n    modified_string = \"\"\n    current_substring = \"\"\n    for char in string:\n        if char.isupper():\n            current_substring += char\n        else:\n            if current_substring.isupper():\n                modified_string += current_substring.lower()\n            else:\n                modified_string += current_substring\n            current_substring = char\n    if current_substring.isupper():\n        modified_string += current_substring.lower()\n    else:\n        modified_string += current_substring\n    return modified_string\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    \"\"\"\n    Find all possible combinations of the elements of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of all possible combinations of the elements of the input list.\n    \"\"\"\n    def helper(lst, start, end, result, current):\n        if start == end:\n            result.append(current[:])\n        else:\n            for i in range(start, end):\n                current.append(lst[i])\n                helper(lst, i + 1, end, result, current)\n                current.pop()\n\n    result = []\n    helper(lst, 0, len(lst), result, [])\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product subarray.\n\n    Examples:\n        >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n        112\n    \"\"\"\n    if not arr:\n        return 0\n\n    max_product = arr[0]\n    current_max = arr[0]\n    current_min = arr[0]\n\n    for num in arr[1:]:\n        temp_max = max(num, current_max * num, current_min * num)\n        current_min = min(num, current_max * num, current_min * num)\n        current_max = temp_max\n        max_product = max(max_product, current_max)\n\n    return max_product\n\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The maximum product.\n\n    Examples:\n        >>> max_product([3, 100, 4, 5, 150, 6])\n        3000\n    \"\"\"\n    n = len(arr)\n    dp = [1] * n\n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    return max(dp)\n\n# Test the function\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Find the pairwise addition of the neighboring elements of the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The tuple containing the pairwise addition of the neighboring elements.\n\n    Examples:\n        >>> add_pairwise((1, 5, 7, 8, 10))\n        (6, 12, 15, 18)\n    \"\"\"\n    result = []\n    for i in range(len(tup) - 1):\n        result.append(tup[i] + tup[i + 1])\n    return tuple(result)\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): The input array of integers.\n    n (int): The modulus value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    Examples:\n    >>> find_remainder([100, 10, 5, 25, 35, 14], 11)\n    9\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Args:\n        lst (list): The input list to check.\n\n    Returns:\n        bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(1, len(sorted_lst)):\n        if sorted_lst[i] - sorted_lst[i-1] != 1:\n            return False\n\n    return True\n\n# Test the function\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 2, 3, 4, 6]) == False\nassert check_Consecutive([1, 2, 3, 4, 5, 6]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) == True\nassert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) == True\nassert check_Consecutive([1, "}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n        tuple_list1 (list): The first tuple list.\n        tuple_list2 (list): The second tuple list.\n\n    Returns:\n        set: The set of tuples that are present in both tuple_list1 and tuple_list2.\n    \"\"\"\n    intersection = set()\n    for t1 in tuple_list1:\n        for t2 in tuple_list2:\n            if set(t1) == set(t2):\n                intersection.add(t1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a given character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace with.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l')==(\"pollgon\")"}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Args:\n        dictionary (dict): The input dictionary to be sorted.\n\n    Returns:\n        list: A list of tuples representing the sorted dictionary, where each tuple contains the key-value pair.\n\n    Examples:\n        >>> sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})\n        [('Chemistry', 87), ('Physics', 83), ('Math', 81)]\n    \"\"\"\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of the largest and smallest value in the array.\n\n    Examples:\n        >>> big_sum([1, 2, 3])\n        4\n        >>> big_sum([5, 10, 15])\n        20\n        >>> big_sum([-5, 0, 5])\n        0\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    largest = arr[0]\n    smallest = arr[0]\n\n    for num in arr:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest\n\n# Test cases\nassert big_sum([1, 2, 3]) == 4\nassert big_sum([5, 10, 15]) == 20\nassert big_sum([-5, 0, 5]) == 0"}
{"task_id": "Mbpp/477", "solution": "def to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The lower case version of the input string.\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n\n    Examples:\n        >>> remove_lowercase(\"PYTHon\")\n        'PYTH'\n    \"\"\"\n    modified_string = \"\"\n    for char in string:\n        if char.isupper():\n            modified_string += char\n    return modified_string\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    Finds the first digit of a given number.\n\n    Args:\n        number (int): The input number.\n\n    Returns:\n        int: The first digit of the number.\n\n    Examples:\n        >>> first_digit(123)\n        1\n        >>> first_digit(4567)\n        4\n        >>> first_digit(0)\n        0\n    \"\"\"\n    if number < 0:\n        number = -number\n    while number >= 10:\n        number //= 10\n    return number\n\n# Test the function\nassert first_digit(123) == 1\nassert first_digit(4567) == 4\nassert first_digit(0) == 0"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A new list containing only the odd numbers from the input list.\n\n    Examples:\n        >>> get_odd_numbers([1, 2, 3, 4, 5, 6])\n        [1, 3, 5]\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculates the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to consider.\n\n    Returns:\n        int: The difference between the sum of cubes and the sum of the first n natural numbers.\n\n    Examples:\n        >>> difference(3)\n        30\n        >>> difference(5)\n        225\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30\nassert difference(5) == 225"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.isupper():\n            toggled_string += char.lower()\n        else:\n            toggled_string += char.upper()\n    return toggled_string\n\n# Test the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Find the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between the two integers.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 456)\n        6\n        >>> digit_distance_nums(100, 1000)\n        3\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n    max_length = max(len(num1_str), len(num2_str))\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n    diff_sum = 0\n    for i in range(max_length):\n        diff_sum += abs(int(num1_str[i]) - int(num2_str[i]))\n    return diff_sum\n\n# Test the function\nassert digit_distance_nums(1, 2) == 1\nassert digit_distance_nums(123, 456) == 6\nassert digit_distance_nums(100, 1000) == 3"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Finds the sum of the largest contiguous sublist in the given list.\n\n    Args:\n        arr (list): The input list.\n        n (int): The length of the input list.\n\n    Returns:\n        int: The sum of the largest contiguous sublist.\n\n    Examples:\n        >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n        7\n    \"\"\"\n    max_so_far = arr[0]\n    max_ending_here = arr[0]\n\n    for i in range(1, n):\n        max_ending_here = max(arr[i], max_ending_here + arr[i])\n        max_so_far = max(max_so_far, max_ending_here)\n\n    return max_so_far\n\n# Test the function\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    Find the union of the elements of two given tuples and output them in sorted order.\n\n    Args:\n        tuple1 (tuple): The first input tuple.\n        tuple2 (tuple): The second input tuple.\n\n    Returns:\n        tuple: The union of the elements of the two input tuples in sorted order.\n\n    Examples:\n        >>> union_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 4, 5, 6, 7, 10)\n    \"\"\"\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Find the length of the longest sublists in a given list.\n\n    Args:\n        lst (list): The input list of sublists.\n\n    Returns:\n        int: The length of the longest sublist.\n\n    Examples:\n        >>> Find_Max_Length([[1],[1,4],[5,6,7,8]])\n        4\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n\n# Test the function\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "def extract_values(string):\n    \"\"\"\n    Extract values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    values = []\n    start_index = string.find('\"')\n    while start_index != -1:\n        end_index = string.find('\"', start_index + 1)\n        if end_index != -1:\n            value = string[start_index + 1:end_index]\n            values.append(value)\n            start_index = string.find('\"', end_index + 1)\n        else:\n            break\n    return values\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    Counts the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n        lst (list): The input list of integers.\n        n (int): The size of the list.\n\n    Returns:\n        int: The number of possible unordered pairs.\n\n    Examples:\n        >>> count_Pairs([1, 2, 1], 3)\n        2\n        >>> count_Pairs([1, 2, 3, 4, 5], 5)\n        10\n        >>> count_Pairs([1, 1, 1, 1], 4)\n        0\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test the function\nassert count_Pairs([1, 2, 1], 3) == 2\nassert count_Pairs([1, 2, 3, 4, 5], 5) == 10\nassert count_Pairs([1, 1, 1, 1], 4) == 0"}
{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Split a string into characters.\n\n    Args:\n        string (str): The input string to be split.\n\n    Returns:\n        list: A list of characters from the input string.\n\n    Examples:\n        >>> split_string('python')\n        ['p', 'y', 't', 'h', 'o', 'n']\n    \"\"\"\n    return list(string)\n\n# Test the function\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Returns the sum of the digits of a non-negative integer.\n\n    Args:\n        num (int): The non-negative integer.\n\n    Returns:\n        int: The sum of the digits of the input integer.\n\n    Raises:\n        ValueError: If the input is negative.\n\n    Examples:\n        >>> sum_digits(345)\n        12\n        >>> sum_digits(0)\n        0\n        >>> sum_digits(12345)\n        15\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input must be non-negative\")\n\n    sum_of_digits = 0\n    while num > 0:\n        sum_of_digits += num % 10\n        num //= 10\n\n    return sum_of_digits\n\n# Test the function\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(12345) == 15"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check if a list is sorted in ascending order.\n\n    Args:\n        lst (list): The list to be checked.\n\n    Returns:\n        bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n        n (int): The number of empty dictionaries to create.\n\n    Returns:\n        list: A list of N empty dictionaries.\n\n    Examples:\n        >>> empty_list(5)\n        [{}, {}, {}, {}, {}]\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        list: The sorted list of lists.\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(num_lists):\n    unique_nums = set()\n    for num_list in num_lists:\n        for num in num_list:\n            if num not in unique_nums:\n                unique_nums.add(num)\n    return list(unique_nums)\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr1, arr2):\n    \"\"\"\n    Check if arr2 is a subarray of arr1.\n\n    Args:\n        arr1 (list): The main array.\n        arr2 (list): The subarray to check.\n\n    Returns:\n        bool: True if arr2 is a subarray of arr1, False otherwise.\n    \"\"\"\n    if len(arr2) > len(arr1):\n        return False\n\n    for i in range(len(arr1) - len(arr2) + 1):\n        if arr1[i:i+len(arr2)] == arr2:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1,4,3,5],[1,2]) == False\nassert is_Sub_Array([1,2,3,4,5],[2,3]) == True\nassert is_Sub_Array([1,2,3,4,5],[3,4,5]) == True\nassert is_Sub_Array([1,2,3,4,5],[1,2,3,4,5]) == True\nassert is_Sub_Array([1,2,3,4,5],[1,2,3,4,5,6]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Find the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which the last digit in the factorial is to be found.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(12)\n    6\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test the function\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 0\nassert last_digit_factorial(12) == 6"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    \"\"\"\n    Interleave 3 lists of the same length into a single flat list.\n\n    Args:\n        list1 (list): The first list to be interleaved.\n        list2 (list): The second list to be interleaved.\n        list3 (list): The third list to be interleaved.\n\n    Returns:\n        list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n        [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n\n    if len(list1) != len(list2) or len(list1) != len(list3):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A tuple containing the dissimilar elements from both tuples.\n\n    Examples:\n        >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n        (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = set(tuple1) ^ set(tuple2)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(tup):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        tup (tuple): The input nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with only even elements.\n\n    Examples:\n        >>> extract_even((4, 5, (7, 6, (2, 4)), 6, 8))\n        (4, (6, (2, 4)), 6, 8)\n    \"\"\"\n    new_tup = tuple(filter(lambda x: isinstance(x, int) and x % 2 == 0, tup))\n    return new_tup\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculates the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n    \"\"\"\n    base_area = base_edge ** 2\n    lateral_area = 4 * base_edge * height\n    surface_area = base_area + lateral_area\n    return surface_area\n\n# Test the function\nassert surface_Area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> catalan_number(10)\n    16796\n    >>> catalan_number(15)\n    9694845\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be non-negative\")\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n    catalan[1] = 1\n\n    for i in range(2, n + 1):\n        catalan[i] = 0\n        for j in range(i):\n            catalan[i] += catalan[j] * catalan[i - j - 1]\n\n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796\nassert catalan_number(15) == 9694845"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n        dataset (list): A list of dictionaries, where each dictionary represents an item with a 'name' and 'price' key.\n        n (int): The number of most expensive items to return.\n\n    Returns:\n        list: A list of dictionaries representing the n most expensive items.\n\n    Raises:\n        ValueError: If the dataset is empty or if n is less than or equal to 0.\n\n    Examples:\n        >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n        [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n\n    if not dataset:\n        raise ValueError(\"Dataset cannot be empty\")\n\n    if n <= 0:\n        raise ValueError(\"n must be greater than 0\")\n\n    sorted_dataset = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_dataset[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1) == [{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Args:\n        arr (list): The input list to be split.\n        n (int): The index at which the list should be split.\n\n    Returns:\n        list: The modified list with the first part added to the end.\n\n    Examples:\n        >>> split_Arr([12,10,5,6,52,36],2)\n        [5,6,52,36,12,10]\n    \"\"\"\n    return arr[n:] + arr[:n]\n\n# Test the function\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        tuple: The converted tuple.\n\n    Examples:\n        >>> list_tuple([5, 10, 7, 4, 15, 3])\n        (5, 10, 7, 4, 15, 3)\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of numbers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([10, 20, 30, 40])\n        30\n        >>> big_diff([100, 200, 300, 400])\n        300\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num\n\n# Test the function\nassert big_diff([1, 2, 3, 4]) == 3\nassert big_diff([10, 20, 30, 40]) == 30\nassert big_diff([100, 200, 300, 400]) == 300"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect squares between the given numbers.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n    \"\"\"\n    squares = []\n    for num in range(start, end + 1):\n        if (num ** 0.5).is_integer():\n            squares.append(num)\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import math\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> swap_List([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst\n\n# Test the function\nassert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def sum_Of_product(n):\n    \"\"\"\n    Find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial co-efficients to consider.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n\n    Examples:\n    >>> sum_Of_product(3)\n    15\n    >>> sum_Of_product(4)\n    40\n    >>> sum_Of_product(5)\n    105\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n * (n + 1) // 2 * sum_Of_product(n - 1)\n\n# Test the function\nassert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 40\nassert sum_Of_product(5) == 105"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Parameters:\n    ip_address (str): The IP address to remove leading zeroes from.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n\n    Examples:\n    >>> removezero_ip(\"216.08.094.196\")\n    '216.8.94.196'\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip = '.'.join(cleaned_octets)\n    return cleaned_ip\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(lst):\n    \"\"\"\n    Find the difference of the first even and first odd number of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The difference between the first even and first odd number.\n\n    Examples:\n        >>> diff_even_odd([1,3,5,7,4,1,6,8])\n        3\n    \"\"\"\n    even_num = next((num for num in lst if num % 2 == 0), None)\n    odd_num = next((num for num in lst if num % 2 != 0), None)\n    return even_num - odd_num if even_num and odd_num else None\n\n# Test the function\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n        arr1 (list): The first sorted array.\n        arr2 (list): The second sorted array.\n        k (int): The index of the element to find.\n\n    Returns:\n        int: The kth element from the merged array.\n\n    Raises:\n        ValueError: If k is out of range for the given arrays.\n\n    Examples:\n        >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n        6\n        >>> find_kth([1, 2, 3], [4, 5, 6], 4)\n        5\n        >>> find_kth([1, 2, 3], [4, 5, 6], 7)\n        Traceback (most recent call last):\n            ...\n        ValueError: k is out of range for the given arrays\n    \"\"\"\n\n    # Merge the two arrays into a single sorted array\n    merged_arr = sorted(arr1 + arr2)\n\n    # Check if k is within the range of the merged array\n    if k < 1 or k > len(merged_arr):\n        raise ValueError(\"k is out of range for the given arrays\")\n\n    # Return the kth element from the merged array\n    return merged_arr[k - 1]\n\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6\nassert find_kth([1, 2, 3], [4, 5, 6], 4) == 5\n\ntry:\n    find_kth([1, 2, 3], [4, 5, 6], 7)\nexcept ValueError as e:\n    assert str(e) == \"k is out of range for the given arrays\""}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to a string to get the number of digits\n    num_str = str(num)\n    num_digits = len(num_str)\n\n    # Calculate the sum of the digits raised to the power of the number of digits\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return sum_of_digits == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Finds the sum and average of the first n natural numbers.\n\n    Args:\n        n (int): The number of natural numbers to sum and average.\n\n    Returns:\n        tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Examples:\n        >>> sum_average(10)\n        (55, 5.5)\n    \"\"\"\n    sum_n = n * (n + 1) // 2\n    average = sum_n / n\n    return sum_n, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check if a given number is even or not.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test the function\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Finds the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character in the string, or None if no repeated character is found.\n    \"\"\"\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test the function\nassert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abcd\") is None"}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The given integer.\n\n    Returns:\n    list: A list of lucid numbers smaller than or equal to n.\n    \"\"\"\n    lucid_numbers = []\n    for i in range(1, n+1):\n        if is_lucid(i):\n            lucid_numbers.append(i)\n    return lucid_numbers\n\ndef is_lucid(n):\n    \"\"\"\n    Check if a number is lucid.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n    \"\"\"\n    if n == 1:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        return is_lucid(n - 2)\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words in a given string.\n\n    Parameters:\n    string (str): The input string containing words seperated by spaces.\n\n    Returns:\n    str: The reversed string with words in the original order.\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Args:\n        n (int): The integer to check.\n\n    Returns:\n        bool: True if the integer is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None, None, None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Find the nth Bell number.\n\n    Parameters:\n    n (int): The index of the Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(5)\n    15\n    \"\"\"\n    if n == 0:\n        return 1\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] * 2 * (2 * i - 1) // (i + 1)\n\n    return bell[n]\n\n# Test the function\nassert bell_Number(2) == 2\nassert bell_Number(5) == 15"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    Remove the k'th element from the given list.\n\n    Args:\n        lst (list): The input list.\n        k (int): The index of the element to be removed.\n\n    Returns:\n        list: The list with the k'th element removed.\n\n    Raises:\n        IndexError: If k is out of range.\n\n    Examples:\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)\n        [1, 1, 3, 4, 4, 5, 1]\n        >>> remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 8)\n        Traceback (most recent call last):\n        ...\n        IndexError: list index out of range\n    \"\"\"\n    if k < 0 or k >= len(lst):\n        raise IndexError(\"list index out of range\")\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 8)"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Given a matrix represented as a list of lists, returns the max of the n'th column.\n\n    Args:\n        matrix (list): The input matrix.\n        n (int): The index of the column to find the max of.\n\n    Returns:\n        int: The maximum value in the n'th column.\n\n    Raises:\n        ValueError: If the matrix is empty or if the n'th column does not exist.\n\n    Examples:\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n        19\n        >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n        Traceback (most recent call last):\n            ...\n        ValueError: n is out of range\n    \"\"\"\n\n    if not matrix:\n        raise ValueError(\"Matrix is empty\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"n is out of range\")\n\n    max_value = matrix[0][n]\n\n    for row in matrix:\n        if row[n] > max_value:\n            max_value = row[n]\n\n    return max_value\n\n\n# Test the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3) == 19\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 8\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], -1) == 19\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1) == 6\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0) == 8\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 1) == 6\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3) == 19"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    Merge a list of lists into two lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n        list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Examples:\n        >>> merge([['x', 'y'], ['a', 'b'], ['m', 'n']])\n        [['x', 'a', 'm'], ['y', 'b', 'n']]\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    \"\"\"\n    Find the cumulative sum of all the values in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        int: The cumulative sum of all the values in the tuple list.\n\n    Examples:\n        >>> cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])\n        30\n    \"\"\"\n    total = 0\n    for tup in tuple_list:\n        total += sum(tup)\n    return total\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    \"\"\"\n    Calculate the average value for each tuple in a given tuple of tuples.\n\n    Args:\n        tuples (tuple): A tuple of tuples.\n\n    Returns:\n        list: A list of average values for each tuple.\n    \"\"\"\n    averages = []\n    for t in tuples:\n        averages.append(sum(t) / len(t))\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n        t1 (tuple): The first tuple.\n        t2 (tuple): The second tuple.\n\n    Returns:\n        tuple: A new tuple containing the element-wise modulo of the input tuples.\n\n    Raises:\n        ValueError: If the input tuples have different lengths.\n\n    Examples:\n        >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n        (0, 4, 5, 1)\n    \"\"\"\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(lst1, lst2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n        lst1 (list): The first list.\n        lst2 (list): The second list.\n\n    Returns:\n        list: The result of element-wise division of lst1 by lst2.\n\n    Raises:\n        ValueError: If the length of lst1 and lst2 are not equal.\n\n    Examples:\n        >>> div_list([4,5,6],[1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1,2,3],[0,0,0])\n        ValueError: Division by zero encountered.\n\n    \"\"\"\n    if len(lst1) != len(lst2):\n        raise ValueError(\"Length of lst1 and lst2 must be equal.\")\n\n    result = []\n    for i in range(len(lst1)):\n        if lst2[i] == 0:\n            raise ValueError(\"Division by zero encountered.\")\n        result.append(lst1[i] / lst2[i])\n\n    return result"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    \"\"\"\n    Move all the numbers to the end of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with numbers moved to the end.\n\n    Examples:\n        >>> move_num('I1love143you55three3000thousand')\n        'Iloveyouthreethousand1143553000'\n    \"\"\"\n    num_str = ''.join(c for c in string if c.isdigit())\n    char_str = ''.join(c for c in string if not c.isdigit())\n    return char_str + num_str\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The size of the largest subset.\n    \"\"\"\n    def is_divisible(a, b):\n        \"\"\"\n        Check if two numbers are divisible.\n\n        Args:\n            a (int): The first number.\n            b (int): The second number.\n\n        Returns:\n            bool: True if a and b are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, index, current_subset):\n        \"\"\"\n        Recursive function to find the largest subset of numbers.\n\n        Args:\n            numbers (list): The list of numbers.\n            index (int): The current index in the list.\n            current_subset (list): The current subset being considered.\n\n        Returns:\n            int: The size of the largest subset.\n        \"\"\"\n        if index == len(numbers):\n            return len(current_subset)\n\n        # Include the current number in the subset\n        subset_with_current = current_subset + [numbers[index]]\n        size_with_current = find_subset(numbers, index + 1, subset_with_current)\n\n        # Exclude the current number from the subset\n        size_without_current = find_subset(numbers, index + 1, current_subset)\n\n        return max(size_with_current, size_without_current)\n\n    return find_subset(numbers, 0, [])\n\n# Test the function\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Finds the median of two sorted lists of same size.\n\n    Args:\n        list1 (list): The first sorted list.\n        list2 (list): The second sorted list.\n        n (int): The size of the lists.\n\n    Returns:\n        float: The median of the two sorted lists.\n\n    Raises:\n        ValueError: If the size of the lists is not equal to n.\n\n    Examples:\n        >>> get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)\n        16.0\n    \"\"\"\n\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"The size of the lists must be equal to n.\")\n\n    i = 0\n    j = 0\n    count = 0\n    median1 = 0\n    median2 = 0\n\n    while count < n + 1:\n        if i == n:\n            median2 = list2[0]\n            break\n        if j == n:\n            median2 = list1[0]\n            break\n\n        if list1[i] <= list2[j]:\n            median1 = median2\n            median2 = list1[i]\n            i += 1\n        else:\n            median1 = median2\n            median2 = list2[j]\n            j += 1\n\n        count += 1\n\n    return (median1 + median2) / 2\n\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Args:\n        nums (list): List of numbers.\n        n (int): Power to raise each number to.\n\n    Returns:\n        list: List of n-th powers of each number in the input list.\n\n    Examples:\n        >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n        [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def to_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Args:\n        string (str): The input string to be converted.\n\n    Returns:\n        str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        area = (radius ** 2) * math.pi / 2\n        return area\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == math.pi / 2\nassert triangle_area(2) == 4 * math.pi / 2"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): List of numbers.\n\n    Returns:\n        list: List of even numbers.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append((i, j))\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces in a given string with underscores and vice versa.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string.\n    \"\"\"\n    return string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with all zeroes moved to the end.\n\n    Examples:\n        >>> move_zero([1,0,2,0,3,4])\n        [1,2,3,4,0,0]\n    \"\"\"\n    # Create a new list to store the non-zero elements\n    non_zero_lst = [num for num in lst if num != 0]\n\n    # Append zeroes to the end of the list\n    non_zero_lst.extend([0] * (len(lst) - len(non_zero_lst)))\n\n    return non_zero_lst\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Find the sum of xor of all pairs of numbers in the given list.\n\n    Args:\n        nums (list): The input list of numbers.\n        n (int): The length of the list.\n\n    Returns:\n        int: The sum of xor of all pairs of numbers.\n    \"\"\"\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum += nums[i] ^ nums[j]\n    return sum\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(lst):\n    \"\"\"\n    Sorts the given list using the heap sort algorithm.\n\n    Parameters:\n    lst (list): The list to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n    def heapify(arr, n, i):\n        \"\"\"\n        Heapifies the given array.\n\n        Parameters:\n        arr (list): The array to be heapified.\n        n (int): The size of the array.\n        i (int): The index of the current node.\n        \"\"\"\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(lst)\n\n    # Build a max heap\n    for i in range(n, -1, -1):\n        heapify(lst, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        lst[i], lst[0] = lst[0], lst[i]\n        heapify(lst, i, 0)\n\n    return lst\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, cost):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n        amount (float): The amount earned.\n        cost (float): The cost incurred.\n\n    Returns:\n        bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == cost\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 120 km/h or the temperature is less than -273.15 celsius.\n\n    Examples:\n        >>> wind_chill(120, 35)\n        40\n        >>> wind_chill(100, 20)\n        18\n        >>> wind_chill(0, 10)\n        -13\n    \"\"\"\n\n    if wind_velocity > 120 or temperature < -273.15:\n        raise ValueError(\"Invalid input: wind velocity must be less than or equal to 120 km/h and temperature must be greater than or equal to -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + 0.6215 * temperature - 11.37 * (wind_velocity ** 0.16) + 0.3965 * temperature * (wind_velocity ** 0.16)\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40\nassert wind_chill(100, 20) == 18\nassert wind_chill(0, 10) == -13"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n\n    Args:\n        names (list): A list of names.\n\n    Returns:\n        int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Examples:\n        >>> sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])\n        16\n    \"\"\"\n    # Remove names that start with a lowercase letter\n    names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    length_sum = sum(len(name) for name in names)\n\n    return length_sum\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Parameters:\n    n (int): The index of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    21\n    >>> is_nonagonal(4)\n    32\n    >>> is_nonagonal(5)\n    42\n    >>> is_nonagonal(6)\n    53\n    >>> is_nonagonal(7)\n    63\n    >>> is_nonagonal(8)\n    74\n    >>> is_nonagonal(9)\n    84\n    >>> is_nonagonal(10)\n    95\n    \"\"\"\n    return n * (7 * n - 5) // 2\n\n# Test the function\nassert is_nonagonal(1) == 1\nassert is_nonagonal(2) == 11\nassert is_nonagonal(3) == 21\nassert is_nonagonal(4) == 32\nassert is_nonagonal(5) == 42\nassert is_nonagonal(6) == 53\nassert is_nonagonal(7) == 63\nassert is_nonagonal(8) == 74\nassert is_nonagonal(9) == 84\nassert is_nonagonal(10) == 95"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    # Split the string into words\n    words = text.split()\n\n    # Check each word for 'z' except at the start and end\n    for word in words:\n        if len(word) > 1 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n\n    return False\n\n# Test the function\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonzabc\") == False\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzabcz\") == True\nassert text_match_wordz_middle(\"pythonzabcz.\") == True"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array.\n\n    Examples:\n    >>> reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4)\n    [4, 3, 2, 1, 5, 6]\n    \"\"\"\n    # Check if k is within the array bounds\n    if k < 0 or k >= len(arr):\n        raise ValueError(\"Invalid position\")\n\n    # Reverse the array upto the given position\n    arr[:k] = reversed(arr[:k])\n\n    return arr\n\n# Test the function\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dict):\n    \"\"\"\n    Adds a dictionary to a tuple and returns the resulting tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n        dict (dict): The dictionary to be added to the tuple.\n\n    Returns:\n        tuple: The resulting tuple after adding the dictionary.\n    \"\"\"\n    tup = tup + (dict,)\n    return tup\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    \"\"\"\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost.\n    A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell.\n    We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n\n    Args:\n        matrix (list of lists): The input square matrix.\n\n    Returns:\n        float: The maximum average over all existing paths.\n\n    Examples:\n        >>> maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]])\n        5.2\n    \"\"\"\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Create a 2D matrix to store the maximum average for each cell\n    max_average = [[0] * n for _ in range(n)]\n\n    # Initialize the top-left cell with the cost of the first cell\n    max_average[0][0] = matrix[0][0]\n\n    # Fill the first row and column with the cumulative sum\n    for i in range(1, n):\n        max_average[0][i] = max_average[0][i - 1] + matrix[0][i]\n        max_average[i][0] = max_average[i - 1][0] + matrix[i][0]\n\n    # Fill the remaining cells with the maximum average\n    for i in range(1, n):\n        for j in range(1, n):\n            max_average[i][j] = max(max_average[i - 1][j], max_average[i][j - 1]) + matrix[i][j]\n\n    # Calculate the maximum average over all existing paths\n    max_average = max_average[n - 1][n - 1] / (n * n)\n\n    return max_average\n\n\n# Test the function\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(student_data, min_height, min_weight):\n    filtered_students = {name: (height, weight) for name, (height, weight) in student_data.items() if height >= min_height and weight >= min_weight}\n    return filtered_students\n\n# Test the function\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Counts the number of indices where the values in two lists are the same.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        int: The number of indices where the values in the lists are the same.\n\n    Raises:\n        ValueError: If the input lists are not of the same length.\n\n    Examples:\n        >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n        4\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count\n\n# Test the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) == 4"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Args:\n        base (int): The base number.\n        power (int): The power to raise the base to.\n\n    Returns:\n        int: The sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    return sum(int(digit) for digit in str(result))\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extract values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of extracted values.\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    \"\"\"\n    Function to multiply adjacent elements of a tuple.\n\n    Parameters:\n    t (tuple): Input tuple of numbers.\n\n    Returns:\n    tuple: Tuple of length N where the i-th element is equal to t_i * t_{i+1}.\n\n    Examples:\n    >>> multiply_elements((1, 5, 7, 8, 10))\n    (5, 35, 56, 80)\n    \"\"\"\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        list: The sum of the two input lists.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sum_list([10, 20, 30], [15, 25, 35])\n        [25, 45, 65]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = [a + b for a, b in zip(list1, list2)]\n    return result\n\n# Test the function\nassert sum_list([10, 20, 30], [15, 25, 35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The list with consecutive duplicates removed.\n\n    Examples:\n        >>> consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])\n        [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\n    \"\"\"\n    result = []\n    prev = None\n    for item in lst:\n        if item != prev:\n            result.append(item)\n        prev = item\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius r and height h.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the lateral surface area using the formula:\n    # LSA = \u03c0 * r * (r + sqrt(r^2 + h^2))\n    lsa = math.pi * r * (r + math.sqrt(r**2 + h**2))\n    return lsa\n\n# Test the function with the given example\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replace all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with all special characters replaced with colons.\n\n    Examples:\n        >>> replace_specialchar('Python language, Programming language.')\n        'Python:language::Programming:language:'\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n        arr (list): The input sorted array.\n        target (int): The number to find the first occurrence of.\n\n    Returns:\n        int: The index of the first occurrence of the target number in the array.\n            Returns -1 if the target number is not found.\n\n    Examples:\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)\n        1\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6)\n        4\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9)\n        7\n        >>> find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10)\n        -1\n    \"\"\"\n\n    # Initialize variables\n    left = 0\n    right = len(arr) - 1\n\n    # Binary search\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            # Check if mid is the first occurrence\n            if mid == 0 or arr[mid - 1] != target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 6) == 4\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 9) == 7\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 10) == -1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Finds the sum of products of all possible sublists of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of products of all possible sublists.\n\n    Examples:\n        >>> sum_Of_Subarray_Prod([1, 2, 3])\n        20\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4])\n        70\n        >>> sum_Of_Subarray_Prod([1, 2, 3, 4, 5])\n        154\n    \"\"\"\n    n = len(lst)\n    total_sum = 0\n\n    for i in range(n):\n        sublist_product = 1\n        for j in range(i, n):\n            sublist_product *= lst[j]\n            total_sum += sublist_product\n\n    return total_sum\n\n# Test the function\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20\nassert sum_Of_Subarray_Prod([1, 2, 3, 4]) == 70\nassert sum_Of_Subarray_Prod([1, 2, 3, 4, 5]) == 154"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Args:\n        num (int): The number whose bits need to be toggled.\n\n    Returns:\n        int: The number with toggled bits.\n\n    Examples:\n        >>> toggle_middle_bits(9)\n        15\n    \"\"\"\n    # Check if the number is greater than 1\n    if num > 1:\n        # Find the number of bits in the number\n        num_bits = num.bit_length()\n\n        # Create a mask to toggle the middle bits\n        mask = (1 << (num_bits - 2)) - 1\n\n        # Toggle the middle bits using bitwise XOR\n        toggled_num = num ^ mask\n\n        return toggled_num\n    else:\n        return num\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Locate the left insertion point for a specified value in sorted order.\n\n    Args:\n        arr (list): The sorted list in which to locate the left insertion point.\n        value (int): The value for which to find the left insertion point.\n\n    Returns:\n        int: The index of the left insertion point.\n\n    Examples:\n        >>> left_insertion([1,2,4,5],6)\n        4\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test the function\nassert left_insertion([1,2,4,5],6) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regular expressions.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Test the function\nassert check_str(\"annie\")\nassert not check_str(\"bob\")"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n    \"\"\"\n    index = 1\n    triangular_number = 1\n    while True:\n        if len(str(triangular_number)) == n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        dict: The resulting key-value dictionary.\n\n    Examples:\n        >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n        {1: 5, 7: 10, 13: 5}\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"Tuple length must be even to convert to a dictionary.\")\n\n    result = {}\n    for i in range(0, len(tup), 2):\n        result[tup[i]] = tup[i+1]\n\n    return result\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    if len(string) == 0:\n        return True\n    else:\n        first_char = string[0]\n        for char in string:\n            if char != first_char:\n                return False\n        return True\n\n# Test the function\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    area = math.sqrt(3) * edge_length**2\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, n):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n        lst (list): The input list to be rotated.\n        n (int): The number of items to rotate.\n\n    Returns:\n        list: The rotated list.\n\n    Examples:\n        >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n        [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    n = n % len(lst)  # Adjust n to handle cases where n is greater than the length of the list\n    return lst[-n:] + lst[:-n]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        tup (tuple): The input tuple to check.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tup)\n\n# Test the function\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num)):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between words.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonProgramming\")\n        'Python Programming'\n        >>> capital_words_spaces(\"pythonProgramming\")\n        'python Programming'\n    \"\"\"\n    words = string.split()\n    modified_string = ' '.join(words)\n    return modified_string\n\n# Test the function\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgramming\") == 'Python Programming'\nassert capital_words_spaces(\"pythonProgramming\") == 'python Programming'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n        lst (list): The list of strings to be sorted.\n\n    Returns:\n        list: The sorted list of numbers.\n\n    Examples:\n        >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n        [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    # Convert the strings to integers and sort the list\n    sorted_lst = sorted(int(num) for num in lst)\n    return sorted_lst\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Args:\n        lst (list): The list to which the tuple will be added.\n        tup (tuple): The tuple to be added to the list.\n\n    Returns:\n        list: The updated list with the tuple added.\n    \"\"\"\n    lst.extend(tup)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n    return True\n\n# Test the function\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    \"\"\"\n    Finds the minimum k records from a list of tuples.\n\n    Args:\n        tuple_list (list): A list of tuples, where each tuple contains a name and a value.\n        k (int): The number of minimum records to find.\n\n    Returns:\n        list: A list of the minimum k records from the input list.\n\n    Raises:\n        ValueError: If k is greater than the length of the input list.\n\n    Examples:\n        >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n        [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n    if k > len(tuple_list):\n        raise ValueError(\"k cannot be greater than the length of the input list\")\n\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])\n    return sorted_list[:k]\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(lst):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list is empty or has only one element.\n\n    Examples:\n        >>> second_smallest([1, 2, -8, -2, 0, -2])\n        -2\n        >>> second_smallest([1, 1, 1])\n        ValueError: The list must have at least two distinct elements.\n    \"\"\"\n\n    if len(lst) < 2:\n        raise ValueError(\"The list must have at least two distinct elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    \"\"\"\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        dict: A dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n\n    Examples:\n        >>> unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])\n        {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\n    \"\"\"\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check if a given string is a decimal number with a precision of 2.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == True\nassert is_decimal('123.') == False\nassert is_decimal('123.1') == True\nassert is_decimal('123.111') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Args:\n        numbers (list): List of numbers.\n\n    Returns:\n        bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([1]) == True\nassert unique_Element([]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check if the given month number contains 30 days or not.\n\n    Args:\n        month_number (int): The month number to check.\n\n    Returns:\n        bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False\n    else:\n        return False\n\n# Test the function\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Args:\n        arr (tuple): The input array of integers.\n        n (int): The size of the array.\n\n    Returns:\n        int: The minimum difference between any two elements in the array.\n\n    Raises:\n        ValueError: If the array is empty or has only one element.\n\n    Examples:\n        >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5), 5)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6), 6)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7), 7)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8), 8)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9), 9)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 10)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11), 11)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), 12)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), 13)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14), 14)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15), 15)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16), 16)\n        1\n        >>> find_min_diff((1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Counts the number of digits in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The number of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n\n    A polite number is a number that is divisible by the sum of its digits.\n\n    Args:\n        n (int): The index of the polite number to find.\n\n    Returns:\n        int: The nth polite number.\n\n    Examples:\n        >>> is_polite(7)\n        11\n    \"\"\"\n    polite_numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 18, 20, 21, 24, 27, 30, 36, 40, 42, 45, 48, 50, 54, 60, 63, 70, 72, 80, 81, 84, 90, 100, 102, 108, 110, 111, 112, 114, 117, 120, 126, 132, 133, 135, 140, 144, 150, 153, 156, 162, 168, 170, 175, 180, 189, 192, 195, 198, 200, 210, 216, 220, 222, 225, 228, 234, 240, 243, 250, 252, 258, 264, 270, 273, 276, 280, 288, 294, 300, 308, 312, 315, 320, 324, 330, 336, 340, 342, 350, 351, 352, 354, 360, 363, 364, 370, 372, 375, 378, 380, 384, 385, 387, 390, 396, 400, 405, 408, 410, 414, 420, 423, 425, 426, 432, 440, 441, 442, 450, 453, 456, 462, 465, 472, 480, 486, 490, 492, 495, 498, 500, 504, 510, 512, 516, 520, 525, 528, 532, 53"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    \"\"\"\n    Returns a list of all pairs of consecutive items in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of pairs of consecutive items.\n\n    Examples:\n        >>> pair_wise([1,1,2,3,3,4,4,5])\n        [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\n    \"\"\"\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function\nassert pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, sum):\n    count = 0\n    for i in range(len(numbers)):\n        for j in range(i+1, len(numbers)):\n            if numbers[i] + numbers[j] == sum:\n                count += 1\n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\nassert get_pairs_count([1, 5, 7, -1], 6) == 2\nassert get_pairs_count([1, 5, 7, -1, 5], 6) == 3"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Find the sum of fourth power of first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of fourth power of first n odd natural numbers.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    202\n    \"\"\"\n    sum = 0\n    for i in range(1, 2 * n, 2):\n        sum += i ** 4\n    return sum\n\n# Test the function\nassert odd_num_sum(2) == 82\nassert odd_num_sum(3) == 202"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    \"\"\"\n    Check if the given expression is balanced or not.\n\n    Args:\n        expression (str): The expression to be checked.\n\n    Returns:\n        bool: True if the expression is balanced, False otherwise.\n    \"\"\"\n    stack = []\n    brackets = {\n        '(': ')',\n        '{': '}',\n        '[': ']'\n    }\n\n    for char in expression:\n        if char in brackets:\n            stack.append(char)\n        elif char in brackets.values():\n            if not stack or brackets[stack.pop()] != char:\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{}]\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to find.\n\n    Returns:\n        tuple: A tuple containing the substring, its first occurrence position, and its last occurrence position.\n               Returns None if there is no match.\n\n    Examples:\n        >>> occurance_substring('python programming, python language','python')\n        ('python', 0, 6)\n        >>> occurance_substring('python programming, python language','java')\n        None\n    \"\"\"\n    if substring in string:\n        first_occurrence = string.find(substring)\n        last_occurrence = string.rfind(substring)\n        return substring, first_occurrence, last_occurrence\n    else:\n        return None\n\n# Test the function\nassert occurance_substring('python programming, python language','python') == ('python', 0, 6)\nassert occurance_substring('python programming, python language','java') == None"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index contains odd numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([2,1,4,3,6,7,6,2]) == False\nassert odd_position([1,3,5,7,9]) == True\nassert odd_position([2,4,6,8,10]) == False"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    Find the sum of non-repeated elements in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        int: The sum of non-repeated elements.\n\n    Examples:\n        >>> find_sum([1, 2, 3, 1, 1, 4, 5, 6])\n        21\n    \"\"\"\n    unique_elements = set()\n    sum_non_repeated = 0\n\n    for element in lst:\n        if element not in unique_elements:\n            sum_non_repeated += element\n            unique_elements.add(element)\n\n    return sum_non_repeated\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    \"\"\"\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: A list of sublists, where each sublist contains consecutive duplicates of the input list elements.\n\n    Examples:\n        >>> pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])\n        [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\n    \"\"\"\n    result = []\n    current_sublist = []\n    prev_element = None\n\n    for element in lst:\n        if element == prev_element:\n            current_sublist.append(element)\n        else:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [element]\n        prev_element = element\n\n    if current_sublist:\n        result.append(current_sublist)\n\n    return result\n\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    \"\"\"\n    Finds all combinations of sums with tuples in the given tuple list.\n\n    Args:\n        tuple_list (list): A list of tuples.\n\n    Returns:\n        list: A list of tuples representing the combinations of sums.\n    \"\"\"\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i + 1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n    return combinations\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Finds the sum of all odd length subarrays in a given array.\n\n    Args:\n        arr (list): The input array.\n\n    Returns:\n        int: The sum of all odd length subarrays.\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result\n\n# Test the function\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(lst):\n    even_product = 1\n    odd_product = 1\n    for num in lst:\n        if num % 2 == 0:\n            even_product *= num\n        else:\n            odd_product *= num\n    return even_product * odd_product\n\n# Test the function\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a tuple string to an integer tuple.\n\n    Args:\n        tuple_str (str): The tuple string to convert.\n\n    Returns:\n        tuple: The converted integer tuple.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n    \"\"\"\n    # Remove the parentheses from the tuple string\n    tuple_str = tuple_str.strip('()')\n\n    # Split the tuple string into individual elements\n    elements = tuple_str.split(',')\n\n    # Convert each element to an integer\n    int_tuple = tuple(int(element.strip()) for element in elements)\n\n    return int_tuple\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): The sorted list in which to find the insertion point.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index of the right insertion point.\n\n    Examples:\n    >>> right_insertion([1,2,4,5],6)\n    4\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test the function\nassert right_insertion([1,2,4,5],6) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b's.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.match(pattern, text))\n\n# Test cases\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, str):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n        lst (list): The list of strings.\n        str (str): The string to be added to the tuple.\n\n    Returns:\n        tuple: A new tuple containing the elements of the list and the string.\n    \"\"\"\n    return tuple(lst) + (str,)\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check if every even index contains even numbers in a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n        tup (tuple): The input tuple.\n\n    Returns:\n        tuple: The tuple with tuples removed.\n    \"\"\"\n    return tuple(x for x in tup if not isinstance(x, tuple))\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lst):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Args:\n        lst (list): The input list of lists.\n\n    Returns:\n        int: The number of lists in the input list.\n\n    Examples:\n        >>> count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])\n        4\n    \"\"\"\n    count = 0\n    for item in lst:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, x):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The input sorted array.\n    x (int or float): The element to find the last position of.\n\n    Returns:\n    int: The last position of the element in the array.\n\n    Examples:\n    >>> last([1,2,3],1)\n    0\n    >>> last([1,2,3],2)\n    1\n    >>> last([1,2,3],3)\n    2\n    >>> last([1,2,3],4)\n    -1\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] <= x:\n            result = mid\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1,2,3],1) == 0\nassert last([1,2,3],2) == 1\nassert last([1,2,3],3) == 2\nassert last([1,2,3],4) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    This function matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n        text (str): The input string to be matched.\n\n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))\n\n# Test the function\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"ababab\")\nassert not text_starta_endb(\"aababb\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Find the sum of all items in the given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        int: The sum of all items in the dictionary.\n\n    Examples:\n        >>> return_sum({'a': 100, 'b':200, 'c':300})\n        600\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Find the sum of all odd natural numbers within the range l and r.\n\n    Args:\n        l (int): The lower bound of the range.\n        r (int): The upper bound of the range.\n\n    Returns:\n        int: The sum of all odd natural numbers within the range.\n\n    Raises:\n        ValueError: If l is greater than r.\n\n    Examples:\n        >>> sum_in_range(2, 5)\n        8\n        >>> sum_in_range(1, 10)\n        25\n    \"\"\"\n    if l > r:\n        raise ValueError(\"Lower bound must be less than or equal to upper bound.\")\n\n    odd_sum = 0\n    for num in range(l, r + 1):\n        if num % 2 != 0:\n            odd_sum += num\n\n    return odd_sum\n\n# Test the function\nassert sum_in_range(2, 5) == 8\nassert sum_in_range(1, 10) == 25"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Find the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n    \"\"\"\n    # Convert the number to binary representation\n    binary_num = bin(num)[2:]\n\n    # Pad the binary representation with leading zeros if necessary\n    binary_num = binary_num.zfill(32)\n\n    # Rotate the bits\n    rotated_binary = binary_num[d:] + binary_num[:d]\n\n    # Convert the rotated binary representation back to decimal\n    rotated_num = int(rotated_binary, 2)\n\n    return rotated_num\n\n# Test the function\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n\n    Examples:\n        >>> remove_all_spaces('python  program')\n        'pythonprogram'\n    \"\"\"\n    return string.replace(' ', '')\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n        a (int): The first integer.\n        b (int): The second integer.\n        c (int): The third integer.\n\n    Returns:\n        int: The number of equal numbers.\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\n# Test the function\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "import math\n\ndef is_perfect_square(num):\n    \"\"\"\n    Check if the given number is a perfect square.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    sqrt = int(math.sqrt(num))\n    return sqrt * sqrt == num\n\n# Test the function\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check if the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test the function\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Args:\n        lst (list): A list of lists of integers.\n\n    Returns:\n        list: The list in the list of lists with the highest sum of elements.\n\n    Examples:\n        >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n        [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list\n\n# Test the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The length of the maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The first odd number found in the list.\n\n    Raises:\n        ValueError: If no odd number is found in the list.\n\n    Examples:\n        >>> first_odd([1,3,5])\n        1\n        >>> first_odd([2,4,6])\n        ValueError: No odd number found in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd number found in the list.\")\n\n# Test the function\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,6]) == ValueError(\"No odd number found in the list.\")"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n        tup (tuple): The input tuple.\n        k (int): The value to check for.\n\n    Returns:\n        bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((10, 4, 5, 6, 8), 7) == False"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n        tuple1 (tuple): The first tuple.\n        tuple2 (tuple): The second tuple.\n\n    Returns:\n        bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((1, 2, 3), (0, 1, 2)) == True\nassert check_smaller((1, 2, 3), (1, 2, 3)) == False"}
