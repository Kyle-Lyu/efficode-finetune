{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list containing the shared elements.\n\n    \"\"\"\n    return list(set(list1) & set(list2))\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return True\n    return False\n\n# Test cases\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    numbers (list): A list of numbers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of the n largest integers, in descending order.\n    \"\"\"\n    if n > len(numbers):\n        raise ValueError(\"n should be less than or equal to the number of elements in the list\")\n\n    # Use a heap to efficiently find the n largest integers\n    largest_numbers = heapq.nlargest(n, numbers)\n\n    # Reverse the list to get descending order\n    largest_numbers.reverse()\n\n    return largest_numbers\n\n# Test the function\nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the two numbers differ at one bit position only, False otherwise.\n    \"\"\"\n    xor_result = num1 ^ num2\n    return bin(xor_result).count('1') == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    Find all words that are at least 4 characters long in a given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    list: A list of words that are at least 4 characters long.\n    \"\"\"\n    words = string.split()\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Write a function to find squares of individual elements in a list.\n    \"\"\"\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcd\")\n    4\n    >>> find_Rotations(\"abcde\")\n    5\n    \"\"\"\n\n    # Check if the string is already in its original state\n    if string == string[::-1]:\n        return 0\n\n    # Initialize the number of rotations\n    rotations = 1\n\n    # Iterate through the string and check if it is a palindrome\n    while string != string[::-1]:\n        # Rotate the string by moving the first character to the end\n        string = string[1:] + string[0]\n        rotations += 1\n\n    return rotations\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abcd\") == 4\nassert find_Rotations(\"abcde\") == 5"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first and last occurrence of the character\n    first_occurrence = string.find(char)\n    last_occurrence = string.rfind(char)\n\n    # Remove the first and last occurrence of the character from the string\n    if first_occurrence != -1 and last_occurrence != -1:\n        return string[:first_occurrence] + string[first_occurrence+1:last_occurrence] + string[last_occurrence+1:]\n    else:\n        return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n\n    \"\"\"\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [row for _, row in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    \"\"\"\n    if base < 0 or height < 0 or length < 0:\n        raise ValueError(\"Base, height, and length must be positive numbers.\")\n\n    area = (base * height) / 2\n    volume = area * length\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    Check if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Args:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    return any(char.islower() and char.isalpha() and char != \"_\" and char.isalnum() for char in input_string)\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (int or float): The length of a side of the square.\n\n    Returns:\n    int or float: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(0)\n    0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Args:\n    string1 (str): The first string.\n    string2 (str): The second string.\n\n    Returns:\n    str: The modified string with characters removed.\n    \"\"\"\n    clean_string = ''\n    for char in string1:\n        if char not in string2:\n            clean_string += char\n    return clean_string\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Check if a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    bool: True if any duplicate element is found, False otherwise.\n    \"\"\"\n    return len(set(arr)) != len(arr)\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(number):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    # Convert the number to its binary representation\n    binary = bin(number)[2:]\n\n    # Check if the binary representation has alternating 0s and 1s\n    for i in range(1, len(binary)):\n        if binary[i] == binary[i-1]:\n            return False\n\n    return True\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse = 0\n    original_num = num\n\n    while num != 0:\n        remainder = num % 10\n        reverse = reverse * 10 + remainder\n        num //= 10\n\n    return reverse * 2 == original_num + 1\n\n# Tests\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Find the largest number that can be formed with the given list of digits.\n\n    Args:\n    digits (list): A list of digits.\n\n    Returns:\n    int: The largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    digits.sort(reverse=True)\n\n    # Convert the sorted digits into an integer\n    max_num = int(''.join(map(str, digits)))\n\n    return max_num\n\n# Test the function\nassert find_Max_Num([1,2,3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test cases\nassert opposite_Signs(1, -2) == True\nassert opposite_Signs(3, 5) == False\nassert opposite_Signs(-4, 6) == False\nassert opposite_Signs(0, 0) == False"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(string):\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            substring = string[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input is not a list or the list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list cannot be empty.\n        >>> smallest_num(\"not a list\")\n        Traceback (most recent call last):\n        ...\n        ValueError: Input must be a list.\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise ValueError(\"Input must be a list.\")\n    if len(numbers) == 0:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    tuple_list (list): A list of tuples.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Raises:\n    ValueError: If the input is not a list of tuples.\n\n    \"\"\"\n    if not isinstance(tuple_list, list) or not all(isinstance(t, tuple) for t in tuple_list):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    max_diff = 0\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][0]) + abs(tuple_list[i][1] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff\n\n# Test the function\nassert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7"}
{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n\n    Args:\n    marks (list): A list of tuples where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list: A sorted list of tuples based on the second value of each tuple.\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])\n\n# Test the function\nassert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Args:\n    lst (list): The input list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(numbers):\n    \"\"\"\n    Count the number of positive numbers in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in numbers:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1,-2,3,-4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell numbers.\n\n    \"\"\"\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] * (i + 1) // i\n\n    return bell[n]\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_Monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    if len(arr) <= 2:\n        return True\n\n    increasing = arr[0] <= arr[-1]\n    decreasing = arr[0] >= arr[-1]\n\n    for i in range(1, len(arr)):\n        if increasing and arr[i] < arr[i-1]:\n            return False\n        if decreasing and arr[i] > arr[i-1]:\n            return False\n\n    return True\n\n# Test cases\nassert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 3, 4]) == True\nassert is_Monotonic([4, 3, 2, 1]) == True\nassert is_Monotonic([1, 2, 1, 4]) == False\nassert is_Monotonic([1, 3, 2, 4]) == False"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list to be checked.\n    sublst (list): The sublist to be searched for.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    if len(sublst) > len(lst):\n        return False\n\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n\n    return False\n\n# Test cases\nassert is_sublist([2,4,3,5,7],[3,7]) == False\nassert is_sublist([1,2,3,4,5],[2,4]) == True\nassert is_sublist([1,2,3,4,5],[6,7]) == False\nassert is_sublist([1,2,3,4,5],[]) == True\nassert is_sublist([],[]) == True"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all given tuples have equal length.\n\n    Args:\n    tuples (list): A list of tuples.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink_factor = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink_factor)\n        if gap <= 1:\n            gap = 1\n            sorted = True\n        i = 0\n        while i + gap < len(lst):\n            if lst[i] > lst[i + gap]:\n                lst[i], lst[i + gap] = lst[i + gap], lst[i]\n                sorted = False\n            i += 1\n\n    return lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(num):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(num**0.5) + 1):\n        j = int((num - i**2)**0.5)\n        if i**2 + j**2 == num:\n            return True\n    return False\n\n# Test cases\nassert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(17) == False\nassert dif_Square(25) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(sequence, patterns):\n    \"\"\"\n    Check whether the given sequence follows the patterns array.\n\n    Args:\n    sequence (list): The sequence to be checked.\n    patterns (list): The patterns to be matched.\n\n    Returns:\n    bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(sequence) != len(patterns):\n        return False\n\n    pattern_map = {}\n    for i in range(len(sequence)):\n        if patterns[i] in pattern_map:\n            if pattern_map[patterns[i]] != sequence[i]:\n                return False\n        else:\n            pattern_map[patterns[i]] = sequence[i]\n\n    return True\n\n# Test cases\nassert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\",\"green\",\"blue\"], [\"a\", \"b\", \"b\"]) == False\nassert is_samepatterns([\"red\",\"green\",\"blue\"], [\"a\", \"a\", \"b\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Args:\n    tuples_list (list): A list of tuples.\n    k (int): The divisor.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tup in tuples_list:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    return number % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Tests\nassert word_len(\"Hadoop\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The number for which to calculate the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return (4/3) * math.pi * (radius ** 3)\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Find the nth number in the Newman Conway sequence.\n\n    Parameters:\n    n (int): The position of the number to find in the sequence.\n\n    Returns:\n    int: The nth number in the Newman Conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    sequence = [0, 1, 1]\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return n * (2 * n - 1)\n\n# Test the function\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge dict1 and dict2\n    for key, value in dict1.items():\n        merged_dict[key] = value\n    for key, value in dict2.items():\n        merged_dict[key] = value\n    \n    # Merge dict3 into merged_dict\n    for key, value in dict3.items():\n        merged_dict[key] = value\n    \n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Find the closest smaller number than n.\n\n    Args:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    \"\"\"\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    int: The length of the longest word.\n\n    Example:\n    >>> len_log([\"python\",\"PHP\",\"bigdata\"])\n    7\n    \"\"\"\n    longest_length = 0\n    for word in words:\n        word_length = len(word)\n        if word_length > longest_length:\n            longest_length = word_length\n    return longest_length\n\n# Test the function\nassert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n    lst (list): A list of string values.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any of the string values in the list, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n    return True\n\n# Test the function\nassert is_undulating(1212121) == True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The value of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    str: The first value of the tuple with the smallest second value.\n\n    \"\"\"\n    return min(lst, key=lambda x: x[1])[0]\n\n# Test the function\nassert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"}
{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    Find the length of the smallest list in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> Find_Min_Length([[1],[1,2]])\n    1\n    >>> Find_Min_Length([[1,2,3],[4,5],[6,7,8,9]])\n    2\n    >>> Find_Min_Length([])\n    0\n    \"\"\"\n    if not isinstance(lst, list) or not all(isinstance(sublist, list) for sublist in lst):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    if not lst:\n        return 0\n\n    min_length = float('inf')\n    for sublist in lst:\n        min_length = min(min_length, len(sublist))\n\n    return min_length"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    Returns the number of divisors of a given integer.\n\n    Parameters:\n    n (int): The integer for which to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(flattened_list):\n    frequency_dict = {}\n    for sublist in flattened_list:\n        for element in sublist:\n            if element in frequency_dict:\n                frequency_dict[element] += 1\n            else:\n                frequency_dict[element] = 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(numbers):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n    \"\"\"\n    if not numbers:\n        return 0\n    result = 1\n    for num in numbers:\n        result *= num\n    return result / len(numbers)\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n    binary = ''\n    while decimal > 0:\n        remainder = decimal % 2\n        binary = str(remainder) + binary\n        decimal = decimal // 2\n    return binary\n\n# Test cases\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Find the next smallest palindrome of a specified integer.\n\n    Args:\n    n (int): The integer for which to find the next smallest palindrome.\n\n    Returns:\n    int: The next smallest palindrome of the specified integer.\n    \"\"\"\n    def is_palindrome(num):\n        \"\"\"\n        Check if a number is a palindrome.\n\n        Args:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a palindrome, False otherwise.\n        \"\"\"\n        return str(num) == str(num)[::-1]\n\n    def increment_number(num):\n        \"\"\"\n        Increment a number by 1.\n\n        Args:\n        num (int): The number to increment.\n\n        Returns:\n        int: The incremented number.\n        \"\"\"\n        return num + 1\n\n    def find_next_smallest_palindrome(num):\n        \"\"\"\n        Find the next smallest palindrome of a specified integer.\n\n        Args:\n        num (int): The integer for which to find the next smallest palindrome.\n\n        Returns:\n        int: The next smallest palindrome of the specified integer.\n        \"\"\"\n        while True:\n            if is_palindrome(num):\n                return num\n            num = increment_number(num)\n\n    return find_next_smallest_palindrome(n)\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Args:\n    arr (list): The input array.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    IndexError: If the index is out of range.\n\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise IndexError(\"Index out of range\")\n    return arr[k-1]\n\n# Test the function\nassert kth_element([12,3,5,7,19], 2) == 3"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n\n    Examples:\n    >>> snake_to_camel('python_program')\n    'PythonProgram'\n    \"\"\"\n    parts = snake_str.split('_')\n    return parts[0] + ''.join(word.capitalize() for word in parts[1:])\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    The Eulerian number a(n, m) represents the number of permutations of m objects taken n at a time,\n    without regard to order.\n\n    Parameters:\n    n (int): The number of objects to choose from.\n    m (int): The number of objects to choose.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(5, 3)\n    60\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if n == 0:\n        return 1\n    elif m == 0:\n        return 0\n    else:\n        return (m * eulerian_num(n - 1, m)) + eulerian_num(n, m - 1)\n\n# Test the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in lexicographical order.\n\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Counts the number of True values in the given list.\n\n    Parameters:\n    lst (list): The input list containing boolean values.\n\n    Returns:\n    int: The count of True values in the list.\n\n    Example:\n    >>> count([True, False, True])\n    2\n    \"\"\"\n    return lst.count(True)\n\n# Test the function\nassert count([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tup):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Args:\n    lst (list): The list to be appended.\n    tup (tuple): The tuple to which the list is appended.\n\n    Returns:\n    tuple: The resulting tuple after appending the list.\n\n    \"\"\"\n    return tup + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\n```"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    \"\"\"\n    Find the number of numbers with an odd value when rotating a binary string the given number of times.\n\n    Parameters:\n    binary_string (str): The binary string to be rotated.\n    num_rotations (int): The number of times the binary string should be rotated.\n\n    Returns:\n    int: The number of numbers with an odd value after the rotations.\n\n    \"\"\"\n\n    def rotate_binary_string(binary_string, num_rotations):\n        \"\"\"\n        Rotate a binary string the given number of times.\n\n        Parameters:\n        binary_string (str): The binary string to be rotated.\n        num_rotations (int): The number of times the binary string should be rotated.\n\n        Returns:\n        str: The rotated binary string.\n\n        \"\"\"\n        return binary_string[-num_rotations:] + binary_string[:-num_rotations]\n\n    def count_odd_numbers(binary_string):\n        \"\"\"\n        Count the number of numbers with an odd value in a binary string.\n\n        Parameters:\n        binary_string (str): The binary string to count the odd numbers in.\n\n        Returns:\n        int: The count of numbers with an odd value.\n\n        \"\"\"\n        return sum(int(digit) for digit in binary_string) % 2\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string, 1)\n        count += count_odd_numbers(binary_string)\n\n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Args:\n    nested_lists (list): A nested list of lists.\n\n    Returns:\n    list: A list of common elements.\n\n    \"\"\"\n    if len(nested_lists) == 0:\n        return []\n\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-456\") == True\nassert check_integer(\"12.34\") == False\nassert check_integer(\"+789\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(tup):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Parameters:\n    tup (tuple): The tuple of positive integers to be converted.\n\n    Returns:\n    int: The single integer formed by concatenating the elements of the tuple.\n\n    Example:\n    >>> tuple_to_int((1,2,3))\n    123\n    \"\"\"\n    return int(''.join(map(str, tup)))\n\n# Test the function\nassert tuple_to_int((1,2,3)) == 123"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    \"\"\"\n    Find the element that appears only once in a sorted array.\n\n    Args:\n        arr (list): A sorted list of integers.\n\n    Returns:\n        int: The element that appears only once in the array.\n\n    Raises:\n        ValueError: If the input array is empty or contains an odd number of elements.\n\n    Examples:\n        >>> search([1,1,2,2,3])\n        3\n        >>> search([1,1,2,2,3,3,4,4,5])\n        5\n        >>> search([])\n        ValueError: Input array cannot be empty.\n        >>> search([1,1,2])\n        ValueError: Input array must have an odd number of elements.\n    \"\"\"\n    if len(arr) == 0:\n        raise ValueError(\"Input array cannot be empty.\")\n    if len(arr) % 2 == 0:\n        raise ValueError(\"Input array must have an odd number of elements.\")\n\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if (mid - left) % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if (right - mid) % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples.\n\n    \"\"\"\n    max_product = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            product = abs(lst[i][0] * lst[j][0]) * abs(lst[i][1] * lst[j][1])\n            if product > max_product:\n                max_product = product\n    return max_product\n\n# Test the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def divisor_sum(num):\n        div_sum = 0\n        for i in range(1, num):\n            if num % i == 0:\n                div_sum += i\n        return div_sum\n\n    amicable_sum = 0\n    for num in range(1, n+1):\n        div_sum = divisor_sum(num)\n        if div_sum > num and divisor_sum(div_sum) == num:\n            amicable_sum += num\n    return amicable_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number in radians.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    \"\"\"\n    return math.atan2(z.imag, z.real)\n\n# Test the function\nassert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeroes\n        max_diff = max(max_diff, diff)\n\n    return max_diff\n\n# Test the function\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        Find the greatest common divisor (GCD) of two numbers.\n\n        Parameters:\n        x (int): The first number.\n        y (int): The second number.\n\n        Returns:\n        int: The GCD of x and y.\n        \"\"\"\n        while y != 0:\n            x, y = y, x % y\n        return x\n\n    def sum_divisors(n):\n        \"\"\"\n        Find the sum of divisors of a given number.\n\n        Parameters:\n        n (int): The number.\n\n        Returns:\n        int: The sum of divisors of n.\n        \"\"\"\n        result = 0\n        for i in range(1, int(n**0.5) + 1):\n            if n % i == 0:\n                result += i\n                if i != n // i:\n                    result += n // i\n        return result\n\n    gcd_ab = gcd(a, b)\n    return sum_divisors(gcd_ab)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Multiply two integers and return the result.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    Find words that are longer than n characters from a given list of words.\n\n    Args:\n    n (int): The minimum length of words to be considered long.\n    sentence (str): The input sentence containing words separated by spaces.\n\n    Returns:\n    list: A list of words longer than n characters.\n    \"\"\"\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    \"\"\"\n    Check if the given matrix is a magic square.\n\n    Parameters:\n    matrix (list of lists): The matrix to be checked.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n\n    # Get the size of the matrix\n    n = len(matrix)\n\n    # Calculate the sum of the first row\n    row_sum = sum(matrix[0])\n\n    # Check if each row has the same sum\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # Check if each column has the same sum\n    for j in range(n):\n        col_sum = 0\n        for i in range(n):\n            col_sum += matrix[i][j]\n        if col_sum != row_sum:\n            return False\n\n    # Check if the diagonals have the same sum\n    diag1_sum = 0\n    diag2_sum = 0\n    for i in range(n):\n        diag1_sum += matrix[i][i]\n        diag2_sum += matrix[i][n-i-1]\n    if diag1_sum != row_sum or diag2_sum != row_sum:\n        return False\n\n    return True\n\n# Test the function\nassert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    lst (list): The input list of items.\n\n    Returns:\n    int: The item with maximum frequency in the list.\n\n    \"\"\"\n    freq_dict = {}\n    max_freq = 0\n    max_item = None\n\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n        if freq_dict[item] > max_freq:\n            max_freq = freq_dict[item]\n            max_item = item\n\n    return max_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = 'aeiouAEIOU'\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n    return ''.join(s)\n\n# Tests\nassert reverse_vowels(\"Python\") == \"Python\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    str: The converted string.\n\n    Examples:\n    >>> tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))\n    'exercises'\n    \"\"\"\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers.\n\n    Example:\n    >>> sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])\n    -32\n    \"\"\"\n    return sum(num for num in numbers if num < 0)\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n <= 0:\n        return False\n    elif n == 1:\n        return True\n    else:\n        power = 1\n        while power < n:\n            power *= 2\n        return is_sum_of_powers_of_two(n - power // 2)\n\n# Test cases\nassert is_sum_of_powers_of_two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Flatten the list of lists into a single set of numbers.\n\n    Args:\n    lst (list): The input list of lists.\n\n    Returns:\n    set: A set of numbers extracted from the input list.\n\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        for num in sublist:\n            flattened_set.add(num)\n    return flattened_set\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    \"\"\"\n\n    def flip(lst, i):\n        \"\"\"\n        Flips the elements in the list from index 0 to i.\n\n        Parameters:\n        lst (list): The list of elements.\n        i (int): The index up to which the elements should be flipped.\n\n        Returns:\n        list: The list with flipped elements.\n\n        \"\"\"\n        start = 0\n        while start < i:\n            lst[start], lst[i] = lst[i], lst[start]\n            start += 1\n            i -= 1\n        return lst\n\n    def find_max(lst, n):\n        \"\"\"\n        Finds the index of the maximum element in the list.\n\n        Parameters:\n        lst (list): The list of elements.\n        n (int): The index up to which the maximum element should be found.\n\n        Returns:\n        int: The index of the maximum element.\n\n        \"\"\"\n        max_idx = 0\n        for i in range(1, n):\n            if lst[i] > lst[max_idx]:\n                max_idx = i\n        return max_idx\n\n    def pancake_sort_helper(lst, n):\n        \"\"\"\n        Sorts the list using the pancake sorting algorithm.\n\n        Parameters:\n        lst (list): The list of elements.\n        n (int): The size of the list.\n\n        Returns:\n        list: The sorted list of elements.\n\n        \"\"\"\n        if n == 1:\n            return lst\n\n        max_idx = find_max(lst, n)\n        lst = flip(lst, max_idx)\n        lst = flip(lst, n - 1)\n\n        return pancake_sort_helper(lst, n - 1)\n\n    return pancake_sort_helper(lst, len(lst))\n\n# Test the function\nassert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Count the number of items that are identical in the same position of three given lists.\n\n    Args:\n    list1, list2, list3 (list): Three lists of equal length.\n\n    Returns:\n    int: The count of items that are identical in the same position of the three lists.\n\n    \"\"\"\n    if len(list1) != len(list2) or len(list2) != len(list3):\n        raise ValueError(\"The input lists must be of equal length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n\n    return count\n\n# Test the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of numbers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    \"\"\"\n    max_diff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n\n# Test the function\nassert max_Abs_Diff((2, 1, 5, 3)) == 4"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    n (int): The target number.\n\n    Returns:\n    tuple or None: A tuple (x, y) if a solution exists, otherwise None.\n    \"\"\"\n    if n % a == 0:\n        x = n // a\n        y = 0\n        return x, y\n    elif n % b == 0:\n        x = 0\n        y = n // b\n        return x, y\n    else:\n        return None\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Args:\n    lst (list): The input list from which elements are to be removed.\n    elements (list): The list of elements to be removed from the input list.\n\n    Returns:\n    list: The modified list with elements removed.\n\n    \"\"\"\n    return [x for x in lst if x not in elements]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total_sum = 0\n    for i in range(n // 2 + 1):\n        total_sum += n - 2 * i\n    return total_sum\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    for i in range(len(string)):\n        if i < len(alphabet) and string[i].lower() == alphabet[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    seen = set()\n    for num in nums:\n        for s in seen:\n            if (num ^ s) % 2 == 0:\n                count += 1\n        seen.add(num)\n    return count\n\n# Test the function\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n# Test cases\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Count the number of occurrences of a number in a given list.\n\n    Args:\n    lst (list): The input list.\n    num (int): The number to count occurrences of.\n\n    Returns:\n    int: The number of occurrences of num in lst.\n    \"\"\"\n    return lst.count(num)\n\n# Tests\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Calculate the sum of numbers in a list within a range specified by two indices.\n\n    Args:\n    lst (list): The input list of numbers.\n    start (int): The starting index of the range (inclusive).\n    end (int): The ending index of the range (exclusive).\n\n    Returns:\n    int: The sum of numbers within the specified range.\n\n    Raises:\n    ValueError: If the start or end index is out of range.\n\n    \"\"\"\n    if start < 0 or end > len(lst) or start >= end:\n        raise ValueError(\"Invalid range indices\")\n\n    return sum(lst[start:end])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side_length is not a positive number.\n\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    perimeter = 5 * side_length\n    return perimeter\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    Count the number of occurence of the string 'std' in a given string.\n\n    Args:\n    string (str): The input string to search for 'std' occurrences.\n\n    Returns:\n    int: The number of occurrences of 'std' in the input string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        index = string.find('std', index)\n        if index == -1:\n            break\n        count += 1\n        index += 1\n    return count\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all elements in a tuple have the same data type.\n\n    Parameters:\n    t (tuple): The input tuple to check.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_types = set(type(element) for element in t)\n    return len(data_types) == 1\n\n# Test cases\nassert check_type((5, 6, 7, 3, 5, 6)) == True\nassert check_type((\"apple\", \"banana\", \"cherry\")) == True\nassert check_type((1, \"2\", 3)) == False"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2\n\n# Test cases\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    Count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number to count the set bits in.\n\n    Returns:\n    int: The number of set bits in the given number.\n\n    Examples:\n    >>> count_Set_Bits(2)\n    1\n    >>> count_Set_Bits(7)\n    3\n    >>> count_Set_Bits(0)\n    0\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Testing the function\nassert count_Set_Bits(2) == 1\nassert count_Set_Bits(7) == 3\nassert count_Set_Bits(0) == 0"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Remove the characters which have odd index values of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with odd index characters removed.\n    \"\"\"\n    return string[::2]\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(' ', character)\n\n# Test the function\nassert replace_blank(\"hello people\",'@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    This function takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n    \n    # Return the first n items from the sorted list\n    return sorted_lst[:n]\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    base_area = 2 * math.pi * radius * height\n    lateral_area = 2 * math.pi * radius**2\n\n    return base_area + lateral_area\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float): The length of one side of the cube.\n\n    Returns:\n    float: The volume of the cube.\n\n    \"\"\"\n    return side_length ** 3\n\n# Test the function\nassert volume_cube(3) == 27"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Set all even bits of a given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with even bits set.\n\n    \"\"\"\n    # Create a mask with all even bits set\n    mask = 0b10101010101010101010101010101010\n\n    # Use bitwise AND operation to set even bits\n    return num | mask\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n\n    Examples:\n    >>> number_of_substrings(\"abc\")\n    6\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        for j in range(i+1, len(string)+1):\n            count += 1\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    \"\"\"\n    Calculates the number of possible sequences of length n, where each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n\n    Parameters:\n    m (int): The maximum value an element can have.\n    n (int): The length of the sequence.\n\n    Returns:\n    int: The number of possible sequences.\n\n    \"\"\"\n\n    # Initialize the list to store the number of sequences for each element\n    sequences = [0] * (n + 1)\n\n    # There is only one sequence possible for the first element\n    sequences[1] = 1\n\n    # Calculate the number of sequences for each element\n    for i in range(2, n + 1):\n        for j in range(1, i):\n            sequences[i] += sequences[j]\n\n        # Add the number of sequences that end with m\n        sequences[i] += sequences[i - 1]\n\n    return sequences[n]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Args:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The modified first list with the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, 2, 4, 6, 8]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    Count the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Parameters:\n    num (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n\n    \"\"\"\n    # Find the square root of the given number\n    sqrt = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt * sqrt == num:\n        next_square = (sqrt + 1) ** 2\n    else:\n        next_square = (sqrt + 1) ** 2\n\n    return next_square\n\n# Test the function\nassert next_Perfect_Square(35) == 36"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    \"\"\"\n    Finds the maximum sum of a bitonic subsequence in the given array.\n\n    A bitonic subsequence is one that is first increasing and then decreasing.\n\n    Args:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a bitonic subsequence.\n\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    inc = [0] * n\n    dec = [0] * n\n\n    # Calculate increasing subsequence sum\n    for i in range(n):\n        inc[i] = arr[i]\n        for j in range(i):\n            if arr[i] > arr[j] and inc[i] < inc[j] + arr[i]:\n                inc[i] = inc[j] + arr[i]\n\n    # Calculate decreasing subsequence sum\n    for i in range(n - 1, -1, -1):\n        dec[i] = arr[i]\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and dec[i] < dec[j] + arr[i]:\n                dec[i] = dec[j] + arr[i]\n\n    # Find the maximum sum of a bitonic subsequence\n    max_sum = max(inc[i] + dec[i] - arr[i] for i in range(n))\n\n    return max_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(string):\n    \"\"\"\n    Find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n\n    Examples:\n    >>> lps(\"TENS FOR TENS\")\n    5\n    \"\"\"\n\n    # Create a table to store the lengths of the palindromic subsequences\n    n = len(string)\n    dp = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Initialize the table with base cases\n    for i in range(n + 1):\n        dp[i][i] = 1\n\n    # Build the table bottom-up\n    for length in range(2, n + 1):\n        for i in range(n - length + 2):\n            j = i + length - 1\n            if string[i] == string[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    # Return the length of the longest palindromic subsequence\n    return dp[0][n]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    Counts the occurrences of an element in a tuple.\n\n    Args:\n    tup (tuple): The input tuple.\n    element: The element to count.\n\n    Returns:\n    int: The number of occurrences of the element in the tuple.\n    \"\"\"\n    return tup.count(element)\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(num):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    num (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and the phase of the complex number.\n    \"\"\"\n    magnitude = abs(num)\n    phase = cmath.phase(num)\n    return (magnitude, phase)\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    Returns the number of integer elements in a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    \"\"\"\n    Generate all combinations (with repetition) of the elements of a list and return a list with a tuple for each combination.\n\n    Args:\n    lst (list): The input list of elements.\n    n (int): The length of combinations to generate.\n\n    Returns:\n    list: A list with a tuple for each combination of length n.\n\n    \"\"\"\n    if n == 0:\n        return [()]\n\n    combinations = []\n    for i in range(len(lst)):\n        sub_combinations = combinations_colors(lst, n-1)\n        for sub_combination in sub_combinations:\n            combinations.append((lst[i],) + sub_combination)\n\n    return combinations\n\n# Test the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(n):\n        if is_prime(num):\n            count += 1\n    return count\n\n# Test the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return (b, a)\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    # Check if the lengths of the tuples are not equal\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the tuples must be equal.\")\n\n    # Initialize a new tuple to store the maximized elements\n    maximized_tuple = []\n\n    # Iterate over the elements of the tuples\n    for i in range(len(tuple1)):\n        # Check if the elements of tuple1 are not tuples\n        if not isinstance(tuple1[i], tuple) or not isinstance(tuple2[i], tuple):\n            raise ValueError(\"Elements of the tuples must be tuples.\")\n\n        # Check if the lengths of the inner tuples are not equal\n        if len(tuple1[i]) != len(tuple2[i]):\n            raise ValueError(\"The lengths of the inner tuples must be equal.\")\n\n        # Initialize a new tuple to store the maximized elements for the current iteration\n        inner_maximized_tuple = []\n\n        # Iterate over the elements of the inner tuples\n        for j in range(len(tuple1[i])):\n            # Check if the elements of the inner tuples are not integers\n            if not isinstance(tuple1[i][j], int) or not isinstance(tuple2[i][j], int):\n                raise ValueError(\"Elements of the inner tuples must be integers.\")\n\n            # Maximize the elements of the inner tuples\n            inner_maximized_tuple.append(max(tuple1[i][j], tuple2[i][j]))\n\n        # Append the maximized inner tuple to the final tuple\n        maximized_tuple.append(tuple(inner_maximized_tuple))\n\n    return tuple(maximized_tuple)\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\n```"}
{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be a positive integer\")\n\n    primes = [2, 3]\n    while len(primes) < n:\n        next_prime = primes[-1] + 2\n        while True:\n            is_prime = True\n            for p in primes:\n                if next_prime % p == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_prime)\n                break\n            next_prime += 2\n\n    return primes[n - 1]\n\n# Test the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise division of two tuples.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple with the result of element-wise division.\n\n    Raises:\n    ZeroDivisionError: If any element in tuple2 is 0.\n\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Both tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"Cannot divide by zero.\")\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part is L, and returns the resulting lists in a tuple.\n\n    Args:\n    lst (list): The input list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two resulting lists.\n\n    \"\"\"\n    return lst[:L], lst[L:]\n\n# Test the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog years.\n\n    Raises:\n    ValueError: If the input is not a positive integer.\n\n    \"\"\"\n    if not isinstance(human_age, int) or human_age <= 0:\n        raise ValueError(\"Input must be a positive integer.\")\n\n    if human_age <= 2:\n        return human_age * 10.5\n    else:\n        return 21 + (human_age - 2) * 4\n\n# Test cases\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    \"\"\"\n    Splits a list for every nth element, returning a list of the resulting lists.\n\n    Args:\n    lst (list): The input list to be split.\n    n (int): The number of elements to skip between splits.\n\n    Returns:\n    list: A list of lists, where each inner list contains the nth elements from the input list.\n    \"\"\"\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (int or float): The length of one side of the cube.\n\n    Returns:\n    int or float: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    0\n    >>> lateralsurface_cube(-2)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length ** 2\n\n# Test the function\nassert lateralsurface_cube(5) == 100"}
{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n\n    Example:\n    >>> square_Sum(2)\n    10\n    \"\"\"\n    sum_of_squares = 0\n    odd_number = 1\n    for _ in range(n):\n        sum_of_squares += odd_number ** 2\n        odd_number += 2\n    return sum_of_squares\n\n# Test the function\nassert square_Sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is defined as the sum of all the preceding integers.\n    For example, the first star number is 1 (1), the second star number is 3 (1 + 2),\n    the third star number is 7 (1 + 2 + 3), and so on.\n\n    Parameters:\n    n (int): The n'th star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    63\n    \"\"\"\n    return n * (n + 1) // 2\n\n# Testing the function\nassert find_star_num(3) == 37\nassert find_star_num(5) == 63"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    Returns the ASCII value of a character.\n\n    Parameters:\n    char (str): The character for which the ASCII value is to be determined.\n\n    Returns:\n    int: The ASCII value of the character.\n\n    Raises:\n    TypeError: If the input is not a single character.\n\n    Examples:\n    >>> ascii_value('A')\n    65\n    >>> ascii_value('B')\n    66\n    >>> ascii_value('Z')\n    90\n    \"\"\"\n    if len(char) != 1:\n        raise TypeError(\"Input must be a single character.\")\n    return ord(char)\n\n# Testing the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    Find the sum of even numbers at even positions in a list.\n\n    Args:\n    lst (list): The input list of numbers.\n\n    Returns:\n    int: The sum of even numbers at even positions.\n    \"\"\"\n    even_sum = 0\n    for i in range(1, len(lst), 2):  # Iterate over even positions starting from index 1\n        if lst[i] % 2 == 0:  # Check if the number at the current even position is even\n            even_sum += lst[i]\n    return even_sum\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    Calculates the sum of the first n even natural numbers raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum_of_powers = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum_of_powers += i ** 5\n    return sum_of_powers\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    \"\"\"\n    Extracts the rear element of each tuple in a list and returns a list of those rear elements.\n\n    Args:\n    tuples_list (list): A list of tuples.\n\n    Returns:\n    list: A list containing the rear element of each tuple.\n    \"\"\"\n    rear_elements = [tup[-1] for tup in tuples_list]\n    return rear_elements\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    \n    return tuple(result)\n\n# Test the function\nassert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Calculates the sum of even index binomial coefficients up to the given positive integer n.\n\n    Parameters:\n    n (int): The positive integer up to which to calculate the sum.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n\n    \"\"\"\n    sum_even_coeff = 0\n    for k in range(n + 1):\n        if k % 2 == 0:\n            binomial_coeff = binom(n, k)\n            sum_even_coeff += binomial_coeff\n    return sum_even_coeff\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n    return math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    \"\"\"\n    return n * (2 * n - 1)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return (True, i)\n    return (False, -1)\n\n# Test the function\nassert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True\nassert all_unique([1, 2, 3, 1]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list with the element-wise subtraction of list2 from list1.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]\n\n# Test the function\nassert sub_list([1, 2, 3],[4,5,6]) == [-3,-3,-3]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n\n# Tests\nassert validate(1234) == True\nassert validate(121) == False\nassert validate(123) == False\nassert validate(112233) == True\nassert validate(123456) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Args:\n    lst (list): The input list.\n    element: The element to compare with.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)\n\n# Test cases\nassert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Check if the string contains the 'a' character followed by two or three 'b' characters.\n\n    Args:\n    text (str): The input string to check.\n\n    Returns:\n    bool: True if the pattern is found, False otherwise.\n    \"\"\"\n    pattern = r'ab{2,3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    \"\"\"\n    Find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The number of times the array is repeated.\n    n (int): The length of the modified array.\n\n    Returns:\n    int: The largest sum of a contiguous array in the modified array.\n\n    \"\"\"\n\n    # Calculate the sum of the original array\n    original_sum = sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the original array\n    max_sum = max_sub_array_sum(arr)\n\n    # Calculate the maximum sum of a contiguous subarray in the modified array\n    modified_sum = max_sum * (k if original_sum > 0 else k - 1)\n\n    return modified_sum\n\n\ndef max_sub_array_sum(arr):\n    \"\"\"\n    Find the maximum sum of a contiguous subarray in the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum sum of a contiguous subarray.\n\n    \"\"\"\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    Calculate the sum of squares of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n\n    Example:\n    >>> square_Sum(2)\n    20\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(2, 2*n+1, 2):\n        sum_of_squares += i**2\n    return sum_of_squares\n\n# Test the function\nassert square_Sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list with maximum length in a list of lists.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    tuple: A tuple containing the maximum length and the list with maximum length.\n\n    \"\"\"\n    max_len = 0\n    max_list = []\n\n    for sub_list in lst:\n        if len(sub_list) > max_len:\n            max_len = len(sub_list)\n            max_list = sub_list\n\n    return max_len, max_list\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find(dividend, divisor):\n    \"\"\"\n    Find the quotient of two numbers (rounded down to the nearest integer).\n\n    Parameters:\n    dividend (int): The dividend.\n    divisor (int): The divisor.\n\n    Returns:\n    int: The quotient of the division.\n\n    Raises:\n    ZeroDivisionError: If the divisor is zero.\n\n    Examples:\n    >>> find(10, 3)\n    3\n    >>> find(10, 4)\n    2\n    >>> find(10, 0)\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n    if divisor == 0:\n        raise ZeroDivisionError(\"division by zero\")\n    return dividend // divisor"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(side1, side2):\n    \"\"\"\n    Calculate the length of the third side of a right-angled triangle.\n\n    Parameters:\n    side1 (float): The length of the first side of the triangle.\n    side2 (float): The length of the second side of the triangle.\n\n    Returns:\n    float: The length of the third side of the triangle.\n\n    Raises:\n    ValueError: If either side1 or side2 is negative.\n\n    \"\"\"\n    if side1 < 0 or side2 < 0:\n        raise ValueError(\"Sides cannot be negative.\")\n\n    return math.sqrt(side1**2 + side2**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if max_value is None or item > max_value:\n                max_value = item\n    return max_value\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Counts the number of inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The number of inversions in the array.\n\n    \"\"\"\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    \"\"\"\n    Flatten a given nested list structure.\n\n    Args:\n    nested_list (list): The nested list to be flattened.\n\n    Returns:\n    list: The flattened list.\n    \"\"\"\n    flattened = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened.extend(flatten_list(item))\n        else:\n            flattened.append(item)\n    return flattened\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    lst (list): A list of tuples where each tuple contains a name and an aggregate.\n\n    Returns:\n    tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    \"\"\"\n    max_name = None\n    max_aggregate = float('-inf')\n\n    for name, aggregate in lst:\n        if aggregate > max_aggregate:\n            max_name = name\n            max_aggregate = aggregate\n\n    return (max_name, max_aggregate)\n\n# Test the function\nassert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (n bits for first and last n bits).\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    \"\"\"\n    # Base case: If n is 1, there are 2 possible sequences (00 and 11)\n    if n == 1:\n        return 2.0\n\n    # Recursive case: Count for n-1 and multiply by 2\n    count = count_binary_seq(n-1) * 2\n\n    # Add 1 to the count if the last two digits are 11\n    if n > 1:\n        count += 1\n\n    return count\n\n# Test the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Recursive function to find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n\n    \"\"\"\n    if not isinstance(dictionary, dict) or not dictionary:\n        return 1\n\n    depths = [dict_depth(value) for value in dictionary.values()]\n    return max(depths) + 1\n\n# Test the function\nassert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.lower().startswith('p'):\n            return word.split()[0], word.split()[1]\n    return None\n\n# Test the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    if i >= n or k >= n:\n        return 0\n\n    max_sum = 0\n    for j in range(i, n):\n        if arr[j] > arr[k]:\n            max_sum = max(max_sum, arr[j] + max_sum_increasing_subseq(arr, n, j + 1, j))\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n    num (int): The number of largest products to find.\n\n    Returns:\n    list: A list of the specified number of largest products.\n\n    \"\"\"\n    products = []\n    for i in list1:\n        for j in list2:\n            products.append(i * j)\n    products.sort(reverse=True)\n    return products[:num]\n\n# Test the function\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two input numbers.\n    \"\"\"\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', ' ', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function sets the left most unset bit in the given number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The modified number with the left most unset bit set.\n\n    Example:\n    >>> set_left_most_unset_bit(10)\n    14\n    \"\"\"\n    if num == 0:\n        return 1\n\n    bit_length = num.bit_length()\n    mask = 1 << (bit_length - 1)\n    return num | mask\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n    return (math.pi * radius**2 * height) / 3\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Tests\nassert highest_power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Find the n'th Lucas number.\n\n    The Lucas numbers are a sequence of numbers in which each number is the sum of the two preceding ones.\n    The sequence starts with 2 and 1, so the first few Lucas numbers are 2, 1, 3, 4, 7, 11, 18, ...\n\n    Parameters:\n    n (int): The index of the Lucas number to find (starting from 0).\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> find_lucas(0)\n    2\n    >>> find_lucas(1)\n    1\n    >>> find_lucas(9)\n    76\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n    elif n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_nums = [2, 1]\n        for i in range(2, n + 1):\n            lucas_nums.append(lucas_nums[i - 1] + lucas_nums[i - 2])\n        return lucas_nums[n]\n\n# Testing the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Args:\n    lst (list): The input list of elements.\n    format_str (str): The format string to be applied to each element.\n\n    Returns:\n    list: A new list with the formatted elements.\n\n    Example:\n    >>> add_string([1,2,3,4],'temp{0}')\n    ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(element) for element in lst]\n\n# Test the function\nassert add_string([1,2,3,4],'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\n```"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(tup):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Parameters:\n    tup (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(tup) == len(set(tup))\n\n# Test cases\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Tests\nassert first_non_repeating_character(\"abcabc\") == None"}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    \"\"\"\n    return sorted([a, b, c])[1]\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number in a given list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list of sums of digits for each number in the input list.\n    \"\"\"\n    result = []\n    for num in numbers:\n        digit_sum = 0\n        while num > 0:\n            digit_sum += num % 10\n            num //= 10\n        result.append(digit_sum)\n    return result\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == [1, 2, 11]"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    Find the minimum of two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to be checked.\n    element: The element to search for within the tuple.\n\n    Returns:\n    bool: True if the element is found in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the given number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number for which to check the parity.\n\n    Returns:\n    bool: True if the parity of the given number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test cases\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The minimum product from the pairs of tuples.\n\n    \"\"\"\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 8"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input heterogeneous list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        TypeError: If the input is not a list or if the list contains elements of different types.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not isinstance(lst, list):\n        raise TypeError(\"Input must be a list\")\n\n    min_value = None\n    for item in lst:\n        if isinstance(item, (int, float)):\n            if min_value is None or item < min_value:\n                min_value = item\n        else:\n            raise TypeError(\"List contains elements of different types\")\n\n    return min_value\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(numbers):\n    \"\"\"\n    Remove odd numbers from a given list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A new list with odd numbers removed.\n\n    Examples:\n        >>> remove_odd([1, 2, 3])\n        [2]\n    \"\"\"\n    return [num for num in numbers if num % 2 == 0]\n\n# Test the function\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples.\n\n    Args:\n    lst (list): The list of tuples.\n    n (int): The index of the element to extract.\n\n    Returns:\n    list: A list containing the nth element from each tuple in the input list.\n    \"\"\"\n    return [t[n] for t in lst]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in a sequence exists in another sequence.\n\n    Args:\n    seq1 (list or tuple): The first sequence.\n    seq2 (list or tuple): The second sequence.\n\n    Returns:\n    bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for item in seq1:\n        if item in seq2:\n            return True\n    return False\n\n# Test cases\nassert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3,4,5],[3,4,5,6]) == True\nassert overlapping([], [1,2,3]) == False\nassert overlapping([1,2,3], []) == False\nassert overlapping([1,2,3], [4,5,6]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Args:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    \"\"\"\n    max1 = float('-inf')\n    max2 = float('-inf')\n    min1 = float('inf')\n    min2 = float('inf')\n\n    for num in arr:\n        if num > max1:\n            max2 = max1\n            max1 = num\n        elif num > max2:\n            max2 = num\n\n        if num < min1:\n            min2 = min1\n            min1 = num\n        elif num < min2:\n            min2 = num\n\n    if max1 * max2 > min1 * min2:\n        return (max1, max2)\n    else:\n        return (min1, min2)\n\n# Test the function\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    Find the element of a list with maximum length.\n\n    Args:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The element of the list with maximum length.\n\n    \"\"\"\n    return max(lst, key=len)\n\n# Test the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    return total_sum * len(rounded_numbers)\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_Sum(2)\n    72\n    >>> cube_Sum(3)\n    216\n    >>> cube_Sum(0)\n    0\n    \"\"\"\n    if not isinstance(n, int) or n < 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n\n# Testing the function\nassert cube_Sum(2) == 72\nassert cube_Sum(3) == 216\nassert cube_Sum(0) == 0"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(tup, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by the given delimiter.\n\n    Args:\n    tup (tuple): The input tuple.\n    delimiter (str, optional): The delimiter to be used for concatenation. Defaults to '-'.\n\n    Returns:\n    str: The concatenated string.\n\n    Example:\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(map(str, tup))\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function calculates the average of cubes of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    float: The average of cubes of the first n natural numbers.\n\n    Example:\n    >>> find_Average_Of_Cube(2)\n    4.5\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Args:\n    tup (tuple): The input tuple of strings.\n\n    Returns:\n    list: A list containing the rear index elements of the strings in the input tuple.\n    \"\"\"\n    return [string[-1] for string in tup]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Count the number of sublists containing a particular element.\n\n    Args:\n    lst (list): The input list of sublists.\n    element: The element to count in the sublists.\n\n    Returns:\n    int: The count of sublists containing the element.\n\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Filter odd numbers from a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the odd numbers.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date_string):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n    date_string (str): The date in yyyy-mm-dd format.\n\n    Returns:\n    str: The date in dd-mm-yyyy format.\n    \"\"\"\n    parts = date_string.split('-')\n    return f\"{parts[2]}-{parts[1]}-{parts[0]}\"\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Extracts the elementwise and tuples from the given two tuples.\n\n    Args:\n    tuple1, tuple2: Two tuples of the same length.\n\n    Returns:\n    A new tuple containing the elementwise and of the input tuples.\n\n    Example:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n    return tuple(x & y for x, y in zip(tuple1, tuple2))\n\n# Test the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function finds the directrix of a parabola given its coefficients a, b, and c.\n\n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n\n    Returns:\n    float: The directrix of the parabola\n\n    \"\"\"\n    if a == 0:\n        raise ValueError(\"The parabola is not valid as it is not of the form ax^2 + bx + c = 0.\")\n\n    directrix = -b**2 / (4*a)\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (int or float): Length of side a of the trapezium.\n    b (int or float): Length of side b of the trapezium.\n    c (int or float): Length of side c of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values are negative.\n\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Lengths of a trapezium cannot be negative.\")\n\n    # Calculate the median length using the formula:\n    # Median = (a + b - c) / 3\n    median = (a + b - c) / 3\n\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array of numbers.\n    num (int or float): The number to compare with.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True\n\n# Test cases\nassert check_greater([1, 2, 3, 4, 5], 4) == False\nassert check_greater([1, 2, 3, 4, 5], 6) == True\nassert check_greater([1, 2, 3, 4, 5], 0) == False\nassert check_greater([1, 2, 3, 4, 5], 5) == False\nassert check_greater([1, 2, 3, 4, 5], 10) == True"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    Returns the last digit of a given number.\n\n    Parameters:\n    number (int): The number.\n\n    Returns:\n    int: The last digit of the given number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    Returns a list of negative numbers from the given input list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A list of negative numbers.\n\n    Example:\n    >>> neg_nos([-1, 4, 5, -6])\n    [-1, -6]\n    \"\"\"\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Remove odd characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n\n    Examples:\n        >>> remove_odd(\"python\")\n        'yhn'\n    \"\"\"\n    return ''.join([string[i] for i in range(len(string)) if i % 2 == 0])\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The joined integer.\n\n    Example:\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the start position, end position, and the adverb found.\n\n    \"\"\"\n    adverbs = ['clearly', 'easily', 'quickly', 'happily', 'sadly']\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:\n            return (i, i + len(word), word)\n    return None\n\n# Test the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    \"\"\"\n    return 6 * size * size\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        element1 = tuple1[i]\n        element2 = tuple2[i]\n        multiplied_elements = (element1[0] * element2[0], element1[1] * element2[1])\n        result.append(multiplied_elements)\n    return tuple(result)\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_input, list_elements):\n    count = 0\n    for element in list_elements:\n        count += tuple_input.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Write a function to find cubes of individual elements in a list.\n    \"\"\"\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    \"\"\"\n    perrin_numbers = [3, 0, 2]\n    if n <= 3:\n        return sum(perrin_numbers[:n])\n    else:\n        for _ in range(3, n):\n            next_number = perrin_numbers[-2] + perrin_numbers[-3]\n            perrin_numbers.append(next_number)\n        return sum(perrin_numbers)\n\n# Test the function\nassert cal_sum(9) == 49"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of specified size from a given list of string values.\n\n    Args:\n    string_list (list): A list of string values.\n    size (int): The size of strings to extract.\n\n    Returns:\n    list: A list of strings with the specified size.\n\n    \"\"\"\n    return [string for string in string_list if len(string) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Removes all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    return ''.join(string.split())\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sumofFactors(num):\n    \"\"\"\n    This function calculates the sum of even factors of a given number.\n\n    Parameters:\n    num (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n\n# Test the function\nassert sumofFactors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_wordz(\"pythonz.\")==True"}
{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number == 2:\n        return False  # February does not have a fixed number of days\n    else:\n        return False\n\n# Test cases\nassert check_monthnumb_number(5) == True\nassert check_monthnumb_number(2) == False\nassert check_monthnumb_number(10) == True\nassert check_monthnumb_number(15) == False"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    Reverse each string in a given list of string values.\n\n    Parameters:\n    string_list (list): A list of string values.\n\n    Returns:\n    list: A new list with each string reversed.\n\n    Example:\n    >>> reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])\n    ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\n    \"\"\"\n    return [string[::-1] for string in string_list]\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Find the sublist with the minimum length.\n\n    Args:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: The sublist with the minimum length.\n\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n# Test the function\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (int or float): The length of the rectangle.\n    width (int or float): The width of the rectangle.\n\n    Returns:\n    int or float: The area of the rectangle.\n\n    Raises:\n    ValueError: If either length or width is negative.\n\n    Examples:\n    >>> rectangle_area(10, 20)\n    200\n    >>> rectangle_area(5.5, 3.2)\n    17.6\n    >>> rectangle_area(-1, 5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Length and width must be positive numbers.\n    \"\"\"\n    if length < 0 or width < 0:\n        raise ValueError(\"Length and width must be positive numbers.\")\n    return length * width"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with uppercase substrings removed.\n    \"\"\"\n    return ''.join(char for char in string if not char.isupper())\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        new_comb = []\n        for j in range(len(result)):\n            new_comb.append(result[j] + [lst[i]])\n        result.extend(new_comb)\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Find the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The maximum product subarray.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    \"\"\"\n\n    if len(arr) == 0:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n        if num == 0:\n            current_product = 1\n\n    return max_product\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Drop empty items from a given dictionary.\n\n    Args:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    dict: The modified dictionary with empty items removed.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): The input list of numbers.\n\n    Returns:\n    int: The maximum product of an increasing subsequence.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n\n    if len(arr) == 0:\n        return 0\n\n    max_prod = [0] * len(arr)\n    max_prod[0] = arr[0]\n\n    for i in range(1, len(arr)):\n        max_prod[i] = max(max_prod[i-1] * arr[i], arr[i])\n\n    return max(max_prod)\n\n# Test the function\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(tup):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: A new tuple with the pairwise addition of neighboring elements.\n\n    Example:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    \"\"\"\n    return tuple(a + b for a, b in zip(tup, tup[1:]))\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    Find the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The modulo value.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    return sorted(lst) == list(range(min(lst), max(lst)+1))\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 4, 6]) == False\nassert check_Consecutive([-5, -4, -3, -2, -1]) == True\nassert check_Consecutive([1, 2, 3, 3, 4]) == False"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Args:\n    tuple_list1 (list): The first tuple list.\n    tuple_list2 (list): The second tuple list.\n\n    Returns:\n    set: The set of tuples that are present in both tuple_list1 and tuple_list2.\n\n    \"\"\"\n    intersection = set()\n    for tuple1 in tuple_list1:\n        for tuple2 in tuple_list2:\n            if set(tuple1) == set(tuple2):\n                intersection.add(tuple1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace the old character.\n\n    Returns:\n        str: The modified string with replaced characters.\n\n    Examples:\n        >>> replace_char(\"polygon\",'y','l')\n        'pollgon'\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\",'y','l') == \"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order.\n\n    Args:\n    dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n    list: A list of tuples where each tuple contains a key-value pair from the dictionary, sorted by value in descending order.\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items\n\n# Test the function\nassert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    Find the sum of the largest and smallest value in a given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The sum of the largest and smallest value in the array.\n\n    Examples:\n    >>> big_sum([1, 2, 3])\n    4\n    >>> big_sum([5, 10, 15, 20])\n    25\n    >>> big_sum([-5, -2, -8, -10])\n    -13\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Input array must have at least 2 elements\")\n\n    largest = float('-inf')\n    smallest = float('inf')\n\n    for num in arr:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n\n    return largest + smallest"}
{"task_id": "Mbpp/477", "solution": "def to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return string.lower()\n\n# Test the function\nassert to_lower(\"InValid\") == \"invalid\""}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.isupper():\n            result += char\n    return result\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_Digit(num):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The first digit of the input number.\n    \"\"\"\n    return int(str(num)[0])\n\n# Test the function\nassert first_Digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def split_odd(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd ones.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert split_odd([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(i for i in range(1, n+1))\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\narr = [5, 4, 7, 2, 1]\nn = len(arr)\nassert find_Odd_Pair(arr, n) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggles the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with toggled case.\n\n    Examples:\n    >>> toggle_string(\"Python\")\n    'pYTHON'\n    \"\"\"\n    return string.swapcase()\n\n# Testing the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculate the sum of the per-digit difference between two integers.\n\n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n\n    Example:\n    >>> digit_distance_nums(1, 2)\n    1\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance += abs(int(digit1) - int(digit2))\n    return distance\n\n# Test the function\nassert digit_distance_nums(1, 2) == 1"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(lst, n):\n    \"\"\"\n    Find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    lst (list): The input list of integers.\n    n (int): The length of the sublist.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    Raises:\n    ValueError: If the length of the sublist is greater than the length of the input list.\n\n    \"\"\"\n    if n > len(lst):\n        raise ValueError(\"Length of sublist cannot be greater than the length of the input list.\")\n\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += lst[i]\n\n    max_sum = max(max_sum, current_sum)\n\n    for i in range(n, len(lst)):\n        current_sum += lst[i] - lst[i - n]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(sublists):\n    \"\"\"\n    Find the length of the longest sublists.\n\n    Args:\n    sublists (list): A list of sublists.\n\n    Returns:\n    int: The length of the longest sublist.\n\n    \"\"\"\n    max_length = 0\n    for sublist in sublists:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length\n\n# Test the function\nassert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values between quotation marks.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    \"\"\"\n    Count the number of possible unordered pairs where both elements are unequal.\n\n    Args:\n    lst (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The number of possible unordered pairs where both elements are unequal.\n    \"\"\"\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test the function\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)\n\n# Test the function\nassert split('python') == ['p','y','t','h','o','n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(num):\n    \"\"\"\n    Returns the sum of the digits in the given non-negative integer.\n\n    Parameters:\n    num (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits in the given integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(9999)\n    36\n    \"\"\"\n    if num == 0:\n        return 0\n    else:\n        return num % 10 + sum_digits(num // 10)\n\n# Testing the function\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(9999) == 36"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1,2,4,6,8,10,12,14,16,17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Args:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if num not in unique_nums:\n            unique_nums.append(num)\n        else:\n            unique_nums.remove(num)\n    return unique_nums\n\n# Test the function\nassert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(lst):\n    unique_numbers = set(lst)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(sub_list, main_list):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Args:\n    sub_list (list): The sublist to be checked.\n    main_list (list): The main list to check against.\n\n    Returns:\n    bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if len(sub_list) > len(main_list):\n        return False\n\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1,4,3,5],[1,2]) == False"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in the factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(123456789)\n    5\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        last_digit = 1\n        for i in range(1, n + 1):\n            last_digit = (last_digit * i) % 10\n        return last_digit"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test the function\nlist1 = [1, 2, 3, 4, 5, 6, 7]\nlist2 = [10, 20, 30, 40, 50, 60, 70]\nlist3 = [100, 200, 300, 400, 500, 600, 700]\nresult = interleave_lists(list1, list2, list3)\nassert result == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n```"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple containing the dissimilar elements from both tuples.\n\n    \"\"\"\n    set1 = set(tuple1)\n    set2 = set(tuple2)\n    dissimilar_elements = set1.symmetric_difference(set2)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Remove uneven elements in the nested mixed tuple.\n\n    Args:\n    nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n    tuple: The modified nested mixed tuple with uneven elements removed.\n    \"\"\"\n    modified_tuple = []\n    for element in nested_tuple:\n        if isinstance(element, tuple):\n            modified_tuple.append(extract_even(element))\n        elif isinstance(element, int) and element % 2 == 0:\n            modified_tuple.append(element)\n    return tuple(modified_tuple)\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid.\n\n    Parameters:\n    base_edge (float): The length of the base edge of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    \"\"\"\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive numbers.\")\n\n    # Calculate the surface area\n    base_area = base_edge ** 2\n    lateral_area = 4 * base_edge * height\n    surface_area = base_area + lateral_area\n\n    return surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Returns the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be calculated.\n\n    Returns:\n    int: The nth Catalan number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer\")\n\n    catalan = [0] * (n + 1)\n    catalan[0] = 1\n\n    for i in range(1, n + 1):\n        catalan[i] = int(((4 * i + 2) * catalan[i - 1]) / (i + 2))\n\n    return catalan[n]\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Find the n most expensive items in a given dataset.\n\n    Args:\n    dataset (list): A list of dictionaries containing items with 'name' and 'price' keys.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list: A list of dictionaries representing the n most expensive items.\n\n    \"\"\"\n    sorted_dataset = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_dataset[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Test the function\nassert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The difference between the largest and smallest values in the list.\n\n    Examples:\n    >>> big_diff([1, 2, 3, 4])\n    3\n    >>> big_diff([10, 20, 30, 40])\n    30\n    >>> big_diff([5, 5, 5, 5])\n    0\n    \"\"\"\n    if len(nums) < 2:\n        return 0\n    else:\n        return max(nums) - min(nums)\n\n# Testing the function\nassert big_diff([1, 2, 3, 4]) == 3\nassert big_diff([10, 20, 30, 40]) == 30\nassert big_diff([5, 5, 5, 5]) == 0"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Finds perfect squares between two given numbers.\n\n    Args:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the start and end numbers.\n    \"\"\"\n    squares = []\n    for num in range(start, end+1):\n        if int(num**0.5)**2 == num:\n            squares.append(num)\n    return squares\n\n# Test the function\nassert perfect_squares(1, 30) == [1, 4, 9, 16, 25]"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The distance from the origin to the point.\n    theta (float): The angle in radians between the positive x-axis and the line connecting the origin to the point.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y) of the point.\n\n    Example:\n    >>> polar_rect(3, 4)\n    ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\n    \"\"\"\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x, y)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with the first and last elements swapped.\n\n    Raises:\n        ValueError: If the input is not a list.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n    \"\"\"\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list\")\n\n    if len(lst) < 2:\n        return lst\n\n    return lst[-1:] + lst[1:-1] + lst[:1]\n\n# Test the function\nassert swap_list([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]"}
{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial coefficients.\n\n    Parameters:\n    n (int): The number of consecutive binomial coefficients to consider.\n\n    Returns:\n    int: The sum of the product of the given consecutive binomial coefficients.\n\n    Example:\n    >>> sum_of_product(3)\n    15\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculate the binomial coefficient (n choose k).\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial coefficient (n choose k).\n\n        Example:\n        >>> binomial_coefficient(5, 3)\n        10\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n-1, k-1) + binomial_coefficient(n-1, k)\n\n    total_sum = 0\n    for i in range(1, n+1):\n        total_sum += i * binomial_coefficient(n+i-1, i)\n\n    return total_sum\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip):\n    \"\"\"\n    Remove leading zeroes from an IP address.\n\n    Args:\n    ip (str): The IP address to remove leading zeroes from.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n    \"\"\"\n    parts = ip.split('.')\n    parts = [str(int(part)) for part in parts]\n    return '.'.join(parts)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == '216.8.94.196'"}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    \n    if even_numbers:\n        first_even = even_numbers[0]\n    else:\n        first_even = None\n    \n    if odd_numbers:\n        first_odd = odd_numbers[0]\n    else:\n        first_odd = None\n    \n    if first_even is not None and first_odd is not None:\n        return first_even - first_odd\n    else:\n        return 0\n\n# Tests\nassert diff_even_odd([1,3,5,7,4,1,6,8]) == 3"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Args:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The kth element to find.\n\n    Returns:\n    int: The kth element from the merged sorted array.\n\n    Raises:\n    ValueError: If k is out of range.\n\n    \"\"\"\n\n    merged = []\n    i = j = 0\n\n    while i < len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            merged.append(arr1[i])\n            i += 1\n        else:\n            merged.append(arr2[j])\n            j += 1\n\n    merged.extend(arr1[i:])\n    merged.extend(arr2[j:])\n\n    if k > len(merged):\n        raise ValueError(\"k is out of range\")\n\n    return merged[k - 1]\n\n# Test the function\nassert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    # Convert the number to string to get the number of digits\n    num_str = str(num)\n    num_digits = len(num_str)\n\n    # Calculate the sum of digits raised to the power of the number of digits\n    sum_digits = sum(int(digit) ** num_digits for digit in num_str)\n\n    # Check if the sum is equal to the original number\n    return sum_digits == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to calculate.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum_numbers = (n * (n + 1)) // 2\n    average = sum_numbers / n\n    return sum_numbers, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test cases\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    Find the first repeated character in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The first repeated character, or None if no repeated character is found.\n    \"\"\"\n    seen_chars = set()\n    for char in string:\n        if char in seen_chars:\n            return char\n        seen_chars.add(char)\n    return None\n\n# Tests\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Returns a list of all lucid numbers smaller than or equal to the given integer.\n\n    Parameters:\n    n (int): The upper limit for lucid numbers.\n\n    Returns:\n    list: A list of lucid numbers.\n\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Checks if a number is lucid.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n\n    \"\"\"\n    if num == 1:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        return is_lucid(num - 2 * int(num / 2) - 1)\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the words seperated by spaces in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The reversed string with words seperated by spaces.\n\n    Example:\n    >>> reverse_words(\"python program\")\n    'program python'\n    \"\"\"\n    words = string.split()\n    reversed_string = ' '.join(reversed(words))\n    return reversed_string\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return math.radians(degrees)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966, \"Test failed\""}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Tests\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    bell[0][0] = 1\n    for i in range(1, n+1):\n        bell[i][0] = bell[i-1][i-1]\n        for j in range(1, i+1):\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]\n    return bell[n][0]\n\n# Test the function\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k-1] + lst[k:]\n\n# Test the function\nassert remove_kth_element([1,1,2,3,4,4,5,1],3) == [1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    Returns the maximum value in the nth column of the given matrix.\n\n    Args:\n    matrix (list of lists): The matrix represented as a list of lists.\n    n (int): The index of the column to find the maximum value in.\n\n    Returns:\n    int: The maximum value in the nth column of the matrix.\n\n    Raises:\n    ValueError: If the matrix is empty or the column index is out of range.\n\n    \"\"\"\n    if not matrix:\n        raise ValueError(\"Matrix cannot be empty.\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column index out of range.\")\n\n    max_value = float('-inf')\n    for row in matrix:\n        if len(row) != num_cols:\n            raise ValueError(\"Matrix rows must have the same number of columns.\")\n        max_value = max(max_value, row[n])\n\n    return max_value\n\n# Test the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [sublist[0] for sublist in lst], [sublist[1] for sublist in lst]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tuple_ in tuples:\n        average = sum(tuple_) / len(tuple_)\n        averages.append(average)\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(tuple1, tuple2):\n    \"\"\"\n    Perform element-wise modulo operation on two tuples of the same length.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple containing the result of element-wise modulo operation.\n\n    Raises:\n    ValueError: If the input tuples are not of the same length.\n\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must be of the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] % tuple2[i])\n\n    return tuple(result)\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divides two lists element-wise.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list containing the division of corresponding elements from list1 and list2.\n\n    Raises:\n    ValueError: If the lengths of list1 and list2 are not equal.\n\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] / list2[i])\n\n    return result\n\n# Test the function\nassert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    numbers = ''.join(c for c in string if c.isdigit())\n    letters = ''.join(c for c in string if not c.isdigit())\n    return letters + numbers\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The size of the largest subset.\n\n    Examples:\n    >>> largest_subset([1, 3, 6, 13, 17, 18])\n    4\n    \"\"\"\n\n    def is_divisible(a, b):\n        \"\"\"\n        Check if two numbers are divisible.\n\n        Parameters:\n        a (int): The first number.\n        b (int): The second number.\n\n        Returns:\n        bool: True if a and b are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def find_subset(numbers, index, current_subset):\n        \"\"\"\n        Recursive helper function to find the largest subset of numbers.\n\n        Parameters:\n        numbers (list): The list of numbers.\n        index (int): The current index in the list.\n        current_subset (list): The current subset being built.\n\n        Returns:\n        int: The size of the largest subset.\n        \"\"\"\n        if index == len(numbers):\n            return len(current_subset)\n\n        # Exclude the current number\n        max_subset_size = find_subset(numbers, index + 1, current_subset)\n\n        # Include the current number if it can be paired with all previous numbers in the subset\n        if all(is_divisible(numbers[index], subset_num) for subset_num in current_subset):\n            current_subset.append(numbers[index])\n            max_subset_size = max(max_subset_size, find_subset(numbers, index + 1, current_subset))\n            current_subset.pop()\n\n        return max_subset_size\n\n    return find_subset(numbers, 0, [])\n\n\n# Test the function\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    mid_index = n // 2\n    if n % 2 == 0:\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        median = merged_list[mid_index]\n    return median\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): The input list of numbers.\n    n (int): The power to raise each number to.\n\n    Returns:\n    list: A new list with the n-th power of each number in the input list.\n\n    Example:\n    >>> nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)\n    [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n    \"\"\"\n    return [num ** n for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def to_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted to uppercase.\n\n    Returns:\n    str: The input string converted to uppercase.\n    \"\"\"\n    return string.upper()\n\n# Test the function\nassert to_upper(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = math.sqrt(radius**2 - (radius/2)**2)\n        area = 0.5 * radius * height\n        return area\n\n# Tests\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0\nassert triangle_area(1) == 0.4999999999999998\nassert triangle_area(2) == 3.141592653589793"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(' ', '%20')\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    Find even numbers from a list of numbers.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        list: A list of even numbers.\n    \"\"\"\n    even_numbers = []\n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n    \"\"\"\n    return string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with zeroes moved to the end.\n    \"\"\"\n    non_zero = [num for num in lst if num != 0]\n    zeroes = [0] * (len(lst) - len(non_zero))\n    return non_zero + zeroes\n\n# Test the function\nassert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Calculate the sum of XOR of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): The input list of numbers.\n    n (int): The length of the input list.\n\n    Returns:\n    int: The sum of XOR of all pairs of numbers.\n\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            result += nums[i] ^ nums[j]\n    return result\n\n# Test the function\nassert pair_xor_Sum([5,9,7,6],4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    n = len(arr)\n\n    # Build a max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements from the heap one by one\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]  # Swap the root (maximum element) with the last element\n        heapify(arr, i, 0)  # Heapify the reduced heap\n\n    return arr\n\n\ndef heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]  # Swap the largest element with the current element\n        heapify(arr, n, largest)  # Recursively heapify the affected sub-tree\n\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    buy_price (float): The buying price.\n    sell_price (float): The selling price.\n\n    Returns:\n    bool: True if there is no profit and no loss, False otherwise.\n    \"\"\"\n    return buy_price == sell_price\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    wind_velocity (float): Wind velocity in km/h.\n    temperature (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    \"\"\"\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (wind_velocity ** 0.16)) + (0.3965 * temperature * (wind_velocity ** 0.16))\n    return round(wind_chill_index)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    Sum the length of the names in the given list after removing the names that start with a lowercase letter.\n\n    Args:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the remaining names.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Find the nth nonagonal number.\n\n    Parameters:\n    n (int): The nth nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n\n    Args:\n    text (str): The input string to check.\n\n    Returns:\n    bool: True if 'z' is found in the middle of a word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and 'z' in word[1:-1]:\n            return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonz\") == True\nassert text_match_wordz_middle(\"python\") == False\nassert text_match_wordz_middle(\"zabc.\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array.\n\n    \"\"\"\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Add a dictionary to the tuple. The output should be a tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    tuple: The input tuple with the dictionary added.\n\n    Example:\n    >>> add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} )\n    (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\n    \"\"\"\n    return tup + (dictionary,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n\n    for j in range(1, n):\n        dp[0][j] = dp[0][j-1] + matrix[0][j]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)\n\n# Test cases\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {name: (height, weight) for name, (height, weight) in students.items() if height >= min_height and weight >= min_weight}\n    return filtered_students\n\n# Test the function\nstudents = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\nexpected_output = {'Cierra Vega': (6.2, 70)}\nassert filter_data(students, min_height, min_weight) == expected_output"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    Count the indices where the two input lists have the same values.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    int: The count of indices where the lists have the same values.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count\n\n# Test the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) == 4"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    Calculate the sum of all digits of the base to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to raise the base to.\n\n    Returns:\n    int: The sum of all digits in the result.\n\n    Example:\n    >>> power_base_sum(2, 100)\n    115\n    \"\"\"\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    list: A list of values between quotation marks.\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list with the sum of corresponding elements from list1 and list2.\n\n    Example:\n    >>> sum_list([10,20,30],[15,25,35])\n    [25, 45, 65]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length\")\n\n    return [a + b for a, b in zip(list1, list2)]\n\n# Test the function\nassert sum_list([10,20,30],[15,25,35]) == [25, 45, 65]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Removes consecutive duplicates from a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The list with consecutive duplicates removed.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n\n    result = [lst[0]]\n    for i in range(1, len(lst)):\n        if lst[i] != lst[i-1]:\n            result.append(lst[i])\n\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius r and height h.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    \"\"\"\n    if r < 0 or h < 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n    if r == 0:\n        return 0\n    if h == 0:\n        return 2 * math.pi * r\n\n    slant_height = math.sqrt(r**2 + h**2)\n    base_area = math.pi * r**2\n    lateral_area = math.pi * r * slant_height\n    return 2 * base_area + lateral_area\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(text):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon.\n\n    Args:\n    text (str): The input text to be processed.\n\n    Returns:\n    str: The processed text with spaces, commas, and dots replaced by colons.\n    \"\"\"\n    return text.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    \"\"\"\n    Find the index of the first occurrence of a given number in a sorted array.\n\n    Args:\n    arr (list): The sorted array of integers.\n    target (int): The number to find the first occurrence of.\n\n    Returns:\n    int: The index of the first occurrence of the target number, or -1 if not found.\n    \"\"\"\n    left = 0\n    right = len(arr) - 1\n\n    while left <= right:\n        mid = left + (right - left) // 2\n\n        if arr[mid] == target:\n            if mid == 0 or arr[mid - 1] < target:\n                return mid\n            else:\n                right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return -1\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_Of_Subarray_Prod([1, 2, 3])\n    20\n    \"\"\"\n\n    def sublists(lst):\n        \"\"\"\n        Generate all possible sublists of a given list.\n\n        Parameters:\n        lst (list): The input list.\n\n        Yields:\n        list: The next sublist.\n\n        Examples:\n        >>> list(sublists([1, 2, 3]))\n        [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n        \"\"\"\n        for i in range(len(lst)):\n            for j in range(i + 1, len(lst) + 1):\n                yield lst[i:j]\n\n    def product(lst):\n        \"\"\"\n        Calculate the product of all elements in a list.\n\n        Parameters:\n        lst (list): The input list.\n\n        Returns:\n        int: The product of all elements.\n\n        Examples:\n        >>> product([1, 2, 3])\n        6\n        \"\"\"\n        result = 1\n        for num in lst:\n            result *= num\n        return result\n\n    return sum(product(sublist) for sublist in sublists(lst))\n\n\n# Test the function\nassert sum_Of_Subarray_Prod([1, 2, 3]) == 20"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggles bits of the number except the first and the last bit.\n\n    Args:\n    num (int): The number for which middle bits need to be toggled.\n\n    Returns:\n    int: The number with toggled middle bits.\n\n    \"\"\"\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Find the position of the first and last set bits\n    first_bit_pos = num.bit_length() - 1\n    last_bit_pos = 0\n    temp = num\n    while temp:\n        last_bit_pos += 1\n        temp >>= 1\n\n    # Toggle the middle bits\n    mask = (1 << (last_bit_pos - first_bit_pos - 1)) - 1\n    toggled_num = num ^ mask\n\n    return toggled_num\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Args:\n    arr (list): The sorted list of integers.\n    value (int): The value to find the left insertion point for.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return low\n\n# Test the function\nassert left_insertion([1, 2, 4, 5], 6) == 4"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel or not using regex.\n\n    Parameters:\n    string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Tests\ndef test_check_str():\n    assert check_str(\"annie\") == True\n    assert check_str(\"banana\") == False\n    assert check_str(\"Elephant\") == True\n    assert check_str(\"apple\") == True\n    assert check_str(\"xyz\") == False\n\ntest_check_str()"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Find the index of the smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n    index = 1\n    triangular_number = 1\n    while True:\n        digits = len(str(triangular_number))\n        if digits >= n:\n            return index\n        index += 1\n        triangular_number += index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(tup):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Args:\n    tup (tuple): The input tuple.\n\n    Returns:\n    dict: The resulting key-value dictionary.\n\n    Raises:\n    ValueError: If the length of the tuple is not even.\n\n    \"\"\"\n    if len(tup) % 2 != 0:\n        raise ValueError(\"The length of the tuple must be even.\")\n\n    result = {}\n    for i in range(0, len(tup), 2):\n        key = tup[i]\n        value = tup[i+1]\n        result[key] = value\n\n    return result\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(side_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    side_length (float): The length of one of the tetrahedron's sides.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    \"\"\"\n    # Calculate the area of a tetrahedron using Heron's formula\n    # Heron's formula states that the area of a triangle with side lengths a, b, and c is:\n    # area = sqrt(s(s-a)(s-b)(s-c))\n    # where s = (a + b + c) / 2\n\n    # Calculate the semi-perimeter\n    semi_perimeter = (side_length + side_length + side_length) / 2\n\n    # Calculate the area using Heron's formula\n    area = math.sqrt(semi_perimeter * (semi_perimeter - side_length) * (semi_perimeter - side_length) * (semi_perimeter - side_length))\n\n    return area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Args:\n    lst (list): The input list to be rotated.\n    num_items (int): The number of items to rotate the list by.\n\n    Returns:\n    list: The rotated list.\n\n    \"\"\"\n    return lst[-num_items:] + lst[:-num_items]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Parameters:\n    tup (tuple): The input tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains any none value, False otherwise.\n    \"\"\"\n    return None in tup\n\n# Test cases\nassert check_none((10, 4, 5, 6, None)) == True\nassert check_none((10, 4, 5, 6, 7)) == False\nassert check_none(()) == False\nassert check_none((None,)) == True\nassert check_none((None, 10)) == True\nassert check_none((10, None)) == True"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        if all(num % int(digit) == 0 for digit in str(num) if digit != '0'):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Put spaces between words starting with capital letters in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces between capital words.\n\n    Examples:\n        >>> capital_words_spaces(\"Python\")\n        'Python'\n        >>> capital_words_spaces(\"PythonIsAwesome\")\n        'Python Is Awesome'\n        >>> capital_words_spaces(\"helloWorld\")\n        'hello World'\n    \"\"\"\n    words = string.split()\n    modified_string = ' '.join(words)\n    return modified_string\n\n# Testing the function\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonIsAwesome\") == 'Python Is Awesome'\nassert capital_words_spaces(\"helloWorld\") == 'hello World'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Args:\n    lst (list): A list of strings of numbers.\n\n    Returns:\n    list: A sorted list of numbers.\n\n    \"\"\"\n    return sorted(lst, key=lambda x: int(x))\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Add the given tuple to the given list.\n\n    Args:\n    lst (list): The list to which the tuple will be added.\n    tup (tuple): The tuple to be added to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n\n    \"\"\"\n    lst.extend(tup)\n    return lst\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n // 2 - 1, -1, -1):\n        if not min_heapify(arr, i, n):\n            return False\n    return True\n\ndef min_heapify(arr, i, n):\n    \"\"\"\n    Perform min heapify operation on the given array starting from the given index.\n\n    Parameters:\n    arr (list): The input array.\n    i (int): The index to start min heapify operation.\n    n (int): The size of the array.\n\n    Returns:\n    bool: True if the min heap property is maintained, False otherwise.\n    \"\"\"\n    smallest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] < arr[smallest]:\n        smallest = left\n\n    if right < n and arr[right] < arr[smallest]:\n        smallest = right\n\n    if smallest != i:\n        arr[i], arr[smallest] = arr[smallest], arr[i]\n        return min_heapify(arr, smallest, n)\n\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 1, 2, 3]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * jacobsthal_num(n-1) + 1\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    \"\"\"\n    Find the minimum k records from the given tuple list.\n\n    Args:\n    tuple_list (list): A list of tuples, where each tuple contains a value and its corresponding score.\n    k (int): The number of minimum records to be returned.\n\n    Returns:\n    list: A list of tuples, containing the minimum k records from the input list.\n\n    \"\"\"\n    sorted_list = sorted(tuple_list, key=lambda x: x[1])  # Sort the tuple list based on the scores\n    return sorted_list[:k]  # Return the first k records from the sorted list\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(min(len(l1), len(l2), len(l3))):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n\n    Raises:\n    ValueError: If the list has less than 2 elements.\n\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least 2 elements.\")\n\n    smallest = float('inf')\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n\n    return second_smallest\n\n# Test the function\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for string in string_list:\n        for i in range(len(string)):\n            if string[i:] == string[i:][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        parts = string.split('.')\n        if len(parts) == 2 and len(parts[1]) <= 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False\n\n# Tests\nassert is_decimal('123.11') == True\nassert is_decimal('123') == False\nassert is_decimal('123.11.22') == False\nassert is_decimal('123.') == False\nassert is_decimal('.11') == False\nassert is_decimal('123.1') == True\nassert is_decimal('123.112') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(numbers):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(numbers)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([]) == True\nassert unique_Element([1]) == True\nassert unique_Element([1, 2, 1]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month contains 30 days, False otherwise.\n    \"\"\"\n    thirty_day_months = [4, 6, 9, 11]  # Months with 30 days\n    return month_number in thirty_day_months\n\n# Test cases\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements.\n\n    \"\"\"\n    arr = sorted(arr)  # Sort the array in ascending order\n    min_diff = float('inf')  # Initialize the minimum difference to positive infinity\n\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update the minimum difference if a smaller difference is found\n\n    return min_diff\n\n# Test the function\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    Count the number of digits in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Find the nth polite number.\n\n    A polite number is a number that does not contain the digit 2 or 5 in its decimal representation.\n\n    Parameters:\n    n (int): The nth polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Examples:\n    >>> is_polite(7)\n    11\n    \"\"\"\n\n    polite_numbers = []\n    num = 1\n\n    while len(polite_numbers) < n:\n        if '2' not in str(num) and '5' not in str(num):\n            polite_numbers.append(num)\n        num += 1\n\n    return polite_numbers[n - 1]\n\n# Test the function\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function\nassert pair_wise([1,1,2,3,3,4,4,5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(numbers, target_sum):\n    \"\"\"\n    Count the number of pairs whose sum is equal to 'sum'.\n\n    Args:\n    numbers (list): A list of numbers.\n    target_sum (int): The target sum.\n\n    Returns:\n    int: The number of pairs whose sum is equal to 'sum'.\n    \"\"\"\n    count = 0\n    seen_numbers = {}\n\n    for num in numbers:\n        complement = target_sum - num\n        if complement in seen_numbers:\n            count += seen_numbers[complement]\n\n        if num in seen_numbers:\n            seen_numbers[num] += 1\n        else:\n            seen_numbers[num] = 1\n\n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [item for item in li1 if item not in li2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Calculate the sum of the fourth power of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the fourth power of the first n odd natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> odd_num_sum(2)\n    82\n    >>> odd_num_sum(3)\n    2026\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sum_of_fourth_power = sum(i**4 for i in range(1, 2*n, 2))\n    return sum_of_fourth_power\n\n# Testing the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening = ['(', '[', '{']\n    closing = [')', ']', '}']\n    \n    for char in expression:\n        if char in opening:\n            stack.append(char)\n        elif char in closing:\n            if not stack:\n                return False\n            top = stack.pop()\n            if opening.index(top) != closing.index(char):\n                return False\n    \n    return not stack\n\n# Tests\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{[}]\") == False\nassert check_expression(\"((()))\") == True\nassert check_expression(\"([)]\") == False\nassert check_expression(\"\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Args:\n    string (str): The input string.\n    k (int): The length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def occurrence_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n    string (str): The input string to search within.\n    substring (str): The substring to search for within the input string.\n\n    Returns:\n    tuple: A tuple containing the matched substring, the starting position, and the ending position of the match.\n    None: If there is no match.\n\n    \"\"\"\n    if substring in string:\n        start_pos = string.index(substring)\n        end_pos = start_pos + len(substring)\n        return (substring, start_pos, end_pos)\n    else:\n        return None\n\n# Test the function\nassert occurrence_substring('python programming, python language','python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Parameters:\n    lst (list): The input list to check.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 1:\n            return False\n    return True\n\n# Test cases\nassert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    unique_elements = set(lst)\n    return sum(unique_elements)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    if not lst:\n        return []\n\n    result = [[lst[0]]]\n    for i in range(1, len(lst)):\n        if lst[i] == result[-1][0]:\n            result[-1].append(lst[i])\n        else:\n            result.append([lst[i]])\n\n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10) == True"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Calculate the sum of all odd length subarrays in a given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1, 2, 4])\n    14\n    \"\"\"\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            if (j - i + 1) % 2 != 0:\n                result += sum(arr[i:j+1])\n\n    return result\n\n# Test the function\nassert odd_length_sum([1, 2, 4]) == 14"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even_numbers = []\n    odd_numbers = []\n    \n    for num in numbers:\n        if num % 2 == 0:\n            even_numbers.append(num)\n        else:\n            odd_numbers.append(num)\n    \n    if len(even_numbers) > 0 and len(odd_numbers) > 0:\n        return even_numbers[0] * odd_numbers[0]\n    else:\n        return 0\n\n# Test the function\nassert mul_even_odd([1,3,5,7,4,1,6,8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    # Remove the leading and trailing parentheses from the string\n    tuple_str = tuple_str.strip('()')\n    # Split the string by comma and convert each element to integer\n    int_tuple = tuple(map(int, tuple_str.split(',')))\n    return int_tuple\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): Sorted list of integers.\n    value (int): The value to be inserted.\n\n    Returns:\n    int: The index where the value should be inserted.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    \"\"\"\n    low = 0\n    high = len(arr)\n\n    while low < high:\n        mid = (low + high) // 2\n        if arr[mid] < value:\n            low = mid + 1\n        else:\n            high = mid\n\n    return low\n\n# Test the function\nassert right_insertion([1,2,4,5], 6) == 4"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Function to match a string that has an 'a' followed by three 'b'.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Tests\nassert not text_match_three(\"ac\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(string_list, string):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Args:\n    string_list (list): A list of strings.\n    string (str): A string.\n\n    Returns:\n    tuple: A new tuple containing the elements of the string_list and the string.\n    \"\"\"\n    return tuple(string_list + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Parameters:\n    lst (list): The input list to check.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Tests\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False\nassert even_position([2,4,6,8,10]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Args:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: The modified tuple with tuples removed.\n    \"\"\"\n    return tuple(x for x in tup if not isinstance(x, tuple))\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    Count the number of lists in a given number of lists.\n\n    Parameters:\n    lists (list): A list of lists.\n\n    Returns:\n    int: The number of lists in the given list.\n\n    \"\"\"\n    count = 0\n    for lst in lists:\n        if isinstance(lst, list):\n            count += 1\n    return count\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array to search in.\n    target: The element to find the last position of.\n\n    Returns:\n    int: The last position of the target element in the array, or -1 if not found.\n    \"\"\"\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Args:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))\n\n# Test cases\nassert text_starta_endb(\"aabbbb\") == True\nassert text_starta_endb(\"abbbb\") == False\nassert text_starta_endb(\"aabAbbbc\") == False\nassert text_starta_endb(\"accddbbjjjb\") == False"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns the sum of all its values.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The sum of all values in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Calculate the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower bound of the range.\n    r (int): The upper bound of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range.\n\n    Raises:\n    ValueError: If l or r is not a positive integer, or if l is greater than r.\n\n    \"\"\"\n    if not isinstance(l, int) or not isinstance(r, int) or l <= 0 or r <= 0:\n        raise ValueError(\"l and r must be positive integers.\")\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r.\")\n\n    sum_odd = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            sum_odd += num\n\n    return sum_odd\n\n# Test the function\nassert sum_in_range(2, 5) == 8"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Calculate the sum of an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The sum of the elements in the array.\n    \"\"\"\n    return sum(arr)\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate the left bits of a given number by d bits.\n\n    Parameters:\n    num (int): The number to rotate.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n\n    Example:\n    >>> left_rotate(16, 2)\n    64\n    \"\"\"\n    # Check if the number of bits to rotate is greater than 32\n    if d > 32:\n        raise ValueError(\"Number of bits to rotate cannot be greater than 32.\")\n\n    # Perform left rotation\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num\n\n# Test the function\nassert left_rotate(16, 2) == 64"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The input string with all whitespaces removed.\n    \"\"\"\n    return ''.join(string.split())\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Count the number of equal numbers from three given integers.\n\n    Args:\n    a, b, c: Three integers.\n\n    Returns:\n    The count of equal numbers.\n\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\n# Test cases\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n    if num == 0 or num == 1:\n        return True\n    left = 1\n    right = num // 2\n    while left <= right:\n        mid = (left + right) // 2\n        if mid * mid == num:\n            return True\n        elif mid * mid < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return False\n\n# Test cases\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test cases\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([-1, 2, 3]) == False\nassert is_product_even([0, 1, 2]) == False"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists of integers.\n\n    Returns:\n    list: The list with the highest sum of elements.\n\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sub_list in lst:\n        sub_list_sum = sum(sub_list)\n        if sub_list_sum > max_sum:\n            max_sum = sub_list_sum\n            max_list = sub_list\n\n    return max_list\n\n# Test the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Find the maximum run of uppercase characters in the given string.\n\n    Args:\n    string (str): The input string.\n\n    Returns:\n    int: The maximum run of uppercase characters.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Find the first odd number in a given list of numbers.\n\n    Args:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The first odd number found, or None if no odd number is found.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1,3,5]) == 1\nassert first_odd([2,4,6]) == None\nassert first_odd([2,4,6,8,10,12,14]) == 10"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Args:\n    tup (tuple): The input tuple to check.\n    k (int): The value to check for in the tuple.\n\n    Returns:\n    bool: True if k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple1[i] >= tuple2[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
