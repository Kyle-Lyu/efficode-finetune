{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n\n    Returns:\n        set: A set containing the shared elements.\n\n    Examples:\n        >>> similar_elements((3, 4, 5, 6), (5, 7, 4, 10))\n        {4, 5}\n    \"\"\"\n    return set(list1) & set(list2)\n\n# Test the function\nassert set(similar_elements((3, 4, 5, 6), (5, 7, 4, 10))) == set((4, 5))"}
{"task_id": "Mbpp/3", "solution": "def is_not_prime(num):\n    \"\"\"\n    This function takes a number as input and returns True if it is not a prime number, and False otherwise.\n\n    Parameters:\n    num (int): The number to be checked for primality.\n\n    Returns:\n    bool: True if the number is not a prime number, False otherwise.\n    \"\"\"\n    if num < 2:\n        return True\n    for i in range(2, int(num ** 0.5) + 1):\n        if num % i == 0:\n            return True\n    return False\n\n# Testing the function\nassert is_not_prime(2) == False"}
{"task_id": "Mbpp/4", "solution": "import heapq\n\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Args:\n    numbers (list): A list of integers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of n largest integers in descending order.\n\n    \"\"\"\n    return heapq.nlargest(n, numbers)\n\n# Test the function\nassert heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3) == [85, 75, 65]"}
{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Args:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position, False otherwise.\n    \"\"\"\n    # XOR the two numbers to find the bits that are different\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    set_bit_count = bin(xor_result).count('1')\n\n    # If the count is exactly 1, the numbers differ at one bit position\n    return set_bit_count == 1\n\n# Test the function\nassert differ_At_One_Bit_Pos(13, 9) == True"}
{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    words = string.split()\n    char_long_words = [word for word in words if len(word) >= 4]\n    return char_long_words\n\n# Test the function\nassert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"}
{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    return [num ** 2 for num in nums]\n\n# Test the function\nassert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/9", "solution": "def find_Rotations(string):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    \n    Parameters:\n    string (str): The input string to be rotated.\n    \n    Returns:\n    int: The minimum number of rotations required to get the same string.\n    \"\"\"\n    rotations = 0\n    while string != string[::-1]:\n        string = string[-1] + string[:-1]\n        rotations += 1\n    return rotations\n\n# Test cases\nassert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"abcde\") == 5\nassert find_Rotations(\"abcba\") == 2\nassert find_Rotations(\"abcd\") == 4\nassert find_Rotations(\"a\") == 0\nassert find_Rotations(\"\") == 0"}
{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    # Find the first and last occurrence of the character\n    first_index = string.find(char)\n    last_index = string.rfind(char)\n    \n    # Remove the first and last occurrence of the character from the string\n    if first_index != -1 and last_index != -1:\n        string = string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]\n    \n    return string\n\n# Test the function\nassert remove_Occ(\"hello\", \"l\") == \"heo\""}
{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Args:\n    matrix (list): The matrix to be sorted.\n\n    Returns:\n    list: The sorted matrix.\n\n    \"\"\"\n    # Calculate the sum of each row\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [matrix[i] for _, i in sorted(enumerate(row_sums), key=lambda x: x[1])]\n\n    return sorted_matrix\n\n# Test the function\nassert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]]) == [[1, 1, 1], [1, 2, 3], [2, 4, 5]]"}
{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function calculates the volume of a triangular prism.\n\n    Parameters:\n    base (float): The base length of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume\n\n# Test the function\nassert find_Volume(10, 8, 6) == 240"}
{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into individual characters\n    characters = list(input_string)\n\n    # Iterate through the characters\n    for i in range(len(characters) - 1):\n        # Check if the current character is lowercase and the next character is an underscore\n        if characters[i].islower() and characters[i+1] == '_':\n            return True\n\n    return False\n\n# Test the function\nassert text_lowercase_underscore(\"aab_cbbbc\") == True\nassert text_lowercase_underscore(\"Aab_cbbbc\") == False\nassert text_lowercase_underscore(\"aab_Cbbbc\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d_\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d_e\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f\") == True\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g\") == False\nassert text_lowercase_underscore(\"aab_cbbbc_d_e_f_g_\") == False"}
{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    Calculate the perimeter of a square given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float or int: The perimeter of the square.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> square_perimeter(10)\n    40\n    >>> square_perimeter(0)\n    0\n    >>> square_perimeter(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return 4 * side_length\n\n# Testing the function\nassert square_perimeter(10) == 40\nassert square_perimeter(0) == 0"}
{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Removes characters from the first string which are present in the second string.\n\n    Args:\n        string1 (str): The first string.\n        string2 (str): The second string.\n\n    Returns:\n        str: The modified string with characters removed.\n\n    Examples:\n        >>> remove_dirty_chars(\"probasscurve\", \"pros\")\n        'bacuve'\n    \"\"\"\n    clean_chars = set(string1) - set(string2)\n    return ''.join(char for char in string1 if char in clean_chars)\n\n# Test the function\nassert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'"}
{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Write a function to find whether a given array of integers contains any duplicate element.\n    \"\"\"\n    return len(arr) != len(set(arr))\n\n# Test cases\nassert test_duplicate([1, 2, 3, 4, 5]) == False\nassert test_duplicate([1, 2, 3, 4, 4]) == True\nassert test_duplicate([1, 1, 1, 1, 1]) == True"}
{"task_id": "Mbpp/20", "solution": "def is_woodall(num):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    digits = [int(digit) for digit in str(num)]\n    product = 1\n    for digit in digits:\n        product *= digit\n    return product == num\n\n# Test the function\nassert is_woodall(383) == True"}
{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Args:\n        num (int): The number to be checked.\n\n    Returns:\n        bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    reverse_num = int(str(num)[::-1])\n    return num == (2 * reverse_num) - 1\n\n# Test cases\nassert check(70) == False"}
{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    # Sort the digits in descending order\n    sorted_digits = sorted(digits, reverse=True)\n    \n    # Convert the sorted digits to a string and return the integer value\n    return int(''.join(map(str, sorted_digits)))\n\n# Test the function\nassert find_Max_Num([1, 2, 3]) == 321"}
{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Args:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite sign, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0\n\n# Test the function\nassert opposite_Signs(1, -2) == True"}
{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Write a function to find the nth octagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_octagonal(5) == 65"}
{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(map(int, substring)) == len(substring):\n                count += 1\n    return count\n\n# Test the function\nassert count_Substrings('112112') == 6"}
{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    Find the smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The smallest number in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> smallest_num([10, 20, 1, 45, 99])\n        1\n        >>> smallest_num([-5, -10, -3])\n        -10\n    \"\"\"\n    if not numbers:\n        raise ValueError(\"Input list cannot be empty\")\n\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n\n    return smallest\n\n# Testing the function\nassert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([-5, -10, -3]) == -10"}
{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Args:\n    tuple_list (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Raises:\n    ValueError: If the tuple_list is empty or contains tuples with less than two elements.\n\n    Examples:\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(1, 1), (2, 2), (3, 3)])\n    0\n    >>> max_difference([])\n    Traceback (most recent call last):\n    ...\n    ValueError: The tuple_list is empty.\n    >>> max_difference([(1,), (2, 3)])\n    Traceback (most recent call last):\n    ...\n    ValueError: Each tuple must contain two elements.\n    \"\"\"\n\n    if not tuple_list:\n        raise ValueError(\"The tuple_list is empty.\")\n\n    max_diff = 0\n    for tup in tuple_list:\n        if len(tup) != 2:\n            raise ValueError(\"Each tuple must contain two elements.\")\n        diff = tup[0] - tup[1]\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff"}
{"task_id": "Mbpp/64", "solution": "def sort_tuples_by_second_value(lst):\n    return sorted(lst, key=lambda x: x[1])\n\n# Test the function\ndef test_sort_tuples_by_second_value():\n    assert sort_tuples_by_second_value([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)]) == [('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\n\ntest_sort_tuples_by_second_value()"}
{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    total_sum = 0\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n    return total_sum\n\n# Test the function\nassert recursive_list_sum([1, 2, [3,4],[5,6]]) == 21"}
{"task_id": "Mbpp/66", "solution": "def pos_count(lst):\n    count = 0\n    for num in lst:\n        if num > 0:\n            count += 1\n    return count\n\n# Test the function\nassert pos_count([1, -2, 3, -4]) == 2"}
{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The index of the Bell number to partition.\n\n    Returns:\n    int: The number of ways to partition the Bell number at index n.\n\n    \"\"\"\n    bell = [1]  # Initialize the list of Bell numbers with 1\n\n    for i in range(1, n + 1):\n        bell_i = 0\n        for j in range(i):\n            bell_i += bell[j] * binomial_coefficient(i - 1, j)\n        bell.append(bell_i)\n\n    return bell[n]\n\n\ndef binomial_coefficient(n, k):\n    \"\"\"\n    Function to calculate the binomial coefficient (n choose k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to choose.\n\n    Returns:\n    int: The binomial coefficient (n choose k).\n\n    \"\"\"\n    if k == 0 or k == n:\n        return 1\n    else:\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n\n# Test the function\nassert bell_number(2) == 2"}
{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n# Test the function\nassert is_monotonic([6, 5, 4, 4]) == True"}
{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Args:\n    lst (list): The main list to be checked.\n    sublst (list): The sublist to be checked for in the main list.\n\n    Returns:\n    bool: True if the sublist is found in the main list, False otherwise.\n    \"\"\"\n    return sublst in lst\n\n# Test cases\nassert is_sublist([2, 4, 3, 5, 7], [3, 7]) == False\nassert is_sublist([1, 2, 3, 4, 5], [2, 4]) == True\nassert is_sublist([1, 2, 3, 4, 5], [6, 7]) == False\nassert is_sublist([], []) == True\nassert is_sublist([1, 2, 3], []) == True\nassert is_sublist([], [1, 2, 3]) == False"}
{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Check if all the given tuples have equal length.\n\n    Args:\n    tuples (list): A list of tuples.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1\n\n# Test the function\nassert get_equal([(11, 22, 33), (44, 55, 66)]) == True"}
{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    gap = len(lst)\n    shrink = 1.3\n    sorted_lst = lst[:]\n\n    while gap > 1:\n        gap = int(gap / shrink)\n        i = 0\n        while i + gap < len(sorted_lst):\n            if sorted_lst[i] > sorted_lst[i + gap]:\n                sorted_lst[i], sorted_lst[i + gap] = sorted_lst[i + gap], sorted_lst[i]\n            i += 1\n\n    return sorted_lst\n\n# Test the function\nassert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]"}
{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(n):\n        for j in range(n):\n            if i**2 - j**2 == n:\n                return True\n    return False\n\n# Test the function\nassert dif_Square(5) == True"}
{"task_id": "Mbpp/74", "solution": "def is_samepatterns(sequence, patterns):\n    \"\"\"\n    Check whether the given sequence follows the patterns array.\n\n    Args:\n    sequence (list): The sequence to be checked.\n    patterns (list): The patterns to be followed.\n\n    Returns:\n    bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(sequence) != len(patterns):\n        return False\n\n    for i in range(len(sequence)):\n        if sequence[i] != patterns[i]:\n            return False\n\n    return True\n\n# Test the function\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\"]) == True\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"c\"]) == False\nassert is_samepatterns([\"red\", \"green\", \"green\"], [\"a\", \"b\", \"b\", \"c\"]) == False"}
{"task_id": "Mbpp/75", "solution": "def find_tuples(tuples_list, k):\n    \"\"\"\n    Find tuples which have all elements divisible by k from the given list of tuples.\n\n    Args:\n        tuples_list (list): A list of tuples.\n        k (int): The divisor.\n\n    Returns:\n        list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for t in tuples_list:\n        if all(elem % k == 0 for elem in t):\n            result.append(t)\n    return result\n\n# Test the function\nassert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]"}
{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(number):\n    \"\"\"\n    Check if a number is divisible by 11.\n\n    Parameters:\n    number (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string for easier manipulation\n    number_str = str(number)\n\n    # Calculate the sum of digits at odd and even positions separately\n    odd_sum = sum(int(digit) for digit in number_str[::2])\n    even_sum = sum(int(digit) for digit in number_str[1::2])\n\n    # Check if the absolute difference between the sums is divisible by 11\n    return abs(odd_sum - even_sum) % 11 == 0\n\n# Test the function\nassert is_divisible_by_11(12345) == False"}
{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0\n\n# Test cases\nassert word_len(\"Hadoop\") == False\nassert word_len(\"Python\") == True\nassert word_len(\"Java\") == True\nassert word_len(\"\") == False"}
{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Calculate the nth tetrahedral number.\n\n    Parameters:\n    n (int): The value of n for which to calculate the tetrahedral number.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(10)\n    125\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return (n * (n + 1) * (n + 2)) // 6\n\n# Test the function\nassert tetrahedral_number(5) == 35\nassert tetrahedral_number(10) == 125"}
{"task_id": "Mbpp/82", "solution": "import math\n\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n\n    Raises:\n    ValueError: If the radius is negative.\n    \"\"\"\n    if radius < 0:\n        raise ValueError(\"Radius cannot be negative\")\n    volume = (4 * math.pi * radius**3) / 3\n    return volume\n\n# Test the function\nassert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)"}
{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n    \"\"\"\n    if n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first three terms\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test the function\nassert newman_conway(10) == 6"}
{"task_id": "Mbpp/85", "solution": "import math\n\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2\n\n# Test the function\nassert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)"}
{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert centered_hexagonal_number(10) == 271"}
{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    \n    # Merge dict1 and dict2\n    merged_dict.update(dict1)\n    merged_dict.update(dict2)\n    \n    # Handle conflicts in dict3\n    for key, value in dict3.items():\n        if key in merged_dict and merged_dict[key] != value:\n            raise ValueError(f\"Conflict for key '{key}' in dict3\")\n        else:\n            merged_dict[key] = value\n    \n    return merged_dict\n\n# Test the function\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"}
{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for num in lst:\n        if num in freq_dict:\n            freq_dict[num] += 1\n        else:\n            freq_dict[num] = 1\n    return freq_dict\n\n# Test the function\nassert freq_count([10, 10, 10, 10, 20, 20, 20, 20, 40, 40, 50, 50, 30]) == {10: 4, 20: 4, 40: 2, 50: 2, 30: 1}"}
{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n    \"\"\"\n    return n - 1\n\n# Test the function\nassert closest_num(11) == 10"}
{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    Find the length of the longest word in a list of words.\n\n    Args:\n        words (list): A list of strings representing words.\n\n    Returns:\n        int: The length of the longest word.\n\n    Raises:\n        TypeError: If the input is not a list.\n\n    Examples:\n        >>> len_log([\"python\", \"PHP\", \"bigdata\"])\n        7\n        >>> len_log([\"hello\", \"world\"])\n        5\n    \"\"\"\n    if not isinstance(words, list):\n        raise TypeError(\"Input must be a list.\")\n\n    longest_len = 0\n    for word in words:\n        longest_len = max(longest_len, len(word))\n\n    return longest_len\n\n# Testing the function\nassert len_log([\"python\", \"PHP\", \"bigdata\"]) == 7"}
{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Args:\n        lst (list): A list of string values.\n        substring (str): The substring to search for.\n\n    Returns:\n        bool: True if the substring is found in any of the string values, False otherwise.\n    \"\"\"\n    for string in lst:\n        if substring in string:\n            return True\n    return False\n\n# Test the function\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"], \"ack\") == True"}
{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    An undulating number is a number that has consecutive repeated digits with a difference of one between each pair of consecutive repeated digits.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(len(num_str) - 2):\n        if num_str[i] == num_str[i+2] and int(num_str[i]) != int(num_str[i+1]):\n            return True\n    return False\n\n# Test the function\nassert is_undulating(1212121) == True"}
{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int or float): The exponent.\n\n    Returns:\n    int or float: The result of 'a' raised to the power 'b'.\n    \"\"\"\n    return a ** b\n\n# Test the function\nassert power(3, 4) == 81"}
{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, returns the first value of the tuple with the smallest second value.\n\n    Args:\n        lst (list): A list of tuples.\n\n    Returns:\n        str: The first value of the tuple with the smallest second value.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n        'Varsha'\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]"}
{"task_id": "Mbpp/95", "solution": "def find_min_length(lst):\n    \"\"\"\n    Write a python function to find the length of the smallest list in a list of lists.\n    \"\"\"\n    if not lst:\n        return 0\n    return min(len(sub_lst) for sub_lst in lst)\n\n# Test the function\nassert find_min_length([[1], [1, 2]]) == 1"}
{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n\n    Parameters:\n    n (int): The integer for which the number of divisors needs to be found.\n\n    Returns:\n    int: The number of divisors of the input integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            count += 1\n    return count\n\n# Test the function\nassert divisor(15) == 4"}
{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    flattened_list = [item for sublist in lst for item in sublist]\n    frequency_dict = {}\n    for element in flattened_list:\n        if element in frequency_dict:\n            frequency_dict[element] += 1\n        else:\n            frequency_dict[element] = 1\n    return frequency_dict\n\n# Test the function\nassert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]]) == {1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}"}
{"task_id": "Mbpp/98", "solution": "import math\n\ndef multiply_num(num_list):\n    \"\"\"\n    Multiply all the numbers in a list and divide with the length of the list.\n\n    Args:\n        num_list (list): A list of numbers.\n\n    Returns:\n        float: The result of multiplying all the numbers in the list and dividing by its length.\n    \"\"\"\n    if not num_list:\n        raise ValueError(\"Input list cannot be empty\")\n\n    product = 1\n    for num in num_list:\n        product *= num\n\n    return product / len(num_list)\n\n# Test the function\nassert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)"}
{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    binary = \"\"\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n    return binary\n\n# Test the function\nassert decimal_to_binary(8) == '1000'"}
{"task_id": "Mbpp/100", "solution": "def is_palindrome(n):\n    return str(n) == str(n)[::-1]\n\ndef next_smallest_palindrome(n):\n    while True:\n        n += 1\n        if is_palindrome(n):\n            return n\n\n# Test the function\nassert next_smallest_palindrome(99) == 101"}
{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The index of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If the kth element does not exist in the array.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([1, 2, 3], 4)\n    Traceback (most recent call last):\n        ...\n    ValueError: kth element does not exist in the array\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"kth element does not exist in the array\")\n    return sorted(arr)[k-1]"}
{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Args:\n        snake_str (str): The snake case string to convert.\n\n    Returns:\n        str: The camel case string.\n\n    Examples:\n        >>> snake_to_camel('python_program')\n        'PythonProgram'\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = words[0] + ''.join(word.capitalize() for word in words[1:])\n    return camel_str\n\n# Test the function\nassert snake_to_camel('python_program') == 'PythonProgram'"}
{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m).\n\n    Parameters:\n    n (int): The total number of items.\n    m (int): The number of items taken at a time.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    Raises:\n    ValueError: If either n or m is negative.\n\n    Examples:\n    >>> eulerian_num(3, 1)\n    4\n    >>> eulerian_num(5, 3)\n    60\n    >>> eulerian_num(0, 0)\n    1\n    \"\"\"\n    if n < 0 or m < 0:\n        raise ValueError(\"n and m must be non-negative\")\n\n    if m == 0:\n        return 1\n\n    result = 1\n    for i in range(n - m + 1, n + 1):\n        result *= i\n\n    return result\n\n# Testing the function\nassert eulerian_num(3, 1) == 4"}
{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in lexicographical order.\n\n    \"\"\"\n    sorted_lst = []\n    for sublist in lst:\n        sorted_sublist = sorted(sublist)\n        sorted_lst.append(sorted_sublist)\n    return sorted_lst\n\n# Test the function\nassert sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n    \"\"\"\n    return sum(1 for item in lst if item)\n\n# Test the function\nassert count([True, False, True]) == 2"}
{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    return tpl + tuple(lst)\n\n# Test the function\nassert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)"}
{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(list1, list2, list3):\n    merged_list = list1 + list2 + list3\n    merged_list.sort()\n    return merged_list\n\n# Test the function\nassert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48]) == [4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"}
{"task_id": "Mbpp/109", "solution": "def odd_Equivalent(binary_string, num_rotations):\n    def rotate_binary_string(string):\n        return string[-1] + string[:-1]\n\n    count = 0\n    for _ in range(num_rotations):\n        binary_string = rotate_binary_string(binary_string)\n        if int(binary_string, 2) % 2 != 0:\n            count += 1\n\n    return count\n\n# Test the function\nassert odd_Equivalent(\"011001\", 6) == 3"}
{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements.intersection_update(lst)\n    return list(common_elements)\n\n# Test the function\nassert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])) == set([18, 12])"}
{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False\n\n# Test cases\nassert check_integer(\"python\") == False\nassert check_integer(\"123\") == True\nassert check_integer(\"-123\") == True\nassert check_integer(\"123.45\") == False\nassert check_integer(\"123a\") == False"}
{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    return int(''.join(map(str, t)))\n\n# Test the function\nassert tuple_to_int((1, 2, 3)) == 123"}
{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    return string.split()\n\n# Test the function\nassert string_to_list(\"python programming\") == ['python', 'programming']"}
{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        elif arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        else:\n            return arr[mid]\n\n    return arr[left]\n\n# Test the function\nassert search([1, 1, 2, 2, 3]) == 3"}
{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    max_product = float('-inf')\n    for tup in lst:\n        product = tup[0] * tup[1]\n        if product > max_product:\n            max_product = product\n    return max_product\n\n# Test the function\nassert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)]) == 36"}
{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_of_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_nums_sum = 0\n    for num in range(1, n + 1):\n        sum1 = sum_of_divisors(num)\n        sum2 = sum_of_divisors(sum1)\n        if sum2 == num and sum1 != sum2:\n            amicable_nums_sum += num\n    return amicable_nums_sum\n\n# Test the function\nassert amicable_numbers_sum(999) == 504"}
{"task_id": "Mbpp/124", "solution": "import cmath\nimport math\n\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle (in radians) of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle (in radians) of the complex number.\n    \"\"\"\n    return cmath.phase(z)\n\n# Test the function\nassert math.isclose(angle_complex(0, 1j), 1.5707963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zero = 0\n    count_one = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zero += 1\n        else:\n            count_one += 1\n\n        diff = count_zero - count_one\n        if diff > max_diff:\n            max_diff = diff\n\n    return max_diff\n\n# Test the function\nassert find_length(\"11000010001\") == 6"}
{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The sum of common divisors of a and b.\n    \"\"\"\n    common_divisors = [i for i in range(1, min(a, b) + 1) if a % i == 0 and b % i == 0]\n    return sum(common_divisors)\n\n# Test the function\nassert sum_common_divisors(10, 15) == 6"}
{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: Product of the two integers.\n    \"\"\"\n    return a * b\n\n# Test the function\nassert multiply_int(10, 20) == 200"}
{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    words = sentence.split()\n    long_words = [word for word in words if len(word) > n]\n    return long_words\n\n# Test the function\nassert long_words(3, \"python is a programming language\") == ['python', 'programming', 'language']"}
{"task_id": "Mbpp/129", "solution": "def is_magic_square(matrix):\n    \"\"\"\n    Check if a matrix is a magic square.\n\n    Args:\n    matrix (list): A 2D list representing the matrix.\n\n    Returns:\n    bool: True if the matrix is a magic square, False otherwise.\n    \"\"\"\n    n = len(matrix)  # Get the size of the matrix\n\n    # Calculate the sum of the first row\n    row_sum = sum(matrix[0])\n\n    # Check if all rows have the same sum\n    for row in matrix:\n        if sum(row) != row_sum:\n            return False\n\n    # Check if all columns have the same sum\n    for j in range(n):\n        col_sum = sum(matrix[i][j] for i in range(n))\n        if col_sum != row_sum:\n            return False\n\n    # Check if the sum of the main diagonal is equal to the row sum\n    if sum(matrix[i][i] for i in range(n)) != row_sum:\n        return False\n\n    # Check if the sum of the secondary diagonal is equal to the row sum\n    if sum(matrix[i][n - 1 - i] for i in range(n)) != row_sum:\n        return False\n\n    return True\n\n# Test the function\nassert is_magic_square([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]]) == True"}
{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Find the item with maximum frequency in a given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    int: The item with maximum frequency.\n\n    \"\"\"\n    # Create a dictionary to store the frequency of each item\n    freq_dict = {}\n\n    # Iterate through the list and count the frequency of each item\n    for item in lst:\n        if item in freq_dict:\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n\n    # Find the item with maximum frequency\n    max_freq_item = max(freq_dict, key=freq_dict.get)\n\n    return max_freq_item\n\n# Test the function\nassert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2]) == 2"}
{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i, j = 0, len(s) - 1\n    while i < j:\n        while s[i] not in vowels and i < j:\n            i += 1\n        while s[j] not in vowels and i < j:\n            j -= 1\n        s[i], s[j] = s[j], s[i]\n        i += 1\n        j -= 1\n    return ''.join(s)\n\n# Test cases\nassert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"Hello\") == \"Holle\"\nassert reverse_vowels(\"Leetcode\") == \"Leotcede\"\nassert reverse_vowels(\"Aa\") == \"aA\"\nassert reverse_vowels(\"\") == \"\""}
{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    return ''.join(tup)\n\n# Test the function\nassert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's')) == \"exercises\""}
{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    return sum([num for num in numbers if num < 0])\n\n# Test the function\nassert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17]) == -32"}
{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    return n * (2 * n - 1)\n\n# Test the function\nassert hexagonal_num(10) == 190"}
{"task_id": "Mbpp/137", "solution": "import math\n\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count\n\n# Test the function\nassert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)"}
{"task_id": "Mbpp/138", "solution": "def is_sum_of_powers_of_two(num):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    while num > 0:\n        if num & 1:\n            return True\n        num = num >> 1\n\n    return False\n\n# Test the function\nassert is_sum_of_powers_of_two(10) == True"}
{"task_id": "Mbpp/139", "solution": "import math\n\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    circumference = 2 * math.pi * radius\n    return circumference\n\n# Test the function\nassert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)"}
{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    flattened_list = []\n    for sublist in lst:\n        flattened_list.extend(sublist)\n    return flattened_list\n\n# Test the function\nassert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])"}
{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list of elements.\n\n    Examples:\n    >>> pancake_sort([15, 79, 25, 38, 69])\n    [15, 25, 38, 69, 79]\n    \"\"\"\n\n    def flip(lst, end):\n        \"\"\"\n        Reverses the order of elements in a list from index 0 to end.\n\n        Parameters:\n        lst (list): The list of elements.\n        end (int): The index up to which the list should be flipped.\n\n        Returns:\n        list: The flipped list.\n        \"\"\"\n        return lst[:end+1][::-1] + lst[end+1:]\n\n    def find_max_index(lst, end):\n        \"\"\"\n        Finds the index of the maximum element in a list up to a given index.\n\n        Parameters:\n        lst (list): The list of elements.\n        end (int): The index up to which the maximum element should be found.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_index = 0\n        for i in range(end):\n            if lst[i] > lst[max_index]:\n                max_index = i\n        return max_index\n\n    n = len(lst)\n    for i in range(n-1, 0, -1):\n        max_index = find_max_index(lst, i)\n        lst = flip(lst, max_index)\n        lst = flip(lst, i)\n    return lst"}
{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9]) == 3"}
{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    Find the maximum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n\n    Returns:\n    int: The maximum absolute difference between any two elements in the array.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((-2, -5, -1))\n    3\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array must have at least two elements\")\n\n    min_val = max_val = arr[0]\n    for num in arr:\n        min_val = min(min_val, num)\n        max_val = max(max_val, num)\n\n    return max_val - min_val\n\n# Testing the function\nassert max_Abs_Diff((2, 1, 5, 3)) == 4\nassert max_Abs_Diff((-2, -5, -1)) == 3"}
{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    \"\"\"\n    if n == 0:\n        return 0, 0\n\n    if a == 0 and b == 0:\n        return None\n\n    if a == 0:\n        if n % b == 0:\n            return 0, n // b\n        else:\n            return None\n\n    if b == 0:\n        if n % a == 0:\n            return n // a, 0\n        else:\n            return None\n\n    if a == b:\n        if n % a == 0:\n            return n // a, n // a\n        else:\n            return None\n\n    if a < 0:\n        x, y = find_solution(-a, b, n)\n        return -x, y\n\n    if b < 0:\n        x, y = find_solution(a, -b, n)\n        return x, -y\n\n    if a > b:\n        x, y = find_solution(a % b, b, n)\n        return x - y * (a // b), y\n\n    x, y = find_solution(a, b % a, n)\n    return y, x - y * (b // a)\n\n# Test cases\nassert find_solution(2, 3, 7) == (2, 1)\nassert find_solution(0, 5, 0) == (0, 0)\nassert find_solution(0, 0, 10) == None\nassert find_solution(0, 5, 10) == None\nassert find_solution(5, 0, 10) == None\nassert find_solution(2, 3, 0) == (0, 0)\nassert find_solution(2, -3, 0) == (0, 0)\nassert find_solution(-2, 3, 0) == (0, 0)\nassert find_solution(-2, -3, 0) == (0, 0)\nassert find_solution(2, 3, 1) == (1, -1)\nassert find_solution(2, 3, -1) == (-1, 1)\nassert find_solution(2, 3, -5) == (-2, 3)\nassert find_solution(2, 3, 5) == (2, -3)\nassert find_solution(2, 3, 10) == (5, -8)\nassert find_solution(2, 3, -10) == (-5, 8)\nassert find_solution(2, 3, -15) == (-7, 12)\nassert find_solution(2, 3, 15) == (7, -12)\nassert find_solution(2, 3, 21) == (9, -16)\nassert find_solution(2, 3, -21) == (-9, 16)\nassert find_solution(2, 3, 25) == (12, -20)\n"}
{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements):\n    return [x for x in lst if x not in elements]\n\n# Test the function\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]"}
{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    total = 0\n    for i in range(n // 2 + 1):\n        total += n - 2 * i\n    return total\n\n# Test the function\nassert sum_series(6) == 12"}
{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Counts the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    count = 0\n    for i, char in enumerate(string):\n        if char.lower() == alphabet[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_char_position(\"xbcefg\") == 2"}
{"task_id": "Mbpp/166", "solution": "def find_even_pair(lst):\n    count = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            if lst[i] ^ lst[j] % 2 == 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_even_pair([5, 4, 7, 2, 1]) == 4"}
{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (n - 1).bit_length()\n\n# Test the function\nassert next_power_of_2(0) == 1"}
{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    Counts the number of occurrences of a number in a given list.\n\n    Args:\n        lst (list): The list to search for occurrences.\n        num: The number to count occurrences of.\n\n    Returns:\n        int: The number of occurrences of the given number in the list.\n    \"\"\"\n    return lst.count(num)\n\n# Test the function\nassert frequency([1, 2, 3], 4) == 0"}
{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    return sum(lst[start:end+1])\n\n# Test the function\nassert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29"}
{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float or int: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length must be a positive number.\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    return 5 * side_length\n\n# Test the function\nassert perimeter_pentagon(5) == 25"}
{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count\n\n# Test the function\nassert count_occurance(\"letstdlenstdporstd\") == 3"}
{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all the elements in the tuple have the same data type.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(t[0])\n    for element in t:\n        if not isinstance(element, data_type):\n            return False\n    return True\n\n# Test the function\nassert check_type((5, 6, 7, 3, 5, 6)) == True"}
{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    count = 0\n    for i in range(n):\n        if arr[i] == element:\n            count += 1\n    return count > n/2\n\n# Test the function\nassert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True"}
{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    count = 0\n    while num > 0:\n        count += num & 1\n        num >>= 1\n    return count\n\n# Test the function\nassert count_Set_Bits(2) == 1"}
{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    Removes characters with odd index values from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with characters at odd index values removed.\n    \"\"\"\n    return string[::2]\n\n# Test the function\nassert odd_values_string('abcdef') == 'ace'"}
{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    Find the minimum of three numbers.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n    c (int): The third number.\n\n    Returns:\n    int: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)\n\n# Test the function\nassert min_of_three(10, 20, 0) == 0"}
{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    return string.replace(' ', character)\n\n# Test the function\nassert replace_blank(\"hello people\", '@') == \"hello@people\""}
{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    \"\"\"\n    lst.sort(reverse=True)  # Sort the list in descending order\n    return lst[:n]  # Return the first n elements of the sorted list\n\n# Test the function\nassert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)) == set([100, 90])"}
{"task_id": "Mbpp/233", "solution": "import math\n\ndef lateral_surface_cylinder(radius, height):\n    \"\"\"\n    Calculate the lateral surface area of a cylinder.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The lateral surface area of the cylinder.\n    \"\"\"\n    return 2 * math.pi * radius * height\n\n# Test the function\nassert math.isclose(lateral_surface_cylinder(10, 5), 314.15000000000003, rel_tol=0.001)"}
{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    Calculate the volume of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float or int: The volume of the cube.\n\n    Raises:\n    ValueError: If the side length is negative.\n\n    Examples:\n    >>> volume_cube(3)\n    27\n    >>> volume_cube(0)\n    0\n    >>> volume_cube(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: Side length cannot be negative.\n    \"\"\"\n    if side_length < 0:\n        raise ValueError(\"Side length cannot be negative.\")\n    return side_length ** 3\n\n# Testing the function\nassert volume_cube(3) == 27\nassert volume_cube(0) == 0"}
{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(num):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n    \"\"\"\n    # Convert the number to binary representation\n    binary_num = bin(num)[2:]\n    \n    # Set even bits to 1\n    binary_num = binary_num[:-1] + '1' + binary_num[-1]\n    \n    # Convert the binary representation back to decimal\n    return int(binary_num, 2)\n\n# Test the function\nassert even_bit_set_number(10) == 10"}
{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    result = {}\n    for tup in lst:\n        if tup in result:\n            result[tup] += 1\n        else:\n            result[tup] = 1\n    return result\n\n# Test the function\nassert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)]) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}"}
{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    Count the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n    \"\"\"\n    n = len(string)\n    count = n * (n + 1) // 2\n    return count\n\n# Test the function\nassert number_of_substrings(\"abc\") == 6"}
{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Initialize a 2D list to store the number of sequences for each value of m and n\n    dp = [[0] * (m + 1) for _ in range(n + 1)]\n\n    # Base case: when n is 0, there is only one possible sequence (empty sequence)\n    for i in range(m + 1):\n        dp[0][i] = 1\n\n    # Iterate through the values of n and m\n    for i in range(1, n + 1):\n        for j in range(1, m + 1):\n            # Calculate the number of sequences for the current value of m and n\n            dp[i][j] = sum(dp[i - 1][k] for k in range(j // 2, j))\n\n    # Return the total number of sequences for the given m and n\n    return dp[n][m]\n\n# Test the function\nassert get_total_number_of_sequences(10, 4) == 4"}
{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    list1[-1] = list2\n    return list1\n\n# Test the function\nassert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8]) == [1, 3, 5, 7, 9, [2, 4, 6, 8]]"}
{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function counts the total number of characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)\n\n# Test the function\nassert count_charac(\"python programming\") == 18"}
{"task_id": "Mbpp/244", "solution": "import math\n\ndef next_perfect_square(num):\n    \"\"\"\n    Find the next perfect square greater than a given number.\n\n    Args:\n        num (int): The input number.\n\n    Returns:\n        int: The next perfect square greater than the input number.\n\n    Raises:\n        ValueError: If the input number is negative.\n\n    Examples:\n        >>> next_perfect_square(35)\n        36\n        >>> next_perfect_square(121)\n        144\n    \"\"\"\n    if num < 0:\n        raise ValueError(\"Input number must be non-negative.\")\n\n    # Find the square root of the number\n    sqrt_num = math.sqrt(num)\n\n    # Check if the square root is an integer\n    if sqrt_num.is_integer():\n        return int(sqrt_num) ** 2\n\n    # Find the next integer greater than the square root\n    next_sqrt = math.ceil(sqrt_num)\n\n    # Return the square of the next integer\n    return next_sqrt ** 2\n\n# Test the function\nassert next_perfect_square(35) == 36\nassert next_perfect_square(121) == 144"}
{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n < 3:\n        return 0\n\n    # Find the maximum element in the array\n    max_val = max(arr)\n\n    # Find the index of the maximum element\n    max_index = arr.index(max_val)\n\n    # Initialize variables for storing the maximum sum\n    max_sum = 0\n    curr_sum = 0\n\n    # Calculate the maximum sum of the increasing subsequence\n    for i in range(max_index):\n        if arr[i] <= arr[i+1]:\n            curr_sum += arr[i]\n        else:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = arr[i]\n    max_sum = max(max_sum, curr_sum)\n\n    # Reset the current sum\n    curr_sum = 0\n\n    # Calculate the maximum sum of the decreasing subsequence\n    for i in range(max_index, n-1):\n        if arr[i] >= arr[i+1]:\n            curr_sum += arr[i]\n        else:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = arr[i]\n    max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194"}
{"task_id": "Mbpp/247", "solution": "def lps(s):\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n\n    for i in range(n):\n        dp[i][i] = 1\n\n    for length in range(2, n + 1):\n        for i in range(n - length + 1):\n            j = i + length - 1\n            if s[i] == s[j]:\n                dp[i][j] = dp[i + 1][j - 1] + 2\n            else:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1])\n\n    return dp[0][n - 1]\n\n# Test the function\nassert lps(\"TENS FOR TENS\") == 5"}
{"task_id": "Mbpp/250", "solution": "def count_X(tuple_input, element):\n    count = 0\n    for item in tuple_input:\n        if item == element:\n            count += 1\n    return count\n\n# Test the function\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4) == 0"}
{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result\n\n# Test the function\nassert insert_element(['Red', 'Green', 'Black'], 'c') == ['c', 'Red', 'c', 'Green', 'c', 'Black']"}
{"task_id": "Mbpp/252", "solution": "import cmath\n\ndef convert(z):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    z (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the polar coordinates (r, phi) of the complex number.\n    \"\"\"\n    r = abs(z)\n    phi = cmath.phase(z)\n    return (r, phi)\n\n# Test the function\nassert convert(1) == (1.0, 0.0)"}
{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count\n\n# Test the function\nassert count_integer([1, 2, 'abc', 1.2]) == 2"}
{"task_id": "Mbpp/255", "solution": "from itertools import combinations_with_replacement\n\ndef combinations_colors(lst, n):\n    return list(combinations_with_replacement(lst, n))\n\n# Test the function\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 1) == [('Red',), ('Green',), ('Blue',)]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 2) == [('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors([\"Red\", \"Green\", \"Blue\"], 3) == [('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"}
{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(n):\n        if is_prime(num):\n            count += 1\n    return count\n\n# Test the function\nassert count_Primes_nums(5) == 2"}
{"task_id": "Mbpp/257", "solution": "def swap_numbers(a, b):\n    return b, a\n\n# Test the function\nassert swap_numbers(10, 20) == (20, 10)"}
{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        max_value = max(tuple1[i][0], tuple2[i][0])\n        max_index = max(tuple1[i][1], tuple2[i][1])\n        result.append((max_value, max_index))\n    return tuple(result)\n\n# Test the function\nassert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))"}
{"task_id": "Mbpp/260", "solution": "def is_prime(n):\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef newman_prime(n):\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test the function\nassert newman_prime(3) == 7"}
{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across the given tuples.\n\n    Args:\n    tuple1 (tuple): First input tuple.\n    tuple2 (tuple): Second input tuple.\n\n    Returns:\n    tuple: Result of division operation element-wise across the given tuples.\n\n    Raises:\n    ZeroDivisionError: If any element in tuple2 is zero.\n\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = tuple(map(lambda x, y: x / y, tuple1, tuple2))\n    return result\n\n# Test the function\nassert division_elements((10, 4, 6, 9), (5, 2, 3, 3)) == (2, 2, 2, 3)"}
{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    return (lst[:L], lst[L:])\n\n# Test the function\nassert split_two_parts([1,1,2,3,4,4,5,1],3) == ([1, 1, 2], [3, 4, 4, 5, 1])"}
{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    This function calculates a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n\n    \"\"\"\n    return human_age * 7\n\n# Test the function\nassert dog_age(12) == 61"}
{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result\n\n# Test the function\nassert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3) == [['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"}
{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculates the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float or int: The lateral surface area of the cube.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> lateralsurface_cube(5)\n    100\n    >>> lateralsurface_cube(0)\n    0\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n    return 4 * side_length ** 2\n\n# Testing the function\nassert lateralsurface_cube(5) == 100\nassert lateralsurface_cube(0) == 0"}
{"task_id": "Mbpp/267", "solution": "def square_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to consider.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**2\n    return sum\n\n# Test the function\nassert square_sum(2) == 10"}
{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Find the n'th star number.\n\n    A star number is a number that can be represented as the sum of its digits raised to the power of the number of digits.\n\n    Args:\n        n (int): The position of the star number to find.\n\n    Returns:\n        int: The n'th star number.\n\n    Raises:\n        ValueError: If n is less than 1.\n\n    Examples:\n        >>> find_star_num(3)\n        37\n        >>> find_star_num(5)\n        328\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1\")\n\n    star_num = 0\n    num_digits = 1\n\n    while star_num < n:\n        for num in range(10**(num_digits-1), 10**num_digits):\n            if sum(int(digit) for digit in str(num)) ** num_digits == num:\n                star_num += 1\n                if star_num == n:\n                    return num\n        num_digits += 1\n\n    return -1  # If n is larger than the largest star number found\n\n# Testing the function\nassert find_star_num(3) == 37\nassert find_star_num(5) == 328"}
{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): The character whose ASCII value needs to be found.\n\n    Returns:\n    int: The ASCII value of the input character.\n    \"\"\"\n    return ord(char)\n\n# Test the function\nassert ascii_value('A') == 65"}
{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    return sum(lst[::2])\n\n# Test the function\nassert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30"}
{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    sum = 0\n    for i in range(2, 2*n+1, 2):\n        sum += i**5\n    return sum\n\n# Test the function\nassert even_Power_Sum(2) == 1056"}
{"task_id": "Mbpp/272", "solution": "def rear_extract(tuples_list):\n    return [t[-1] for t in tuples_list]\n\n# Test the function\nassert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"}
{"task_id": "Mbpp/273", "solution": "def subtract_elements(tuple1, tuple2):\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] - tuple2[i])\n    \n    return tuple(result)\n\n# Test the function\nassert subtract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)"}
{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Calculate the binomial coefficient C(n, k).\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    sum_of_even_index_coeffs = 0\n    for i in range(n + 1):\n        if i % 2 == 0:\n            sum_of_even_index_coeffs += binomial_coefficient(n, i)\n\n    return sum_of_even_index_coeffs\n\n# Test the function\nassert even_binomial_Coeff_Sum(4) == 8"}
{"task_id": "Mbpp/276", "solution": "import math\n\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculates the volume of a cylinder given its radius and height.\n\n    Args:\n        radius (float): The radius of the cylinder.\n        height (float): The height of the cylinder.\n\n    Returns:\n        float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height\n\n# Test the function\nassert math.isclose(volume_cylinder(10, 5), 1570.7963267948966, rel_tol=0.001)"}
{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict\n\n# Test the function\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170) == {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"}
{"task_id": "Mbpp/278", "solution": "def count_first_elements(t):\n    count = 0\n    for element in t:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count\n\n# Test the function\nassert count_first_elements((1, 5, 7, (4, 6), 10)) == 3"}
{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Write a function to find the nth decagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_num_decagonal(3) == 27"}
{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1\n\n# Test the function\nassert sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31) == (True, 3)"}
{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked for uniqueness.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))\n\n# Test cases\nassert all_unique([1, 2, 3]) == True\nassert all_unique([1, 2, 2]) == False\nassert all_unique([]) == True\nassert all_unique([1, 1, 1, 1]) == False"}
{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise difference between list1 and list2.\n\n    Raises:\n        ValueError: If the input lists have different lengths.\n\n    Examples:\n        >>> sub_list([1, 2, 3], [4, 5, 6])\n        [-3, -3, -3]\n        >>> sub_list([1, 2, 3], [4, 5])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [x - y for x, y in zip(list1, list2)]"}
{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True\n\n# Test cases\nassert validate(1234) == True\nassert validate(112233) == True\nassert validate(123456789) == False\nassert validate(100000) == False\nassert validate(121) == False"}
{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    return all(item == element for item in lst)\n\n# Test the function\nassert check_element([\"green\", \"orange\", \"black\", \"white\"], 'blue') == False"}
{"task_id": "Mbpp/285", "solution": "import re\n\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    \n    Args:\n        text (str): The input string to be checked.\n        \n    Returns:\n        bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a[b]{2,3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert text_match_two_three(\"ac\") == False\nassert text_match_two_three(\"ab\") == False\nassert text_match_two_three(\"abb\") == True\nassert text_match_two_three(\"abbb\") == True\nassert text_match_two_three(\"abbbb\") == False"}
{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    def kadane(arr):\n        max_sum = float('-inf')\n        curr_sum = 0\n        for num in arr:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n    def max_sub_array_sum(arr):\n        return kadane(arr)\n\n    def max_sub_array_sum_wrap(arr, k):\n        if k == 1:\n            return max_sub_array_sum(arr)\n\n        max_sum = float('-inf')\n        curr_sum = 0\n        for i in range(k):\n            for j in range(len(arr)):\n                curr_sum += arr[j]\n                max_sum = max(max_sum, curr_sum)\n                if curr_sum < 0:\n                    curr_sum = 0\n\n        return max_sum\n\n    repeated_arr = arr * n\n    return max_sub_array_sum_wrap(repeated_arr, k)\n\n# Test the function\nassert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30"}
{"task_id": "Mbpp/287", "solution": "def square_sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i*i\n    return sum_of_squares\n\n# Test the function\nassert square_sum(2) == 20"}
{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    max_len = 0\n    max_lst = []\n    for sub_lst in lst:\n        if len(sub_lst) > max_len:\n            max_len = len(sub_lst)\n            max_lst = sub_lst\n    return max_len, max_lst\n\n# Test the function\nassert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]]) == (3, [13, 15, 17])"}
{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the first number divided by the second number (rounded down to the nearest integer).\n\n    Parameters:\n    a (int): The dividend.\n    b (int): The divisor.\n\n    Returns:\n    int: The rounded down quotient of a divided by b.\n    \"\"\"\n    return a // b\n\n# Test the function\nassert find(10, 3) == 3"}
{"task_id": "Mbpp/293", "solution": "import math\n\ndef otherside_rightangle(base, height):\n    \"\"\"\n    Calculates the length of the third side of a right-angled triangle given the base and height.\n\n    Parameters:\n    base (float): The length of the base of the triangle.\n    height (float): The length of the perpendicular height of the triangle.\n\n    Returns:\n    float: The length of the third side of the right-angled triangle.\n\n    Raises:\n    ValueError: If either base or height is negative.\n\n    \"\"\"\n    if base < 0 or height < 0:\n        raise ValueError(\"Base and height must be positive values.\")\n\n    return math.sqrt(base**2 + height**2)\n\n# Test the function\nassert otherside_rightangle(7, 8) == 10.63014581273465"}
{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    max_value = None\n    for item in lst:\n        if max_value is None or item > max_value:\n            max_value = item\n    return max_value\n\n# Test the function\nassert max_val(['Python', 3, 2, 4, 5, 'version']) == 5"}
{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n\n# Test the function\nassert get_Inv_Count([1, 20, 6, 4, 5]) == 5"}
{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list\n\n# Test the function\nassert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]]) == [0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"}
{"task_id": "Mbpp/299", "solution": "def max_aggregate(tuples_list):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Args:\n    tuples_list (list): A list of tuples containing names and corresponding scores.\n\n    Returns:\n    tuple: A tuple with the name and maximum aggregate.\n\n    \"\"\"\n    aggregates = {}\n    for name, score in tuples_list:\n        if name in aggregates:\n            aggregates[name] += score\n        else:\n            aggregates[name] = score\n\n    max_aggregate = max(aggregates.values())\n    for name, aggregate in aggregates.items():\n        if aggregate == max_aggregate:\n            return (name, aggregate)\n\n# Test the function\nassert max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)]) == ('Juan Whelan', 212)"}
{"task_id": "Mbpp/300", "solution": "import math\n\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence (divided by 2)\n\n    Returns:\n    float: The count of binary sequences satisfying the condition\n\n    \"\"\"\n    def count_binary_seq_helper(n, sum_diff, memo):\n        if n == 0:\n            return 1 if sum_diff == 0 else 0\n        if (n, sum_diff) in memo:\n            return memo[(n, sum_diff)]\n\n        count = count_binary_seq_helper(n - 1, sum_diff + 1, memo) + count_binary_seq_helper(n - 1, sum_diff - 1, memo)\n        memo[(n, sum_diff)] = count\n        return count\n\n    memo = {}\n    total_count = count_binary_seq_helper(2 * n, 0, memo)\n    return total_count\n\n# Testing the function\nassert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)"}
{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    This function takes a dictionary as input and returns its depth.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    if not isinstance(dictionary, dict):\n        return 0\n\n    max_depth = 1\n    for value in dictionary.values():\n        if isinstance(value, dict):\n            max_depth = max(max_depth, 1 + dict_depth(value))\n\n    return max_depth\n\n# Test the function\nassert dict_depth({'a': 1, 'b': {'c': {'d': {}}}}) == 4"}
{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    result = []\n    for word in words:\n        if word.startswith('p') or word.startswith('P'):\n            result.append(word.split()[0])\n    return tuple(result)\n\n# Test the function\nassert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"]) == ('Python', 'PHP')"}
{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    max_sum = float('-inf')\n    prefix_sum = [0] * n\n    prefix_sum[0] = arr[0]\n\n    for j in range(1, n):\n        prefix_sum[j] = prefix_sum[j-1] + arr[j]\n\n    for m in range(i+1, n):\n        if arr[m] > arr[i] and arr[m] < k:\n            curr_sum = prefix_sum[m] - prefix_sum[i] + arr[i]\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum\n\n# Test the function\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6) == 11"}
{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num_products):\n    \"\"\"\n    Find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Args:\n        list1 (list): The first input list.\n        list2 (list): The second input list.\n        num_products (int): The number of largest products to find.\n\n    Returns:\n        list: A list of the specified number of largest products.\n\n    Raises:\n        ValueError: If the input lists are empty or if num_products is greater than the total number of factors.\n\n    Examples:\n        >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n        [60, 54, 50]\n    \"\"\"\n    if not list1 or not list2:\n        raise ValueError(\"Input lists cannot be empty\")\n\n    if num_products > len(list1) * len(list2):\n        raise ValueError(\"num_products is greater than the total number of factors\")\n\n    products = []\n    for num1 in list1:\n        for num2 in list2:\n            products.append(num1 * num2)\n\n    products.sort(reverse=True)\n    return products[:num_products]"}
{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two.\n\n    Parameters:\n    a (int): The first number.\n    b (int): The second number.\n\n    Returns:\n    int: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)\n\n# Test the function\nassert maximum(5, 10) == 10"}
{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    return tuple(string)\n\n# Test the function\nassert string_to_tuple(\"python 3.0\") == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"}
{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes a number as input and returns the number with the left most unset bit set to 1.\n\n    Parameters:\n    num (int): The input number.\n\n    Returns:\n    int: The number with the left most unset bit set to 1.\n    \"\"\"\n    mask = 1\n    while num & mask:\n        mask = mask << 1\n    return num | mask\n\n# Test the function\nassert set_left_most_unset_bit(10) == 14"}
{"task_id": "Mbpp/312", "solution": "import math\n\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone.\n\n    Parameters:\n    radius (float): The radius of the cone base.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n\n    Raises:\n    ValueError: If either radius or height is negative.\n\n    \"\"\"\n    if radius < 0 or height < 0:\n        raise ValueError(\"Radius and height must be non-negative.\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume\n\n# Test the function\nassert math.isclose(volume_cone(5, 12), 314.15926535897927, rel_tol=0.001)"}
{"task_id": "Mbpp/388", "solution": "def highest_power_of_2(n):\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2\n\n# Test the function\nassert highest_power_of_2(10) == 8"}
{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n\n# Test the function\nassert find_lucas(9) == 76"}
{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    return [format_str.format(item) for item in lst]\n\n# Test the function\nassert add_string([1, 2, 3, 4], 'temp{0}') == ['temp1', 'temp2', 'temp3', 'temp4']"}
{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(*lists):\n    nested_dict = []\n    for i in range(len(lists[0])):\n        inner_dict = {lists[0][i]: {lists[1][i]: lists[2][i]}}\n        nested_dict.append(inner_dict)\n    return nested_dict\n\n# Test the function\nassert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92]) == [{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"}
{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 5:\n        return n\n    else:\n        return max(get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5), n)\n\n# Test the function\nassert get_max_sum(60) == 106"}
{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Args:\n    t (tuple): The input tuple.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))\n\n# Test the function\nassert check_distinct((1, 4, 5, 6, 1, 4)) == False"}
{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None\n\n# Test cases\nassert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"aabbccddee\") == None\nassert first_non_repeating_character(\"abcde\") == \"a\"\nassert first_non_repeating_character(\"aabbccdde\") == \"e\"\nassert first_non_repeating_character(\"aabbccddeef\") == \"f\""}
{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    Find the median of three numbers.\n\n    Parameters:\n    a (float): The first number.\n    b (float): The second number.\n    c (float): The third number.\n\n    Returns:\n    float: The median of the three numbers.\n\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median\n\n# Test the function\nassert median_numbers(25, 55, 65) == 55.0"}
{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Compute the sum of digits of each number of a given list.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The sum of digits of each number.\n\n    Examples:\n        >>> sum_of_digits([10, 2, 56])\n        14\n    \"\"\"\n    result = 0\n    for num in numbers:\n        result += sum(int(digit) for digit in str(num))\n    return result\n\n# Test the function\nassert sum_of_digits([10, 2, 56]) == 14"}
{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two input numbers.\n    \"\"\"\n    return min(a, b)\n\n# Test the function\nassert minimum(1, 2) == 1"}
{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check whether an element exists within a tuple.\n\n    Args:\n        tuplex (tuple): The input tuple.\n        element: The element to check for in the tuple.\n\n    Returns:\n        bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex\n\n# Test the function\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"), 'r') == True"}
{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes a number as input and returns True if the parity is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check parity for.\n\n    Returns:\n    bool: True if the parity is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0\n\n# Test the function\nassert find_Parity(12) == False"}
{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Find the minimum product from the pairs of tuples within a given list.\n\n    Args:\n    lst (list): A list of tuples, where each tuple contains two integers.\n\n    Returns:\n    int: The minimum product of the pairs of tuples.\n\n    Raises:\n    ValueError: If the input list is empty or if any tuple within the list has less or more than two elements.\n\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_product = float('inf')\n\n    for tup in lst:\n        if len(tup) != 2:\n            raise ValueError(\"Each tuple must contain exactly two elements\")\n        product = tup[0] * tup[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product\n\n# Test the function\nassert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8"}
{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Find the minimum value in a given heterogeneous list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        The minimum value in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n        2\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list cannot be empty\")\n\n    min_val = lst[0]\n    for item in lst:\n        if item < min_val:\n            min_val = item\n\n    return min_val\n\n# Test the function\nassert min_val(['Python', 3, 2, 4, 5, 'version']) == 2"}
{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]\n\n# Test the function\nassert remove_odd([1, 2, 3]) == [2]"}
{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    return [t[n] for t in lst]\n\n# Test the function\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0) == ['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"}
{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check whether any value in a sequence exists in another sequence.\n\n    Args:\n        seq1 (list): The first sequence.\n        seq2 (list): The second sequence.\n\n    Returns:\n        bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    return any(item in seq2 for item in seq1)\n\n# Test the function\nassert overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9]) == False"}
{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Find a pair with highest product from a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the pair of integers with the highest product.\n\n    \"\"\"\n    if len(arr) < 2:\n        raise ValueError(\"Array should contain at least two integers.\")\n\n    max_product = float('-inf')\n    pair = ()\n\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                pair = (arr[i], arr[j])\n\n    return pair\n\n# Test the function\nassert max_Product([1, 2, 3, 4, 7, 0, 8, 4]) == (7, 8)"}
{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    max_length = 0\n    max_element = []\n    \n    for element in lst:\n        if len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n    \n    return max_element\n\n# Test the function\nassert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"}
{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result\n\n# Test the function\nassert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50]) == 243"}
{"task_id": "Mbpp/420", "solution": "def cube_sum(n):\n    \"\"\"\n    Calculate the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to consider.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> cube_sum(2)\n    72\n    >>> cube_sum(3)\n    216\n    >>> cube_sum(5)\n    924\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer\")\n\n    return sum(i**3 for i in range(2, 2*n+1, 2))\n\n# Testing the function\nassert cube_sum(2) == 72\nassert cube_sum(3) == 216\nassert cube_sum(5) == 924"}
{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of the tuple by the delimiter.\n\n    Args:\n        t (tuple): The input tuple.\n        delimiter (str, optional): The delimiter to concatenate the elements. Defaults to '-'.\n\n    Returns:\n        str: The concatenated string.\n\n    Examples:\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"))\n        'ID-is-4-UTS'\n        >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_')\n        'ID_is_4_UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in t)\n\n# Test the function\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\")) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\"), delimiter='_') == 'ID_is_4_UTS'"}
{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    Write a python function to find the average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average_of_cubes = sum_of_cubes / n\n    return average_of_cubes\n\n# Test the function\nassert find_Average_Of_Cube(2) == 4.5"}
{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    return [word[-1] for word in tup]\n\n# Test the function\nassert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"}
{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count\n\n# Test the function\nassert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1) == 3"}
{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    return [num for num in numbers if num % 2 != 0]\n\n# Test the function\nassert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]"}
{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Args:\n        date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n        str: The date in dd-mm-yyyy format.\n\n    Raises:\n        ValueError: If the input date is not in the correct format.\n\n    Examples:\n        >>> change_date_format(\"2026-01-02\")\n        '02-01-2026'\n    \"\"\"\n    try:\n        year, month, day = date.split('-')\n        return f\"{day}-{month}-{year}\"\n    except ValueError:\n        raise ValueError(\"Input date should be in yyyy-mm-dd format\")\n\n# Test the function\nassert change_date_format(\"2026-01-02\") == '02-01-2026'"}
{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n    return arr\n\n# Test the function\nassert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"}
{"task_id": "Mbpp/429", "solution": "def and_tuples(tuple1, tuple2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the elementwise and of the input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    >>> and_tuples((1, 2, 3), (4, 5, 6))\n    (0, 0, 2)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length\")\n\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple1[i] & tuple2[i])\n\n    return tuple(result)\n\n# Testing the function\nassert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)"}
{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    Find the directrix of a parabola.\n\n    Parameters:\n    a (float): coefficient of x^2\n    b (float): coefficient of x\n    c (float): constant term\n\n    Returns:\n    float: directrix of the parabola\n\n    \"\"\"\n    directrix = -0.5 * b / a\n    return directrix\n\n# Test the function\nassert parabola_directrix(5, 3, 2) == -198"}
{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): The length of the top base of the trapezium.\n    b (float): The length of the bottom base of the trapezium.\n    c (float): The height of the trapezium.\n\n    Returns:\n    float: The median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input parameters is negative.\n\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Input parameters cannot be negative.\")\n\n    median = ((a + b) / 2) * c / (a + (b - a) / 2)\n    return median\n\n# Test the function\nassert median_trapezium(15, 25, 35) == 20"}
{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check whether the entered number is greater than the elements of the given array.\n\n    Parameters:\n    arr (list): The input array of numbers.\n    num (int): The number to compare with the elements of the array.\n\n    Returns:\n    bool: True if the number is greater than all the elements of the array, False otherwise.\n    \"\"\"\n    return all(element < num for element in arr)\n\n# Test the function\nassert check_greater([1, 2, 3, 4, 5], 4) == False"}
{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The last digit of the input number.\n    \"\"\"\n    return number % 10\n\n# Test the function\nassert last_digit(123) == 3"}
{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    return [num for num in lst if num < 0]\n\n# Test the function\nassert neg_nos([-1, 4, 5, -6]) == [-1, -6]"}
{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    Removes odd characters in a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with odd characters removed.\n    \"\"\"\n    return ''.join(string[i] for i in range(len(string)) if i % 2 == 0)\n\n# Test the function\nassert remove_odd(\"python\") == \"yhn\""}
{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        int: The joined integer.\n\n    Raises:\n        TypeError: If the input is not a list or if any element in the list is not an integer.\n\n    Examples:\n        >>> multiple_to_single([11, 33, 50])\n        113350\n    \"\"\"\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list\")\n\n    for num in numbers:\n        if not isinstance(num, int):\n            raise TypeError(\"All elements in the list must be integers\")\n\n    return int(''.join(map(str, numbers)))\n\n# Test the function\nassert multiple_to_single([11, 33, 50]) == 113350"}
{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    Find the first adverb and their positions in a given sentence.\n\n    Args:\n        sentence (str): The input sentence.\n\n    Returns:\n        tuple: A tuple containing the start position, end position, and the adverb found.\n\n    Examples:\n        >>> find_adverb_position(\"clearly!! we can see the sky\")\n        (0, 7, 'clearly')\n        >>> find_adverb_position(\"The dog is running very fast.\")\n        (10, 17, 'very')\n        >>> find_adverb_position(\"I am not sure.\")\n        (-1, -1, '')\n    \"\"\"\n    adverbs = ['very', 'extremely', 'quite', 'fairly', 'hardly', 'shockingly', 'absolutely', 'totally', 'completely', 'entirely']\n    words = sentence.split()\n    for i, word in enumerate(words):\n        if word.lower() in adverbs:\n            return i, i + len(word) - 1, word\n    return -1, -1, ''\n\n# Testing the function\nassert find_adverb_position(\"clearly!! we can see the sky\") == (0, 7, 'clearly')\nassert find_adverb_position(\"The dog is running very fast.\") == (10, 17, 'very')\nassert find_adverb_position(\"I am not sure.\") == (-1, -1, '')"}
{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The size of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n\n    \"\"\"\n    return 6 * size * size\n\n# Test the function\nassert surfacearea_cube(5) == 150"}
{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append((tuple1[i][0] * tuple2[i][0], tuple1[i][1] * tuple2[i][1]))\n    return tuple(result)\n\n# Test the function\nassert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))"}
{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tuple_data, list_elements):\n    count = 0\n    for element in list_elements:\n        count += tuple_data.count(element)\n    return count\n\n# Test the function\nassert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b']) == 3"}
{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    return [num ** 3 for num in nums]\n\n# Test the function\nassert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"}
{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n\n    Raises:\n    ValueError: If n is less than 0.\n\n    Examples:\n    >>> cal_sum(9)\n    49\n    >>> cal_sum(0)\n    0\n    >>> cal_sum(-5)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a non-negative integer.\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    perrin_numbers = [3, 0, 2]\n    if n < 3:\n        return sum(perrin_numbers[:n])\n\n    while len(perrin_numbers) < n:\n        next_number = perrin_numbers[-3] + perrin_numbers[-2]\n        perrin_numbers.append(next_number)\n\n    return sum(perrin_numbers)"}
{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts strings of specified size from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings of the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [s for s in string_list if len(s) == size]\n\n# Test the function\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8) == ['practice', 'solution']"}
{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    return string.replace(\" \", \"\")\n\n# Test the function\nassert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"}
{"task_id": "Mbpp/453", "solution": "def sum_of_even_factors(num):\n    \"\"\"\n    This function calculates the sum of even factors of a given number.\n\n    Parameters:\n    num (int): The number for which the sum of even factors needs to be calculated.\n\n    Returns:\n    int: The sum of even factors of the given number.\n\n    \"\"\"\n    sum_of_factors = 0\n    for i in range(1, num + 1):\n        if num % i == 0 and i % 2 == 0:\n            sum_of_factors += i\n    return sum_of_factors\n\n# Test the function\nassert sum_of_even_factors(18) == 26"}
{"task_id": "Mbpp/454", "solution": "import re\n\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to be checked.\n\n    Returns:\n    bool: True if the word contains 'z', False otherwise.\n    \"\"\"\n    pattern = r\"\\b\\w*z\\w*\\b\"\n    return bool(re.search(pattern, text))\n\n# Test the function\nassert text_match_wordz(\"pythonz.\") == True"}
{"task_id": "Mbpp/455", "solution": "def check_month_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number == 2:\n        return False  # February has 28 or 29 days\n    else:\n        return False\n\n# Test the function\nassert check_month_number(5) == True"}
{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list\n\n# Test the function\nassert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black']) == ['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"}
{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    Finds the sublist with the minimum length in the given list.\n\n    Args:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: The sublist with the minimum length.\n\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist\n\n# Test the function\nassert Find_Min([[1],[1,2],[1,2,3]]) == [1]"}
{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle.\n\n    Parameters:\n    length (float): The length of the rectangle.\n    width (float): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width\n\n# Test the function\nassert rectangle_area(10, 20) == 200"}
{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Removes uppercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with uppercase substrings removed.\n    \"\"\"\n    return ''.join(char for char in string if not char.isupper())\n\n# Test the function\nassert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"}
{"task_id": "Mbpp/460", "solution": "def Extract(sublists):\n    return [sublist[0] for sublist in sublists]\n\n# Test the function\nassert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]"}
{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for i in range(len(lst)):\n        result += [current + [lst[i]] for current in result]\n    return result\n\n# Test the function\nassert combinations_list(['orange', 'red', 'green', 'blue']) == [[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"}
{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    if len(arr) == 0:\n        return 0\n\n    max_product = arr[0]\n    min_product = arr[0]\n    max_global = arr[0]\n\n    for i in range(1, len(arr)):\n        if arr[i] < 0:\n            max_product, min_product = min_product, max_product\n\n        max_product = max(arr[i], max_product * arr[i])\n        min_product = min(arr[i], min_product * arr[i])\n\n        max_global = max(max_global, max_product)\n\n    return max_global\n\n# Test the function\nassert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112"}
{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    This function drops empty items from a given dictionary.\n\n    Args:\n        dictionary (dict): The input dictionary.\n\n    Returns:\n        dict: The modified dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}\n\n# Test the function\nassert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None}) == {'c1': 'Red', 'c2': 'Green'}"}
{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Find the maximum product formed by multiplying numbers of an increasing subsequence of the given array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n\n    # Initialize variables to store the maximum product and the current product\n    max_product = 1\n    current_product = 1\n\n    # Iterate through the array\n    for num in arr:\n        # Update the current product by multiplying it with the current number\n        current_product *= num\n\n        # If the current product is greater than the maximum product, update the maximum product\n        if current_product > max_product:\n            max_product = current_product\n\n    return max_product\n\n# Test the function\nassert max_product([3, 100, 4, 5, 150, 6]) == 3000"}
{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    return tuple(t[i] + t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)"}
{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product\n\n# Test the function\nassert find_remainder([100, 10, 5, 25, 35, 14], 11) == 9"}
{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check whether the given list contains consecutive numbers or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    return sorted(lst) == list(range(min(lst), max(lst) + 1))\n\n# Test cases\nassert check_Consecutive([1, 2, 3, 4, 5]) == True\nassert check_Consecutive([1, 3, 5, 7, 9]) == False\nassert check_Consecutive([1, 2, 4, 5, 6]) == False\nassert check_Consecutive([10, 11, 12, 13, 14]) == True\nassert check_Consecutive([5, 4, 3, 2, 1]) == True"}
{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    intersection = set()\n    for tup1 in tuple_list1:\n        for tup2 in tuple_list2:\n            if set(tup1) == set(tup2):\n                intersection.add(tup1)\n    return intersection\n\n# Test the function\nassert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}"}
{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with another character.\n\n    Args:\n        string (str): The input string.\n        old_char (str): The character to be replaced.\n        new_char (str): The character to replace with.\n\n    Returns:\n        str: The modified string with all occurrences of the old character replaced by the new character.\n    \"\"\"\n    return string.replace(old_char, new_char)\n\n# Test the function\nassert replace_char(\"polygon\", 'y', 'l') == \"pollgon\""}
{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    sorted_dict = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_dict\n\n# Test the function\nassert sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87}) == [('Chemistry', 87), ('Physics', 83), ('Math', 81)]"}
{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    if len(arr) < 2:\n        return 0\n    else:\n        arr.sort()\n        return arr[-1] + arr[0]\n\n# Test the function\nassert big_sum([1, 2, 3]) == 4"}
{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    return string.lower()\n\ndef test_convert_to_lower():\n    assert convert_to_lower(\"InValid\") == \"invalid\"\n\ntest_convert_to_lower()"}
{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Removes lowercase substrings from a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with lowercase substrings removed.\n    \"\"\"\n    modified_string = \"\"\n    for char in string:\n        if char.isupper():\n            modified_string += char\n    return modified_string\n\n# Test the function\nassert remove_lowercase(\"PYTHon\") == \"PYTH\""}
{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    number (int): The input number.\n\n    Returns:\n    int: The first digit of the number.\n    \"\"\"\n    # Convert the number to a string and extract the first character\n    first_digit = str(number)[0]\n\n    # Convert the first digit back to an integer and return it\n    return int(first_digit)\n\n# Test the function\nassert first_digit(123) == 1"}
{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns only the odd ones.\n\n    Args:\n        numbers (list): A list of integers.\n\n    Returns:\n        list: A list of odd integers.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test the function\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]"}
{"task_id": "Mbpp/555", "solution": "def difference(n):\n    sum_of_cubes = sum([i**3 for i in range(1, n+1)])\n    sum_of_numbers = sum([i for i in range(1, n+1)])\n    return sum_of_cubes - sum_of_numbers\n\n# Test the function\nassert difference(3) == 30"}
{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] ^ arr[j] % 2 != 0:\n                count += 1\n    return count\n\n# Test the function\nassert find_Odd_Pair([5, 4, 7, 2, 1], 5) == 6"}
{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    toggled_string = \"\"\n    for char in string:\n        if char.islower():\n            toggled_string += char.upper()\n        else:\n            toggled_string += char.lower()\n    return toggled_string\n\n# Test the function\nassert toggle_string(\"Python\") == \"pYTHON\""}
{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    Calculates the sum of the per-digit difference between two integers.\n\n    Args:\n        num1 (int): The first integer.\n        num2 (int): The second integer.\n\n    Returns:\n        int: The sum of the per-digit difference between num1 and num2.\n\n    Examples:\n        >>> digit_distance_nums(1, 2)\n        1\n        >>> digit_distance_nums(123, 321)\n        2\n        >>> digit_distance_nums(12345, 54321)\n        4\n    \"\"\"\n    num1_str = str(num1)\n    num2_str = str(num2)\n    distance = 0\n\n    for digit1, digit2 in zip(num1_str, num2_str):\n        distance += abs(int(digit1) - int(digit2))\n\n    return distance"}
{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    max_sum = float('-inf')\n    current_sum = 0\n\n    for i in range(n):\n        current_sum += arr[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n        if current_sum < 0:\n            current_sum = 0\n\n    return max_sum\n\n# Test the function\nassert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7"}
{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    union = tuple1 + tuple2\n    return tuple(sorted(set(union)))\n\n# Test the function\nassert union_elements((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 4, 5, 6, 7, 10)"}
{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    Write a python function to find the length of the longest sublists.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        max_length = max(max_length, len(sublist))\n    return max_length\n\n# Test the function\nassert Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]]) == 4"}
{"task_id": "Mbpp/563", "solution": "import re\n\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values extracted from the string.\n\n    Examples:\n        >>> extract_values('\"Python\", \"PHP\", \"Java\"')\n        ['Python', 'PHP', 'Java']\n    \"\"\"\n    pattern = r'\"([^\"]*)\"'\n    matches = re.findall(pattern, string)\n    return matches\n\n# Test the function\nassert extract_values('\"Python\", \"PHP\", \"Java\"') == ['Python', 'PHP', 'Java']"}
{"task_id": "Mbpp/564", "solution": "def count_Pairs(lst, n):\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if lst[i] != lst[j]:\n                count += 1\n    return count\n\n# Test the function\nassert count_Pairs([1, 2, 1], 3) == 2"}
{"task_id": "Mbpp/565", "solution": "def split(string):\n    return list(string)\n\n# Test the function\nassert split('python') == ['p', 'y', 't', 'h', 'o', 'n']"}
{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Calculate the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): The non-negative integer.\n\n    Returns:\n    int: The sum of the digits of the input integer.\n\n    Raises:\n    ValueError: If the input is a negative integer.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(123456789)\n    45\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative integer.\")\n    return sum(int(digit) for digit in str(n))\n\n# Testing the function\nassert sum_digits(345) == 12\nassert sum_digits(0) == 0\nassert sum_digits(123456789) == 45"}
{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return all(lst[i] <= lst[i+1] for i in range(len(lst)-1))\n\n# Test the function\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True"}
{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    return [{} for _ in range(n)]\n\n# Test the function\nassert empty_list(5) == [{}, {}, {}, {}, {}]"}
{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Args:\n        lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n        list: A new list with each sublist sorted in lexicographical order.\n\n    Examples:\n        >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n        [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]\n\n# Test the function\nassert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']]) == [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"}
{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    return unique_nums\n\n# Test the function\nassert two_unique_nums([1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5]"}
{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_numbers = set(numbers)\n    product = 1\n    for num in unique_numbers:\n        product *= num\n    return product\n\n# Test the function\nassert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) == 720000000"}
{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(sub_list, main_list):\n    \"\"\"\n    Check whether a list is sublist of another.\n\n    Args:\n    sub_list (list): The sublist to be checked.\n    main_list (list): The main list to check against.\n\n    Returns:\n    bool: True if sub_list is a sublist of main_list, False otherwise.\n    \"\"\"\n    if len(sub_list) > len(main_list):\n        return False\n\n    for i in range(len(main_list) - len(sub_list) + 1):\n        if main_list[i:i+len(sub_list)] == sub_list:\n            return True\n\n    return False\n\n# Test cases\nassert is_Sub_Array([1, 4, 3, 5], [1, 2]) == False\nassert is_Sub_Array([1, 2], [1, 2, 3, 4]) == True\nassert is_Sub_Array([1, 2, 3], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6]) == False\nassert is_Sub_Array([1, 2, 3, 4, 5], []) == True\nassert is_Sub_Array([], [1, 2, 3, 4, 5]) == True\nassert is_Sub_Array([], []) == True\n```"}
{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    Calculate the last digit in the factorial of a given number.\n\n    Parameters:\n    n (int): The number for which to calculate the last digit in factorial.\n\n    Returns:\n    int: The last digit in the factorial of the given number.\n\n    Examples:\n    >>> last_digit_factorial(4)\n    4\n    >>> last_digit_factorial(10)\n    0\n    >>> last_digit_factorial(12)\n    4\n    \"\"\"\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Testing the function\nassert last_digit_factorial(4) == 4\nassert last_digit_factorial(10) == 0\nassert last_digit_factorial(12) == 4"}
{"task_id": "Mbpp/578", "solution": "def interleave_lists(list1, list2, list3):\n    interleaved_list = []\n    for i in range(len(list1)):\n        interleaved_list.append(list1[i])\n        interleaved_list.append(list2[i])\n        interleaved_list.append(list3[i])\n    return interleaved_list\n\n# Test the function\nassert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700]) == [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"}
{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Args:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)\n\n# Test the function\nassert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)"}
{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Extracts even elements from a nested mixed tuple.\n\n    Args:\n        nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n        tuple: A new tuple with even elements only.\n\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, int) and item % 2 == 0:\n            result.append(item)\n        elif isinstance(item, tuple):\n            result.append(extract_even(item))\n    return tuple(result)\n\n# Test the function\nassert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)"}
{"task_id": "Mbpp/581", "solution": "def surface_area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float): The edge length of the base of the square pyramid.\n    height (float): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    \"\"\"\n    # Calculate the lateral surface area of each base\n    lateral_surface_area = base_edge * base_edge\n\n    # Calculate the total surface area of the base\n    total_surface_area = lateral_surface_area * 4\n\n    # Calculate the slant height of the pyramid\n    slant_height = (height ** 2 + (base_edge / 2) ** 2) ** 0.5\n\n    # Calculate the volume of the pyramid\n    volume = (1 / 3) * lateral_surface_area * height\n\n    # Calculate the total surface area of the pyramid\n    total_surface_area += volume * (slant_height / base_edge)\n\n    return total_surface_area\n\n# Test the function\nassert surface_area(3, 4) == 33"}
{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    if n <= 0:\n        return 1\n    else:\n        result = 0\n        for i in range(n):\n            result += catalan_number(i) * catalan_number(n - i - 1)\n        return result\n\n# Test the function\nassert catalan_number(10) == 16796"}
{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    sorted_items = sorted(dataset, key=lambda x: x['price'], reverse=True)\n    return sorted_items[:n]\n\n# Test the function\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}], 1) == [{'name': 'Item-2', 'price': 555.22}]"}
{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    return arr[n:] + arr[:n]\n\n# Test the function\nassert split_Arr([12, 10, 5, 6, 52, 36], 2) == [5, 6, 52, 36, 12, 10]"}
{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    return tuple(lst)\n\n# Test the function\nassert list_tuple([5, 10, 7, 4, 15, 3]) == (5, 10, 7, 4, 15, 3)"}
{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    Find the difference between the largest and smallest values in a given list.\n\n    Args:\n        nums (list): A list of integers.\n\n    Returns:\n        int: The difference between the largest and smallest values in the list.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> big_diff([1, 2, 3, 4])\n        3\n        >>> big_diff([5, 10, 15, 20])\n        15\n        >>> big_diff([-5, -10, -15, -20])\n        25\n    \"\"\"\n    if not nums:\n        raise ValueError(\"Input list cannot be empty\")\n\n    return max(nums) - min(nums)"}
{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Find perfect squares between two given numbers.\n\n    Args:\n        start (int): The starting number.\n        end (int): The ending number.\n\n    Returns:\n        list: A list of perfect square numbers between the start and end numbers (inclusive).\n\n    Raises:\n        ValueError: If start or end is negative.\n\n    Examples:\n        >>> perfect_squares(1, 30)\n        [1, 4, 9, 16, 25]\n        >>> perfect_squares(100, 120)\n        [121, 144, 169, 196]\n    \"\"\"\n    if start < 0 or end < 0:\n        raise ValueError(\"Start and end numbers must be non-negative.\")\n\n    squares = []\n    for num in range(start, end + 1):\n        if int(num ** 0.5) ** 2 == num:\n            squares.append(num)\n\n    return squares"}
{"task_id": "Mbpp/590", "solution": "import cmath\n\ndef polar_rect(r, theta):\n    x = r * cmath.cos(theta)\n    y = r * cmath.sin(theta)\n    return (x.real, x.imag), (y.real, y.imag)\n\n# Test the function\nassert polar_rect(3, 4) == ((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))"}
{"task_id": "Mbpp/591", "solution": "def swap_list(lst):\n    \"\"\"\n    Swaps the first and last elements in a list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        list: The modified list with first and last elements swapped.\n\n    Raises:\n        ValueError: If the input list is empty.\n\n    Examples:\n        >>> swap_list([12, 35, 9, 56, 24])\n        [24, 35, 9, 56, 12]\n        >>> swap_list([])\n        Traceback (most recent call last):\n        ...\n        ValueError: Input list is empty.\n    \"\"\"\n    if not lst:\n        raise ValueError(\"Input list is empty.\")\n\n    lst[0], lst[-1] = lst[-1], lst[0]\n    return lst"}
{"task_id": "Mbpp/592", "solution": "def binomial_coefficient(n, k):\n    \"\"\"\n    Calculate the binomial coefficient C(n, k).\n\n    Parameters:\n    n (int): The total number of items.\n    k (int): The number of items to be chosen.\n\n    Returns:\n    int: The binomial coefficient C(n, k).\n    \"\"\"\n    if k < 0 or k > n:\n        return 0\n    if k == 0 or k == n:\n        return 1\n\n    # Initialize the array to store the binomial coefficients\n    C = [[0] * (n + 1) for _ in range(n + 1)]\n\n    # Calculate the binomial coefficients using dynamic programming\n    for i in range(n + 1):\n        for j in range(min(i, k) + 1):\n            if j == 0 or j == i:\n                C[i][j] = 1\n            else:\n                C[i][j] = C[i - 1][j - 1] + C[i - 1][j]\n\n    return C[n][k]\n\n\ndef sum_of_product(n):\n    \"\"\"\n    Calculate the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of terms in the sum.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n + i, i) * binomial_coefficient(n + i, n)\n\n    return total_sum\n\n\n# Test the function\nassert sum_of_product(3) == 15"}
{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    octets = ip_address.split('.')\n    new_octets = [str(int(octet)) for octet in octets]\n    return '.'.join(new_octets)\n\n# Test the function\nassert removezero_ip(\"216.08.094.196\") == \"216.8.94.196\""}
{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    \n    if even_numbers and odd_numbers:\n        return even_numbers[0] - odd_numbers[0]\n    else:\n        return None\n\n# Test the function\nassert diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 3"}
{"task_id": "Mbpp/596", "solution": "import sys\n\ndef tuple_size(t):\n    return sys.getsizeof(t)\n\n# Test the function\nassert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3)) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))"}
{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The position of the element to be found.\n\n    Returns:\n    int: The kth element from the merged sorted array.\n\n    Raises:\n    ValueError: If k is out of range.\n\n    Examples:\n    >>> find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5)\n    6\n    >>> find_kth([1, 2, 3], [4, 5, 6], 3)\n    3\n    >>> find_kth([1, 2, 3], [4, 5, 6], 7)\n    Traceback (most recent call last):\n        ...\n    ValueError: k is out of range\n    \"\"\"\n\n    merged = sorted(arr1 + arr2)\n\n    if k > len(merged):\n        raise ValueError(\"k is out of range\")\n\n    return merged[k - 1]"}
{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check whether the given number is an Armstrong number.\n\n    An Armstrong number is a number that is equal to the sum of its own digits raised to the power of the number of digits.\n\n    Args:\n        num (int): The number to check.\n\n    Returns:\n        bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_of_digits = sum(int(digit) ** num_digits for digit in num_str)\n    return sum_of_digits == num\n\n# Test the function\nassert armstrong_number(153) == True"}
{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Calculate the sum and average of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers to consider.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    \"\"\"\n    # Calculate the sum of the first n natural numbers\n    total_sum = (n * (n + 1)) / 2\n\n    # Calculate the average of the first n natural numbers\n    average = total_sum / n\n\n    return total_sum, average\n\n# Test the function\nassert sum_average(10) == (55, 5.5)"}
{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0\n\n# Test the function\nassert is_Even(1) == False"}
{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    seen = set()\n    for char in string:\n        if char in seen:\n            return char\n        seen.add(char)\n    return None\n\n# Test the function\nassert first_repeated_char(\"abcabc\") == \"a\""}
{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    if num == 1:\n        return True\n    if num % 2 == 0 or num % 3 == 0:\n        return False\n    for i in range(5, int(num**0.5) + 1, 6):\n        if num % i == 0 or num % (i + 2) == 0:\n            return False\n    return True\n\n# Test the function\nassert get_lucid(10) == [1, 2, 3, 5, 7]"}
{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    Reverse the order of words seperated by spaces in a given string.\n    \n    Args:\n        string (str): The input string containing words seperated by spaces.\n        \n    Returns:\n        str: The reversed string with words in the reverse order.\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    return ' '.join(reversed_words)\n\n# Test the function\nassert reverse_words(\"python program\") == \"program python\""}
{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the integer is prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\n# Test the function\nassert prime_num(13) == True"}
{"task_id": "Mbpp/606", "solution": "import math\n\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The value in degrees to be converted.\n\n    Returns:\n    float: The converted value in radians.\n    \"\"\"\n    return degrees * (math.pi / 180)\n\n# Test the function\nassert radian_degree(90) == 1.5707963267948966"}
{"task_id": "Mbpp/607", "solution": "import re\n\ndef find_literals(string, pattern):\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        return None\n\n# Test the function\nassert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"}
{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    bell = [[0] * (n + 1) for _ in range(n + 1)]\n    bell[0][0] = 1\n\n    for i in range(1, n + 1):\n        bell[i][0] = bell[i - 1][i - 1]\n        for j in range(1, i + 1):\n            bell[i][j] = bell[i - 1][j - 1] + bell[i][j - 1]\n\n    return bell[n][0]\n\n# Test the function\nassert bell_Number(2) == 2"}
{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    return lst[:k] + lst[k+1:]\n\n# Test the function\nassert remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3) == [1, 1, 3, 4, 4, 5, 1]"}
{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    return max(row[n] for row in matrix)\n\n# Test the function\nassert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19"}
{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    return [list(x) for x in zip(*lst)]\n\n# Test the function\nassert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"}
{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum\n\n# Test the function\nassert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30"}
{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for tup in tuples:\n        averages.append(sum(tup) / len(tup))\n    return averages\n\n# Test the function\nassert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4))) == [30.5, 34.25, 27.0, 23.25]"}
{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    if len(t1) != len(t2):\n        raise ValueError(\"Tuples must have the same length\")\n    \n    return tuple(map(lambda x, y: x % y, t1, t2))\n\n# Test the function\nassert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)"}
{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Divide two lists element-wise.\n\n    Args:\n        list1 (list): The first list.\n        list2 (list): The second list.\n\n    Returns:\n        list: A new list containing the element-wise division of list1 and list2.\n\n    Raises:\n        ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n        >>> div_list([4, 5, 6], [1, 2, 3])\n        [4.0, 2.5, 2.0]\n        >>> div_list([1, 2, 3], [4, 5, 6])\n        [0.25, 0.4, 0.5]\n        >>> div_list([1, 2, 3], [0, 0, 0])\n        [1.0, 1.0, 1.0]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of list1 and list2 must be equal.\")\n\n    return [list1[i] / list2[i] for i in range(len(list1))]"}
{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    # Initialize empty lists for characters and numbers\n    chars = []\n    nums = []\n    \n    # Iterate through each character in the string\n    for char in string:\n        # Check if the character is a number\n        if char.isdigit():\n            # Append the number to the nums list\n            nums.append(char)\n        else:\n            # Append the character to the chars list\n            chars.append(char)\n    \n    # Join the characters and numbers lists and return the result\n    return ''.join(chars) + ''.join(nums)\n\n# Test the function\nassert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"}
{"task_id": "Mbpp/620", "solution": "def largest_subset(numbers):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Args:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The size of the largest subset.\n\n    \"\"\"\n    def is_divisible(a, b):\n        return a % b == 0 or b % a == 0\n\n    def find_largest_subset(numbers, index, current_subset):\n        if index == len(numbers):\n            return len(current_subset)\n\n        # Exclude the current number and move to the next index\n        largest_subset_excluding_current = find_largest_subset(numbers, index + 1, current_subset)\n\n        # Include the current number if it can be paired with all previous numbers in the subset\n        largest_subset_including_current = 0\n        if all(is_divisible(numbers[index], subset_num) for subset_num in current_subset):\n            largest_subset_including_current = 1 + find_largest_subset(numbers, index + 1, current_subset + [numbers[index]])\n\n        return max(largest_subset_excluding_current, largest_subset_including_current)\n\n    return find_largest_subset(numbers, 0, [])\n\n# Test the function\nassert largest_subset([1, 3, 6, 13, 17, 18]) == 4"}
{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    merged_list = sorted(list1 + list2)\n    if n % 2 == 0:\n        mid_index = n // 2\n        median = (merged_list[mid_index - 1] + merged_list[mid_index]) / 2\n    else:\n        mid_index = n // 2\n        median = merged_list[mid_index]\n    return median\n\n# Test the function\nassert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0"}
{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, power):\n    return [num ** power for num in nums]\n\n# Test the function\nassert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2) == [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"}
{"task_id": "Mbpp/624", "solution": "def convert_to_uppercase(string):\n    \"\"\"\n    Converts a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()\n\n# Test the function\nassert convert_to_uppercase(\"person\") == \"PERSON\""}
{"task_id": "Mbpp/626", "solution": "import math\n\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        height = radius * math.sqrt(3) / 2\n        base = radius * 2\n        return 0.5 * base * height\n\n# Test cases\nassert triangle_area(-1) == None\nassert triangle_area(0) == 0.0\nassert triangle_area(1) == 1.5\nassert triangle_area(5) == 15.707963267948966"}
{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")\n\n# Test the function\nassert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'"}
{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test the function\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]"}
{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates\n\n# Test the function\nassert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"}
{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with whitespaces replaced.\n\n    Examples:\n        >>> replace_spaces('Jumanji The Jungle')\n        'Jumanji_The_Jungle'\n    \"\"\"\n    return string.replace(' ', '_')\n\n# Test the function\nassert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"}
{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Args:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with zeroes moved to the end.\n    \"\"\"\n    # Create a new list to store non-zero elements\n    new_lst = [num for num in lst if num != 0]\n\n    # Append zeroes to the end of the new list\n    new_lst.extend([0] * lst.count(0))\n\n    return new_lst\n\n# Test the function\nassert move_zero([1, 0, 2, 0, 3, 4]) == [1, 2, 3, 4, 0, 0]"}
{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, target):\n    result = 0\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                result ^= (nums[i] ^ nums[j])\n    return result\n\n# Test the function\nassert pair_xor_Sum([5, 9, 7, 6], 4) == 47"}
{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[i] < arr[left]:\n            largest = left\n\n        if right < n and arr[largest] < arr[right]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def build_heap(arr):\n        n = len(arr)\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n    def sort(arr):\n        n = len(arr)\n        build_heap(arr)\n        for i in range(n - 1, 0, -1):\n            arr[i], arr[0] = arr[0], arr[i]\n            heapify(arr, i, 0)\n        return arr\n\n    return sort(arr)\n\n# Test the function\nassert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"}
{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(amount, expected_amount):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Args:\n    amount (float): The actual amount.\n    expected_amount (float): The expected amount.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return amount == expected_amount\n\n# Test the function\nassert noprofit_noloss(1500, 1200) == False"}
{"task_id": "Mbpp/638", "solution": "def wind_chill(wind_velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Args:\n        wind_velocity (float): Wind velocity in km/h.\n        temperature (float): Temperature in celsius.\n\n    Returns:\n        int: Wind chill index rounded to the next integer.\n\n    Raises:\n        ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -40\u00b0C or greater than 40\u00b0C.\n\n    \"\"\"\n    if wind_velocity > 150:\n        raise ValueError(\"Wind velocity cannot be greater than 150 km/h.\")\n    if temperature < -40 or temperature > 40:\n        raise ValueError(\"Temperature must be between -40\u00b0C and 40\u00b0C.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (wind_velocity ** 0.16)) + (0.3965 * temperature * (wind_velocity ** 0.16))\n    return round(wind_chill_index + 0.5)\n\n# Test the function\nassert wind_chill(120, 35) == 40"}
{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Args:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    # Filter out names starting with lowercase letter\n    filtered_names = [name for name in names if not name[0].islower()]\n\n    # Calculate the sum of the lengths of the remaining names\n    total_length = sum(len(name) for name in filtered_names)\n\n    return total_length\n\n# Test the function\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16"}
{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Write a function to find the nth nonagonal number.\n    \"\"\"\n    return n * (3 * n - 2)\n\n# Test the function\nassert is_nonagonal(10) == 325"}
{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z', except at the start and end of the word.\n\n    Args:\n        text (str): The input string to check.\n\n    Returns:\n        bool: True if the string contains 'z', except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False\n\n# Test cases\nassert text_match_wordz_middle(\"pythonzabc.\") == True\nassert text_match_wordz_middle(\"pythonz\") == False\nassert text_match_wordz_middle(\"pythonzabc\") == False\nassert text_match_wordz_middle(\"pythonzabcy\") == True\nassert text_match_wordz_middle(\"pythonzabcyz\") == False"}
{"task_id": "Mbpp/644", "solution": "def reverse_array_upto_k(arr, k):\n    return arr[:k][::-1] + arr[k:]\n\n# Test the function\nassert reverse_array_upto_k([1, 2, 3, 4, 5, 6], 4) == [4, 3, 2, 1, 5, 6]"}
{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(t, d):\n    return t + (d,)\n\n# Test the function\nassert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"}
{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[float('-inf')] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(n):\n        for j in range(n):\n            if i > 0:\n                dp[i][j] = max(dp[i][j], dp[i-1][j] + matrix[i][j])\n            if j > 0:\n                dp[i][j] = max(dp[i][j], dp[i][j-1] + matrix[i][j])\n\n    return dp[n-1][n-1] / (n*n - 1)\n\n# Test the function\nassert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2"}
{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for student, (height, weight) in students.items():\n        if height > min_height and weight > min_weight:\n            filtered_students[student] = (height, weight)\n    return filtered_students\n\n# Test the function\nstudents_data = {'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}\nmin_height = 6.0\nmin_weight = 70\nexpected_output = {'Cierra Vega': (6.2, 70)}\nassert filter_data(students_data, min_height, min_weight) == expected_output"}
{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n    return count\n\n# Test the function\nassert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9]) == 4"}
{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum\n\n# Test the function\nassert power_base_sum(2, 100) == 115"}
{"task_id": "Mbpp/725", "solution": "import re\n\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        list: A list of values extracted between quotation marks.\n\n    Examples:\n        >>> extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')\n        ['A53', 'multi', 'Processor']\n    \"\"\"\n    return re.findall(r'\"([^\"]*)\"', string)\n\n# Test the function\nassert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']"}
{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))\n\n# Test the function\nassert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)"}
{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list containing the sum of corresponding elements from the input lists.\n\n    Args:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list containing the sum of corresponding elements from list1 and list2.\n\n    Raises:\n    ValueError: If the input lists have different lengths.\n\n    Examples:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    >>> sum_list([1, 2, 3], [4, 5, 6, 7])\n    Traceback (most recent call last):\n    ...\n    ValueError: Input lists must have the same length.\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    return [a + b for a, b in zip(list1, list2)]"}
{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    result = []\n    for item in lst:\n        if not result or item != result[-1]:\n            result.append(item)\n    return result\n\n# Test the function\nassert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ]) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"}
{"task_id": "Mbpp/731", "solution": "import math\n\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculates the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n\n    \"\"\"\n    # Check if the radius and height are positive numbers\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Radius and height must be positive numbers.\")\n\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area\n\n# Test the function\nassert lateralsurface_cone(5, 12) == 204.20352248333654"}
{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The modified string with spaces, commas, or dots replaced by colons.\n    \"\"\"\n    return string.replace(' ', ':').replace(',', ':').replace('.', ':')\n\n# Test the function\nassert replace_specialchar('Python language, Programming language.') == 'Python:language::Programming:language:'"}
{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result\n\n# Test the function\nassert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1"}
{"task_id": "Mbpp/734", "solution": "def sum_of_subarray_prod(lst):\n    \"\"\"\n    Calculate the sum of products of all possible sublists of a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The sum of products of all possible sublists.\n\n    Examples:\n    >>> sum_of_subarray_prod([1, 2, 3])\n    20\n    >>> sum_of_subarray_prod([1, 2, 3, 4])\n    56\n    >>> sum_of_subarray_prod([1, 2, 3, 4, 5])\n    132\n    \"\"\"\n    total_sum = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)+1):\n            sublist = lst[i:j]\n            product = 1\n            for num in sublist:\n                product *= num\n            total_sum += product\n    return total_sum"}
{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    # Check if the number is less than 3, in which case there are no bits to toggle\n    if num < 3:\n        return num\n    \n    # Calculate the mask to toggle all bits except the first and last bit\n    mask = (1 << (num.bit_length() - 1)) - 1\n    \n    # Toggle the bits using the mask\n    toggled_num = num ^ mask\n    \n    return toggled_num\n\n# Test the function\nassert toggle_middle_bits(9) == 15"}
{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Find the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to find the left insertion point for.\n\n    Returns:\n    int: The index of the left insertion point.\n\n    Examples:\n    >>> left_insertion([1, 2, 4, 5], 6)\n    4\n    >>> left_insertion([1, 2, 4, 5], 0)\n    0\n    >>> left_insertion([1, 2, 4, 5], 3)\n    2\n    \"\"\"\n\n    # Initialize the left and right boundaries\n    left = 0\n    right = len(arr)\n\n    # Perform binary search to find the left insertion point\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "Mbpp/737", "solution": "import re\n\ndef check_str(string):\n    \"\"\"\n    Check whether the given string is starting with a vowel using regex.\n\n    Args:\n        string (str): The string to be checked.\n\n    Returns:\n        bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU]'\n    return bool(re.match(pattern, string))\n\n# Test the function\nassert check_str(\"annie\")"}
{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    \"\"\"\n\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is a triangular number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a triangular number, False otherwise.\n\n        \"\"\"\n        triangular_num = 1\n        n = 1\n        while triangular_num < num:\n            n += 1\n            triangular_num += n\n        return triangular_num == num\n\n    index = 1\n    triangular_num = 1\n    while len(str(triangular_num)) < n:\n        index += 1\n        triangular_num += index\n    return index\n\n# Test the function\nassert find_Index(2) == 4"}
{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    d = {}\n    for i in range(0, len(t), 2):\n        if i+1 < len(t):\n            d[t[i]] = t[i+1]\n    return d\n\n# Test the function\nassert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}"}
{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check whether all the characters in a string are the same.\n\n    Args:\n        string (str): The input string to check.\n\n    Returns:\n        bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1\n\n# Test cases\nassert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaaaa\") == True\nassert all_Characters_Same(\"\") == True"}
{"task_id": "Mbpp/742", "solution": "import math\n\ndef area_tetrahedron(a):\n    \"\"\"\n    Calculate the area of a tetrahedron with side length 'a'.\n\n    Parameters:\n    a (float): Side length of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n\n    \"\"\"\n    # Calculate the area of an equilateral triangle\n    triangle_area = (math.sqrt(3) * a**2) / 4\n\n    # Calculate the area of the base triangle\n    base_area = math.sqrt(3) * (a**2) / 4\n\n    # Calculate the total area of the tetrahedron\n    total_area = 4 * triangle_area + base_area\n\n    return total_area\n\n# Test the function\nassert area_tetrahedron(3) == 15.588457268119894"}
{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    return lst[-num_items:] + lst[:-num_items]\n\n# Test the function\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]"}
{"task_id": "Mbpp/744", "solution": "def check_none(t):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Args:\n        t (tuple): The input tuple to check.\n\n    Returns:\n        bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(x is None for x in t)\n\n# Test the function\nassert check_none((10, 4, 5, 6, None)) == True"}
{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result\n\n# Test the function\nassert divisible_by_digits(1, 22) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"}
{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    words = string.split()\n    words = [word.capitalize() for word in words]\n    return ' '.join(words)\n\n# Test the function\nassert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgramming\") == 'Python Programming'\nassert capital_words_spaces(\"pythonIsAwesome\") == 'python Is Awesome'\nassert capital_words_spaces(\"helloWorld\") == 'hello World'"}
{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(lst):\n    return sorted(lst, key=lambda x: int(x))\n\n# Test the function\nassert sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500']) == [-500, -12, 0, 4, 7, 12, 45, 100, 200]"}
{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tpl):\n    return lst + list(tpl)\n\n# Test the function\nassert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]"}
{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    n = len(arr)\n    for i in range(n):\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < n and arr[i] > arr[left_child]:\n            return False\n\n        if right_child < n and arr[i] > arr[right_child]:\n            return False\n\n    return True\n\n# Test cases\nassert check_min_heap([1, 2, 3, 4, 5, 6]) == True\nassert check_min_heap([6, 5, 4, 3, 2, 1]) == False\nassert check_min_heap([5, 4, 3, 2, 1]) == True\nassert check_min_heap([1, 2, 3, 4, 5]) == False\nassert check_min_heap([1, 2, 3, 4, 5, 6, 7]) == True\nassert check_min_heap([7, 6, 5, 4, 3, 2, 1]) == False"}
{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n-1) + 2 * jacobsthal_num(n-2)\n\n# Test the function\nassert jacobsthal_num(5) == 11"}
{"task_id": "Mbpp/753", "solution": "def min_k(records, k):\n    sorted_records = sorted(records, key=lambda x: x[1])  # Sort the records based on the second element of each tuple\n    return sorted_records[:k]  # Return the first k records\n\n# Test cases\nassert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('John', 5), ('Jane', 8), ('Adam', 3), ('Eve', 9)], 3) == [('Adam', 3), ('John', 5), ('Jane', 8)]\nassert min_k([('Alice', 7), ('Bob', 6), ('Charlie', 5), ('David', 4)], 4) == [('David', 4), ('Alice', 7), ('Bob', 6), ('Charlie', 5)]\n```"}
{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements\n\n# Test the function\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7]) == [1, 7]"}
{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        int: The second smallest number in the list.\n\n    Raises:\n        ValueError: If the list has less than two elements.\n\n    \"\"\"\n    if len(numbers) < 2:\n        raise ValueError(\"List must have at least two elements\")\n\n    smallest = min(numbers)\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n\n    return second_smallest\n\n# Test the function\nassert second_smallest([1, 2, -8, -2, 0, -2]) == -2"}
{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count\n\n# Test the function\nassert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"]) == 2"}
{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_count = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_count:\n            sublist_count[sublist_tuple] += 1\n        else:\n            sublist_count[sublist_tuple] = 1\n    return sublist_count\n\n# Test the function\nassert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]]) == {(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}"}
{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        return string.count('.') == 1 and len(string.split('.')[-1]) == 2\n    except ValueError:\n        return False\n\n# Test cases\nassert is_decimal('123.11') == True\nassert is_decimal('123.111') == False\nassert is_decimal('123') == False\nassert is_decimal('123.') == False\nassert is_decimal('123.1') == False\nassert is_decimal('123.111') == False\nassert is_decimal('abc') == False"}
{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check whether a list of numbers contains only one distinct element or not.\n\n    Args:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1\n\n# Test cases\nassert unique_Element([1, 1, 1]) == True\nassert unique_Element([1, 2, 3]) == False\nassert unique_Element([]) == True\nassert unique_Element([1]) == True\nassert unique_Element([1, 1, 1, 1, 1, 1]) == True\nassert unique_Element([1, 2, 1, 2, 1, 2]) == False"}
{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    thirty_day_months = [4, 6, 9, 11]  # Months with 30 days\n\n    if month_number in thirty_day_months:\n        return True\n    else:\n        return False\n\n# Test the function\nassert check_monthnumber_number(6) == True"}
{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    # Sort the array in ascending order\n    arr.sort()\n    \n    # Initialize the minimum difference with a large value\n    min_diff = float('inf')\n    \n    # Iterate through the sorted array to find the minimum difference\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    \n    return min_diff\n\n# Test the function\nassert find_min_diff((1, 5, 3, 19, 18, 25), 6) == 1"}
{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count\n\n# Test the function\nassert number_ctr('program2bedone') == 1"}
{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 2\n    while count < n:\n        if is_prime(num):\n            count += 1\n        num += 1\n    return num - 1\n\n# Test the function\nassert is_polite(7) == 11"}
{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    return [(lst[i], lst[i+1]) for i in range(len(lst)-1)]\n\n# Test the function\nassert pair_wise([1, 1, 2, 3, 3, 4, 4, 5]) == [(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"}
{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    num_counts = {}\n    \n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        \n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n    \n    return count\n\n# Test cases\nassert get_pairs_count([1, 1, 1, 1], 2) == 6\nassert get_pairs_count([1, 5, 7, -1, 5], 6) == 3\nassert get_pairs_count([1, 5, 7, -1, 5], 10) == 2"}
{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return [i for i in li1 + li2 if i not in li1 or i not in li2]\n\n# Test the function\nassert Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35]) == [10, 20, 30, 15]"}
{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum\n\n# Test the function\nassert odd_num_sum(2) == 82"}
{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    opening_brackets = ['(', '[', '{']\n    closing_brackets = [')', ']', '}']\n    stack = []\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack:\n                return False\n            if opening_brackets.index(stack.pop()) != closing_brackets.index(char):\n                return False\n\n    return len(stack) == 0\n\n# Test cases\nassert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"({[}])\") == False\nassert check_expression(\"({[}]\") == False\nassert check_expression(\"({[]})\") == True"}
{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Removes all words with length k from the given string.\n\n    Args:\n        string (str): The input string.\n        k (int): The length of words to be removed.\n\n    Returns:\n        str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)\n\n# Test the function\nassert remove_length('The person is most value tet', 3) == 'person is most value'"}
{"task_id": "Mbpp/773", "solution": "def find_occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Args:\n        string (str): The input string.\n        substring (str): The substring to search for.\n\n    Returns:\n        tuple or None: A tuple containing the substring, starting index, and ending index of the match, or None if no match is found.\n    \"\"\"\n    start_index = string.find(substring)\n    if start_index == -1:\n        return None\n    else:\n        return (substring, start_index, start_index + len(substring))\n\n# Test the function\nassert find_occurance_substring('python programming, python language', 'python') == ('python', 0, 6)"}
{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check whether every odd index contains odd numbers of a given list.\n\n    Args:\n        lst (list): The input list.\n\n    Returns:\n        bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True\n\n# Test the function\nassert odd_position([2,1,4,3,6,7,6,3]) == True"}
{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    unique_elements = set()\n    repeated_elements = set()\n    for num in lst:\n        if num in unique_elements:\n            repeated_elements.add(num)\n        else:\n            unique_elements.add(num)\n    return sum(unique_elements - repeated_elements)\n\n# Test the function\nassert find_sum([1, 2, 3, 1, 1, 4, 5, 6]) == 21"}
{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = [lst[i]]\n        else:\n            current_sublist.append(lst[i])\n    result.append(current_sublist)\n    return result\n\n# Test the function\nassert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]) == [[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"}
{"task_id": "Mbpp/780", "solution": "def find_combinations(tuple_list):\n    combinations = []\n    for i in range(len(tuple_list)):\n        for j in range(i+1, len(tuple_list)):\n            combinations.append((tuple_list[i][0] + tuple_list[j][0], tuple_list[i][1] + tuple_list[j][1]))\n            combinations.append((tuple_list[i][0] + tuple_list[j][1], tuple_list[i][1] + tuple_list[j][0]))\n    return combinations\n\n# Test the function\nassert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"}
{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0\n\n# Test the function\nassert count_divisors(10)"}
{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    n = len(arr)\n    result = 0\n    \n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            if len(subarray) % 2 == 1:\n                result += sum(subarray)\n    \n    return result\n\n# Test cases\nassert odd_length_sum([1,2,4]) == 14\nassert odd_length_sum([1,2,3,4]) == 20\nassert odd_length_sum([1,2,3,4,5]) == 35"}
{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    \n    if len(even_numbers) > 0 and len(odd_numbers) > 0:\n        return even_numbers[0] * odd_numbers[0]\n    else:\n        return 0\n\n# Test the function\nassert mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8]) == 4"}
{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Converts a string representation of a tuple to an integer tuple.\n\n    Args:\n        tuple_str (str): A string representation of a tuple.\n\n    Returns:\n        tuple: An integer tuple.\n\n    Raises:\n        ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n        >>> tuple_str_int(\"(7, 8, 9)\")\n        (7, 8, 9)\n        >>> tuple_str_int(\"(10, 20, 30, 40)\")\n        (10, 20, 30, 40)\n        >>> tuple_str_int(\"(1, 2, 3, 4, 5)\")\n        (1, 2, 3, 4, 5)\n    \"\"\"\n    try:\n        # Remove the outer parentheses from the string\n        tuple_str = tuple_str.strip('()')\n\n        # Split the string by commas and convert each element to an integer\n        int_tuple = tuple(map(int, tuple_str.split(',')))\n\n        return int_tuple\n    except ValueError:\n        raise ValueError(\"Invalid tuple representation\")\n\n# Test the function\nassert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(10, 20, 30, 40)\") == (10, 20, 30, 40)\nassert tuple_str_int(\"(1, 2, 3, 4, 5)\") == (1, 2, 3, 4, 5)"}
{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, value):\n    \"\"\"\n    Find the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): A sorted list of integers.\n    value (int): The value to find the insertion point for.\n\n    Returns:\n    int: The index of the right insertion point.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    \"\"\"\n\n    # Initialize the left and right pointers\n    left = 0\n    right = len(arr)\n\n    # Binary search for the right insertion point\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left"}
{"task_id": "Mbpp/787", "solution": "import re\n\ndef text_match_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by three 'b'.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))\n\n# Test cases\nassert not text_match_three(\"ac\")\nassert text_match_three(\"abbb\")\nassert not text_match_three(\"abb\")\nassert not text_match_three(\"ab\")\nassert not text_match_three(\"a\")"}
{"task_id": "Mbpp/788", "solution": "def new_tuple(lst, string):\n    return tuple(lst + [string])\n\n# Test the function\nassert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')"}
{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Args:\n    lst (list): The input list to be checked.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True\n\n# Test cases\nassert even_position([3,2,1]) == False\nassert even_position([2,4,6,8]) == True\nassert even_position([2,4,5,6,8]) == False\nassert even_position([2,4,6,8,10]) == True"}
{"task_id": "Mbpp/791", "solution": "def remove_nested(t):\n    \"\"\"\n    Removes tuples from the given tuple.\n\n    Args:\n        t (tuple): The input tuple.\n\n    Returns:\n        tuple: The modified tuple with nested tuples removed.\n\n    Examples:\n        >>> remove_nested((1, 5, 7, (4, 6), 10))\n        (1, 5, 7, 10)\n    \"\"\"\n    result = []\n    for item in t:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)\n\n# Test the function\nassert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)"}
{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    count = 0\n    for lst in lists:\n        if isinstance(lst, list):\n            count += 1\n    return count\n\n# Test the function\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4"}
{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    low = 0\n    high = len(arr) - 1\n    result = -1\n\n    while low <= high:\n        mid = (low + high) // 2\n\n        if arr[mid] == target:\n            result = mid\n            low = mid + 1\n        elif arr[mid] < target:\n            low = mid + 1\n        else:\n            high = mid - 1\n\n    return result\n\n# Test cases\nassert last([1, 2, 3], 1) == 0\nassert last([1, 2, 3], 2) == 1\nassert last([1, 2, 3], 3) == 2\nassert last([1, 2, 2, 3], 2) == 3\nassert last([1, 2, 3], 4) == -1"}
{"task_id": "Mbpp/794", "solution": "import re\n\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    \n    Args:\n        text (str): The input text to be checked.\n    \n    Returns:\n        bool: True if the text matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))\n\n# Test the function\nassert text_starta_endb(\"aabbbb\")\nassert not text_starta_endb(\"ababab\")\nassert not text_starta_endb(\"bbaaaa\")\nassert text_starta_endb(\"aaabbb\")\nassert text_starta_endb(\"aab\")\nassert not text_starta_endb(\"ab\")\nassert not text_starta_endb(\"bba\")"}
{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    return sum(dictionary.values())\n\n# Test the function\nassert return_sum({'a': 100, 'b':200, 'c':300}) == 600"}
{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    if l > r:\n        return 0\n    elif l % 2 == 0:\n        l += 1\n    return sum(range(l, r+1, 2))\n\n# Test the function\nassert sum_in_range(2, 5) == 8"}
{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    Write a python function to find the sum of an array.\n    \"\"\"\n    return sum(arr)\n\n# Test the function\nassert _sum([1, 2, 3]) == 6"}
{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Rotate left bits by d bits a given number.\n\n    Args:\n        num (int): The number to be rotated.\n        d (int): The number of bits to rotate.\n\n    Returns:\n        int: The rotated number.\n\n    Raises:\n        ValueError: If the number is not a 32-bit integer or the rotation amount is negative.\n\n    Examples:\n        >>> left_rotate(16, 2)\n        64\n        >>> left_rotate(10, 3)\n        360\n    \"\"\"\n    if not isinstance(num, int) or num.bit_length() > 32:\n        raise ValueError(\"Number must be a 32-bit integer\")\n    if not isinstance(d, int) or d < 0:\n        raise ValueError(\"Rotation amount must be a non-negative integer\")\n\n    # Convert the number to binary representation\n    binary_num = bin(num)[2:]\n\n    # Rotate the binary representation\n    rotated_binary = binary_num[d:] + binary_num[:d]\n\n    # Convert the rotated binary representation back to decimal\n    rotated_num = int(rotated_binary, 2)\n\n    return rotated_num"}
{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Removes all whitespaces from a string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        str: The string with all whitespaces removed.\n    \"\"\"\n    return ''.join(string.split())\n\n# Test the function\nassert remove_all_spaces('python  program') == 'pythonprogram'"}
{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    Write a python function to count the number of equal numbers from three given integers.\n    \"\"\"\n    count = 0\n    if a == b:\n        count += 1\n    if b == c:\n        count += 1\n    if a == c:\n        count += 1\n    return count\n\n# Test the function\nassert test_three_equal(1, 1, 1) == 3\nassert test_three_equal(1, 2, 3) == 0\nassert test_three_equal(1, 1, 2) == 2\nassert test_three_equal(1, 2, 1) == 2\nassert test_three_equal(2, 1, 1) == 2\nassert test_three_equal(1, 2, 2) == 2\nassert test_three_equal(2, 2, 1) == 2\nassert test_three_equal(2, 2, 2) == 3"}
{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check whether the given number is a perfect square or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    if num == 0:\n        return True\n\n    start = 1\n    end = num\n\n    while start <= end:\n        mid = (start + end) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            start = mid + 1\n        else:\n            end = mid - 1\n\n    return False\n\n# Testing the function\nassert not is_perfect_square(10)"}
{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Args:\n        numbers (list): A list of numbers.\n\n    Returns:\n        bool: True if the product is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0\n\n# Test the function\nassert is_product_even([1, 2, 3]) == False\nassert is_product_even([2, 4, 6]) == True\nassert is_product_even([1, 2, 3, 4, 5, 6]) == False\nassert is_product_even([2, 4, 6, 8]) == True"}
{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    max_sum = float('-inf')\n    max_list = []\n    \n    for sub_lst in lst:\n        sub_sum = sum(sub_lst)\n        if sub_sum > max_sum:\n            max_sum = sub_sum\n            max_list = sub_lst\n    \n    return max_list\n\n# Test the function\nassert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]]) == [10, 11, 12]"}
{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Finds the maximum run of uppercase characters in the given string.\n\n    Args:\n        string (str): The input string.\n\n    Returns:\n        int: The maximum run of uppercase characters.\n\n    Examples:\n        >>> max_run_uppercase('GeMKSForGERksISBESt')\n        5\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n            max_run = max(max_run, current_run)\n        else:\n            current_run = 0\n\n    return max_run\n\n# Test the function\nassert max_run_uppercase('GeMKSForGERksISBESt') == 5"}
{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    return None\n\n# Test cases\nassert first_odd([1, 3, 5]) == 1\nassert first_odd([2, 4, 6]) == None\nassert first_odd([-1, -3, -5]) == -1\nassert first_odd([1, 2, 3, 4, 5]) == 1\nassert first_odd([2, 4, 6, 8, 10]) == None"}
{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k.\n\n    Args:\n        tup (tuple): The input tuple.\n        k: The value to check for in the tuple.\n\n    Returns:\n        bool: True if the k is found in the tuple, False otherwise.\n    \"\"\"\n    return k in tup\n\n# Test the function\nassert check_K((10, 4, 5, 6, 8), 6) == True"}
{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Args:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True\n\n# Test the function\nassert check_smaller((1, 2, 3), (2, 3, 4)) == False"}
