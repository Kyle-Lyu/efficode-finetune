{"date": "2025-02-08 17:00", "hash": "ee43ecabebf20deef4bb776a405ac5b1", "eval": {"Mbpp/2": [{"task_id": "Mbpp/2", "solution": "def similar_elements(list1, list2):\n    \"\"\"\n    Find the shared elements from the given two lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    set: A set containing the shared elements.\n\n    Example:\n    >>> set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10)))\n    {4, 5}\n    \"\"\"\n    set1 = set(list1)\n    set2 = set(list2)\n    shared_elements = set1.intersection(set2)\n    return shared_elements", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/88": [{"task_id": "Mbpp/88", "solution": "def freq_count(lst):\n    freq_dict = {}\n    for element in lst:\n        if element in freq_dict:\n            freq_dict[element] += 1\n        else:\n            freq_dict[element] = 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/101": [{"task_id": "Mbpp/101", "solution": "def kth_element(arr, k):\n    \"\"\"\n    Function to find the kth element in the given array using 1-based indexing.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position of the element to find (1-based indexing).\n\n    Returns:\n    int: The kth element in the array.\n\n    Raises:\n    ValueError: If the kth element does not exist in the array.\n\n    Examples:\n    >>> kth_element([12, 3, 5, 7, 19], 2)\n    3\n    >>> kth_element([12, 3, 5, 7, 19], 5)\n    19\n    >>> kth_element([12, 3, 5, 7, 19], 6)\n    Traceback (most recent call last):\n        ...\n    ValueError: The kth element does not exist in the array.\n    \"\"\"\n    if k < 1 or k > len(arr):\n        raise ValueError(\"The kth element does not exist in the array.\")\n    return sorted(arr)[k - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[12, 3, 5, 7, 19], 2]], "plus_fail_tests": [[[100, 99, 98, 97, 96], 5]]}], "Mbpp/67": [{"task_id": "Mbpp/67", "solution": "def bell_number(n):\n    \"\"\"\n    Function to find the number of ways to partition a set of Bell numbers.\n\n    Parameters:\n    n (int): The number of Bell numbers to partition.\n\n    Returns:\n    int: The number of ways to partition the set of Bell numbers.\n\n    Examples:\n    >>> bell_number(2)\n    2\n    \"\"\"\n\n    # Base case\n    if n == 0:\n        return 1\n\n    # Initialize the list to store Bell numbers\n    bell = [0] * (n + 1)\n\n    # Initialize the first Bell number\n    bell[0] = 1\n\n    # Calculate the remaining Bell numbers\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 1]\n\n    # Return the number of ways to partition the set of Bell numbers\n    return bell[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[100]]}], "Mbpp/58": [{"task_id": "Mbpp/58", "solution": "def opposite_Signs(num1, num2):\n    \"\"\"\n    Check whether the given two integers have opposite sign or not.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    bool: True if the two integers have opposite signs, False otherwise.\n    \"\"\"\n    return (num1 ^ num2) < 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/87": [{"task_id": "Mbpp/87", "solution": "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {}\n    for d in (dict1, dict2, dict3):\n        merged_dict.update(d)\n    return merged_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/89": [{"task_id": "Mbpp/89", "solution": "def closest_num(n):\n    \"\"\"\n    Write a function to find the closest smaller number than n.\n\n    Parameters:\n    n (int): The number to find the closest smaller number for.\n\n    Returns:\n    int: The closest smaller number than n.\n\n    Examples:\n    >>> closest_num(11)\n    10\n    >>> closest_num(10)\n    9\n    >>> closest_num(0)\n    -1\n    \"\"\"\n    if n <= 0:\n        return -1\n    else:\n        return n - 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/17": [{"task_id": "Mbpp/17", "solution": "def square_perimeter(side_length):\n    \"\"\"\n    This function takes the side length of a square as input and returns its perimeter.\n\n    Parameters:\n    side_length (float or int): The length of one side of the square.\n\n    Returns:\n    float: The perimeter of the square.\n    \"\"\"\n    return 4 * side_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/14": [{"task_id": "Mbpp/14", "solution": "def find_Volume(base, height, length):\n    \"\"\"\n    This function takes three parameters: base, height, and length of a triangular prism.\n    It calculates and returns the volume of the triangular prism.\n\n    Parameters:\n    base (float): The base of the triangular prism.\n    height (float): The height of the triangular prism.\n    length (float): The length of the triangular prism.\n\n    Returns:\n    float: The volume of the triangular prism.\n    \"\"\"\n    volume = (base * height * length) / 2\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/94": [{"task_id": "Mbpp/94", "solution": "def index_minimum(lst):\n    \"\"\"\n    Given a list of tuples, return the first value of the tuple with the smallest second value.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    str: The first value of the tuple with the smallest second value.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])\n    'Varsha'\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    min_tuple = min(lst, key=lambda x: x[1])\n    return min_tuple[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/59": [{"task_id": "Mbpp/59", "solution": "def is_octagonal(n):\n    \"\"\"\n    Function to find the nth octagonal number.\n\n    Parameters:\n    n (int): The position of the octagonal number to find.\n\n    Returns:\n    int: The nth octagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_octagonal(5)\n    65\n    >>> is_octagonal(10)\n    1215\n    >>> is_octagonal(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (3 * n - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/95": [{"task_id": "Mbpp/95", "solution": "def Find_Min_Length(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the length of the smallest list.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    int: The length of the smallest list.\n    \"\"\"\n    min_length = float('inf')  # Initialize min_length to infinity\n\n    for sublist in lst:\n        length = len(sublist)\n        if length < min_length:\n            min_length = length\n\n    return min_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/19": [{"task_id": "Mbpp/19", "solution": "def test_duplicate(arr):\n    \"\"\"\n    Function to find whether a given array of integers contains any duplicate element.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    bool: True if the array contains any duplicate element, False otherwise.\n    \"\"\"\n    return len(arr) != len(set(arr))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/97": [{"task_id": "Mbpp/97", "solution": "def frequency_lists(lst):\n    freq_dict = {}\n    for sublist in lst:\n        for item in sublist:\n            freq_dict[item] = freq_dict.get(item, 0) + 1\n    return freq_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/99": [{"task_id": "Mbpp/99", "solution": "def decimal_to_binary(decimal):\n    if decimal == 0:\n        return '0'\n\n    binary = ''\n    while decimal > 0:\n        binary = str(decimal % 2) + binary\n        decimal = decimal // 2\n\n    return binary", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-5]]}], "Mbpp/93": [{"task_id": "Mbpp/93", "solution": "def power(a, b):\n    \"\"\"\n    Calculate the value of 'a' to the power 'b'.\n\n    Parameters:\n    a (int or float): The base number.\n    b (int): The exponent.\n\n    Returns:\n    int or float: The result of raising 'a' to the power 'b'.\n    \"\"\"\n    return a ** b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/105": [{"task_id": "Mbpp/105", "solution": "def count(lst):\n    \"\"\"\n    Write a python function to count true booleans in the given list.\n\n    Parameters:\n    lst (list): A list of booleans.\n\n    Returns:\n    int: The count of true booleans in the list.\n\n    Examples:\n    >>> count([True, False, True])\n    2\n    >>> count([False, False, False])\n    0\n    >>> count([True, True, True])\n    3\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/80": [{"task_id": "Mbpp/80", "solution": "def tetrahedral_number(n):\n    \"\"\"\n    Function to find the nth tetrahedral number.\n\n    Parameters:\n    n (int): The position of the tetrahedral number to find.\n\n    Returns:\n    int: The nth tetrahedral number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> tetrahedral_number(5)\n    35\n    >>> tetrahedral_number(1)\n    1\n    >>> tetrahedral_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    return (n * (n + 1) * (n + 2)) // 6", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[false]]}], "Mbpp/7": [{"task_id": "Mbpp/7", "solution": "def find_char_long(string):\n    \"\"\"\n    This function takes a string as input and returns a list of all words that are at least 4 characters long.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of words that are at least 4 characters long.\n    \"\"\"\n    words = string.split()\n    result = [word for word in words if len(word) >= 4]\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["This is a very long string with no words that are at least 4 characters long."]]}], "Mbpp/18": [{"task_id": "Mbpp/18", "solution": "def remove_dirty_chars(string1, string2):\n    \"\"\"\n    Remove characters from the first string which are present in the second string.\n\n    Parameters:\n    string1 (str): The first string.\n    string2 (str): The second string.\n\n    Returns:\n    str: The modified string with characters removed.\n    \"\"\"\n    clean_string = \"\"\n    for char in string1:\n        if char not in string2:\n            clean_string += char\n    return clean_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/113": [{"task_id": "Mbpp/113", "solution": "def check_integer(string):\n    \"\"\"\n    Check if a string represents an integer or not.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string represents an integer, False otherwise.\n    \"\"\"\n    try:\n        int(string)\n        return True\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/82": [{"task_id": "Mbpp/82", "solution": "import math\ndef volume_sphere(radius):\n    \"\"\"\n    Calculate the volume of a sphere given its radius.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The volume of the sphere.\n    \"\"\"\n    return (4/3) * math.pi * (radius ** 3)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/79": [{"task_id": "Mbpp/79", "solution": "def word_len(word):\n    \"\"\"\n    Check whether the length of the word is odd or not.\n\n    Parameters:\n    word (str): The word to check.\n\n    Returns:\n    bool: True if the length of the word is odd, False otherwise.\n    \"\"\"\n    return len(word) % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/3": [{"task_id": "Mbpp/3", "solution": "def is_not_prime(n):\n    \"\"\"\n    Check if a number is not prime.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is not prime, False otherwise.\n    \"\"\"\n    if n < 2:\n        return True\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/65": [{"task_id": "Mbpp/65", "solution": "def recursive_list_sum(lst):\n    \"\"\"\n    Recursively flattens a list and sums all its elements.\n\n    Parameters:\n    lst (list): The list to be flattened and summed.\n\n    Returns:\n    int: The sum of all elements in the flattened list.\n    \"\"\"\n    total_sum = 0\n\n    for item in lst:\n        if isinstance(item, list):\n            total_sum += recursive_list_sum(item)\n        else:\n            total_sum += item\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/9": [{"task_id": "Mbpp/9", "solution": "def find_Rotations(s):\n    \"\"\"\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The minimum number of rotations required to get the same string.\n\n    Examples:\n    >>> find_Rotations(\"aaaa\")\n    1\n    >>> find_Rotations(\"abcde\")\n    5\n    >>> find_Rotations(\"abcd\")\n    4\n    \"\"\"\n\n    # Check if the string is empty or has only one character\n    if len(s) <= 1:\n        return 0\n\n    # Concatenate the string with itself to form a circular string\n    circular_string = s + s\n\n    # Find the length of the original string\n    original_length = len(s)\n\n    # Find the length of the circular string\n    circular_length = len(circular_string)\n\n    # Find the index of the first character of the original string in the circular string\n    index = circular_string.index(s[0])\n\n    # Calculate the number of rotations required\n    rotations = index - original_length\n\n    # Return the minimum number of rotations required\n    return rotations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["aaaa"]], "plus_fail_tests": [["aaaaaaaaaaaaaaaab"]]}], "Mbpp/62": [{"task_id": "Mbpp/62", "solution": "def smallest_num(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns the smallest number in the list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The smallest number in the list.\n    \"\"\"\n    smallest = numbers[0]\n    for num in numbers:\n        if num < smallest:\n            smallest = num\n    return smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/103": [{"task_id": "Mbpp/103", "solution": "def eulerian_num(n, m):\n    \"\"\"\n    Calculate the Eulerian number a(n, m) using a recursive approach.\n\n    Parameters:\n    n (int): The number of vertices in the graph.\n    m (int): The number of edges in the graph.\n\n    Returns:\n    int: The Eulerian number a(n, m).\n\n    \"\"\"\n    if m == 0:\n        return 1\n    elif n == 0:\n        return 0\n    else:\n        return (n - m) * eulerian_num(n - 1, m) + eulerian_num(n, m - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 1]], "plus_fail_tests": [[0, 0]]}], "Mbpp/100": [{"task_id": "Mbpp/100", "solution": "def next_smallest_palindrome(n):\n    \"\"\"\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    assert next_smallest_palindrome(99)==101\n    \"\"\"\n    def is_palindrome(num):\n        return str(num) == str(num)[::-1]\n\n    def increment_number(num):\n        return num + 1\n\n    def find_next_smallest_palindrome(num):\n        while True:\n            if is_palindrome(num):\n                return num\n            num = increment_number(num)\n\n    return find_next_smallest_palindrome(n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[99]], "plus_fail_tests": [[0]]}], "Mbpp/6": [{"task_id": "Mbpp/6", "solution": "def differ_At_One_Bit_Pos(num1, num2):\n    \"\"\"\n    Check whether the two numbers differ at one bit position only.\n\n    Parameters:\n    num1 (int): The first number.\n    num2 (int): The second number.\n\n    Returns:\n    bool: True if the numbers differ at one bit position, False otherwise.\n    \"\"\"\n    # XOR the two numbers to find the bit positions where they differ\n    xor_result = num1 ^ num2\n\n    # Count the number of set bits in the XOR result\n    count = 0\n    while xor_result > 0:\n        count += xor_result & 1\n        xor_result >>= 1\n\n    # If the count is exactly 1, the numbers differ at one bit position\n    return count == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/111": [{"task_id": "Mbpp/111", "solution": "def common_in_nested_lists(nested_lists):\n    \"\"\"\n    Find the common elements in given nested lists.\n\n    Parameters:\n    nested_lists (list): A list of lists containing elements.\n\n    Returns:\n    list: A list containing the common elements found in the nested lists.\n\n    Example:\n    >>> common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])\n    [18, 12]\n    \"\"\"\n    common_elements = set(nested_lists[0])\n    for lst in nested_lists[1:]:\n        common_elements = common_elements.intersection(lst)\n    return list(common_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/20": [{"task_id": "Mbpp/20", "solution": "def is_woodall(n):\n    \"\"\"\n    Check if the given number is woodball or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is woodball, False otherwise.\n    \"\"\"\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    def is_power_of_two(num):\n        return num != 0 and (num & (num - 1)) == 0\n\n    if not is_prime(n):\n        return False\n\n    if not is_power_of_two(n):\n        return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[383]], "plus_fail_tests": [[true]]}], "Mbpp/86": [{"task_id": "Mbpp/86", "solution": "def centered_hexagonal_number(n):\n    \"\"\"\n    Function to find the nth centered hexagonal number.\n\n    Parameters:\n    n (int): The position of the centered hexagonal number to find.\n\n    Returns:\n    int: The nth centered hexagonal number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> centered_hexagonal_number(10)\n    271\n    >>> centered_hexagonal_number(1)\n    1\n    >>> centered_hexagonal_number(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be greater than or equal to 1.\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    return n * (2 * n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/57": [{"task_id": "Mbpp/57", "solution": "def find_Max_Num(digits):\n    \"\"\"\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    \"\"\"\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/66": [{"task_id": "Mbpp/66", "solution": "def pos_count(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the count of positive numbers in the list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The count of positive numbers in the list.\n    \"\"\"\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/102": [{"task_id": "Mbpp/102", "solution": "def snake_to_camel(snake_str):\n    \"\"\"\n    Convert a snake case string to camel case string.\n\n    Parameters:\n    snake_str (str): The snake case string to be converted.\n\n    Returns:\n    str: The camel case string.\n    \"\"\"\n    words = snake_str.split('_')\n    camel_str = ''.join(word.capitalize() for word in words)\n    return camel_str[0].lower() + camel_str[1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python_program"]], "plus_fail_tests": [["___python_program"]]}], "Mbpp/85": [{"task_id": "Mbpp/85", "solution": "import math\ndef surfacearea_sphere(radius):\n    \"\"\"\n    Calculate the surface area of a sphere.\n\n    Parameters:\n    radius (float): The radius of the sphere.\n\n    Returns:\n    float: The surface area of the sphere.\n    \"\"\"\n    return 4 * math.pi * radius**2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/92": [{"task_id": "Mbpp/92", "solution": "def is_undulating(num):\n    \"\"\"\n    Check whether the given number is undulating or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is undulating, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    for i in range(1, len(num_str)):\n        if num_str[i] == num_str[i-1]:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[2121212121212123]]}], "Mbpp/16": [{"task_id": "Mbpp/16", "solution": "def text_lowercase_underscore(input_string):\n    \"\"\"\n    This function checks if the input string contains sequences of lowercase letters joined with an underscore.\n\n    Parameters:\n    input_string (str): The input string to be checked.\n\n    Returns:\n    bool: True if the input string contains sequences of lowercase letters joined with an underscore, False otherwise.\n    \"\"\"\n    # Split the input string into words using underscore as the delimiter\n    words = input_string.split('_')\n\n    # Check if each word is lowercase and not empty\n    for word in words:\n        if not word.islower() or not word:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/4": [{"task_id": "Mbpp/4", "solution": "import heapq\ndef heap_queue_largest(numbers, n):\n    \"\"\"\n    Find the n largest integers from a given list of numbers, returned in descending order.\n\n    Parameters:\n    numbers (list): A list of numbers.\n    n (int): The number of largest integers to find.\n\n    Returns:\n    list: A list of n largest integers in descending order.\n    \"\"\"\n    largest_numbers = heapq.nlargest(n, numbers)\n    return largest_numbers[::-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[25, 35, 22, 85, 14, 65, 75, 22, 58], 3]], "plus_fail_tests": [[[9, 8, 7, 6, 5, 4, 3, 2, 1], 3]]}], "Mbpp/70": [{"task_id": "Mbpp/70", "solution": "def get_equal(tuples):\n    \"\"\"\n    Function to find whether all the given tuples have equal length or not.\n\n    Parameters:\n    tuples (list): A list of tuples.\n\n    Returns:\n    bool: True if all tuples have equal length, False otherwise.\n    \"\"\"\n    lengths = set(len(t) for t in tuples)\n    return len(lengths) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/12": [{"task_id": "Mbpp/12", "solution": "def sort_matrix(matrix):\n    \"\"\"\n    Sorts a given matrix in ascending order according to the sum of its rows.\n\n    Parameters:\n    matrix (list of lists): The matrix to be sorted.\n\n    Returns:\n    list of lists: The sorted matrix.\n    \"\"\"\n    # Calculate the sum of each row in the matrix\n    row_sums = [sum(row) for row in matrix]\n\n    # Sort the matrix based on the row sums\n    sorted_matrix = [x for _, x in sorted(zip(row_sums, matrix))]\n\n    return sorted_matrix", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/98": [{"task_id": "Mbpp/98", "solution": "import math\ndef multiply_num(numbers):\n    \"\"\"\n    Function to multiply all the numbers in a list and divide with the length of the list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    float: The result of multiplying all the numbers in the list and dividing by the length of the list.\n\n    Raises:\n    TypeError: If the input is not a list.\n    ValueError: If the list is empty.\n    \"\"\"\n\n    if not isinstance(numbers, list):\n        raise TypeError(\"Input must be a list.\")\n\n    if len(numbers) == 0:\n        raise ValueError(\"List cannot be empty.\")\n\n    result = 1\n    for num in numbers:\n        result *= num\n\n    return result / len(numbers)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/68": [{"task_id": "Mbpp/68", "solution": "def is_monotonic(arr):\n    \"\"\"\n    Check whether the given array is monotonic or not.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    bool: True if the array is monotonic, False otherwise.\n    \"\"\"\n    increasing = decreasing = True\n\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            increasing = False\n        if arr[i] > arr[i-1]:\n            decreasing = False\n\n    return increasing or decreasing\n\n# Test cases\nassert is_monotonic([6, 5, 4, 4]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/74": [{"task_id": "Mbpp/74", "solution": "def is_samepatterns(patterns, sequence):\n    \"\"\"\n    Check whether the sequence follows the patterns given in the patterns array.\n\n    Parameters:\n    patterns (list): A list of patterns to compare against the sequence.\n    sequence (list): A list of elements to check against the patterns.\n\n    Returns:\n    bool: True if the sequence follows the patterns, False otherwise.\n    \"\"\"\n    if len(patterns) != len(sequence):\n        return False\n\n    for i in range(len(patterns)):\n        if patterns[i] != sequence[i]:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["red", "green", "green"], ["a", "b", "b"]]], "plus_fail_tests": [[["red", "green", "blue"], ["a", "b", "c"]]]}], "Mbpp/56": [{"task_id": "Mbpp/56", "solution": "def check(num):\n    \"\"\"\n    Check if a given number is one less than twice its reverse.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is one less than twice its reverse, False otherwise.\n    \"\"\"\n    def reverse_number(n):\n        \"\"\"\n        Reverse a given number.\n\n        Parameters:\n        n (int): The number to be reversed.\n\n        Returns:\n        int: The reversed number.\n        \"\"\"\n        return int(str(n)[::-1])\n\n    reversed_num = reverse_number(num)\n    return num == 2 * reversed_num + 1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[73]], "plus_fail_tests": [[1]]}], "Mbpp/104": [{"task_id": "Mbpp/104", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Examples:\n    >>> sort_sublists([[\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    sorted_sublists = []\n    for sublist in lst:\n        sorted_sublists.append(sorted(sublist))\n    return sorted_sublists", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/72": [{"task_id": "Mbpp/72", "solution": "def dif_Square(n):\n    \"\"\"\n    Check whether the given number can be represented as the difference of two squares or not.\n\n    Parameters:\n    n (int): The number to be checked.\n\n    Returns:\n    bool: True if the number can be represented as the difference of two squares, False otherwise.\n    \"\"\"\n    for i in range(int(n ** 0.5) + 1):\n        for j in range(int(n ** 0.5) + 1):\n            if i ** 2 - j ** 2 == n:\n                return True\n    return False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5]], "plus_fail_tests": [[991]]}], "Mbpp/90": [{"task_id": "Mbpp/90", "solution": "def len_log(words):\n    \"\"\"\n    This function takes a list of words as input and returns the length of the longest word.\n\n    Parameters:\n    words (list): A list of words.\n\n    Returns:\n    int: The length of the longest word.\n    \"\"\"\n    longest_word = max(words, key=len)\n    return len(longest_word)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/84": [{"task_id": "Mbpp/84", "solution": "def newman_conway(n):\n    \"\"\"\n    Write a function to find the nth number in the newman conway sequence.\n\n    Parameters:\n    n (int): The position of the number in the sequence to be found.\n\n    Returns:\n    int: The nth number in the newman conway sequence.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_conway(10)\n    6\n    >>> newman_conway(1)\n    1\n    >>> newman_conway(2)\n    1\n    >>> newman_conway(3)\n    1\n    >>> newman_conway(4)\n    2\n    >>> newman_conway(5)\n    2\n    >>> newman_conway(6)\n    3\n    >>> newman_conway(7)\n    4\n    >>> newman_conway(8)\n    4\n    >>> newman_conway(9)\n    5\n    >>> newman_conway(10)\n    6\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    sequence = [0, 1, 1]  # Initialize the sequence with the first two numbers\n\n    for i in range(3, n + 1):\n        sequence.append(sequence[sequence[i - 1]] + sequence[i - sequence[i - 1]])\n\n    return sequence[n]\n\n# Test cases\nassert newman_conway(10) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/64": [{"task_id": "Mbpp/64", "solution": "def subject_marks(marks):\n    \"\"\"\n    Sorts a list of tuples using the second value of each tuple.\n\n    Parameters:\n    marks (list): A list of tuples, where each tuple contains a subject name and its corresponding mark.\n\n    Returns:\n    list: The sorted list of tuples based on the second value of each tuple.\n    \"\"\"\n    return sorted(marks, key=lambda x: x[1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/106": [{"task_id": "Mbpp/106", "solution": "def add_lists(lst, tpl):\n    \"\"\"\n    Appends the given list to the given tuples.\n\n    Parameters:\n    lst (list): The list to be appended.\n    tpl (tuple): The tuple to which the list is appended.\n\n    Returns:\n    tuple: The resulting tuple after appending the list.\n    \"\"\"\n    return tpl + tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/8": [{"task_id": "Mbpp/8", "solution": "def square_nums(nums):\n    \"\"\"\n    Function to find squares of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of squares of the input numbers.\n    \"\"\"\n    return [num ** 2 for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/71": [{"task_id": "Mbpp/71", "solution": "def comb_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the Comb Sort algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n\n    def swap(lst, i, j):\n        \"\"\"\n        Swaps two elements in a list.\n\n        Parameters:\n        lst (list): The list in which elements are to be swapped.\n        i (int): The index of the first element.\n        j (int): The index of the second element.\n\n        Returns:\n        None\n        \"\"\"\n        lst[i], lst[j] = lst[j], lst[i]\n\n    def get_next_gap(gap):\n        \"\"\"\n        Calculates the next gap value for the Comb Sort algorithm.\n\n        Parameters:\n        gap (int): The current gap value.\n\n        Returns:\n        int: The next gap value.\n        \"\"\"\n        gap = (gap * 10) // 13\n        if gap < 1:\n            return 1\n        return gap\n\n    n = len(lst)\n    gap = n\n    swapped = True\n\n    while gap != 1 or swapped:\n        gap = get_next_gap(gap)\n        swapped = False\n\n        for i in range(0, n - gap):\n            if lst[i] > lst[i + gap]:\n                swap(lst, i, i + gap)\n                swapped = True\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/91": [{"task_id": "Mbpp/91", "solution": "def find_substring(lst, substring):\n    \"\"\"\n    Check if a string is present as a substring in a given list of string values.\n\n    Parameters:\n    lst (list): A list of string values.\n    substring (str): The substring to search for.\n\n    Returns:\n    bool: True if the substring is found in any of the string values, False otherwise.\n    \"\"\"\n    for value in lst:\n        if substring in value:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/77": [{"task_id": "Mbpp/77", "solution": "def is_divisible_by_11(num):\n    \"\"\"\n    This function takes a number as input and returns True if the number is divisible by 11, and False otherwise.\n\n    Parameters:\n    num (int): The number to be checked for divisibility by 11.\n\n    Returns:\n    bool: True if the number is divisible by 11, False otherwise.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    num_str = str(num)\n\n    # Initialize the sum of odd-positioned digits and the sum of even-positioned digits\n    odd_sum = 0\n    even_sum = 0\n\n    # Iterate through the digits of the number\n    for i in range(len(num_str)):\n        # Check if the current digit is at an odd or even position\n        if i % 2 == 0:\n            odd_sum += int(num_str[i])\n        else:\n            even_sum += int(num_str[i])\n\n    # Check if the difference between the sums is divisible by 11\n    if abs(odd_sum - even_sum) % 11 == 0:\n        return True\n    else:\n        return False\n\n# Test cases\nassert is_divisible_by_11(12345) == False", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/108": [{"task_id": "Mbpp/108", "solution": "def merge_sorted_list(*lists):\n    merged_list = []\n    for lst in lists:\n        merged_list.extend(lst)\n    merged_list.sort()\n    return merged_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/11": [{"task_id": "Mbpp/11", "solution": "def remove_Occ(string, char):\n    \"\"\"\n    Remove the first and last occurrence of a given character from the string.\n\n    Parameters:\n    string (str): The input string.\n    char (str): The character to be removed.\n\n    Returns:\n    str: The modified string with the first and last occurrence of the character removed.\n    \"\"\"\n    # Find the first occurrence of the character\n    first_index = string.find(char)\n\n    # Find the last occurrence of the character\n    last_index = string.rfind(char)\n\n    # Remove the first occurrence of the character\n    modified_string = string[:first_index] + string[first_index+1:]\n\n    # Remove the last occurrence of the character\n    modified_string = modified_string[:last_index] + modified_string[last_index+1:]\n\n    return modified_string", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["hello", "l"]], "plus_fail_tests": [["aaa", "a"]]}], "Mbpp/69": [{"task_id": "Mbpp/69", "solution": "def is_sublist(lst, sublst):\n    \"\"\"\n    Check whether a list contains the given sublist or not.\n\n    Parameters:\n    lst (list): The main list to search in.\n    sublst (list): The sublist to search for.\n\n    Returns:\n    bool: True if the sublist is found in the list, False otherwise.\n    \"\"\"\n    for i in range(len(lst) - len(sublst) + 1):\n        if lst[i:i+len(sublst)] == sublst:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/75": [{"task_id": "Mbpp/75", "solution": "def find_tuples(lst, k):\n    \"\"\"\n    Find tuples from the given list of tuples that have all elements divisible by k.\n\n    Parameters:\n    lst (list): A list of tuples.\n    k (int): The divisor.\n\n    Returns:\n    list: A list of tuples that have all elements divisible by k.\n    \"\"\"\n    result = []\n    for tup in lst:\n        if all(elem % k == 0 for elem in tup):\n            result.append(tup)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/63": [{"task_id": "Mbpp/63", "solution": "def max_difference(tuple_list):\n    \"\"\"\n    Find the maximum difference between available pairs in the given tuple list.\n\n    Parameters:\n    tuple_list (list): A list of tuples.\n\n    Returns:\n    int: The maximum difference between available pairs.\n\n    Raises:\n    ValueError: If the tuple_list is empty or contains tuples with less than 2 elements.\n\n    Examples:\n    >>> max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])\n    7\n    >>> max_difference([(1, 1), (2, 2), (3, 3)])\n    0\n    >>> max_difference([])\n    Traceback (most recent call last):\n        ...\n    ValueError: The tuple_list should not be empty.\n    >>> max_difference([(1,)])\n    Traceback (most recent call last):\n        ...\n    ValueError: Each tuple in the tuple_list should have at least 2 elements.\n    \"\"\"\n\n    if not tuple_list:\n        raise ValueError(\"The tuple_list should not be empty.\")\n\n    max_diff = 0\n\n    for i in range(len(tuple_list)):\n        if len(tuple_list[i]) < 2:\n            raise ValueError(\"Each tuple in the tuple_list should have at least 2 elements.\")\n\n        for j in range(i + 1, len(tuple_list)):\n            diff = abs(tuple_list[i][0] - tuple_list[j][1])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 5], [1, 7], [10, 3], [1, 2]]]], "plus_fail_tests": [[[[1000000, 999999], [10000000, 9999999], [100000000, 99999999], [1000000000, 999999999]]]]}], "Mbpp/109": [{"task_id": "Mbpp/109", "solution": "def rotate_binary_string(binary_string, num_rotations):\n    binary_string = binary_string * num_rotations\n    rotated_strings = set()\n    for i in range(len(binary_string)):\n        rotated_string = binary_string[i:] + binary_string[:i]\n        rotated_strings.add(rotated_string)\n    return sum(int(rotated_string, 2) % 2 == 1 for rotated_string in rotated_strings)\ndef odd_Equivalent(binary_string, num_rotations):\n    return rotate_binary_string(binary_string, num_rotations)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["1010", 4]], "plus_fail_tests": [["1100110011", 5]]}], "Mbpp/96": [{"task_id": "Mbpp/96", "solution": "def divisor(n):\n    \"\"\"\n    This function takes an integer as input and returns the number of divisors of that integer.\n\n    Parameters:\n    n (int): The integer for which we want to find the number of divisors.\n\n    Returns:\n    int: The number of divisors of the given integer.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/119": [{"task_id": "Mbpp/119", "solution": "def search(arr):\n    left = 0\n    right = len(arr) - 1\n\n    while left < right:\n        mid = (left + right) // 2\n\n        if arr[mid] == arr[mid + 1]:\n            if mid % 2 == 0:\n                left = mid + 2\n            else:\n                right = mid - 1\n        elif arr[mid] == arr[mid - 1]:\n            if mid % 2 == 0:\n                right = mid - 2\n            else:\n                left = mid + 1\n        else:\n            return arr[mid]\n\n    return arr[left]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/118": [{"task_id": "Mbpp/118", "solution": "def string_to_list(string):\n    \"\"\"\n    Convert a string to a list of strings split on the space character.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    list: A list of strings split on the space character.\n    \"\"\"\n    return string.split()", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/116": [{"task_id": "Mbpp/116", "solution": "def tuple_to_int(t):\n    \"\"\"\n    Convert a given tuple of positive integers into a single integer.\n\n    Parameters:\n    t (tuple): A tuple of positive integers.\n\n    Returns:\n    int: The single integer formed by concatenating the elements of the tuple.\n\n    Examples:\n    >>> tuple_to_int((1, 2, 3))\n    123\n    >>> tuple_to_int((4, 5, 6))\n    456\n    >>> tuple_to_int((7, 8, 9))\n    789\n    \"\"\"\n    return int(''.join(map(str, t)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/129": [{"task_id": "Mbpp/129", "solution": "def magic_square_test(matrix):\n    n = len(matrix)\n    expected_sum = n * (n ** 2 + 1) // 2\n\n    # Check rows\n    for row in matrix:\n        if sum(row) != expected_sum:\n            return False\n\n    # Check columns\n    for col in range(n):\n        col_sum = 0\n        for row in range(n):\n            col_sum += matrix[row][col]\n        if col_sum != expected_sum:\n            return False\n\n    # Check diagonals\n    diag_sum1 = 0\n    diag_sum2 = 0\n    for i in range(n):\n        diag_sum1 += matrix[i][i]\n        diag_sum2 += matrix[i][n - 1 - i]\n    if diag_sum1 != expected_sum or diag_sum2 != expected_sum:\n        return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[7, 7], [7, 7]]]]}], "Mbpp/166": [{"task_id": "Mbpp/166", "solution": "def find_even_pair(nums):\n    count = 0\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] ^ nums[j] % 2 == 0:\n                count += 1\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 4, 7, 2, 1]]], "plus_fail_tests": [[[1, 3, 5, 7, 9, 2, 4, 6, 8, 10]]]}], "Mbpp/171": [{"task_id": "Mbpp/171", "solution": "def perimeter_pentagon(side_length):\n    \"\"\"\n    Calculate the perimeter of a regular pentagon given the length of its sides.\n\n    Parameters:\n    side_length (float or int): The length of the sides of the pentagon.\n\n    Returns:\n    float: The perimeter of the pentagon.\n\n    Raises:\n    ValueError: If the side length is not a positive number.\n\n    Examples:\n    >>> perimeter_pentagon(5)\n    25\n    >>> perimeter_pentagon(10)\n    50\n    \"\"\"\n    if side_length <= 0:\n        raise ValueError(\"Side length must be a positive number.\")\n\n    perimeter = 5 * side_length\n    return perimeter", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/145": [{"task_id": "Mbpp/145", "solution": "def max_Abs_Diff(arr):\n    \"\"\"\n    This function takes an array as input and returns the maximum difference between any two elements.\n\n    Parameters:\n    arr (tuple): A tuple of integers.\n\n    Returns:\n    int: The maximum difference between any two elements in the array.\n\n    Examples:\n    >>> max_Abs_Diff((2, 1, 5, 3))\n    4\n    >>> max_Abs_Diff((1, 2, 3, 4, 5))\n    4\n    >>> max_Abs_Diff((5, 4, 3, 2, 1))\n    4\n    >>> max_Abs_Diff((1, 1, 1, 1))\n    0\n    \"\"\"\n    if len(arr) < 2:\n        return 0\n\n    max_diff = abs(arr[0] - arr[1])\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            diff = abs(arr[i] - arr[j])\n            if diff > max_diff:\n                max_diff = diff\n\n    return max_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/137": [{"task_id": "Mbpp/137", "solution": "import math\ndef zero_count(arr):\n    zero_count = 0\n    non_zero_count = 0\n    \n    for num in arr:\n        if num == 0:\n            zero_count += 1\n        else:\n            non_zero_count += 1\n    \n    if non_zero_count == 0:\n        return 0\n    \n    return zero_count / non_zero_count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]]]}], "Mbpp/237": [{"task_id": "Mbpp/237", "solution": "def check_occurences(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    dict: A dictionary mapping each unique tuple to the number of times it occurs in the list.\n    \"\"\"\n    occurences = {}\n    for tup in lst:\n        if tup in occurences:\n            occurences[tup] += 1\n        else:\n            occurences[tup] = 1\n    return occurences", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[3, 1], [1, 3], [2, 5], [5, 2], [6, 3]]]], "plus_fail_tests": [[[[2, 2], [1, 3], [2, 2], [3, 1], [1, 3]]]]}], "Mbpp/139": [{"task_id": "Mbpp/139", "solution": "import math\ndef circle_circumference(radius):\n    \"\"\"\n    Calculate the circumference of a circle given its radius.\n\n    Parameters:\n    radius (float): The radius of the circle.\n\n    Returns:\n    float: The circumference of the circle.\n    \"\"\"\n    return 2 * math.pi * radius", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/133": [{"task_id": "Mbpp/133", "solution": "def sum_negativenum(numbers):\n    \"\"\"\n    Calculate the sum of the negative numbers in a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of the negative numbers in the list.\n    \"\"\"\n    neg_sum = 0\n    for num in numbers:\n        if num < 0:\n            neg_sum += num\n    return neg_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/141": [{"task_id": "Mbpp/141", "solution": "def pancake_sort(lst):\n    \"\"\"\n    Sorts a list of elements using the pancake sorting algorithm.\n\n    Parameters:\n    lst (list): The list of elements to be sorted.\n\n    Returns:\n    list: The sorted list.\n    \"\"\"\n\n    def flip(arr, i):\n        \"\"\"\n        Flips the elements of the list from index 0 to i.\n\n        Parameters:\n        arr (list): The list to be flipped.\n        i (int): The index up to which the list should be flipped.\n\n        Returns:\n        None\n        \"\"\"\n        start = 0\n        while start < i:\n            arr[start], arr[i] = arr[i], arr[start]\n            start += 1\n            i -= 1\n\n    def find_max(arr, n):\n        \"\"\"\n        Finds the index of the maximum element in the list.\n\n        Parameters:\n        arr (list): The list to search for the maximum element.\n        n (int): The number of elements to consider.\n\n        Returns:\n        int: The index of the maximum element.\n        \"\"\"\n        max_idx = 0\n        for i in range(1, n):\n            if arr[i] > arr[max_idx]:\n                max_idx = i\n        return max_idx\n\n    n = len(lst)\n    curr_size = n\n    while curr_size > 1:\n        max_idx = find_max(lst, curr_size)\n        if max_idx != curr_size - 1:\n            flip(lst, max_idx)\n            flip(lst, curr_size - 1)\n        curr_size -= 1\n\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/235": [{"task_id": "Mbpp/235", "solution": "def even_bit_set_number(n):\n    \"\"\"\n    Write a python function to set all even bits of a given number.\n\n    Parameters:\n    n (int): The number.\n\n    Returns:\n    int: The number with all even bits set.\n\n    Examples:\n    >>> even_bit_set_number(10)\n    10\n    >>> even_bit_set_number(15)\n    14\n    >>> even_bit_set_number(20)\n    20\n    \"\"\"\n    # Convert the number to binary representation\n    binary = bin(n)[2:]\n\n    # Set all even bits to 1\n    binary = binary[:-1] + '1' + binary[-1]\n\n    # Convert the binary representation back to decimal\n    return int(binary, 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[999999999]]}], "Mbpp/224": [{"task_id": "Mbpp/224", "solution": "def count_Set_Bits(num):\n    \"\"\"\n    Function to count the number of set bits (binary digits with value 1) in a given number.\n\n    Parameters:\n    num (int): The number for which set bits need to be counted.\n\n    Returns:\n    int: The number of set bits in the given number.\n    \"\"\"\n    count = 0\n    while num:\n        count += num & 1\n        num >>= 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/165": [{"task_id": "Mbpp/165", "solution": "def count_char_position(string):\n    \"\"\"\n    Function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of characters that occur at the same position in the string as in the English alphabet.\n    \"\"\"\n    count = 0\n    for i in range(len(string)):\n        if string[i].lower() == chr(97 + i):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/132": [{"task_id": "Mbpp/132", "solution": "def tup_string(tup):\n    \"\"\"\n    Convert a tuple to a string.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    str: The converted string.\n    \"\"\"\n    return ''.join(tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/126": [{"task_id": "Mbpp/126", "solution": "def sum_common_divisors(a, b):\n    \"\"\"\n    Function to find the sum of common divisors of two given numbers.\n\n    Parameters:\n    a (int): First number.\n    b (int): Second number.\n\n    Returns:\n    int: Sum of common divisors.\n    \"\"\"\n    def gcd(x, y):\n        \"\"\"\n        Function to find the greatest common divisor (GCD) of two numbers.\n\n        Parameters:\n        x (int): First number.\n        y (int): Second number.\n\n        Returns:\n        int: GCD of the two numbers.\n        \"\"\"\n        while y:\n            x, y = y, x % y\n        return x\n\n    def divisors(n):\n        \"\"\"\n        Function to find all divisors of a number.\n\n        Parameters:\n        n (int): Number.\n\n        Returns:\n        list: List of divisors.\n        \"\"\"\n        divs = []\n        for i in range(1, int(n ** 0.5) + 1):\n            if n % i == 0:\n                divs.append(i)\n                if i != n // i:\n                    divs.append(n // i)\n        return divs\n\n    common_divisors = set(divisors(a)).intersection(divisors(b))\n    return sum(common_divisors)\n\n# Test cases\nassert sum_common_divisors(10, 15) == 6", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/167": [{"task_id": "Mbpp/167", "solution": "def next_power_of_2(n):\n    \"\"\"\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n\n    Parameters:\n    n (int): The input number.\n\n    Returns:\n    int: The smallest power of 2 greater than or equal to n.\n    \"\"\"\n    if n <= 0:\n        return 1\n    else:\n        return 2 ** (len(bin(n)) - 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1]]}], "Mbpp/142": [{"task_id": "Mbpp/142", "solution": "def count_samepair(list1, list2, list3):\n    \"\"\"\n    Function to count number of items that are identical in the same position of three given lists.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n    list3 (list): The third list.\n\n    Returns:\n    int: The count of items that are identical in the same position of the three lists.\n    \"\"\"\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] == list3[i]:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5], [1, 2, 3, 4, 5, 6, 7, 8]]]}], "Mbpp/172": [{"task_id": "Mbpp/172", "solution": "def count_occurance(string):\n    \"\"\"\n    This function counts the number of occurrences of the string 'std' in a given string.\n\n    Parameters:\n    string (str): The input string to search for the occurrences of 'std'.\n\n    Returns:\n    int: The number of occurrences of 'std' in the given string.\n    \"\"\"\n    count = 0\n    index = 0\n    while index < len(string):\n        if string[index:index+3] == 'std':\n            count += 1\n            index += 3\n        else:\n            index += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/234": [{"task_id": "Mbpp/234", "solution": "def volume_cube(side_length):\n    \"\"\"\n    This function takes the side length of a cube as input and returns the volume of the cube.\n\n    Parameters:\n    side_length (float or int): The side length of the cube.\n\n    Returns:\n    float: The volume of the cube.\n    \"\"\"\n    return side_length ** 3", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/222": [{"task_id": "Mbpp/222", "solution": "def check_type(t):\n    \"\"\"\n    Check if all the elements in a tuple have the same data type.\n\n    Parameters:\n    t (tuple): The input tuple to check.\n\n    Returns:\n    bool: True if all elements have the same data type, False otherwise.\n    \"\"\"\n    data_type = type(t[0])\n    for element in t:\n        if type(element) != data_type:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/120": [{"task_id": "Mbpp/120", "solution": "def max_product_tuple(lst):\n    \"\"\"\n    Function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n\n    Parameters:\n    lst (list): A list of tuples containing two integers.\n\n    Returns:\n    int: The maximum absolute product between numbers in pairs of tuples.\n\n    Examples:\n    >>> max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    36\n    \"\"\"\n    max_product = 0\n    for pair in lst:\n        product = abs(pair[0] * pair[1])\n        if product > max_product:\n            max_product = product\n    return max_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/233": [{"task_id": "Mbpp/233", "solution": "import math", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/124": [{"task_id": "Mbpp/124", "solution": "import math\ndef angle_complex(z):\n    \"\"\"\n    Calculate the angle of a complex number.\n\n    Parameters:\n    z (complex): The complex number.\n\n    Returns:\n    float: The angle of the complex number in radians.\n\n    Raises:\n    ValueError: If the input is not a complex number.\n\n    \"\"\"\n    if not isinstance(z, complex):\n        raise ValueError(\"Input must be a complex number.\")\n\n    angle = math.atan2(z.imag, z.real)\n    return angle", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["0.0", "1j"]], "plus_fail_tests": [["0.0", "0j"]]}], "Mbpp/252": [{"task_id": "Mbpp/252", "solution": "import math\ndef convert(complex_number):\n    \"\"\"\n    Convert a complex number to polar coordinates.\n\n    Parameters:\n    complex_number (complex): The complex number to be converted.\n\n    Returns:\n    tuple: A tuple containing the magnitude and angle of the polar coordinates.\n    \"\"\"\n    magnitude = abs(complex_number)\n    angle = math.degrees(math.atan2(complex_number.imag, complex_number.real))\n    return (magnitude, angle)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["(1+2j)"]]}], "Mbpp/168": [{"task_id": "Mbpp/168", "solution": "def frequency(lst, num):\n    \"\"\"\n    This function counts the number of occurrences of a number in a given list.\n\n    Parameters:\n    lst (list): The list to search for the number.\n    num: The number to count occurrences of.\n\n    Returns:\n    int: The number of occurrences of the given number in the list.\n    \"\"\"\n    count = 0\n    for item in lst:\n        if item == num:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/226": [{"task_id": "Mbpp/226", "solution": "def odd_values_string(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the characters with odd index values.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The new string with only the characters with odd index values.\n    \"\"\"\n    new_string = \"\"\n    for i in range(len(string)):\n        if i % 2 == 0:\n            new_string += string[i]\n    return new_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/244": [{"task_id": "Mbpp/244", "solution": "def next_Perfect_Square(num):\n    \"\"\"\n    This function takes a number as input and returns the next perfect square greater than the given number.\n\n    Parameters:\n    num (int): The given number.\n\n    Returns:\n    int: The next perfect square greater than the given number.\n    \"\"\"\n    # Find the square root of the given number\n    sqrt_num = int(num ** 0.5)\n\n    # Check if the square root is a perfect square\n    if sqrt_num * sqrt_num == num:\n        # If the square root is a perfect square, increment it to find the next perfect square\n        sqrt_num += 1\n\n    # Find the square of the next perfect square\n    next_square = sqrt_num * sqrt_num\n\n    return next_square", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[35]], "plus_fail_tests": [[-5]]}], "Mbpp/161": [{"task_id": "Mbpp/161", "solution": "def remove_elements(lst, elements_to_remove):\n    \"\"\"\n    Remove all elements from a given list present in another list.\n\n    Parameters:\n    lst (list): The list from which elements need to be removed.\n    elements_to_remove (list): The list of elements to be removed from the original list.\n\n    Returns:\n    list: The modified list with elements removed.\n    \"\"\"\n    return [x for x in lst if x not in elements_to_remove]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/125": [{"task_id": "Mbpp/125", "solution": "def find_length(binary_string):\n    max_diff = 0\n    count_zeroes = 0\n    count_ones = 0\n\n    for char in binary_string:\n        if char == '0':\n            count_zeroes += 1\n        else:\n            count_ones += 1\n\n        diff = count_ones - count_zeroes\n        max_diff = max(max_diff, diff)\n\n    return max_diff", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["11000010001"]], "plus_fail_tests": [["0000000011111111"]]}], "Mbpp/251": [{"task_id": "Mbpp/251", "solution": "def insert_element(lst, element):\n    result = []\n    for item in lst:\n        result.append(element)\n        result.append(item)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/240": [{"task_id": "Mbpp/240", "solution": "def replace_list(list1, list2):\n    \"\"\"\n    Replaces the last element of the first list with the elements of the second list.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The modified list with the last element replaced by the elements of the second list.\n    \"\"\"\n    list1[-1] = list2\n    return list1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 3, 5, 7, 9, 10], [2, 4, 6, 8]]], "plus_fail_tests": [[[1, 2, 3, 4], []]]}], "Mbpp/140": [{"task_id": "Mbpp/140", "solution": "def extract_singly(lst):\n    \"\"\"\n    Write a function to flatten the list of lists into a single set of numbers.\n\n    Parameters:\n    lst (list): A list of lists of numbers.\n\n    Returns:\n    set: A set of numbers extracted from the input list.\n\n    Example:\n    >>> extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])\n    {1, 3, 4, 5, 7}\n    \"\"\"\n    flattened_set = set()\n    for sublist in lst:\n        for num in sublist:\n            flattened_set.add(num)\n    return flattened_set", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/131": [{"task_id": "Mbpp/131", "solution": "def reverse_vowels(s):\n    vowels = set('aeiouAEIOU')\n    s = list(s)\n    i = 0\n    j = len(s) - 1\n\n    while i < j:\n        if s[i] not in vowels:\n            i += 1\n        elif s[j] not in vowels:\n            j -= 1\n        else:\n            s[i], s[j] = s[j], s[i]\n            i += 1\n            j -= 1\n\n    return ''.join(s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/128": [{"task_id": "Mbpp/128", "solution": "def long_words(n, sentence):\n    \"\"\"\n    This function takes a number 'n' and a sentence as input. It returns a list of words from the sentence that are longer than 'n' characters.\n\n    Parameters:\n    n (int): The minimum length of words to be included in the result.\n    sentence (str): The input sentence.\n\n    Returns:\n    list: A list of words from the sentence that are longer than 'n' characters.\n    \"\"\"\n    words = sentence.split()\n    result = [word for word in words if len(word) > n]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/127": [{"task_id": "Mbpp/127", "solution": "def multiply_int(a, b):\n    \"\"\"\n    Function to multiply two integers.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n\n    Returns:\n    int: The product of the two integers.\n    \"\"\"\n    return a * b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/135": [{"task_id": "Mbpp/135", "solution": "def hexagonal_num(n):\n    \"\"\"\n    Function to find the nth hexagonal number.\n\n    Parameters:\n    n (int): The position of the hexagonal number to find.\n\n    Returns:\n    int: The nth hexagonal number.\n    \"\"\"\n    return n * (2 * n - 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/242": [{"task_id": "Mbpp/242", "solution": "def count_charac(string):\n    \"\"\"\n    This function takes a string as input and returns the total number of characters in the string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The total number of characters in the string.\n    \"\"\"\n    return len(string)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/138": [{"task_id": "Mbpp/138", "solution": "def is_Sum_Of_Powers_Of_Two(n):\n    \"\"\"\n    Check whether the given number can be represented as sum of non-zero powers of 2 or not.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the number can be represented as sum of non-zero powers of 2, False otherwise.\n    \"\"\"\n    if n < 0:\n        return False\n\n    while n > 0:\n        if n & 1:\n            n >>= 1\n        else:\n            return False\n\n    return True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[123456788]]}], "Mbpp/232": [{"task_id": "Mbpp/232", "solution": "def larg_nnum(lst, n):\n    \"\"\"\n    Function to return a list containing the n largest items from the given list.\n\n    Parameters:\n    lst (list): The input list.\n    n (int): The number of largest items to return.\n\n    Returns:\n    list: A list containing the n largest items from the input list.\n    \"\"\"\n    # Sort the list in descending order\n    sorted_lst = sorted(lst, reverse=True)\n\n    # Return the first n items from the sorted list\n    return sorted_lst[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/239": [{"task_id": "Mbpp/239", "solution": "def get_total_number_of_sequences(m, n):\n    # Create a list to store the number of sequences for each value of n\n    sequences = [0] * (n + 1)\n\n    # Base case: there is only one sequence of length 1\n    sequences[1] = 1\n\n    # Iterate through each length from 2 to n\n    for length in range(2, n + 1):\n        # Iterate through each possible value of the last element in the sequence\n        for last_element in range(1, m + 1):\n            # Check if the last element satisfies the given conditions\n            if last_element >= 2 * sequences[length - 1]:\n                # Update the number of sequences for the current length\n                sequences[length] += sequences[length - 1]\n\n    # Return the total number of sequences of length n\n    return sequences[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10, 4]], "plus_fail_tests": [[50, 5]]}], "Mbpp/245": [{"task_id": "Mbpp/245", "solution": "def max_sum(arr):\n    n = len(arr)\n    if n == 0:\n        return 0\n\n    # Find the maximum element in the array\n    max_element = max(arr)\n\n    # Find the index of the maximum element\n    max_index = arr.index(max_element)\n\n    # Initialize variables for increasing and decreasing subsequences\n    increasing_subsequence = [arr[0]]\n    decreasing_subsequence = [arr[-1]]\n\n    # Find the increasing subsequence\n    for i in range(1, max_index + 1):\n        if arr[i] >= increasing_subsequence[-1]:\n            increasing_subsequence.append(arr[i])\n\n    # Find the decreasing subsequence\n    for i in range(n - 2, max_index - 1, -1):\n        if arr[i] >= decreasing_subsequence[-1]:\n            decreasing_subsequence.append(arr[i])\n\n    # Reverse the decreasing subsequence\n    decreasing_subsequence = decreasing_subsequence[::-1]\n\n    # Calculate the maximum sum of the bitonic subsequence\n    max_sum = max(sum(increasing_subsequence), sum(decreasing_subsequence))\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 15, 51, 45, 33, 100, 12, 18, 9]]], "plus_fail_tests": [[[10, 9, 8, 7, 6, 5, 4, 4, 3, 2, 1]]]}], "Mbpp/238": [{"task_id": "Mbpp/238", "solution": "def number_of_substrings(string):\n    \"\"\"\n    This function counts the number of non-empty substrings of a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The number of non-empty substrings.\n    \"\"\"\n    n = len(string)\n    count = n * (n + 1) // 2\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/230": [{"task_id": "Mbpp/230", "solution": "def replace_blank(string, character):\n    \"\"\"\n    Replaces blank spaces in a string with a given character and returns the modified string.\n\n    Parameters:\n    string (str): The input string.\n    character (str): The character to replace blank spaces with.\n\n    Returns:\n    str: The modified string with blank spaces replaced by the given character.\n    \"\"\"\n    modified_string = string.replace(\" \", character)\n    return modified_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/130": [{"task_id": "Mbpp/130", "solution": "def max_occurrences(lst):\n    \"\"\"\n    Write a function to find the item with maximum frequency in a given list.\n\n    Parameters:\n    lst (list): A list of items.\n\n    Returns:\n    item: The item with maximum frequency in the list.\n\n    Raises:\n    ValueError: If the input list is empty.\n\n    Examples:\n    >>> max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])\n    2\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"Input list cannot be empty.\")\n\n    item_count = {}\n    max_count = 0\n    max_item = None\n\n    for item in lst:\n        if item in item_count:\n            item_count[item] += 1\n        else:\n            item_count[item] = 1\n\n        if item_count[item] > max_count:\n            max_count = item_count[item]\n            max_item = item\n\n    return max_item", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14, 15, 6]]]}], "Mbpp/160": [{"task_id": "Mbpp/160", "solution": "def find_solution(a, b, n):\n    \"\"\"\n    Finds integers x and y that satisfy ax + by = n as a tuple, or returns None if no solution exists.\n\n    Parameters:\n    a (int): First integer.\n    b (int): Second integer.\n    n (int): Target value.\n\n    Returns:\n    tuple: Tuple containing x and y that satisfy ax + by = n, or None if no solution exists.\n    \"\"\"\n\n    # Euclidean algorithm to find the greatest common divisor (gcd) of a and b\n    def gcd(a, b):\n        while b != 0:\n            a, b = b, a % b\n        return a\n\n    # Check if there is a solution\n    if n % gcd(a, b) != 0:\n        return None\n\n    # Find the multiplicative inverse of b modulo a\n    def inverse(b, n):\n        t, new_t = 0, 1\n        r, new_r = n, b\n\n        while new_r != 0:\n            quotient = r // new_r\n            t, new_t = new_t, t - quotient * new_t\n            r, new_r = new_r, r - quotient * new_r\n\n        if r > 1:\n            return None\n\n        if t < 0:\n            t += n\n\n        return t\n\n    # Calculate x and y\n    x = (n // a) * inverse(b // gcd(a, b), a // gcd(a, b))\n    y = (n - a * x) // b\n\n    return x, y", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2, 3, 7]], "plus_fail_tests": [[100, 50, 4000]]}], "Mbpp/250": [{"task_id": "Mbpp/250", "solution": "def count_X(tup, element):\n    \"\"\"\n    This function takes in a tuple and an element and counts the occurences of the element in the tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    element: The element to count in the tuple.\n\n    Returns:\n    int: The count of occurrences of the element in the tuple.\n    \"\"\"\n    count = 0\n    for item in tup:\n        if item == element:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/223": [{"task_id": "Mbpp/223", "solution": "def is_majority(arr, n, element):\n    # Find the first occurrence of the element\n    first_occurrence = binary_search(arr, 0, n - 1, element)\n    \n    # If the element is not present in the array, return False\n    if first_occurrence == -1:\n        return False\n    \n    # Check if the element occurs more than n/2 times\n    if (first_occurrence + n // 2) <= (n - 1) and arr[first_occurrence + n // 2] == element:\n        return True\n    \n    return False\ndef binary_search(arr, low, high, element):\n    if high >= low:\n        mid = (high + low) // 2\n        \n        # If the element is present at the middle itself\n        if arr[mid] == element:\n            return mid\n        \n        # If element is smaller than mid, then it can only be present in left subarray\n        if arr[mid] > element:\n            return binary_search(arr, low, mid - 1, element)\n        \n        # Else the element can only be present in right subarray\n        return binary_search(arr, mid + 1, high, element)\n    \n    return -1", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 3, 3, 3, 10], 7, 3]], "plus_fail_tests": [[[], 1, 0]]}], "Mbpp/253": [{"task_id": "Mbpp/253", "solution": "def count_integer(lst):\n    \"\"\"\n    This function takes a list as input and returns the number of integer elements in the list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    int: The number of integer elements in the list.\n    \"\"\"\n    count = 0\n    for element in lst:\n        if isinstance(element, int):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/227": [{"task_id": "Mbpp/227", "solution": "def min_of_three(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the minimum of the three numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n    c (int or float): The third number.\n\n    Returns:\n    int or float: The minimum of the three numbers.\n    \"\"\"\n    return min(a, b, c)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/170": [{"task_id": "Mbpp/170", "solution": "def sum_range_list(lst, start, end):\n    \"\"\"\n    Function to find the sum of numbers in a list within a range specified by two indices.\n\n    Parameters:\n    lst (list): The input list of numbers.\n    start (int): The starting index of the range.\n    end (int): The ending index of the range.\n\n    Returns:\n    int: The sum of numbers in the range.\n\n    Raises:\n    ValueError: If the start or end index is out of range.\n\n    Examples:\n    >>> sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)\n    29\n    \"\"\"\n    if start < 0 or start >= len(lst) or end < 0 or end >= len(lst):\n        raise ValueError(\"Start or end index is out of range.\")\n\n    return sum(lst[start:end+1])", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/247": [{"task_id": "Mbpp/247", "solution": "def lps(s):\n    \"\"\"\n    Function to find the length of the longest palindromic subsequence in the given string.\n\n    Parameters:\n    s (str): The input string.\n\n    Returns:\n    int: The length of the longest palindromic subsequence.\n    \"\"\"\n\n    def longest_common_subsequence(s1, s2):\n        \"\"\"\n        Helper function to find the length of the longest common subsequence between two strings.\n\n        Parameters:\n        s1 (str): The first string.\n        s2 (str): The second string.\n\n        Returns:\n        int: The length of the longest common subsequence.\n        \"\"\"\n        m = len(s1)\n        n = len(s2)\n\n        # Create a table to store the lengths of longest common subsequences\n        dp = [[0] * (n + 1) for _ in range(m + 1)]\n\n        # Fill the table\n        for i in range(1, m + 1):\n            for j in range(1, n + 1):\n                if s1[i - 1] == s2[j - 1]:\n                    dp[i][j] = dp[i - 1][j - 1] + 1\n                else:\n                    dp[i][j] = max(dp[i - 1][j], dp[i][j - 1])\n\n        return dp[m][n]\n\n    # Reverse the string and find the length of the longest common subsequence\n    reversed_s = s[::-1]\n    return longest_common_subsequence(s, reversed_s)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/162": [{"task_id": "Mbpp/162", "solution": "def sum_series(n):\n    result = 0\n    for i in range(n // 2 + 1):\n        result += n - 2 * i\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/61": [{"task_id": "Mbpp/61", "solution": "def count_Substrings(s):\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1, len(s)+1):\n            substring = s[i:j]\n            if sum(int(digit) for digit in substring) == len(substring):\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/123": [{"task_id": "Mbpp/123", "solution": "def amicable_numbers_sum(n):\n    def sum_proper_divisors(num):\n        divisors_sum = 0\n        for i in range(1, num // 2 + 1):\n            if num % i == 0:\n                divisors_sum += i\n        return divisors_sum\n\n    amicable_nums_sum = 0\n    for num in range(1, n + 1):\n        sum_divisors = sum_proper_divisors(num)\n        if sum_divisors != num and sum_proper_divisors(sum_divisors) == num:\n            amicable_nums_sum += num\n    return amicable_nums_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9999]], "plus_fail_tests": [[10000]]}], "Mbpp/266": [{"task_id": "Mbpp/266", "solution": "def lateralsurface_cube(side_length):\n    \"\"\"\n    Calculate the lateral surface area of a cube given its side length.\n\n    Parameters:\n    side_length (float or int): The length of one side of the cube.\n\n    Returns:\n    float: The lateral surface area of the cube.\n    \"\"\"\n    return 4 * side_length ** 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/279": [{"task_id": "Mbpp/279", "solution": "def is_num_decagonal(n):\n    \"\"\"\n    Function to find the nth decagonal number.\n\n    Parameters:\n    n (int): The position of the decagonal number to find.\n\n    Returns:\n    int: The nth decagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_num_decagonal(3)\n    27\n    >>> is_num_decagonal(1)\n    1\n    >>> is_num_decagonal(0)\n    Traceback (most recent call last):\n        ...\n    ValueError: n must be a positive integer.\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/294": [{"task_id": "Mbpp/294", "solution": "def max_val(lst):\n    \"\"\"\n    Function to find the maximum value in a given heterogeneous list.\n\n    Parameters:\n    lst (list): A heterogeneous list containing integers and/or floats.\n\n    Returns:\n    int or float: The maximum value in the list.\n\n    Raises:\n    ValueError: If the list is empty or contains only non-numeric values.\n\n    Examples:\n    >>> max_val(['Python', 3, 2, 4, 5, 'version'])\n    5\n    >>> max_val([1.5, 2.3, 4.7, 0.9])\n    4.7\n    >>> max_val([])\n    Traceback (most recent call last):\n        ...\n    ValueError: List is empty.\n    >>> max_val(['a', 'b', 'c'])\n    Traceback (most recent call last):\n        ...\n    ValueError: List contains non-numeric values.\n    \"\"\"\n\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    max_value = None\n    for item in lst:\n        if not isinstance(item, (int, float)):\n            raise ValueError(\"List contains non-numeric values.\")\n        if max_value is None or item > max_value:\n            max_value = item\n\n    return max_value", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[[1, "2", true, 3.14, ["a", "b"], [5, 6, 7], {"8": "eight", "9": "nine"}, "Python", 10, 11, 12]]]}], "Mbpp/410": [{"task_id": "Mbpp/410", "solution": "def min_val(lst):\n    \"\"\"\n    Function to find the minimum value in a given heterogeneous list.\n\n    Parameters:\n    lst (list): The input list containing heterogeneous values.\n\n    Returns:\n    int or str: The minimum value in the list.\n\n    Raises:\n    ValueError: If the list is empty or contains only non-numeric values.\n\n    Examples:\n    >>> min_val(['Python', 3, 2, 4, 5, 'version'])\n    2\n    >>> min_val([])\n    Traceback (most recent call last):\n        ...\n    ValueError: List is empty.\n    >>> min_val(['a', 'b', 'c'])\n    Traceback (most recent call last):\n        ...\n    ValueError: List contains only non-numeric values.\n    \"\"\"\n\n    # Check if the list is empty\n    if not lst:\n        raise ValueError(\"List is empty.\")\n\n    # Check if the list contains only non-numeric values\n    if all(not isinstance(val, (int, float)) for val in lst):\n        raise ValueError(\"List contains only non-numeric values.\")\n\n    # Find the minimum value in the list\n    min_value = min(lst)\n\n    return min_value", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python", 3, 2, 4, 5, "version"]]], "plus_fail_tests": [[["Python", 10, 5, 2.5, 2.5, "version"]]]}], "Mbpp/269": [{"task_id": "Mbpp/269", "solution": "def ascii_value(char):\n    \"\"\"\n    This function takes a character as input and returns its ASCII value.\n\n    Parameters:\n    char (str): A single character.\n\n    Returns:\n    int: The ASCII value of the character.\n    \"\"\"\n    return ord(char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/299": [{"task_id": "Mbpp/299", "solution": "def max_aggregate(lst):\n    \"\"\"\n    Calculate the maximum aggregate from the list of tuples.\n\n    Parameters:\n    lst (list): A list of tuples where each tuple contains a name and an aggregate.\n\n    Returns:\n    tuple: A tuple containing the name with the maximum aggregate and the maximum aggregate value.\n\n    Example:\n    >>> max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])\n    ('Juan Whelan', 212)\n    \"\"\"\n\n    # Initialize variables\n    max_aggregate_name = None\n    max_aggregate_value = float('-inf')\n\n    # Create a dictionary to store the aggregates for each name\n    aggregates = {}\n\n    # Iterate through the list of tuples\n    for name, aggregate in lst:\n        # If the name is already in the dictionary, update the aggregate\n        if name in aggregates:\n            aggregates[name] += aggregate\n        # Otherwise, add the name and aggregate to the dictionary\n        else:\n            aggregates[name] = aggregate\n\n        # Update the maximum aggregate if necessary\n        if aggregates[name] > max_aggregate_value:\n            max_aggregate_name = name\n            max_aggregate_value = aggregates[name]\n\n    # Return the name with the maximum aggregate and the maximum aggregate value\n    return (max_aggregate_name, max_aggregate_value)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[["Alice", 80], ["Bob", -90], ["Charlie", 70], ["Alice", -60], ["Bob", 50]]]]}], "Mbpp/260": [{"task_id": "Mbpp/260", "solution": "def newman_prime(n):\n    \"\"\"\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n\n    Parameters:\n    n (int): The position of the newman\u2013shanks\u2013williams prime number to find.\n\n    Returns:\n    int: The nth newman\u2013shanks\u2013williams prime number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> newman_prime(3)\n    7\n    >>> newman_prime(10)\n    29\n    \"\"\"\n\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    primes = [2, 3, 5]  # First three newman\u2013shanks\u2013williams primes\n\n    if n <= 3:\n        return primes[n - 1]\n\n    for i in range(3, n):\n        next_prime = primes[-1] + 2\n        while True:\n            is_prime = True\n            for prime in primes:\n                if prime * prime > next_prime:\n                    break\n                if next_prime % prime == 0:\n                    is_prime = False\n                    break\n            if is_prime:\n                primes.append(next_prime)\n                break\n            next_prime += 2\n\n    return primes[-1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[100]]}], "Mbpp/265": [{"task_id": "Mbpp/265", "solution": "def list_split(lst, n):\n    result = []\n    for i in range(0, len(lst), n):\n        result.append(lst[i:i+n])\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n"], 3]], "plus_fail_tests": [[[], 1]]}], "Mbpp/389": [{"task_id": "Mbpp/389", "solution": "def find_lucas(n):\n    \"\"\"\n    Function to find the n'th Lucas number.\n\n    Parameters:\n    n (int): The position of the Lucas number to find.\n\n    Returns:\n    int: The n'th Lucas number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be a non-negative integer.\")\n\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        lucas_nums = [2, 1]\n        for i in range(2, n+1):\n            lucas_nums.append(lucas_nums[i-1] + lucas_nums[i-2])\n        return lucas_nums[n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/409": [{"task_id": "Mbpp/409", "solution": "def min_product_tuple(lst):\n    \"\"\"\n    Function to find the minimum product from the pairs of tuples within a given list.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    int: The minimum product of the pairs of tuples.\n\n    Raises:\n    ValueError: If the input is not a list of tuples.\n\n    Examples:\n    >>> min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])\n    8\n    >>> min_product_tuple([(1, 2), (3, 4), (5, 6)])\n    6\n    >>> min_product_tuple([(1, 2), (3, 4), (5, 6), (7, 8)])\n    12\n    \"\"\"\n\n    if not all(isinstance(x, tuple) for x in lst):\n        raise ValueError(\"Input must be a list of tuples.\")\n\n    min_product = float('inf')\n    for pair in lst:\n        product = pair[0] * pair[1]\n        if product < min_product:\n            min_product = product\n\n    return min_product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/305": [{"task_id": "Mbpp/305", "solution": "def start_withp(words):\n    for word in words:\n        if word.startswith('p'):\n            return word.split()\n    return None", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Python PHP", "Java JavaScript", "c c++"]]], "plus_fail_tests": [[["Python Programming", "Java Programming", "Perl Programming", "Ruby Programming", "PHP Programming", "C Programming"]]]}], "Mbpp/392": [{"task_id": "Mbpp/392", "solution": "def get_max_sum(n):\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[60]], "plus_fail_tests": [[100]]}], "Mbpp/274": [{"task_id": "Mbpp/274", "solution": "def even_binomial_Coeff_Sum(n):\n    \"\"\"\n    This function takes in a positive integer n and finds the sum of even index binomial coefficients.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The sum of even index binomial coefficients.\n    \"\"\"\n    # Initialize the sum to 0\n    sum_even_coeff = 0\n\n    # Iterate through the even index binomial coefficients\n    for k in range(n // 2 + 1):\n        # Calculate the binomial coefficient using the formula\n        binomial_coeff = factorial(n) // (factorial(k) * factorial(n - 2 * k))\n\n        # Add the even index binomial coefficient to the sum\n        sum_even_coeff += binomial_coeff\n\n    return sum_even_coeff\ndef factorial(n):\n    \"\"\"\n    This function calculates the factorial of a given number.\n\n    Parameters:\n    n (int): A positive integer.\n\n    Returns:\n    int: The factorial of the given number.\n    \"\"\"\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[4]], "plus_fail_tests": [[10]]}], "Mbpp/287": [{"task_id": "Mbpp/287", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of squares of first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of squares of the first n even natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, n+1):\n        sum_of_squares += i * 2 * i\n    return sum_of_squares", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[100]]}], "Mbpp/283": [{"task_id": "Mbpp/283", "solution": "def validate(num):\n    num_str = str(num)\n    for digit in num_str:\n        if num_str.count(digit) > int(digit):\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/262": [{"task_id": "Mbpp/262", "solution": "def split_two_parts(lst, L):\n    \"\"\"\n    Splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n\n    Parameters:\n    lst (list): The input list to be split.\n    L (int): The length of the first part of the list.\n\n    Returns:\n    tuple: A tuple containing the two resulting lists.\n\n    Example:\n    >>> split_two_parts([1,1,2,3,4,4,5,1],3)\n    ([1, 1, 2], [3, 4, 4, 5, 1])\n    \"\"\"\n    first_part = lst[:L]\n    second_part = lst[L:]\n    return (first_part, second_part)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/267": [{"task_id": "Mbpp/267", "solution": "def square_Sum(n):\n    \"\"\"\n    This function takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the squares of the first n odd natural numbers.\n    \"\"\"\n    sum_of_squares = 0\n    for i in range(1, 2*n, 2):\n        sum_of_squares += i**2\n    return sum_of_squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1000000.0]]}], "Mbpp/284": [{"task_id": "Mbpp/284", "solution": "def check_element(lst, element):\n    \"\"\"\n    Check if all items in the list are equal to the given element.\n\n    Parameters:\n    lst (list): The list to be checked.\n    element: The element to compare with the list items.\n\n    Returns:\n    bool: True if all items in the list are equal to the given element, False otherwise.\n    \"\"\"\n    return all(item == element for item in lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/296": [{"task_id": "Mbpp/296", "solution": "def get_Inv_Count(arr):\n    \"\"\"\n    Function to count inversions in an array.\n\n    Parameters:\n    arr (list): The input array.\n\n    Returns:\n    int: The count of inversions in the array.\n    \"\"\"\n\n    def merge_and_count(left, right):\n        \"\"\"\n        Helper function to merge two sorted arrays and count inversions.\n\n        Parameters:\n        left (list): The left sorted subarray.\n        right (list): The right sorted subarray.\n\n        Returns:\n        tuple: A tuple containing the merged sorted array and the count of inversions.\n        \"\"\"\n        result = []\n        count = 0\n        i, j = 0, 0\n\n        while i < len(left) and j < len(right):\n            if left[i] <= right[j]:\n                result.append(left[i])\n                i += 1\n            else:\n                result.append(right[j])\n                count += len(left) - i\n                j += 1\n\n        result.extend(left[i:])\n        result.extend(right[j:])\n\n        return result, count\n\n    def merge_sort_and_count(arr):\n        \"\"\"\n        Helper function to perform merge sort and count inversions.\n\n        Parameters:\n        arr (list): The input array.\n\n        Returns:\n        tuple: A tuple containing the sorted array and the count of inversions.\n        \"\"\"\n        if len(arr) <= 1:\n            return arr, 0\n\n        mid = len(arr) // 2\n        left, left_count = merge_sort_and_count(arr[:mid])\n        right, right_count = merge_sort_and_count(arr[mid:])\n        merged, split_count = merge_and_count(left, right)\n\n        return merged, left_count + right_count + split_count\n\n    _, inversion_count = merge_sort_and_count(arr)\n    return inversion_count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/276": [{"task_id": "Mbpp/276", "solution": "import math\ndef volume_cylinder(radius, height):\n    \"\"\"\n    Calculate the volume of a cylinder given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the cylinder.\n    height (float): The height of the cylinder.\n\n    Returns:\n    float: The volume of the cylinder.\n    \"\"\"\n    return math.pi * radius**2 * height", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/286": [{"task_id": "Mbpp/286", "solution": "def max_sub_array_sum_repeated(arr, k, n):\n    def kadane(arr):\n        max_so_far = float('-inf')\n        max_ending_here = 0\n\n        for num in arr:\n            max_ending_here += num\n            max_so_far = max(max_so_far, max_ending_here)\n            if max_ending_here < 0:\n                max_ending_here = 0\n\n        return max_so_far\n\n    def kadane_wrap(arr, k):\n        max_kadane = kadane(arr)\n        if k == 1:\n            return max_kadane\n\n        max_wrap = 0\n        for i in range(k):\n            max_wrap += arr[i]\n\n        current_wrap_sum = max_wrap\n        for i in range(1, k):\n            current_wrap_sum = current_wrap_sum - arr[i - 1] + arr[(i - 1 + n) % n]\n            max_wrap = max(max_wrap, current_wrap_sum)\n\n        return max(max_kadane, max_wrap)\n\n    return kadane_wrap(arr * k, n * k)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[-1, 10, 20], 3, 2]], "plus_fail_tests": [[[5, -2, 10, 4, -7, 3], 6, 5]]}], "Mbpp/312": [{"task_id": "Mbpp/312", "solution": "import math\ndef volume_cone(radius, height):\n    \"\"\"\n    Calculate the volume of a cone given its radius and height.\n\n    Parameters:\n    radius (float): The radius of the base of the cone.\n    height (float): The height of the cone.\n\n    Returns:\n    float: The volume of the cone.\n    \"\"\"\n    if radius <= 0 or height <= 0:\n        raise ValueError(\"Radius and height must be positive.\")\n\n    volume = (1/3) * math.pi * radius**2 * height\n    return volume", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/277": [{"task_id": "Mbpp/277", "solution": "def dict_filter(dictionary, n):\n    filtered_dict = {key: value for key, value in dictionary.items() if value >= n}\n    return filtered_dict", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/412": [{"task_id": "Mbpp/412", "solution": "def remove_odd(lst):\n    \"\"\"\n    Write a python function to remove odd numbers from a given list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    list: A new list with odd numbers removed.\n\n    Examples:\n    >>> remove_odd([1, 2, 3])\n    [2]\n    >>> remove_odd([1, 2, 3, 4, 5])\n    [2, 4]\n    >>> remove_odd([2, 4, 6])\n    [2, 4, 6]\n    \"\"\"\n    return [num for num in lst if num % 2 == 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/292": [{"task_id": "Mbpp/292", "solution": "def find(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the quotient of the two numbers rounded down to the nearest integer.\n\n    Parameters:\n    a (int): The dividend.\n    b (int): The divisor.\n\n    Returns:\n    int: The quotient of a divided by b rounded down to the nearest integer.\n    \"\"\"\n    return a // b", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/285": [{"task_id": "Mbpp/285", "solution": "import re\ndef text_match_two_three(text):\n    \"\"\"\n    Checks whether a string contains the 'a' character followed by two or three 'b' characters.\n\n    Parameters:\n    text (str): The string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a(b{2,3})'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/280": [{"task_id": "Mbpp/280", "solution": "def sequential_search(arr, element):\n    for i in range(len(arr)):\n        if arr[i] == element:\n            return True, i\n    return False, -1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/278": [{"task_id": "Mbpp/278", "solution": "def count_first_elements(tup):\n    count = 0\n    for element in tup:\n        if isinstance(element, tuple):\n            break\n        count += 1\n    return count", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5, 6]]]}], "Mbpp/272": [{"task_id": "Mbpp/272", "solution": "def rear_extract(lst):\n    \"\"\"\n    This function takes in a list of tuples and returns a list containing the rear element of each tuple.\n\n    Parameters:\n    lst (list): A list of tuples.\n\n    Returns:\n    list: A list containing the rear element of each tuple.\n    \"\"\"\n    return [tup[-1] for tup in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/413": [{"task_id": "Mbpp/413", "solution": "def extract_nth_element(lst, n):\n    \"\"\"\n    Extracts the nth element from a given list of tuples and returns a list of extracted elements.\n\n    Parameters:\n    lst (list): A list of tuples.\n    n (int): The index of the element to extract.\n\n    Returns:\n    list: A list of extracted elements.\n    \"\"\"\n    return [tup[n] for tup in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/388": [{"task_id": "Mbpp/388", "solution": "def highest_Power_of_2(n):\n    \"\"\"\n    This function takes an integer n as input and returns the highest power of 2 that is less than or equal to n.\n\n    Parameters:\n    n (int): The input integer.\n\n    Returns:\n    int: The highest power of 2 that is less than or equal to n.\n    \"\"\"\n    power = 1\n    while power <= n:\n        power *= 2\n    return power // 2", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/397": [{"task_id": "Mbpp/397", "solution": "def median_numbers(a, b, c):\n    \"\"\"\n    This function takes three numbers as input and returns the median value.\n\n    Parameters:\n    a (float or int): The first number.\n    b (float or int): The second number.\n    c (float or int): The third number.\n\n    Returns:\n    float: The median value of the three numbers.\n    \"\"\"\n    sorted_numbers = sorted([a, b, c])\n    median = sorted_numbers[1]\n    return median", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/261": [{"task_id": "Mbpp/261", "solution": "def division_elements(tuple1, tuple2):\n    \"\"\"\n    Function to perform mathematical division operation element-wise across two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the division operation result element-wise.\n\n    Raises:\n    ZeroDivisionError: If any element in tuple2 is zero.\n\n    Examples:\n    >>> division_elements((10, 4, 6, 9), (5, 2, 3, 3))\n    (2, 2, 2, 3)\n    \"\"\"\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = []\n    for i in range(len(tuple1)):\n        if tuple2[i] == 0:\n            raise ZeroDivisionError(\"Division by zero is not allowed.\")\n        result.append(tuple1[i] / tuple2[i])\n\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/290": [{"task_id": "Mbpp/290", "solution": "def max_length(lst):\n    \"\"\"\n    Find the list of maximum length in a list of lists.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    tuple: A tuple containing the length of the maximum length list and the maximum length list itself.\n\n    Example:\n    >>> max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])\n    (3, [13, 15, 17])\n    \"\"\"\n    max_len = max(len(sublist) for sublist in lst)\n    max_list = [sublist for sublist in lst if len(sublist) == max_len][0]\n    return max_len, max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/306": [{"task_id": "Mbpp/306", "solution": "def max_sum_increasing_subseq(arr, n, i, k):\n    # Initialize the maximum sum of increasing subsequence\n    max_sum = 0\n\n    # Iterate through the array from i to k\n    for j in range(i, k+1):\n        # Check if the current element is greater than the previous element\n        if arr[j] > arr[j-1]:\n            # Update the maximum sum of increasing subsequence\n            max_sum += arr[j]\n\n    return max_sum", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 101, 2, 3, 100, 4, 5], 7, 4, 6]], "plus_fail_tests": [[[5, 2, 4, 1, 3, 6], 6, 1, 3]]}], "Mbpp/273": [{"task_id": "Mbpp/273", "solution": "def substract_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A new tuple with the subtracted elements.\n\n    Raises:\n    ValueError: If the lengths of the input tuples are not equal.\n\n    Examples:\n    >>> substract_elements((10, 4, 5), (2, 5, 18))\n    (8, -1, -13)\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"The lengths of the input tuples must be equal.\")\n\n    result = tuple(a - b for a, b in zip(tuple1, tuple2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/391": [{"task_id": "Mbpp/391", "solution": "def convert_list_dictionary(keys, values1, values2):\n    result = []\n    for i in range(len(keys)):\n        nested_dict = {keys[i]: {values1[i]: values2[i]}}\n        result.append(nested_dict)\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[["S001", "S002", "S003", "S004"], ["Adina Park", "Leyton Marsh", "Duncan Boyle", "Saim Richards"], [[1, 2, 3], [4, 5, 6], {"a": "x", "b": "y", "c": "z"}]]]}], "Mbpp/281": [{"task_id": "Mbpp/281", "solution": "def all_unique(lst):\n    \"\"\"\n    Check if the elements of a given list are unique or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if all elements are unique, False otherwise.\n    \"\"\"\n    return len(lst) == len(set(lst))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/414": [{"task_id": "Mbpp/414", "solution": "def overlapping(seq1, seq2):\n    \"\"\"\n    Check if any value in seq1 exists in seq2.\n\n    Parameters:\n    seq1 (list or tuple): The first sequence.\n    seq2 (list or tuple): The second sequence.\n\n    Returns:\n    bool: True if any value in seq1 exists in seq2, False otherwise.\n    \"\"\"\n    for value in seq1:\n        if value in seq2:\n            return True\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/398": [{"task_id": "Mbpp/398", "solution": "def sum_of_digits(numbers):\n    \"\"\"\n    Function to compute the sum of digits of each number in a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The sum of digits of each number in the list.\n    \"\"\"\n    def get_digits(number):\n        \"\"\"\n        Helper function to get the digits of a number.\n\n        Parameters:\n        number (int): A number.\n\n        Returns:\n        list: A list of digits.\n        \"\"\"\n        digits = []\n        while number > 0:\n            digits.append(number % 10)\n            number //= 10\n        return digits\n\n    def sum_digits(digits):\n        \"\"\"\n        Helper function to sum the digits of a number.\n\n        Parameters:\n        digits (list): A list of digits.\n\n        Returns:\n        int: The sum of digits.\n        \"\"\"\n        return sum(digits)\n\n    result = []\n    for number in numbers:\n        digits = get_digits(number)\n        result.append(sum_digits(digits))\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[10, 2, 56]]], "plus_fail_tests": [[[]]]}], "Mbpp/390": [{"task_id": "Mbpp/390", "solution": "def add_string(lst, format_str):\n    \"\"\"\n    Apply a given format string to all of the elements in a list.\n\n    Parameters:\n    lst (list): The list of elements to apply the format string to.\n    format_str (str): The format string to apply to each element.\n\n    Returns:\n    list: A new list with the format string applied to each element.\n\n    Example:\n    >>> add_string([1, 2, 3, 4], 'temp{0}')\n    ['temp1', 'temp2', 'temp3', 'temp4']\n    \"\"\"\n    return [format_str.format(elem) for elem in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/297": [{"task_id": "Mbpp/297", "solution": "def flatten_list(nested_list):\n    flattened_list = []\n    for item in nested_list:\n        if isinstance(item, list):\n            flattened_list.extend(flatten_list(item))\n        else:\n            flattened_list.append(item)\n    return flattened_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/309": [{"task_id": "Mbpp/309", "solution": "def maximum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the maximum of the two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The maximum of the two numbers.\n    \"\"\"\n    return max(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/259": [{"task_id": "Mbpp/259", "solution": "def maximize_elements(tuple1, tuple2):\n    \"\"\"\n    Write a function to maximize the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: The maximized tuple.\n\n    Raises:\n    ValueError: If the lengths of the input tuples are not equal.\n\n    Examples:\n    >>> maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))\n    ((6, 7), (4, 9), (2, 9), (7, 10))\n    \"\"\"\n\n    if len(tuple1) != len(tuple2):\n        raise ValueError(\"Input tuples must have equal lengths.\")\n\n    maximized_tuple = tuple(max(x, y) for x, y in zip(tuple1, tuple2))\n    return maximized_tuple", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 3], [4, 5], [2, 9], [1, 10]], [[6, 7], [3, 9], [1, 1], [7, 3]]]], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6], [7, 8], [7, 8]], [[7, 7], [8, 7], [6, 5], [4, 3], [2, 1]]]]}], "Mbpp/270": [{"task_id": "Mbpp/270", "solution": "def sum_even_and_even_index(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of even numbers at even positions in the list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of even numbers at even positions in the list.\n    \"\"\"\n    return sum(lst[1::2])", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[5, 6, 12, 1, 18, 8]]], "plus_fail_tests": [[[2]]]}], "Mbpp/308": [{"task_id": "Mbpp/308", "solution": "def large_product(list1, list2, num):\n    \"\"\"\n    Function to find the specified number of largest products from two given lists, selecting one factor from each list.\n\n    Parameters:\n    list1 (list): The first list of numbers.\n    list2 (list): The second list of numbers.\n    num (int): The number of largest products to find.\n\n    Returns:\n    list: A list of the specified number of largest products.\n\n    Example:\n    >>> large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)\n    [60, 54, 50]\n    \"\"\"\n\n    # Create a list to store the products\n    products = []\n\n    # Iterate over the first list\n    for i in list1:\n        # Iterate over the second list\n        for j in list2:\n            # Calculate the product and add it to the list\n            products.append(i * j)\n\n    # Sort the products in descending order\n    products.sort(reverse=True)\n\n    # Return the specified number of largest products\n    return products[:num]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/282": [{"task_id": "Mbpp/282", "solution": "def sub_list(list1, list2):\n    \"\"\"\n    Subtracts two lists element-wise and returns the result.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: The subtracted list.\n\n    Raises:\n    ValueError: If the lengths of the two lists are not equal.\n\n    Examples:\n    >>> sub_list([1, 2, 3],[4,5,6])\n    [-3, -3, -3]\n    >>> sub_list([1, 2, 3],[4,5])\n    ValueError: The lengths of the two lists are not equal.\n    \"\"\"\n\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of the two lists are not equal.\")\n\n    result = [a - b for a, b in zip(list1, list2)]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/405": [{"task_id": "Mbpp/405", "solution": "def check_tuplex(tuplex, element):\n    \"\"\"\n    Check if an element exists within a tuple.\n\n    Parameters:\n    tuplex (tuple): The tuple to search in.\n    element: The element to search for.\n\n    Returns:\n    bool: True if the element exists in the tuple, False otherwise.\n    \"\"\"\n    return element in tuplex", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/264": [{"task_id": "Mbpp/264", "solution": "def dog_age(human_age):\n    \"\"\"\n    Function to calculate a dog's age in dog's years.\n\n    Parameters:\n    human_age (int): The age of the dog in human years.\n\n    Returns:\n    int: The age of the dog in dog's years.\n    \"\"\"\n    if human_age <= 0:\n        return 0\n    elif human_age <= 2:\n        return 10.5 * human_age\n    else:\n        return 21 + 4 * (human_age - 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/310": [{"task_id": "Mbpp/310", "solution": "def string_to_tuple(string):\n    \"\"\"\n    Convert a given string to a tuple of characters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    tuple: A tuple of characters.\n\n    Examples:\n    >>> string_to_tuple(\"python 3.0\")\n    ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\n    \"\"\"\n    return tuple(string)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python 3.0"]], "plus_fail_tests": [["hello   world"]]}], "Mbpp/293": [{"task_id": "Mbpp/293", "solution": "import math\ndef otherside_rightangle(a, b):\n    \"\"\"\n    This function takes two sides of a right-angled triangle as input and returns the length of the third side.\n\n    Parameters:\n    a (float): Length of one side of the right-angled triangle.\n    b (float): Length of the other side of the right-angled triangle.\n\n    Returns:\n    float: Length of the third side of the right-angled triangle.\n    \"\"\"\n    c = math.sqrt(a**2 + b**2)\n    return c", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/300": [{"task_id": "Mbpp/300", "solution": "import math\ndef count_binary_seq(n):\n    \"\"\"\n    Function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n\n    Parameters:\n    n (int): The length of the binary sequence.\n\n    Returns:\n    float: The count of binary sequences satisfying the condition.\n\n    \"\"\"\n\n    # Base case: If n is 0, there is only one possible sequence, which is an empty sequence\n    if n == 0:\n        return 1\n\n    # Initialize count of binary sequences\n    count = 0\n\n    # Recursive case: Generate binary sequences of length 2n by appending 0 or 1 to the previous sequences\n    for i in range(2):\n        # Generate binary sequences with the current bit\n        count += count_binary_seq(n - 1)\n\n    return count", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[4]]}], "Mbpp/415": [{"task_id": "Mbpp/415", "solution": "def max_Product(arr):\n    \"\"\"\n    Function to find a pair with highest product from a given array of integers.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    tuple: A tuple containing the two integers with the highest product.\n\n    Raises:\n    ValueError: If the input list has less than 2 elements.\n\n    Examples:\n    >>> max_Product([1,2,3,4,7,0,8,4])\n    (7, 8)\n    \"\"\"\n\n    if len(arr) < 2:\n        raise ValueError(\"Input list must have at least 2 elements.\")\n\n    max_product = float('-inf')\n    result = None\n\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            product = arr[i] * arr[j]\n            if product > max_product:\n                max_product = product\n                result = (arr[i], arr[j])\n\n    return result", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1000000, 2000000, 3000000, 4000000, 4000000]]]}], "Mbpp/406": [{"task_id": "Mbpp/406", "solution": "def find_Parity(num):\n    \"\"\"\n    This function takes an integer as input and returns True if the parity of the number is odd, and False otherwise.\n\n    Parameters:\n    num (int): The number to check for odd parity.\n\n    Returns:\n    bool: True if the parity of the number is odd, False otherwise.\n    \"\"\"\n    return num % 2 != 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/257": [{"task_id": "Mbpp/257", "solution": "def swap_numbers(num1, num2):\n    \"\"\"\n    This function takes in two numbers and returns a tuple with the second number and then the first number.\n\n    Parameters:\n    num1 (int or float): The first number.\n    num2 (int or float): The second number.\n\n    Returns:\n    tuple: A tuple with the second number as the first element and the first number as the second element.\n    \"\"\"\n    return num2, num1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/394": [{"task_id": "Mbpp/394", "solution": "def check_distinct(t):\n    \"\"\"\n    Check if given tuple contains no duplicates.\n\n    Parameters:\n    t (tuple): The tuple to be checked.\n\n    Returns:\n    bool: True if the tuple contains no duplicates, False otherwise.\n    \"\"\"\n    return len(t) == len(set(t))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/311": [{"task_id": "Mbpp/311", "solution": "def set_left_most_unset_bit(num):\n    \"\"\"\n    This function takes an integer as input and returns the number with the left most unset bit set to 1.\n\n    Parameters:\n    num (int): The input integer.\n\n    Returns:\n    int: The number with the left most unset bit set to 1.\n    \"\"\"\n    # Find the left most unset bit\n    bit_pos = 0\n    while num & (1 << bit_pos):\n        bit_pos += 1\n\n    # Set the left most unset bit to 1\n    num |= (1 << bit_pos)\n\n    return num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[255]]}], "Mbpp/301": [{"task_id": "Mbpp/301", "solution": "def dict_depth(dictionary):\n    \"\"\"\n    Function to find the depth of a dictionary.\n\n    Parameters:\n    dictionary (dict): The dictionary to find the depth of.\n\n    Returns:\n    int: The depth of the dictionary.\n    \"\"\"\n    def find_depth(dictionary, current_depth):\n        if not isinstance(dictionary, dict):\n            return current_depth\n        max_depth = current_depth\n        for value in dictionary.values():\n            if isinstance(value, dict):\n                depth = find_depth(value, current_depth + 1)\n                if depth > max_depth:\n                    max_depth = depth\n        return max_depth\n\n    return find_depth(dictionary, 1)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/268": [{"task_id": "Mbpp/268", "solution": "def find_star_num(n):\n    \"\"\"\n    Function to find the n'th star number.\n\n    Parameters:\n    n (int): The position of the star number to find.\n\n    Returns:\n    int: The n'th star number.\n\n    Raises:\n    ValueError: If n is less than 1.\n\n    Examples:\n    >>> find_star_num(3)\n    37\n    >>> find_star_num(5)\n    61\n    \"\"\"\n    if n < 1:\n        raise ValueError(\"n must be greater than or equal to 1.\")\n\n    star_num = 0\n    for i in range(1, n + 1):\n        star_num += i\n\n    return star_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3]], "plus_fail_tests": [[1000000]]}], "Mbpp/256": [{"task_id": "Mbpp/256", "solution": "def count_Primes_nums(n):\n    \"\"\"\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n\n    Parameters:\n    n (int): The non-negative number.\n\n    Returns:\n    int: The number of prime numbers less than n.\n    \"\"\"\n\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num ** 0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    for num in range(2, n):\n        if is_prime(num):\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/395": [{"task_id": "Mbpp/395", "solution": "def first_non_repeating_character(string):\n    char_count = {}\n    for char in string:\n        char_count[char] = char_count.get(char, 0) + 1\n    \n    for char in string:\n        if char_count[char] == 1:\n            return char\n    \n    return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/404": [{"task_id": "Mbpp/404", "solution": "def minimum(a, b):\n    \"\"\"\n    This function takes two numbers as input and returns the minimum of the two numbers.\n\n    Parameters:\n    a (int or float): The first number.\n    b (int or float): The second number.\n\n    Returns:\n    int or float: The minimum of the two numbers.\n    \"\"\"\n    return min(a, b)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/418": [{"task_id": "Mbpp/418", "solution": "def Find_Max(lst):\n    \"\"\"\n    This function takes a list of lists as input and returns the element with the maximum length.\n\n    Parameters:\n    lst (list): A list of lists.\n\n    Returns:\n    list: The element with the maximum length.\n\n    Raises:\n    ValueError: If the input is not a list of lists.\n\n    Examples:\n    >>> Find_Max([['A'],['A','B'],['A','B','C']])\n    ['A', 'B', 'C']\n    \"\"\"\n\n    if not isinstance(lst, list):\n        raise ValueError(\"Input must be a list of lists.\")\n\n    max_length = 0\n    max_element = []\n\n    for element in lst:\n        if isinstance(element, list) and len(element) > max_length:\n            max_length = len(element)\n            max_element = element\n\n    return max_element", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/564": [{"task_id": "Mbpp/564", "solution": "def count_Pairs(nums, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if nums[i] != nums[j]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/426": [{"task_id": "Mbpp/426", "solution": "def filter_oddnumbers(numbers):\n    \"\"\"\n    Function to filter odd numbers from a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A list containing only the odd numbers from the input list.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/440": [{"task_id": "Mbpp/440", "solution": "def find_adverb_position(sentence):\n    \"\"\"\n    This function takes a sentence as input and returns the first adverb and their positions in the sentence.\n\n    Parameters:\n    sentence (str): The input sentence.\n\n    Returns:\n    tuple: A tuple containing the start position, end position, and the adverb found in the sentence.\n\n    Raises:\n    ValueError: If no adverb is found in the sentence.\n\n    Examples:\n    >>> find_adverb_position(\"clearly!! we can see the sky\")\n    (0, 7, 'clearly')\n    >>> find_adverb_position(\"I am walking on the street\")\n    (10, 18, 'on')\n    >>> find_adverb_position(\"The weather is beautiful today\")\n    (12, 20, 'beautiful')\n    \"\"\"\n\n    # Define a list of adverbs\n    adverbs = [\"clearly\", \"easily\", \"often\", \"always\", \"never\", \"suddenly\", \"quickly\", \"carefully\", \"slowly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"joyfully\", \"sadly\", \"calmly\", \"quietly\", \"loudly\", \"clearly\", \"easily\", \"often\", \"always\", \"never\", \"suddenly\", \"quickly\", \"carefully\", \"slowly\", \"happily\", \"sadly\", \"angrily\", \"fearfully\", \"joyfully\", \"sadly\", \"calmly\", \"quietly\", \"loudly\"]\n\n    # Split the sentence into words\n    words = sentence.split()\n\n    # Iterate over the words\n    for i, word in enumerate(words):\n        # Check if the word is an adverb\n        if word.lower() in adverbs:\n            # Return the start position, end position, and the adverb\n            return i, i + len(word) - 1, word\n\n    # Raise a ValueError if no adverb is found\n    raise ValueError(\"No adverb found in the sentence.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["clearly!! we can see the sky"]], "plus_fail_tests": [["heavily and quickly we ran down the steep hill"]]}], "Mbpp/558": [{"task_id": "Mbpp/558", "solution": "def digit_distance_nums(num1, num2):\n    \"\"\"\n    This function takes two integers as input and returns the sum of the per-digit difference between them.\n\n    Parameters:\n    num1 (int): The first integer.\n    num2 (int): The second integer.\n\n    Returns:\n    int: The sum of the per-digit difference between num1 and num2.\n    \"\"\"\n    # Convert the integers to strings for easier manipulation\n    num1_str = str(num1)\n    num2_str = str(num2)\n\n    # Find the length of the longer string\n    max_length = max(len(num1_str), len(num2_str))\n\n    # Pad the shorter string with leading zeros to match the length of the longer string\n    num1_str = num1_str.zfill(max_length)\n    num2_str = num2_str.zfill(max_length)\n\n    # Calculate the per-digit difference and sum them up\n    total_diff = 0\n    for i in range(max_length):\n        diff = abs(int(num1_str[i]) - int(num2_str[i]))\n        total_diff += diff\n\n    return total_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/430": [{"task_id": "Mbpp/430", "solution": "def parabola_directrix(a, b, c):\n    \"\"\"\n    This function takes three coefficients of a parabola (a, b, c) and returns the directrix of the parabola.\n\n    Parameters:\n    a (float): Coefficient of x^2\n    b (float): Coefficient of x\n    c (float): Constant term\n\n    Returns:\n    float: Directrix of the parabola\n\n    Raises:\n    ValueError: If the parabola does not have a directrix (i.e., if the discriminant is negative)\n\n    \"\"\"\n    discriminant = b**2 - 4*a*c\n    if discriminant < 0:\n        raise ValueError(\"The parabola does not have a directrix (discriminant is negative)\")\n    else:\n        directrix = -b / (2*a)\n        return directrix", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[5, 3, 2]], "plus_fail_tests": [[0, 0, 0]]}], "Mbpp/436": [{"task_id": "Mbpp/436", "solution": "def neg_nos(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list containing only the negative numbers from the input list.\n\n    Parameters:\n    lst (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the negative numbers from the input list.\n    \"\"\"\n    return [num for num in lst if num < 0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/421": [{"task_id": "Mbpp/421", "solution": "def concatenate_tuple(t, delimiter='-'):\n    \"\"\"\n    Concatenates each element of a tuple by the delimiter.\n\n    Parameters:\n    t (tuple): The input tuple.\n    delimiter (str, optional): The delimiter to concatenate the elements. Default is '-'.\n\n    Returns:\n    str: The concatenated string.\n\n    Examples:\n    >>> concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") )\n    'ID-is-4-UTS'\n    \"\"\"\n    return delimiter.join(str(x) for x in t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/435": [{"task_id": "Mbpp/435", "solution": "def last_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the last digit of the number.\n\n    Parameters:\n    number (int): The number.\n\n    Returns:\n    int: The last digit of the number.\n    \"\"\"\n    return number % 10\n\n# Test cases\nassert last_digit(123) == 3\nassert last_digit(456789) == 9\nassert last_digit(0) == 0\nassert last_digit(-12345) == 5", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/447": [{"task_id": "Mbpp/447", "solution": "def cube_nums(nums):\n    \"\"\"\n    Function to find cubes of individual elements in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    list: A list of cubes of the input numbers.\n    \"\"\"\n    cubes = [num ** 3 for num in nums]\n    return cubes", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/420": [{"task_id": "Mbpp/420", "solution": "def cube_Sum(n):\n    \"\"\"\n    This function takes an integer n as input and returns the cube sum of the first n even natural numbers.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The cube sum of the first n even natural numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 3\n\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/424": [{"task_id": "Mbpp/424", "solution": "def extract_rear(tup):\n    \"\"\"\n    Extracts the rear index element of each string in the given tuple.\n\n    Parameters:\n    tup (tuple): A tuple of strings.\n\n    Returns:\n    list: A list containing the rear index elements of the strings in the tuple.\n    \"\"\"\n    result = []\n    for string in tup:\n        if string:\n            result.append(string[-1])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/459": [{"task_id": "Mbpp/459", "solution": "def remove_uppercase(string):\n    \"\"\"\n    Remove uppercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with uppercase substrings removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/475": [{"task_id": "Mbpp/475", "solution": "def sort_counter(dictionary):\n    \"\"\"\n    Sorts a dictionary by value in descending order and returns a list of tuples.\n\n    Parameters:\n    dictionary (dict): The dictionary to be sorted.\n\n    Returns:\n    list: A list of tuples, where each tuple contains a key-value pair from the dictionary, sorted by value in descending order.\n    \"\"\"\n    sorted_items = sorted(dictionary.items(), key=lambda x: x[1], reverse=True)\n    return sorted_items", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/471": [{"task_id": "Mbpp/471", "solution": "def find_remainder(arr, n):\n    \"\"\"\n    This function takes an array of integers and a modulus n as input. It returns the product of the array multiplication modulo n.\n\n    Parameters:\n    arr (list): A list of integers.\n    n (int): The modulus.\n\n    Returns:\n    int: The product of the array multiplication modulo n.\n    \"\"\"\n    product = 1\n    for num in arr:\n        product = (product * num) % n\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/456": [{"task_id": "Mbpp/456", "solution": "def reverse_string_list(string_list):\n    \"\"\"\n    This function takes a list of string values as input and returns a new list with each string reversed.\n\n    Parameters:\n    string_list (list): A list of string values.\n\n    Returns:\n    list: A new list with each string reversed.\n    \"\"\"\n    reversed_list = []\n    for string in string_list:\n        reversed_list.append(string[::-1])\n    return reversed_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/474": [{"task_id": "Mbpp/474", "solution": "def replace_char(string, old_char, new_char):\n    \"\"\"\n    Replaces all occurrences of a character in a string with a new character.\n\n    Parameters:\n    string (str): The input string.\n    old_char (str): The character to be replaced.\n    new_char (str): The character to replace with.\n\n    Returns:\n    str: The modified string with replaced characters.\n    \"\"\"\n    return string.replace(old_char, new_char)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/567": [{"task_id": "Mbpp/567", "solution": "def is_sorted_list(lst):\n    \"\"\"\n    Check whether a specified list is sorted or not.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if the list is sorted, False otherwise.\n    \"\"\"\n    return lst == sorted(lst)\n\n# Test cases\nassert is_sorted_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17]) == True", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/451": [{"task_id": "Mbpp/451", "solution": "def remove_whitespaces(string):\n    \"\"\"\n    Remove all whitespaces from the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/422": [{"task_id": "Mbpp/422", "solution": "def find_Average_Of_Cube(n):\n    \"\"\"\n    This function takes an integer n as input and returns the average of cubes of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers.\n\n    Returns:\n    float: The average of cubes of first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    average = sum_of_cubes / n\n    return average", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/468": [{"task_id": "Mbpp/468", "solution": "def max_product(arr):\n    \"\"\"\n    Function to find the maximum product formed by multiplying numbers of an increasing subsequence of an array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The maximum product formed by multiplying numbers of an increasing subsequence of the array.\n\n    Examples:\n    >>> max_product([3, 100, 4, 5, 150, 6])\n    3000\n    \"\"\"\n\n    # Initialize variables\n    n = len(arr)\n    dp = [1] * n\n\n    # Calculate the maximum product for each index\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j]:\n                dp[i] = max(dp[i], dp[j] * arr[i])\n\n    # Return the maximum product\n    return max(dp)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 100, 4, 5, 150, 6]]], "plus_fail_tests": [[[-3, -100, -4, -5, -150, -6]]]}], "Mbpp/563": [{"task_id": "Mbpp/563", "solution": "import re\ndef extract_values(string):\n    \"\"\"\n    Extracts values between quotation marks from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/457": [{"task_id": "Mbpp/457", "solution": "def Find_Min(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns the sublist with the minimum length.\n\n    Parameters:\n    lst (list): A list of sublists.\n\n    Returns:\n    list: The sublist with the minimum length.\n\n    Examples:\n    >>> Find_Min([[1],[1,2],[1,2,3]])\n    [1]\n    \"\"\"\n    min_length = float('inf')\n    min_sublist = []\n\n    for sublist in lst:\n        if len(sublist) < min_length:\n            min_length = len(sublist)\n            min_sublist = sublist\n\n    return min_sublist", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/425": [{"task_id": "Mbpp/425", "solution": "def count_element_in_list(lst, element):\n    \"\"\"\n    Function to count the number of sublists containing a particular element.\n\n    Parameters:\n    lst (list): The list of sublists.\n    element: The element to count in the sublists.\n\n    Returns:\n    int: The count of sublists containing the element.\n    \"\"\"\n    count = 0\n    for sublist in lst:\n        if element in sublist:\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/479": [{"task_id": "Mbpp/479", "solution": "def first_digit(number):\n    \"\"\"\n    This function takes a number as input and returns the first digit of the number.\n\n    Parameters:\n    number (int): The number from which the first digit needs to be extracted.\n\n    Returns:\n    int: The first digit of the given number.\n    \"\"\"\n    # Convert the number to a string to access individual digits\n    number_str = str(number)\n\n    # Extract the first digit by accessing the first character of the string\n    first_digit = int(number_str[0])\n\n    return first_digit\n\n# Test cases\nassert first_digit(123) == 1\nassert first_digit(987654321) == 9\nassert first_digit(-123) == -1\nassert first_digit(0) == 0", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/458": [{"task_id": "Mbpp/458", "solution": "def rectangle_area(length, width):\n    \"\"\"\n    Calculate the area of a rectangle given its length and width.\n\n    Parameters:\n    length (float or int): The length of the rectangle.\n    width (float or int): The width of the rectangle.\n\n    Returns:\n    float: The area of the rectangle.\n    \"\"\"\n    return length * width", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/448": [{"task_id": "Mbpp/448", "solution": "def cal_sum(n):\n    \"\"\"\n    Calculate the sum of the first n Perrin numbers.\n\n    Parameters:\n    n (int): The number of Perrin numbers to sum.\n\n    Returns:\n    int: The sum of the first n Perrin numbers.\n    \"\"\"\n    if n <= 0:\n        return 0\n\n    perrin_numbers = [3, 0, 2]  # Initial Perrin numbers\n    sum_perrin = 3  # Sum of the first Perrin number\n\n    if n <= 2:\n        return sum_perrin\n\n    for i in range(3, n):\n        next_perrin = perrin_numbers[i-2] + perrin_numbers[i-3]\n        perrin_numbers.append(next_perrin)\n        sum_perrin += next_perrin\n\n    return sum_perrin", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[-5]]}], "Mbpp/454": [{"task_id": "Mbpp/454", "solution": "import re\ndef text_match_wordz(text):\n    \"\"\"\n    Function to match a word containing 'z'.\n\n    Parameters:\n    text (str): The input text to search for a word containing 'z'.\n\n    Returns:\n    bool: True if a word containing 'z' is found, False otherwise.\n    \"\"\"\n    pattern = r'\\b\\w*z\\w*\\b'\n    match = re.search(pattern, text)\n    return bool(match)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/455": [{"task_id": "Mbpp/455", "solution": "def check_monthnumb_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 31 days or not.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 31 days, False otherwise.\n    \"\"\"\n    if month_number in [1, 3, 5, 7, 8, 10, 12]:\n        return True\n    elif month_number == 2:\n        return False  # February has 28 or 29 days\n    elif month_number in [4, 6, 9, 11]:\n        return False\n    else:\n        return False  # Invalid month number", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/432": [{"task_id": "Mbpp/432", "solution": "def median_trapezium(a, b, c):\n    \"\"\"\n    Calculate the median length of a trapezium.\n\n    Parameters:\n    a (float): Length of the top base of the trapezium.\n    b (float): Length of the bottom base of the trapezium.\n    c (float): Height of the trapezium.\n\n    Returns:\n    float: Median length of the trapezium.\n\n    Raises:\n    ValueError: If any of the input values is negative.\n\n    \"\"\"\n    if a < 0 or b < 0 or c < 0:\n        raise ValueError(\"Input values cannot be negative.\")\n\n    median = (a + b) / 2\n    return median", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[-88, 999999, 10000001]]}], "Mbpp/463": [{"task_id": "Mbpp/463", "solution": "def max_subarray_product(arr):\n    \"\"\"\n    Finds the maximum product subarray of the given array.\n\n    Parameters:\n    arr (list): The input array of integers.\n\n    Returns:\n    int: The maximum product of any subarray in the given array.\n\n    Examples:\n    >>> max_subarray_product([1, -2, -3, 0, 7, -8, -2])\n    112\n    \"\"\"\n\n    if not arr:\n        return 0\n\n    max_product = float('-inf')\n    current_product = 1\n\n    for num in arr:\n        current_product *= num\n        max_product = max(max_product, current_product)\n\n        if num == 0:\n            current_product = 1\n\n    return max_product", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[-2, -2, 4, -6, 8, 10, -12, -16, 8]]]}], "Mbpp/446": [{"task_id": "Mbpp/446", "solution": "def count_Occurrence(tup, lst):\n    count = 0\n    for element in lst:\n        count += tup.count(element)\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/441": [{"task_id": "Mbpp/441", "solution": "def surfacearea_cube(size):\n    \"\"\"\n    Calculate the surface area of a cube of a given size.\n\n    Parameters:\n    size (int): The length of one side of the cube.\n\n    Returns:\n    int: The surface area of the cube.\n    \"\"\"\n    return 6 * (size ** 2)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/427": [{"task_id": "Mbpp/427", "solution": "def change_date_format(date):\n    \"\"\"\n    Convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n\n    Parameters:\n    date (str): The date in yyyy-mm-dd format.\n\n    Returns:\n    str: The date in dd-mm-yyyy format.\n    \"\"\"\n    year, month, day = date.split('-')\n    return f'{day}-{month}-{year}'", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["2021-1-026"]]}], "Mbpp/465": [{"task_id": "Mbpp/465", "solution": "def drop_empty(dictionary):\n    \"\"\"\n    Function to drop empty items from a given dictionary.\n\n    Parameters:\n    dictionary (dict): The input dictionary.\n\n    Returns:\n    dict: The dictionary with empty items dropped.\n    \"\"\"\n    return {key: value for key, value in dictionary.items() if value is not None}", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/555": [{"task_id": "Mbpp/555", "solution": "def difference(n):\n    \"\"\"\n    Calculate the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers.\n\n    Returns:\n    int: The difference between the sum of cubes and the sum of the first n natural numbers.\n    \"\"\"\n    sum_of_cubes = sum(i**3 for i in range(1, n+1))\n    sum_of_numbers = sum(range(1, n+1))\n    return sum_of_cubes - sum_of_numbers", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/556": [{"task_id": "Mbpp/556", "solution": "def find_Odd_Pair(arr, n):\n    count = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            if (arr[i] ^ arr[j]) % 2 != 0:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/460": [{"task_id": "Mbpp/460", "solution": "def Extract(lst):\n    return [sublist[0] for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/437": [{"task_id": "Mbpp/437", "solution": "def remove_odd(string):\n    \"\"\"\n    This function takes a string as input and returns a new string with only the even-indexed characters.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The new string with only the even-indexed characters.\n    \"\"\"\n    return string[::2]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["python"]], "plus_fail_tests": [["Hello, world!"]]}], "Mbpp/439": [{"task_id": "Mbpp/439", "solution": "def multiple_to_single(numbers):\n    \"\"\"\n    Join a list of multiple integers into a single integer.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    int: The joined integer.\n\n    Example:\n    >>> multiple_to_single([11, 33, 50])\n    113350\n    \"\"\"\n    return int(''.join(map(str, numbers)))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/428": [{"task_id": "Mbpp/428", "solution": "def shell_sort(arr):\n    n = len(arr)\n    gap = n // 2\n\n    while gap > 0:\n        for i in range(gap, n):\n            temp = arr[i]\n            j = i\n            while j >= gap and arr[j - gap] > temp:\n                arr[j] = arr[j - gap]\n                j -= gap\n            arr[j] = temp\n        gap //= 2\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/429": [{"task_id": "Mbpp/429", "solution": "def and_tuples(t1, t2):\n    \"\"\"\n    Function to extract the elementwise and tuples from the given two tuples.\n\n    Parameters:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A tuple containing the elementwise and of the two input tuples.\n\n    Raises:\n    ValueError: If the input tuples have different lengths.\n\n    Examples:\n    >>> and_tuples((10, 4, 6, 9), (5, 2, 3, 3))\n    (0, 0, 2, 1)\n    \"\"\"\n\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must have the same length.\")\n\n    result = tuple(a & b for a, b in zip(t1, t2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/450": [{"task_id": "Mbpp/450", "solution": "def extract_string(string_list, size):\n    \"\"\"\n    Extracts specified size of strings from a given list of string values.\n\n    Args:\n        string_list (list): A list of string values.\n        size (int): The size of strings to extract.\n\n    Returns:\n        list: A list of strings with the specified size.\n\n    Examples:\n        >>> extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)\n        ['practice', 'solution']\n    \"\"\"\n    return [s for s in string_list if len(s) == size]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/419": [{"task_id": "Mbpp/419", "solution": "def round_and_sum(numbers):\n    rounded_numbers = [round(num) for num in numbers]\n    total_sum = sum(rounded_numbers)\n    result = total_sum * len(rounded_numbers)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/445": [{"task_id": "Mbpp/445", "solution": "def index_multiplication(tuple1, tuple2):\n    result = []\n    for i in range(len(tuple1)):\n        result.append(tuple(a * b for a, b in zip(tuple1[i], tuple2[i])))\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10]]]]}], "Mbpp/554": [{"task_id": "Mbpp/554", "solution": "def get_odd_numbers(numbers):\n    \"\"\"\n    This function takes a list of integers and returns a new list containing only the odd numbers.\n\n    Parameters:\n    numbers (list): A list of integers.\n\n    Returns:\n    list: A new list containing only the odd numbers from the input list.\n    \"\"\"\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n    return odd_numbers\n\n# Test cases\nassert get_odd_numbers([1, 2, 3, 4, 5, 6]) == [1, 3, 5]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/433": [{"task_id": "Mbpp/433", "solution": "def check_greater(arr, num):\n    \"\"\"\n    Check if the entered number is greater than all elements of the given array.\n\n    Parameters:\n    arr (list): The array of numbers.\n    num (int): The number to compare against the array elements.\n\n    Returns:\n    bool: True if the number is greater than all elements of the array, False otherwise.\n    \"\"\"\n    for element in arr:\n        if num <= element:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/568": [{"task_id": "Mbpp/568", "solution": "def empty_list(n):\n    \"\"\"\n    Create a list of N empty dictionaries.\n\n    Parameters:\n    n (int): The number of empty dictionaries to create.\n\n    Returns:\n    list: A list of N empty dictionaries.\n    \"\"\"\n    return [{} for _ in range(n)]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/565": [{"task_id": "Mbpp/565", "solution": "def split_string(string):\n    \"\"\"\n    Splits a string into characters and returns a list of characters.\n\n    Parameters:\n    string (str): The input string to be split.\n\n    Returns:\n    list: A list of characters from the input string.\n    \"\"\"\n    return list(string)\n\n# Test cases\nassert split_string('python') == ['p', 'y', 't', 'h', 'o', 'n']", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/462": [{"task_id": "Mbpp/462", "solution": "def combinations_list(lst):\n    result = [[]]\n    for element in lst:\n        new_combinations = []\n        for combination in result:\n            new_combinations.append(combination + [element])\n        result.extend(new_combinations)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["orange", "red", "green", "blue"]]], "plus_fail_tests": [[["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]]]}], "Mbpp/562": [{"task_id": "Mbpp/562", "solution": "def Find_Max_Length(lst):\n    \"\"\"\n    This function takes a list of sublists as input and returns the length of the longest sublist.\n\n    Parameters:\n    lst (list): A list of sublists.\n\n    Returns:\n    int: The length of the longest sublist.\n    \"\"\"\n    max_length = 0\n    for sublist in lst:\n        length = len(sublist)\n        if length > max_length:\n            max_length = length\n    return max_length", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/559": [{"task_id": "Mbpp/559", "solution": "def max_sub_array_sum(arr, n):\n    \"\"\"\n    Function to find the sum of the largest contiguous sublist in the given list.\n\n    Parameters:\n    arr (list): The input list of integers.\n    n (int): The length of the input list.\n\n    Returns:\n    int: The sum of the largest contiguous sublist.\n\n    Examples:\n    >>> max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)\n    7\n    \"\"\"\n\n    max_so_far = float('-inf')\n    max_ending_here = 0\n\n    for i in range(n):\n        max_ending_here += arr[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n\n    return max_so_far", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/473": [{"task_id": "Mbpp/473", "solution": "def tuple_intersection(tuple_list1, tuple_list2):\n    \"\"\"\n    Find the tuple intersection of elements in the given tuple list irrespective of their order.\n\n    Parameters:\n    tuple_list1 (list): The first tuple list.\n    tuple_list2 (list): The second tuple list.\n\n    Returns:\n    set: The set of tuples that are common in both lists, irrespective of their order.\n\n    Example:\n    >>> tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])\n    {(4, 5), (3, 4), (5, 6)}\n    \"\"\"\n\n    # Convert the tuples in both lists to sets of frozensets\n    set1 = {frozenset(t) for t in tuple_list1}\n    set2 = {frozenset(t) for t in tuple_list2}\n\n    # Find the intersection of the sets of frozensets\n    intersection = set1.intersection(set2)\n\n    # Convert the frozensets back to tuples\n    intersection_tuples = {tuple(s) for s in intersection}\n\n    return intersection_tuples", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9]], [[1, 2, 3], [7, 8, 9], [10, 11, 12]]]]}], "Mbpp/478": [{"task_id": "Mbpp/478", "solution": "def remove_lowercase(string):\n    \"\"\"\n    Remove lowercase substrings from a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with lowercase substrings removed.\n    \"\"\"\n    result = \"\"\n    for char in string:\n        if char.islower():\n            result += char.upper()\n        else:\n            result += char\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["PYTHon"]], "plus_fail_tests": [["AbCdEfGhIjKlMnOpQrStUvWxYz"]]}], "Mbpp/470": [{"task_id": "Mbpp/470", "solution": "def add_pairwise(t):\n    \"\"\"\n    Function to find the pairwise addition of the neighboring elements of the given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    tuple: A tuple containing the pairwise addition of the neighboring elements of the input tuple.\n\n    Raises:\n    ValueError: If the input is not a tuple or if it is empty.\n\n    Examples:\n    >>> add_pairwise((1, 5, 7, 8, 10))\n    (6, 12, 15, 18)\n    >>> add_pairwise(())\n    Traceback (most recent call last):\n        ...\n    ValueError: Input must be a non-empty tuple.\n    \"\"\"\n\n    if not isinstance(t, tuple):\n        raise ValueError(\"Input must be a tuple.\")\n\n    if len(t) == 0:\n        raise ValueError(\"Input must be a non-empty tuple.\")\n\n    result = []\n    for i in range(len(t) - 1):\n        result.append(t[i] + t[i + 1])\n\n    return tuple(result)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[]]]}], "Mbpp/566": [{"task_id": "Mbpp/566", "solution": "def sum_digits(n):\n    \"\"\"\n    Function to get the sum of the digits of a non-negative integer.\n\n    Parameters:\n    n (int): Non-negative integer.\n\n    Returns:\n    int: Sum of the digits of the integer.\n\n    Raises:\n    ValueError: If the input is negative.\n\n    Examples:\n    >>> sum_digits(345)\n    12\n    >>> sum_digits(0)\n    0\n    >>> sum_digits(12345)\n    15\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Input must be non-negative.\")\n\n    sum_of_digits = 0\n    while n > 0:\n        sum_of_digits += n % 10\n        n //= 10\n\n    return sum_of_digits", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/477": [{"task_id": "Mbpp/477", "solution": "def convert_to_lower(string):\n    \"\"\"\n    Convert the given string to lower case.\n\n    Parameters:\n    string (str): The input string to be converted.\n\n    Returns:\n    str: The lowercase version of the input string.\n    \"\"\"\n    return string.lower()\n\n# Test cases\nassert convert_to_lower(\"InValid\") == \"invalid\"", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/560": [{"task_id": "Mbpp/560", "solution": "def union_elements(tuple1, tuple2):\n    \"\"\"\n    This function takes two tuples as input and returns the union of their elements in sorted order.\n\n    Parameters:\n    tuple1 (tuple): The first input tuple.\n    tuple2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the union of elements from tuple1 and tuple2, sorted in ascending order.\n    \"\"\"\n    union = tuple1 + tuple2  # Concatenate the two tuples to get the union\n    union = set(union)  # Convert the union to a set to remove duplicates\n    union = sorted(union)  # Sort the union in ascending order\n    return tuple(union)  # Convert the sorted union back to a tuple and return it", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/557": [{"task_id": "Mbpp/557", "solution": "def toggle_string(string):\n    \"\"\"\n    Toggle the case of all characters in a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The toggled string.\n    \"\"\"\n    toggled_string = \"\"\n    for char in string:\n        if char.isalpha():\n            if char.islower():\n                toggled_string += char.upper()\n            else:\n                toggled_string += char.lower()\n        else:\n            toggled_string += char\n    return toggled_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/476": [{"task_id": "Mbpp/476", "solution": "def big_sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of the largest and smallest values in the array.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of the largest and smallest values in the array.\n    \"\"\"\n    if not arr:\n        return 0\n\n    largest = max(arr)\n    smallest = min(arr)\n\n    return largest + smallest", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/472": [{"task_id": "Mbpp/472", "solution": "def check_Consecutive(lst):\n    \"\"\"\n    Check if a given list contains consecutive numbers.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    bool: True if the list contains consecutive numbers, False otherwise.\n    \"\"\"\n    if len(lst) < 2:\n        return False\n\n    sorted_lst = sorted(lst)\n    for i in range(len(sorted_lst) - 1):\n        if sorted_lst[i + 1] - sorted_lst[i] != 1:\n            return False\n\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[4]]]}], "Mbpp/569": [{"task_id": "Mbpp/569", "solution": "def sort_sublists(lst):\n    \"\"\"\n    Sorts each sublist of strings in a given list of lists.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist contains strings.\n\n    Returns:\n    list: A new list of lists, where each sublist is sorted in alphabetical order.\n\n    Examples:\n    >>> sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])\n    [['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\n    \"\"\"\n    return [sorted(sublist) for sublist in lst]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/572": [{"task_id": "Mbpp/572", "solution": "def two_unique_nums(nums):\n    unique_nums = []\n    for num in nums:\n        if nums.count(num) == 1:\n            unique_nums.append(num)\n    return unique_nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/616": [{"task_id": "Mbpp/616", "solution": "def tuple_modulo(t1, t2):\n    \"\"\"\n    This function takes two tuples of the same length and performs the element wise modulo.\n\n    Parameters:\n    t1 (tuple): The first input tuple.\n    t2 (tuple): The second input tuple.\n\n    Returns:\n    tuple: A new tuple containing the element wise modulo of the input tuples.\n\n    Raises:\n    ValueError: If the input tuples are not of the same length.\n\n    Examples:\n    >>> tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))\n    (0, 4, 5, 1)\n    \"\"\"\n\n    if len(t1) != len(t2):\n        raise ValueError(\"Input tuples must be of the same length.\")\n\n    result = tuple(a % b for a, b in zip(t1, t2))\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/607": [{"task_id": "Mbpp/607", "solution": "import re\ndef find_literals(string, pattern):\n    \"\"\"\n    Searches a string for a regex pattern and returns the matching substring, start index, and end index.\n\n    Parameters:\n    string (str): The input string to search.\n    pattern (str): The regular expression pattern to match.\n\n    Returns:\n    tuple: A tuple containing the matching substring, start index, and end index.\n\n    Raises:\n    ValueError: If the pattern does not match any substrings in the string.\n\n    Examples:\n    >>> find_literals('The quick brown fox jumps over the lazy dog.', 'fox')\n    ('fox', 16, 19)\n    \"\"\"\n    match = re.search(pattern, string)\n    if match:\n        return match.group(), match.start(), match.end()\n    else:\n        raise ValueError(\"Pattern not found in the string.\")", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["", "rfvPtELLC"]]}], "Mbpp/590": [{"task_id": "Mbpp/590", "solution": "import math\ndef polar_rect(r, theta):\n    \"\"\"\n    Convert polar coordinates (r, theta) to rectangular coordinates (x, y).\n\n    Parameters:\n    r (float): The radius of the polar coordinate.\n    theta (float): The angle in radians of the polar coordinate.\n\n    Returns:\n    tuple: A tuple containing the rectangular coordinates (x, y).\n\n    \"\"\"\n    x = r * math.cos(theta)\n    y = r * math.sin(theta)\n    return (x, y)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[0, 0]]}], "Mbpp/606": [{"task_id": "Mbpp/606", "solution": "import math\ndef radian_degree(degrees):\n    \"\"\"\n    Convert degrees to radians.\n\n    Parameters:\n    degrees (float): The angle in degrees.\n\n    Returns:\n    float: The angle in radians.\n    \"\"\"\n    return degrees * math.pi / 180", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/596": [{"task_id": "Mbpp/596", "solution": "import sys\ndef tuple_size(t):\n    \"\"\"\n    Function to find the size in bytes of the given tuple.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    int: The size in bytes of the given tuple.\n    \"\"\"\n    return sys.getsizeof(t)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/587": [{"task_id": "Mbpp/587", "solution": "def list_tuple(lst):\n    \"\"\"\n    Convert a list to a tuple.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    tuple: The converted tuple.\n    \"\"\"\n    return tuple(lst)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/611": [{"task_id": "Mbpp/611", "solution": "def max_of_nth(matrix, n):\n    \"\"\"\n    This function takes a matrix represented as a list of lists and returns the maximum value of the nth column.\n\n    Parameters:\n    matrix (list of lists): The matrix represented as a list of lists.\n    n (int): The column number (0-based index).\n\n    Returns:\n    int: The maximum value of the nth column.\n\n    Raises:\n    ValueError: If the matrix is empty or if the column index is out of range.\n\n    Examples:\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2)\n    19\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 0)\n    8\n    >>> max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 3)\n    Traceback (most recent call last):\n        ...\n    ValueError: Column index out of range.\n    >>> max_of_nth([], 0)\n    Traceback (most recent call last):\n        ...\n    ValueError: Matrix is empty.\n    \"\"\"\n\n    if not matrix:\n        raise ValueError(\"Matrix is empty.\")\n\n    num_rows = len(matrix)\n    num_cols = len(matrix[0])\n\n    if n < 0 or n >= num_cols:\n        raise ValueError(\"Column index out of range.\")\n\n    max_val = matrix[0][n]\n\n    for row in matrix:\n        if row[n] > max_val:\n            max_val = row[n]\n\n    return max_val", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[[-5, -2, -10], [-5, -2, -10], [-8, -3, -7], [-6, -9, -4]], -1]]}], "Mbpp/619": [{"task_id": "Mbpp/619", "solution": "def move_num(string):\n    nums = ''\n    letters = ''\n    for char in string:\n        if char.isdigit():\n            nums += char\n        else:\n            letters += char\n    return letters + nums", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/626": [{"task_id": "Mbpp/626", "solution": "import math\ndef triangle_area(radius):\n    if radius < 0:\n        return None\n    else:\n        area = (radius ** 2) * math.pi / 2\n        return area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[0.5]]}], "Mbpp/624": [{"task_id": "Mbpp/624", "solution": "def is_upper(string):\n    \"\"\"\n    Convert a given string to uppercase.\n\n    Parameters:\n    string (str): The input string to be converted to uppercase.\n\n    Returns:\n    str: The uppercase version of the input string.\n    \"\"\"\n    return string.upper()", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/604": [{"task_id": "Mbpp/604", "solution": "def reverse_words(string):\n    \"\"\"\n    This function takes a string as input and reverses the order of words seperated by spaces.\n\n    Parameters:\n    string (str): The input string containing words seperated by spaces.\n\n    Returns:\n    str: The reversed string with words in the reverse order.\n    \"\"\"\n    words = string.split()\n    reversed_words = words[::-1]\n    reversed_string = ' '.join(reversed_words)\n    return reversed_string", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/592": [{"task_id": "Mbpp/592", "solution": "def sum_of_product(n):\n    \"\"\"\n    Function to find the sum of the product of consecutive binomial co-efficients.\n\n    Parameters:\n    n (int): The number of terms in the summation.\n\n    Returns:\n    int: The sum of the product of consecutive binomial co-efficients.\n    \"\"\"\n    def binomial_coefficient(n, k):\n        \"\"\"\n        Function to calculate the binomial co-efficient.\n\n        Parameters:\n        n (int): The total number of items.\n        k (int): The number of items to choose.\n\n        Returns:\n        int: The binomial co-efficient.\n        \"\"\"\n        if k == 0 or k == n:\n            return 1\n        elif k > n:\n            return 0\n        else:\n            return binomial_coefficient(n - 1, k - 1) + binomial_coefficient(n - 1, k)\n\n    total_sum = 0\n    for i in range(1, n + 1):\n        total_sum += binomial_coefficient(n + i - 1, i)\n\n    return total_sum\n\n# Test cases\nassert sum_of_product(3) == 15", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/608": [{"task_id": "Mbpp/608", "solution": "def bell_Number(n):\n    \"\"\"\n    Function to find the nth Bell number.\n\n    Parameters:\n    n (int): The position of the Bell number to find.\n\n    Returns:\n    int: The nth Bell number.\n\n    Raises:\n    ValueError: If n is negative.\n\n    Examples:\n    >>> bell_Number(2)\n    2\n    >>> bell_Number(5)\n    15\n    >>> bell_Number(0)\n    1\n    \"\"\"\n\n    if n < 0:\n        raise ValueError(\"n must be non-negative.\")\n\n    bell = [0] * (n + 1)\n    bell[0] = 1\n\n    for i in range(1, n + 1):\n        bell[i] = bell[i - 1]\n        for j in range(i - 1, 0, -1):\n            bell[j] += bell[j - 1]\n\n    return bell[n]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[2]], "plus_fail_tests": [[10]]}], "Mbpp/580": [{"task_id": "Mbpp/580", "solution": "def extract_even(nested_tuple):\n    \"\"\"\n    Function to remove uneven elements in the nested mixed tuple.\n\n    Parameters:\n    nested_tuple (tuple): The nested mixed tuple.\n\n    Returns:\n    tuple: The nested mixed tuple with uneven elements removed.\n    \"\"\"\n    result = []\n    for item in nested_tuple:\n        if isinstance(item, tuple):\n            result.append(extract_even(item))\n        elif item % 2 == 0:\n            result.append(item)\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/603": [{"task_id": "Mbpp/603", "solution": "def get_lucid(n):\n    \"\"\"\n    Function to get all lucid numbers smaller than or equal to a given integer.\n\n    Parameters:\n    n (int): The given integer.\n\n    Returns:\n    list: A list of all lucid numbers smaller than or equal to n.\n    \"\"\"\n    lucid_numbers = []\n    for num in range(1, n+1):\n        if is_lucid(num):\n            lucid_numbers.append(num)\n    return lucid_numbers\n\ndef is_lucid(num):\n    \"\"\"\n    Function to check if a number is lucid.\n\n    Parameters:\n    num (int): The number to check.\n\n    Returns:\n    bool: True if the number is lucid, False otherwise.\n    \"\"\"\n    if num == 1:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        return is_lucid(num - 2)\n\n# Test cases\nassert get_lucid(10) == [1, 2, 3, 5, 7]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/622": [{"task_id": "Mbpp/622", "solution": "def get_median(list1, list2, n):\n    \"\"\"\n    Function to find the median of two sorted lists of same size.\n\n    Parameters:\n    list1 (list): The first sorted list.\n    list2 (list): The second sorted list.\n    n (int): The size of the lists.\n\n    Returns:\n    float: The median of the two sorted lists.\n\n    Raises:\n    ValueError: If the size of the lists is not equal to n.\n\n    \"\"\"\n\n    if len(list1) != n or len(list2) != n:\n        raise ValueError(\"The size of the lists is not equal to n.\")\n\n    merged_list = []\n    i, j = 0, 0\n\n    while i < n and j < n:\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n\n    while i < n:\n        merged_list.append(list1[i])\n        i += 1\n\n    while j < n:\n        merged_list.append(list2[j])\n        j += 1\n\n    if n % 2 == 0:\n        median = (merged_list[n // 2 - 1] + merged_list[n // 2]) / 2\n    else:\n        median = merged_list[n // 2]\n\n    return median", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5]], "plus_fail_tests": [[[1, 4, 7, 10, 13, 16, 19, 22, 25, 28], [2, 5, 8, 11, 14, 17, 20, 23, 26, 29], 10]]}], "Mbpp/583": [{"task_id": "Mbpp/583", "solution": "def catalan_number(n):\n    \"\"\"\n    Function to return the nth Catalan number.\n\n    Parameters:\n    n (int): The index of the Catalan number to be returned.\n\n    Returns:\n    int: The nth Catalan number.\n    \"\"\"\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        catalan = [0] * (n + 1)\n        catalan[0] = 1\n        catalan[1] = 1\n\n        for i in range(2, n + 1):\n            for j in range(i):\n                catalan[i] += catalan[j] * catalan[i - j - 1]\n\n        return catalan[n]", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0]]}], "Mbpp/597": [{"task_id": "Mbpp/597", "solution": "def find_kth(arr1, arr2, k):\n    \"\"\"\n    Find the kth element from the given two sorted arrays.\n\n    Parameters:\n    arr1 (list): The first sorted array.\n    arr2 (list): The second sorted array.\n    k (int): The position of the element to find.\n\n    Returns:\n    int: The kth element from the merged sorted arrays.\n\n    Raises:\n    ValueError: If k is out of range for the given arrays.\n\n    \"\"\"\n\n    # Merge the two arrays into a single sorted array\n    merged_arr = sorted(arr1 + arr2)\n\n    # Check if k is within the range of the merged array\n    if k < 1 or k > len(merged_arr):\n        raise ValueError(\"k is out of range for the given arrays.\")\n\n    # Return the kth element from the merged array\n    return merged_arr[k - 1]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/598": [{"task_id": "Mbpp/598", "solution": "def armstrong_number(num):\n    \"\"\"\n    Check if a given number is an Armstrong number.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is an Armstrong number, False otherwise.\n    \"\"\"\n    num_str = str(num)\n    num_digits = len(num_str)\n    sum_cubes = sum(int(digit)**num_digits for digit in num_str)\n    return sum_cubes == num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/577": [{"task_id": "Mbpp/577", "solution": "def last_digit_factorial(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the last digit in the factorial of 'n'.\n\n    Parameters:\n    n (int): The number for which the last digit in the factorial needs to be calculated.\n\n    Returns:\n    int: The last digit in the factorial of 'n'.\n    \"\"\"\n    if n == 0:\n        return 1\n\n    last_digit = 1\n    for i in range(1, n + 1):\n        last_digit = (last_digit * i) % 10\n\n    return last_digit\n\n# Test cases\nassert last_digit_factorial(4) == 4", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/579": [{"task_id": "Mbpp/579", "solution": "def find_dissimilar(tuple1, tuple2):\n    \"\"\"\n    Find the dissimilar elements in the given two tuples.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    tuple: A tuple containing the dissimilar elements between the two input tuples.\n\n    Example:\n    >>> find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))\n    (3, 6, 7, 10)\n    \"\"\"\n    dissimilar_elements = []\n    for element in tuple1:\n        if element not in tuple2:\n            dissimilar_elements.append(element)\n    for element in tuple2:\n        if element not in tuple1:\n            dissimilar_elements.append(element)\n    return tuple(dissimilar_elements)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/576": [{"task_id": "Mbpp/576", "solution": "def is_Sub_Array(arr, sub_arr):\n    \"\"\"\n    Check if a list is a sublist of another list.\n\n    Parameters:\n    arr (list): The main list.\n    sub_arr (list): The sublist to check.\n\n    Returns:\n    bool: True if sub_arr is a sublist of arr, False otherwise.\n    \"\"\"\n    if len(sub_arr) == 0:\n        return True\n    if len(arr) == 0:\n        return False\n\n    for i in range(len(arr)):\n        if arr[i] == sub_arr[0]:\n            if arr[i:i+len(sub_arr)] == sub_arr:\n                return True\n\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[1, 2, 3, 4, 5], [1, 3, 5]]]}], "Mbpp/593": [{"task_id": "Mbpp/593", "solution": "def removezero_ip(ip_address):\n    \"\"\"\n    Function to remove leading zeroes from an IP address.\n\n    Parameters:\n    ip_address (str): The IP address with leading zeroes.\n\n    Returns:\n    str: The IP address with leading zeroes removed.\n    \"\"\"\n    octets = ip_address.split('.')\n    cleaned_octets = [str(int(octet)) for octet in octets]\n    cleaned_ip = '.'.join(cleaned_octets)\n    return cleaned_ip", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["0.0.0.0"]]}], "Mbpp/585": [{"task_id": "Mbpp/585", "solution": "def expensive_items(dataset, n):\n    \"\"\"\n    Function to find the n most expensive items in a given dataset.\n\n    Parameters:\n    dataset (list): A list of dictionaries, where each dictionary represents an item with 'name' and 'price' keys.\n    n (int): The number of most expensive items to return.\n\n    Returns:\n    list: A list of dictionaries representing the n most expensive items.\n\n    Example:\n    >>> expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)\n    [{'name': 'Item-2', 'price': 555.22}]\n    \"\"\"\n    sorted_dataset = sorted(dataset, key=lambda item: item['price'], reverse=True)\n    return sorted_dataset[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/623": [{"task_id": "Mbpp/623", "solution": "def nth_nums(nums, n):\n    \"\"\"\n    Compute the n-th power of each number in a list.\n\n    Parameters:\n    nums (list): A list of numbers.\n    n (int): The power to raise each number to.\n\n    Returns:\n    list: A list of numbers with each number raised to the n-th power.\n    \"\"\"\n    return [num ** n for num in nums]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/618": [{"task_id": "Mbpp/618", "solution": "def div_list(list1, list2):\n    \"\"\"\n    Function to divide two lists element wise.\n\n    Parameters:\n    list1 (list): The first list.\n    list2 (list): The second list.\n\n    Returns:\n    list: A new list containing the element-wise division of list1 by list2.\n\n    Raises:\n    ValueError: If the lengths of list1 and list2 are not equal.\n\n    Examples:\n    >>> div_list([4,5,6],[1, 2, 3])\n    [4.0, 2.5, 2.0]\n    >>> div_list([1, 2, 3], [0, 0, 0])\n    Traceback (most recent call last):\n        ...\n    ZeroDivisionError: division by zero\n    \"\"\"\n\n    if len(list1) != len(list2):\n        raise ValueError(\"The lengths of list1 and list2 must be equal.\")\n\n    result = []\n    for i in range(len(list1)):\n        try:\n            result.append(list1[i] / list2[i])\n        except ZeroDivisionError:\n            raise\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/586": [{"task_id": "Mbpp/586", "solution": "def split_Arr(arr, n):\n    \"\"\"\n    Splits a list at the nth element and adds the first part to the end.\n\n    Parameters:\n    arr (list): The input list to be split.\n    n (int): The index at which the list should be split.\n\n    Returns:\n    list: The modified list with the first part added to the end.\n\n    Examples:\n    >>> split_Arr([12,10,5,6,52,36],2)\n    [5, 6, 52, 36, 12, 10]\n    \"\"\"\n    return arr[n:] + arr[:n]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/588": [{"task_id": "Mbpp/588", "solution": "def big_diff(nums):\n    \"\"\"\n    This function takes a list of numbers as input and returns the difference between the largest and smallest values in the list.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The difference between the largest and smallest values in the list.\n    \"\"\"\n    if not nums:\n        return 0\n\n    max_num = max(nums)\n    min_num = min(nums)\n\n    return max_num - min_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/620": [{"task_id": "Mbpp/620", "solution": "def largest_subset(nums):\n    \"\"\"\n    Find the size of the largest subset of a list of numbers so that every pair is divisible.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    int: The size of the largest subset of divisible pairs.\n    \"\"\"\n\n    def is_divisible(a, b):\n        \"\"\"\n        Check if two numbers are divisible.\n\n        Parameters:\n        a (int): The first number.\n        b (int): The second number.\n\n        Returns:\n        bool: True if the numbers are divisible, False otherwise.\n        \"\"\"\n        return a % b == 0 or b % a == 0\n\n    def backtrack(start, subset):\n        \"\"\"\n        Recursive function to find the largest subset of divisible pairs.\n\n        Parameters:\n        start (int): The index to start the backtracking from.\n        subset (list): The current subset being built.\n\n        Returns:\n        int: The size of the largest subset found so far.\n        \"\"\"\n        max_size = len(subset)\n\n        for i in range(start, len(nums)):\n            if all(is_divisible(nums[i], num) for num in subset):\n                max_size = max(max_size, backtrack(i + 1, subset + [nums[i]]))\n\n        return max_size\n\n    return backtrack(0, [])", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[9, 3, 12, 7, 16, 3, 11, 8, 4, 13, 13]]]}], "Mbpp/602": [{"task_id": "Mbpp/602", "solution": "def first_repeated_char(string):\n    \"\"\"\n    This function takes a string as input and returns the first repeated character in the string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The first repeated character in the string.\n\n    Raises:\n    ValueError: If the string is empty or does not contain any repeated characters.\n\n    Examples:\n    >>> first_repeated_char(\"abcabc\")\n    'a'\n    >>> first_repeated_char(\"abcd\")\n    'No repeated characters found.'\n    \"\"\"\n\n    # Create an empty set to store the characters we have seen\n    seen = set()\n\n    # Iterate over each character in the string\n    for char in string:\n        # If the character is already in the set, it is a repeated character\n        if char in seen:\n            return char\n        # Add the character to the set\n        seen.add(char)\n\n    # If no repeated characters are found, raise a ValueError\n    raise ValueError(\"No repeated characters found.\")", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["abc"]], "plus_fail_tests": [[""]]}], "Mbpp/573": [{"task_id": "Mbpp/573", "solution": "def unique_product(numbers):\n    unique_nums = set(numbers)\n    product = 1\n    for num in unique_nums:\n        product *= num\n    return product", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/599": [{"task_id": "Mbpp/599", "solution": "def sum_average(n):\n    \"\"\"\n    Function to find sum and average of first n natural numbers.\n\n    Parameters:\n    n (int): The number of natural numbers.\n\n    Returns:\n    tuple: A tuple containing the sum and average of the first n natural numbers.\n\n    Example:\n    >>> sum_average(10)\n    (55, 5.5)\n    \"\"\"\n    sum_of_numbers = (n * (n + 1)) / 2\n    average = sum_of_numbers / n\n    return (sum_of_numbers, average)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/591": [{"task_id": "Mbpp/591", "solution": "def swap_List(lst):\n    \"\"\"\n    This function takes a list as input and returns a new list with the first and last elements swapped.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: A new list with the first and last elements swapped.\n    \"\"\"\n    if len(lst) < 2:\n        return lst\n    else:\n        return [lst[-1]] + lst[1:-1] + [lst[0]]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/581": [{"task_id": "Mbpp/581", "solution": "def surface_Area(base_edge, height):\n    \"\"\"\n    Calculate the surface area of a square pyramid with a given base edge and height.\n\n    Parameters:\n    base_edge (float or int): The length of the base edge of the square pyramid.\n    height (float or int): The height of the square pyramid.\n\n    Returns:\n    float: The surface area of the square pyramid.\n\n    Raises:\n    ValueError: If either base_edge or height is negative.\n\n    Examples:\n    >>> surface_Area(3, 4)\n    33.0\n    >>> surface_Area(5, 12)\n    150.0\n    >>> surface_Area(0, 10)\n    0.0\n    >>> surface_Area(-3, 7)\n    Traceback (most recent call last):\n        ...\n    ValueError: Base edge and height must be positive.\n    \"\"\"\n\n    if base_edge < 0 or height < 0:\n        raise ValueError(\"Base edge and height must be positive.\")\n\n    base_area = base_edge ** 2\n    slant_height = (height ** 2 + base_edge ** 2) ** 0.5\n    lateral_area = base_edge * slant_height\n    surface_area = base_area + (4 * lateral_area)\n\n    return surface_area", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[3, 4]], "plus_fail_tests": [[10, 20]]}], "Mbpp/610": [{"task_id": "Mbpp/610", "solution": "def remove_kth_element(lst, k):\n    \"\"\"\n    This function takes a list and returns a list with the same elements, but the k'th element removed.\n\n    Parameters:\n    lst (list): The input list.\n    k (int): The index of the element to be removed.\n\n    Returns:\n    list: The modified list with the k'th element removed.\n    \"\"\"\n    return lst[:k] + lst[k+1:]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 1, 2, 3, 4, 4, 5, 1], 3]], "plus_fail_tests": [[[1, 2, 3, 4, 5], 1]]}], "Mbpp/614": [{"task_id": "Mbpp/614", "solution": "def cummulative_sum(tuple_list):\n    total_sum = 0\n    for tup in tuple_list:\n        total_sum += sum(tup)\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/615": [{"task_id": "Mbpp/615", "solution": "def average_tuple(tuples):\n    averages = []\n    for t in tuples:\n        total = sum(t)\n        average = total / len(t)\n        averages.append(average)\n    return averages", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[10, 10, 10, 12], [30, 45, 56, 45], [81, 80, 39, 32], [1, 2, 3, 4]]]], "plus_fail_tests": [[[[7, 8, 9], [-2, -4, -6], [0, 20, 30]]]]}], "Mbpp/600": [{"task_id": "Mbpp/600", "solution": "def is_Even(num):\n    \"\"\"\n    Check whether the given number is even or not.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is even, False otherwise.\n    \"\"\"\n    return num % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/594": [{"task_id": "Mbpp/594", "solution": "def diff_even_odd(numbers):\n    \"\"\"\n    Function to find the difference of the first even and first odd number of a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The difference between the first even and first odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> diff_even_odd([1,3,5,7,4,1,6,8])\n    3\n    >>> diff_even_odd([1,3,5,7])\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_numbers[0] - odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/612": [{"task_id": "Mbpp/612", "solution": "def merge(lst):\n    \"\"\"\n    This function takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n\n    Parameters:\n    lst (list): A list of lists, where each sublist has two elements.\n\n    Returns:\n    list: A list of two lists where the first list has the first element of each sublist and the second one has the second.\n    \"\"\"\n    first_list = [sublist[0] for sublist in lst]\n    second_list = [sublist[1] for sublist in lst]\n    return [first_list, second_list]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/578": [{"task_id": "Mbpp/578", "solution": "def interleave_lists(*lists):\n    \"\"\"\n    Write a function to interleave 3 lists of the same length into a single flat list.\n\n    Parameters:\n    *lists (list): Variable number of lists of the same length.\n\n    Returns:\n    list: A single flat list containing the interleaved elements from the input lists.\n\n    Raises:\n    ValueError: If any of the input lists are not of the same length.\n\n    Examples:\n    >>> interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])\n    [1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\n    \"\"\"\n\n    # Check if all lists are of the same length\n    lengths = set(len(lst) for lst in lists)\n    if len(lengths) > 1:\n        raise ValueError(\"All input lists must be of the same length.\")\n\n    # Interleave the lists\n    interleaved_list = []\n    for i in range(len(lists[0])):\n        for lst in lists:\n            interleaved_list.append(lst[i])\n\n    return interleaved_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/628": [{"task_id": "Mbpp/628", "solution": "def replace_spaces(string):\n    return string.replace(\" \", \"%20\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/629": [{"task_id": "Mbpp/629", "solution": "def find_even_numbers(numbers):\n    \"\"\"\n    This function takes a list of numbers as input and returns a new list containing only the even numbers from the input list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    list: A new list containing only the even numbers from the input list.\n    \"\"\"\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    return even_numbers\n\n# Test cases\nassert find_even_numbers([1, 2, 3, 4, 5]) == [2, 4]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/605": [{"task_id": "Mbpp/605", "solution": "def prime_num(n):\n    \"\"\"\n    Check if the given integer is a prime number.\n\n    Parameters:\n    n (int): The integer to be checked.\n\n    Returns:\n    bool: True if the integer is a prime number, False otherwise.\n    \"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(n ** 0.5) + 1):\n        if n % i == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/589": [{"task_id": "Mbpp/589", "solution": "def perfect_squares(start, end):\n    \"\"\"\n    Function to find perfect squares between two given numbers.\n\n    Parameters:\n    start (int): The starting number.\n    end (int): The ending number.\n\n    Returns:\n    list: A list of perfect squares between the given numbers.\n    \"\"\"\n    squares = []\n    for num in range(start, end+1):\n        if num > 0 and (num**0.5).is_integer():\n            squares.append(num)\n    return squares", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[1, 0]]}], "Mbpp/724": [{"task_id": "Mbpp/724", "solution": "def power_base_sum(base, power):\n    \"\"\"\n    This function takes base and power as arguments and calculates the sum of all digits of the base to the specified power.\n\n    Parameters:\n    base (int): The base number.\n    power (int): The power to raise the base to.\n\n    Returns:\n    int: The sum of all digits of the base to the specified power.\n    \"\"\"\n    result = base ** power\n    digit_sum = sum(int(digit) for digit in str(result))\n    return digit_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/730": [{"task_id": "Mbpp/730", "solution": "def consecutive_duplicates(lst):\n    \"\"\"\n    Remove consecutive duplicates from a given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The list with consecutive duplicates removed.\n    \"\"\"\n    result = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            result.append(lst[i])\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/741": [{"task_id": "Mbpp/741", "solution": "def all_Characters_Same(string):\n    \"\"\"\n    Check if all characters in a string are the same.\n\n    Parameters:\n    string (str): The input string to check.\n\n    Returns:\n    bool: True if all characters are the same, False otherwise.\n    \"\"\"\n    return len(set(string)) == 1", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/736": [{"task_id": "Mbpp/736", "solution": "def left_insertion(arr, value):\n    \"\"\"\n    Function to locate the left insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): Sorted list of integers.\n    value (int): Value to be inserted.\n\n    Returns:\n    int: Left insertion point.\n\n    Examples:\n    >>> left_insertion([1,2,4,5], 6)\n    4\n    \"\"\"\n    left = 0\n    right = len(arr)\n\n    while left < right:\n        mid = (left + right) // 2\n        if arr[mid] < value:\n            left = mid + 1\n        else:\n            right = mid\n\n    return left", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/737": [{"task_id": "Mbpp/737", "solution": "import re\ndef check_str(string):\n    \"\"\"\n    Check if the given string starts with a vowel using regular expression.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string starts with a vowel, False otherwise.\n    \"\"\"\n    pattern = r'^[aeiouAEIOU].*'\n    return bool(re.match(pattern, string))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/734": [{"task_id": "Mbpp/734", "solution": "def sum_Of_Subarray_Prod(arr):\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        product = 1\n        for j in range(i, n):\n            product *= arr[j]\n            result += product\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/723": [{"task_id": "Mbpp/723", "solution": "def count_same_pair(list1, list2):\n    \"\"\"\n    This function takes two lists of the same length as input and returns the count of indices where the lists have the same values.\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    int: The count of indices where the lists have the same values.\n\n    Raises:\n    ValueError: If the input lists are not of the same length.\n\n    Examples:\n    >>> count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])\n    4\n    \"\"\"\n\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must be of the same length.\")\n\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i]:\n            count += 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/735": [{"task_id": "Mbpp/735", "solution": "def toggle_middle_bits(num):\n    \"\"\"\n    Toggle bits of the number except the first and the last bit.\n\n    Parameters:\n    num (int): The number.\n\n    Returns:\n    int: The number with toggled bits.\n\n    Examples:\n    >>> toggle_middle_bits(9)\n    15\n    >>> toggle_middle_bits(15)\n    9\n    >>> toggle_middle_bits(0)\n    0\n    >>> toggle_middle_bits(1)\n    1\n    >>> toggle_middle_bits(2)\n    3\n    >>> toggle_middle_bits(3)\n    1\n    >>> toggle_middle_bits(4)\n    5\n    >>> toggle_middle_bits(5)\n    1\n    >>> toggle_middle_bits(6)\n    7\n    >>> toggle_middle_bits(7)\n    1\n    >>> toggle_middle_bits(8)\n    9\n    >>> toggle_middle_bits(10)\n    14\n    >>> toggle_middle_bits(12)\n    13\n    >>> toggle_middle_bits(14)\n    11\n    >>> toggle_middle_bits(15)\n    1\n    \"\"\"\n\n    # Check if the number is 0 or 1\n    if num == 0 or num == 1:\n        return num\n\n    # Check if the number is 2 or 3\n    if num == 2 or num == 3:\n        return num ^ 1\n\n    # Toggle bits of the number except the first and the last bit\n    toggled_num = num ^ (2 ** (num.bit_length() - 1) - 1)\n\n    return toggled_num", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[9]], "plus_fail_tests": [[2147483647]]}], "Mbpp/637": [{"task_id": "Mbpp/637", "solution": "def noprofit_noloss(buy_price, sell_price):\n    \"\"\"\n    Check whether the given amount has no profit and no loss.\n\n    Parameters:\n    buy_price (float): The buying price.\n    sell_price (float): The selling price.\n\n    Returns:\n    bool: True if the amount has no profit and no loss, False otherwise.\n    \"\"\"\n    return buy_price == sell_price", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/731": [{"task_id": "Mbpp/731", "solution": "import math\ndef lateralsurface_cone(r, h):\n    \"\"\"\n    Calculate the lateral surface area of a cone given its radius and height.\n\n    Parameters:\n    r (float): The radius of the cone.\n    h (float): The height of the cone.\n\n    Returns:\n    float: The lateral surface area of the cone.\n    \"\"\"\n    # Calculate the slant height of the cone\n    slant_height = math.sqrt(r**2 + h**2)\n\n    # Calculate the lateral surface area of the cone\n    lateral_surface_area = math.pi * r * slant_height\n\n    return lateral_surface_area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/631": [{"task_id": "Mbpp/631", "solution": "def replace_spaces(string):\n    \"\"\"\n    Replaces whitespaces with an underscore and vice versa in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with whitespaces replaced.\n    \"\"\"\n    return string.replace(\" \", \"_\")", "base_status": "fail", "plus_status": "pass", "base_fail_tests": [["The_Avengers"]], "plus_fail_tests": []}], "Mbpp/743": [{"task_id": "Mbpp/743", "solution": "def rotate_right(lst, num_items):\n    \"\"\"\n    Rotate a given list by specified number of items to the right direction.\n\n    Parameters:\n    lst (list): The list to be rotated.\n    num_items (int): The number of items to rotate to the right direction.\n\n    Returns:\n    list: The rotated list.\n\n    Examples:\n    >>> rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n    [8, 9, 10, 1, 2, 3, 4, 5, 6, 7]\n    \"\"\"\n    # Calculate the effective rotation index\n    rotation_index = num_items % len(lst)\n\n    # Rotate the list\n    rotated_lst = lst[-rotation_index:] + lst[:-rotation_index]\n\n    return rotated_lst", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[], 0]]}], "Mbpp/753": [{"task_id": "Mbpp/753", "solution": "def min_k(tuple_list, k):\n    \"\"\"\n    Function to find minimum k records from tuple list.\n\n    Parameters:\n    tuple_list (list): A list of tuples, where each tuple contains a name and a value.\n    k (int): The number of minimum records to find.\n\n    Returns:\n    list: A list of k tuples with the minimum values.\n\n    Example:\n    >>> min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)\n    [('Akash', 2), ('Akshat', 4)]\n    \"\"\"\n\n    # Sort the tuple list based on the values in descending order\n    sorted_list = sorted(tuple_list, key=lambda x: x[1], reverse=True)\n\n    # Return the first k elements from the sorted list\n    return sorted_list[:k]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[["Manjeet", 10], ["Akshat", 4], ["Akash", 2], ["Nikhil", 8]], 2]], "plus_fail_tests": [[[["John", -4], ["John", 20]], -1]]}], "Mbpp/632": [{"task_id": "Mbpp/632", "solution": "def move_zero(lst):\n    \"\"\"\n    Move all zeroes to the end of the given list.\n\n    Parameters:\n    lst (list): The input list.\n\n    Returns:\n    list: The modified list with all zeroes moved to the end.\n    \"\"\"\n    # Create a new list to store the non-zero elements\n    result = [num for num in lst if num != 0]\n\n    # Append zeroes to the end of the result list\n    result.extend([0] * lst.count(0))\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/638": [{"task_id": "Mbpp/638", "solution": "def wind_chill(velocity, temperature):\n    \"\"\"\n    Calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n\n    Parameters:\n    velocity (float): Wind velocity in km/h.\n    temperature (float): Temperature in celsius.\n\n    Returns:\n    int: Wind chill index rounded to the next integer.\n\n    Raises:\n    ValueError: If the wind velocity is greater than 150 km/h or the temperature is less than -273.15 celsius.\n\n    \"\"\"\n\n    if velocity > 150:\n        raise ValueError(\"Wind velocity cannot be greater than 150 km/h.\")\n    if temperature < -273.15:\n        raise ValueError(\"Temperature cannot be less than -273.15 celsius.\")\n\n    wind_chill_index = 13.12 + (0.6215 * temperature) - (11.37 * (velocity ** 0.16)) + (0.3965 * temperature * (velocity ** 0.16))\n    return round(wind_chill_index)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[500, -50]]}], "Mbpp/749": [{"task_id": "Mbpp/749", "solution": "def sort_numeric_strings(numbers):\n    \"\"\"\n    Sorts a given list of strings of numbers numerically.\n\n    Parameters:\n    numbers (list): A list of strings representing numbers.\n\n    Returns:\n    list: The sorted list of numbers.\n\n    Examples:\n    >>> sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])\n    [-500, -12, 0, 4, 7, 12, 45, 100, 200]\n    \"\"\"\n    return sorted(numbers, key=lambda x: int(x))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["4", "12", "45", "7", "0", "100", "200", "-12", "-500"]]], "plus_fail_tests": [[["10000000000", "99999999", "88888888", "7777777", "666666", "-55555", "-4444", "-333", "222", "111", "10", "9", "8", "7", "6", "5", "4", "3", "2", "1"]]]}], "Mbpp/643": [{"task_id": "Mbpp/643", "solution": "def text_match_wordz_middle(text):\n    \"\"\"\n    Check if a string contains 'z' except at the start and end of the word.\n\n    Parameters:\n    text (str): The input string to check.\n\n    Returns:\n    bool: True if the string contains 'z' except at the start and end of the word, False otherwise.\n    \"\"\"\n    words = text.split()\n    for word in words:\n        if len(word) > 2 and word[0] != 'z' and word[-1] != 'z' and 'z' in word[1:-1]:\n            return True\n    return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["zzzxyabczzz"]]}], "Mbpp/721": [{"task_id": "Mbpp/721", "solution": "def maxAverageOfPath(matrix):\n    n = len(matrix)\n    dp = [[0] * n for _ in range(n)]\n    dp[0][0] = matrix[0][0]\n\n    for i in range(1, n):\n        dp[i][0] = dp[i-1][0] + matrix[i][0]\n        dp[0][i] = dp[0][i-1] + matrix[0][i]\n\n    for i in range(1, n):\n        for j in range(1, n):\n            dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + matrix[i][j]\n\n    return dp[n-1][n-1] / (n * n)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [6, 5, 4], [7, 3, 9]]]], "plus_fail_tests": [[[[0, 0, 0], [0, 0, 0], [0, 0, -1]]]]}], "Mbpp/641": [{"task_id": "Mbpp/641", "solution": "def is_nonagonal(n):\n    \"\"\"\n    Function to find the nth nonagonal number.\n\n    Parameters:\n    n (int): The position of the nonagonal number to find.\n\n    Returns:\n    int: The nth nonagonal number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    Examples:\n    >>> is_nonagonal(1)\n    1\n    >>> is_nonagonal(2)\n    11\n    >>> is_nonagonal(3)\n    21\n    >>> is_nonagonal(4)\n    32\n    >>> is_nonagonal(5)\n    45\n    >>> is_nonagonal(6)\n    59\n    >>> is_nonagonal(7)\n    75\n    >>> is_nonagonal(8)\n    93\n    >>> is_nonagonal(9)\n    113\n    >>> is_nonagonal(10)\n    135\n    \"\"\"\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    return n * (3 * n - 2)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[10]], "plus_fail_tests": [[1000000]]}], "Mbpp/745": [{"task_id": "Mbpp/745", "solution": "def divisible_by_digits(startnum, endnum):\n    result = []\n    for num in range(startnum, endnum + 1):\n        digits = [int(digit) for digit in str(num)]\n        if all(num % digit == 0 for digit in digits):\n            result.append(num)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[1, 22]], "plus_fail_tests": [[100, 200]]}], "Mbpp/639": [{"task_id": "Mbpp/639", "solution": "def sum_name_lengths(names):\n    \"\"\"\n    This function takes a list of names as input and returns the sum of the lengths of the names after removing the names that start with a lowercase letter.\n\n    Parameters:\n    names (list): A list of names.\n\n    Returns:\n    int: The sum of the lengths of the names after removing the names that start with a lowercase letter.\n    \"\"\"\n    total_length = 0\n    for name in names:\n        if name[0].isupper():\n            total_length += len(name)\n    return total_length\n\n# Test cases\nassert sum_name_lengths(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith']) == 16", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/720": [{"task_id": "Mbpp/720", "solution": "def add_dict_to_tuple(tup, dictionary):\n    \"\"\"\n    Add a dictionary to the tuple. The output should be a tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n    dictionary (dict): The dictionary to be added to the tuple.\n\n    Returns:\n    tuple: The resulting tuple with the dictionary added.\n    \"\"\"\n    return tup + (dictionary,)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/769": [{"task_id": "Mbpp/769", "solution": "def Diff(li1, li2):\n    return list(set(li1) - set(li2))", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[1, 2, 3, 4, 5], [6, 7, 1]]], "plus_fail_tests": [[[], [1, 2, 3]]]}], "Mbpp/728": [{"task_id": "Mbpp/728", "solution": "def sum_list(list1, list2):\n    \"\"\"\n    This function takes two lists as input and returns a new list where each element is the sum of the corresponding elements from the input lists.\n\n    Parameters:\n    list1 (list): The first input list.\n    list2 (list): The second input list.\n\n    Returns:\n    list: A new list where each element is the sum of the corresponding elements from the input lists.\n\n    Example:\n    >>> sum_list([10, 20, 30], [15, 25, 35])\n    [25, 45, 65]\n    \"\"\"\n    if len(list1) != len(list2):\n        raise ValueError(\"Input lists must have the same length.\")\n\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i] + list2[i])\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/764": [{"task_id": "Mbpp/764", "solution": "def number_ctr(string):\n    \"\"\"\n    This function takes a string as input and returns the count of digits present in the string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The count of digits in the string.\n    \"\"\"\n    count = 0\n    for char in string:\n        if char.isdigit():\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/726": [{"task_id": "Mbpp/726", "solution": "def multiply_elements(t):\n    return tuple(t[i] * t[i+1] for i in range(len(t)-1))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/725": [{"task_id": "Mbpp/725", "solution": "import re\ndef extract_quotation(string):\n    \"\"\"\n    Extracts values between quotation marks \" \" of the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    list: A list of extracted values.\n    \"\"\"\n    pattern = r'\"(.*?)\"'\n    matches = re.findall(pattern, string)\n    return matches", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/742": [{"task_id": "Mbpp/742", "solution": "import math\ndef area_tetrahedron(edge_length):\n    \"\"\"\n    Calculate the area of a tetrahedron.\n\n    Parameters:\n    edge_length (float): The length of the edge of the tetrahedron.\n\n    Returns:\n    float: The area of the tetrahedron.\n    \"\"\"\n    # Calculate the area of a tetrahedron using Heron's formula\n    area = math.sqrt(3) * edge_length ** 2\n    return area", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/635": [{"task_id": "Mbpp/635", "solution": "def heap_sort(arr):\n    def heapify(arr, n, i):\n        largest = i\n        left = 2 * i + 1\n        right = 2 * i + 2\n\n        if left < n and arr[left] > arr[largest]:\n            largest = left\n\n        if right < n and arr[right] > arr[largest]:\n            largest = right\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    n = len(arr)\n\n    # Build max heap\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    # Extract elements one by one\n    for i in range(n - 1, 0, -1):\n        arr[0], arr[i] = arr[i], arr[0]\n        heapify(arr, i, 0)\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/748": [{"task_id": "Mbpp/748", "solution": "def capital_words_spaces(string):\n    \"\"\"\n    Function to put spaces between words starting with capital letters in a given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces between words starting with capital letters.\n    \"\"\"\n    words = string.split()\n    modified_words = []\n    for word in words:\n        if word[0].isupper() and len(word) > 1:\n            modified_words.append(word[0] + ' ' + word[1:])\n        else:\n            modified_words.append(word)\n    return ' '.join(modified_words)", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [["Python"]], "plus_fail_tests": [["MyNameIsAIAndIAmHereToHelpYou"]]}], "Mbpp/733": [{"task_id": "Mbpp/733", "solution": "def find_first_occurrence(arr, target):\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            right = mid - 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/633": [{"task_id": "Mbpp/633", "solution": "def pair_xor_Sum(nums, n):\n    \"\"\"\n    Function to find the sum of xor of all pairs of numbers in the given list.\n\n    Parameters:\n    nums (list): A list of integers.\n    n (int): The length of the list.\n\n    Returns:\n    int: The sum of xor of all pairs of numbers in the given list.\n    \"\"\"\n    result = 0\n    for i in range(n):\n        for j in range(i + 1, n):\n            result += nums[i] ^ nums[j]\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/751": [{"task_id": "Mbpp/751", "solution": "def check_min_heap(arr):\n    \"\"\"\n    Check if the given array represents a min heap or not.\n\n    Parameters:\n    arr (list): The input array to be checked.\n\n    Returns:\n    bool: True if the array represents a min heap, False otherwise.\n    \"\"\"\n    def is_min_heap(arr, i):\n        n = len(arr)\n        left_child = 2 * i + 1\n        right_child = 2 * i + 2\n\n        if left_child < n and arr[left_child] < arr[i]:\n            return False\n\n        if right_child < n and arr[right_child] < arr[i]:\n            return False\n\n        if left_child < n:\n            if not is_min_heap(arr, left_child):\n                return False\n\n        if right_child < n:\n            if not is_min_heap(arr, right_child):\n                return False\n\n        return True\n\n    return is_min_heap(arr, 0)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/762": [{"task_id": "Mbpp/762", "solution": "def check_monthnumber_number(month_number):\n    \"\"\"\n    Check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n\n    Parameters:\n    month_number (int): The month number to be checked.\n\n    Returns:\n    bool: True if the month number contains 30 days, False otherwise.\n    \"\"\"\n    if month_number in [4, 6, 9, 11]:\n        return True\n    elif month_number == 2:\n        return False  # February has 28 or 29 days depending on leap year\n    else:\n        return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/760": [{"task_id": "Mbpp/760", "solution": "def unique_Element(nums):\n    \"\"\"\n    Check if a list of numbers contains only one distinct element.\n\n    Parameters:\n    nums (list): A list of numbers.\n\n    Returns:\n    bool: True if the list contains only one distinct element, False otherwise.\n    \"\"\"\n    return len(set(nums)) == 1", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/758": [{"task_id": "Mbpp/758", "solution": "def unique_sublists(lst):\n    sublist_counts = {}\n    for sublist in lst:\n        sublist_tuple = tuple(sublist)\n        if sublist_tuple in sublist_counts:\n            sublist_counts[sublist_tuple] += 1\n        else:\n            sublist_counts[sublist_tuple] = 1\n    return sublist_counts", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/759": [{"task_id": "Mbpp/759", "solution": "def is_decimal(string):\n    \"\"\"\n    Check whether a given string is a decimal number with a precision of 2.\n\n    Parameters:\n    string (str): The string to be checked.\n\n    Returns:\n    bool: True if the string is a decimal number with a precision of 2, False otherwise.\n    \"\"\"\n    try:\n        float(string)\n        parts = string.split('.')\n        if len(parts) == 2 and len(parts[1]) == 2:\n            return True\n        else:\n            return False\n    except ValueError:\n        return False", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["-123.11"]]}], "Mbpp/740": [{"task_id": "Mbpp/740", "solution": "def tuple_to_dict(t):\n    \"\"\"\n    Convert the given tuple to a key-value dictionary using adjacent elements.\n\n    Parameters:\n    t (tuple): The input tuple.\n\n    Returns:\n    dict: The resulting key-value dictionary.\n\n    Raises:\n    ValueError: If the length of the tuple is odd.\n\n    Examples:\n    >>> tuple_to_dict((1, 5, 7, 10, 13, 5))\n    {1: 5, 7: 10, 13: 5}\n    \"\"\"\n\n    if len(t) % 2 != 0:\n        raise ValueError(\"The length of the tuple must be even.\")\n\n    d = {}\n    for i in range(0, len(t), 2):\n        key = t[i]\n        value = t[i + 1]\n        d[key] = value\n\n    return d", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/754": [{"task_id": "Mbpp/754", "solution": "def extract_index_list(l1, l2, l3):\n    common_elements = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] == l3[i]:\n            common_elements.append(l1[i])\n    return common_elements", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 4, 6, 8, 10, 12, 14], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]]]}], "Mbpp/644": [{"task_id": "Mbpp/644", "solution": "def reverse_Array_Upto_K(arr, k):\n    \"\"\"\n    Function to reverse an array upto a given position.\n\n    Parameters:\n    arr (list): The input array.\n    k (int): The position upto which the array should be reversed.\n\n    Returns:\n    list: The reversed array upto the given position.\n\n    \"\"\"\n    # Reverse the array upto the given position\n    arr[:k] = arr[:k][::-1]\n\n    return arr", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/744": [{"task_id": "Mbpp/744", "solution": "def check_none(tup):\n    \"\"\"\n    Check if the given tuple has any none value or not.\n\n    Parameters:\n    tup (tuple): The tuple to be checked.\n\n    Returns:\n    bool: True if the tuple has any none value, False otherwise.\n    \"\"\"\n    return any(value is None for value in tup)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/772": [{"task_id": "Mbpp/772", "solution": "def remove_length(string, k):\n    \"\"\"\n    Remove all the words with length k in the given string.\n\n    Parameters:\n    string (str): The input string.\n    k (int): The length of words to be removed.\n\n    Returns:\n    str: The modified string with words of length k removed.\n    \"\"\"\n    words = string.split()\n    filtered_words = [word for word in words if len(word) != k]\n    return ' '.join(filtered_words)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/757": [{"task_id": "Mbpp/757", "solution": "def count_reverse_pairs(string_list):\n    count = 0\n    for i in range(len(string_list)):\n        for j in range(i+1, len(string_list)):\n            if string_list[i] == string_list[j][::-1]:\n                count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/766": [{"task_id": "Mbpp/766", "solution": "def pair_wise(lst):\n    pairs = []\n    for i in range(len(lst) - 1):\n        pairs.append((lst[i], lst[i + 1]))\n    return pairs", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/763": [{"task_id": "Mbpp/763", "solution": "def find_min_diff(arr, n):\n    \"\"\"\n    Function to find the minimum difference between any two elements in a given array.\n\n    Parameters:\n    arr (tuple): The input array of integers.\n    n (int): The size of the array.\n\n    Returns:\n    int: The minimum difference between any two elements in the array.\n\n    Raises:\n    ValueError: If the array is empty or has less than 2 elements.\n\n    Examples:\n    >>> find_min_diff((1, 5, 3, 19, 18, 25), 6)\n    1\n    >>> find_min_diff((1, 1, 1, 1), 4)\n    0\n    >>> find_min_diff((1, 100, 50, 200), 4)\n    50\n    \"\"\"\n\n    if n < 2:\n        raise ValueError(\"Array must have at least 2 elements\")\n\n    arr = sorted(arr)  # Sort the array in ascending order\n\n    min_diff = float('inf')  # Initialize minimum difference as infinity\n\n    for i in range(n - 1):\n        diff = arr[i + 1] - arr[i]  # Calculate the difference between adjacent elements\n        if diff < min_diff:\n            min_diff = diff  # Update minimum difference if a smaller difference is found\n\n    return min_diff", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/775": [{"task_id": "Mbpp/775", "solution": "def odd_position(lst):\n    \"\"\"\n    Check if every odd index contains odd numbers in a given list.\n\n    Parameters:\n    lst (list): The list to check.\n\n    Returns:\n    bool: True if every odd index contains odd numbers, False otherwise.\n    \"\"\"\n    for i in range(1, len(lst), 2):\n        if lst[i] % 2 == 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/732": [{"task_id": "Mbpp/732", "solution": "def replace_specialchar(string):\n    \"\"\"\n    Replaces all occurrences of spaces, commas, or dots with a colon in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The modified string with spaces, commas, and dots replaced with colons.\n    \"\"\"\n    return string.replace(\" \", \":\").replace(\",\", \":\").replace(\".\", \":\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/722": [{"task_id": "Mbpp/722", "solution": "def filter_data(students, min_height, min_weight):\n    filtered_students = {}\n    for name, (height, weight) in students.items():\n        if height >= min_height and weight >= min_weight:\n            filtered_students[name] = (height, weight)\n    return filtered_students", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/755": [{"task_id": "Mbpp/755", "solution": "def second_smallest(numbers):\n    \"\"\"\n    Find the second smallest number in a list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The second smallest number in the list.\n\n    Raises:\n    ValueError: If the list has less than 2 elements.\n\n    Examples:\n    >>> second_smallest([1, 2, -8, -2, 0, -2])\n    -2\n    >>> second_smallest([1, 1, 1])\n    Traceback (most recent call last):\n        ...\n    ValueError: List must have at least 2 distinct numbers.\n    \"\"\"\n\n    if len(set(numbers)) < 2:\n        raise ValueError(\"List must have at least 2 distinct numbers.\")\n\n    smallest = min(numbers)\n    second_smallest = float('inf')\n\n    for num in numbers:\n        if num > smallest and num < second_smallest:\n            second_smallest = num\n\n    return second_smallest", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[2, 2]]], "plus_fail_tests": [[[]]]}], "Mbpp/780": [{"task_id": "Mbpp/780", "solution": "def find_combinations(tuples_list):\n    combinations = []\n    for i in range(len(tuples_list)):\n        for j in range(i + 1, len(tuples_list)):\n            combinations.append((tuples_list[i][0] + tuples_list[j][0], tuples_list[i][1] + tuples_list[j][1]))\n    return combinations", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[[1, 2, 3], [3, 4, 5]]]], "plus_fail_tests": [[[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12], [13, 14, 15]]]]}], "Mbpp/770": [{"task_id": "Mbpp/770", "solution": "def odd_num_sum(n):\n    \"\"\"\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n\n    Parameters:\n    n (int): The number of odd natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of fourth power of first n odd natural numbers.\n    \"\"\"\n    sum = 0\n    for i in range(1, 2*n, 2):\n        sum += i**4\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/778": [{"task_id": "Mbpp/778", "solution": "def pack_consecutive_duplicates(lst):\n    result = []\n    current_sublist = []\n    for i in range(len(lst)):\n        if i == 0 or lst[i] != lst[i-1]:\n            if current_sublist:\n                result.append(current_sublist)\n            current_sublist = []\n        current_sublist.append(lst[i])\n    if current_sublist:\n        result.append(current_sublist)\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/773": [{"task_id": "Mbpp/773", "solution": "def occurance_substring(string, substring):\n    \"\"\"\n    Find the occurrence and position of the substrings within a string. Return None if there is no match.\n\n    Parameters:\n    string (str): The input string to search for the substring.\n    substring (str): The substring to search for within the string.\n\n    Returns:\n    tuple: A tuple containing the substring, starting position, and ending position of the first occurrence.\n          Returns None if there is no match.\n\n    Example:\n    >>> occurance_substring('python programming, python language','python')\n    ('python', 0, 6)\n    \"\"\"\n\n    # Find the starting position of the substring\n    start_pos = string.find(substring)\n\n    # Check if the substring is found\n    if start_pos != -1:\n        # Calculate the ending position of the substring\n        end_pos = start_pos + len(substring)\n        return substring, start_pos, end_pos\n    else:\n        return None", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/767": [{"task_id": "Mbpp/767", "solution": "def get_pairs_count(nums, target_sum):\n    count = 0\n    num_counts = {}\n\n    for num in nums:\n        complement = target_sum - num\n        if complement in num_counts:\n            count += num_counts[complement]\n        if num in num_counts:\n            num_counts[num] += 1\n        else:\n            num_counts[num] = 1\n\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/777": [{"task_id": "Mbpp/777", "solution": "def find_sum(lst):\n    \"\"\"\n    This function takes a list as input and returns the sum of non-repeated elements in the list.\n\n    Parameters:\n    lst (list): A list of integers.\n\n    Returns:\n    int: The sum of non-repeated elements in the list.\n    \"\"\"\n    unique_elements = set()\n    repeated_elements = set()\n    total_sum = 0\n\n    for num in lst:\n        if num in unique_elements:\n            repeated_elements.add(num)\n        else:\n            unique_elements.add(num)\n            total_sum += num\n\n    return total_sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/771": [{"task_id": "Mbpp/771", "solution": "def check_expression(expression):\n    stack = []\n    opening_brackets = [\"(\", \"{\", \"[\"]\n    closing_brackets = [\")\", \"}\", \"]\"]\n    bracket_pairs = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n\n    for char in expression:\n        if char in opening_brackets:\n            stack.append(char)\n        elif char in closing_brackets:\n            if not stack or stack.pop() != bracket_pairs[char]:\n                return False\n\n    return len(stack) == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[""]]}], "Mbpp/750": [{"task_id": "Mbpp/750", "solution": "def add_tuple(lst, tup):\n    \"\"\"\n    Adds the given tuple to the given list.\n\n    Parameters:\n    lst (list): The list to which the tuple will be added.\n    tup (tuple): The tuple to be added to the list.\n\n    Returns:\n    list: The updated list with the tuple added.\n    \"\"\"\n    lst.extend(tup)\n    return lst", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/765": [{"task_id": "Mbpp/765", "solution": "def is_polite(n):\n    \"\"\"\n    Function to find the nth polite number.\n\n    Parameters:\n    n (int): The position of the polite number to find.\n\n    Returns:\n    int: The nth polite number.\n\n    Raises:\n    ValueError: If n is not a positive integer.\n\n    \"\"\"\n\n    if not isinstance(n, int) or n <= 0:\n        raise ValueError(\"n must be a positive integer.\")\n\n    if n == 1:\n        return 1\n\n    polite_numbers = [1, 2]\n\n    while len(polite_numbers) < n:\n        next_polite_number = polite_numbers[-1] + polite_numbers[-2]\n        polite_numbers.append(next_polite_number)\n\n    return polite_numbers[n - 1]", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[7]], "plus_fail_tests": [[10000000]]}], "Mbpp/794": [{"task_id": "Mbpp/794", "solution": "import re\ndef text_starta_endb(text):\n    \"\"\"\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n\n    Parameters:\n    text (str): The input string to be checked.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'a.*b$'\n    return bool(re.match(pattern, text))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["xaabbyz1323ababb"]]}], "Mbpp/790": [{"task_id": "Mbpp/790", "solution": "def even_position(lst):\n    \"\"\"\n    Check whether every even index contains even numbers of a given list.\n\n    Parameters:\n    lst (list): The list to be checked.\n\n    Returns:\n    bool: True if every even index contains even numbers, False otherwise.\n    \"\"\"\n    for i in range(0, len(lst), 2):\n        if lst[i] % 2 != 0:\n            return False\n    return True", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[2, 1, 4, 2, 6, 1, 8, 2, 10, 1, 12]]]}], "Mbpp/808": [{"task_id": "Mbpp/808", "solution": "def check_K(tup, k):\n    \"\"\"\n    Check if the given tuples contain the k or not.\n\n    Parameters:\n    tup (tuple): The input tuple to check.\n    k: The value to search for in the tuple.\n\n    Returns:\n    bool: True if the tuple contains the k, False otherwise.\n    \"\"\"\n    return k in tup", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/798": [{"task_id": "Mbpp/798", "solution": "def _sum(arr):\n    \"\"\"\n    This function takes an array as input and returns the sum of all its elements.\n\n    Parameters:\n    arr (list): A list of numbers.\n\n    Returns:\n    int: The sum of all elements in the array.\n    \"\"\"\n    total = 0\n    for num in arr:\n        total += num\n    return total", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/804": [{"task_id": "Mbpp/804", "solution": "def is_product_even(numbers):\n    \"\"\"\n    Check whether the product of numbers in a list is even or not.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    bool: True if the product of numbers is even, False otherwise.\n    \"\"\"\n    product = 1\n    for num in numbers:\n        product *= num\n    return product % 2 == 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/791": [{"task_id": "Mbpp/791", "solution": "def remove_nested(tup):\n    \"\"\"\n    Remove tuples from the given tuple.\n\n    Parameters:\n    tup (tuple): The input tuple.\n\n    Returns:\n    tuple: The modified tuple with tuples removed.\n    \"\"\"\n    result = []\n    for item in tup:\n        if not isinstance(item, tuple):\n            result.append(item)\n    return tuple(result)", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/787": [{"task_id": "Mbpp/787", "solution": "import re\ndef text_match_three(text):\n    \"\"\"\n    Write a function that matches a string that has an a followed by three 'b'.\n\n    Parameters:\n    text (str): The string to be matched.\n\n    Returns:\n    bool: True if the string matches the pattern, False otherwise.\n    \"\"\"\n    pattern = r'ab{3}'\n    return bool(re.search(pattern, text))", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/809": [{"task_id": "Mbpp/809", "solution": "def check_smaller(tuple1, tuple2):\n    \"\"\"\n    Check if each element of second tuple is smaller than its corresponding element in the first tuple.\n\n    Parameters:\n    tuple1 (tuple): The first tuple.\n    tuple2 (tuple): The second tuple.\n\n    Returns:\n    bool: True if each element of tuple2 is smaller than its corresponding element in tuple1, False otherwise.\n    \"\"\"\n    for i in range(len(tuple1)):\n        if tuple2[i] >= tuple1[i]:\n            return False\n    return True", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/785": [{"task_id": "Mbpp/785", "solution": "def tuple_str_int(tuple_str):\n    \"\"\"\n    Convert a string representation of a tuple to an integer tuple.\n\n    Parameters:\n    tuple_str (str): A string representation of a tuple.\n\n    Returns:\n    tuple: An integer tuple.\n\n    Raises:\n    ValueError: If the input string is not a valid tuple representation.\n\n    Examples:\n    >>> tuple_str_int(\"(7, 8, 9)\")\n    (7, 8, 9)\n    >>> tuple_str_int(\"(1, 2, '3')\")\n    Traceback (most recent call last):\n        ...\n    ValueError: invalid literal for int() with base 10: '3'\n    \"\"\"\n    try:\n        # Remove the parentheses and split the string by commas\n        elements = tuple_str[1:-1].split(\",\")\n\n        # Convert each element to an integer\n        int_tuple = tuple(int(element.strip()) for element in elements)\n\n        return int_tuple\n    except ValueError as e:\n        raise ValueError(\"invalid literal for int() with base 10: {}\".format(e.args[0]))", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["((7, 8, 9)"]]}], "Mbpp/801": [{"task_id": "Mbpp/801", "solution": "def test_three_equal(a, b, c):\n    \"\"\"\n    This function takes three integers as input and returns the count of equal numbers.\n\n    Parameters:\n    a (int): The first integer.\n    b (int): The second integer.\n    c (int): The third integer.\n\n    Returns:\n    int: The count of equal numbers.\n    \"\"\"\n    if a == b == c:\n        return 3\n    elif a == b or b == c or a == c:\n        return 2\n    else:\n        return 0", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/796": [{"task_id": "Mbpp/796", "solution": "def return_sum(dictionary):\n    \"\"\"\n    Function to find the sum of all items in the given dictionary.\n\n    Parameters:\n    dictionary (dict): A dictionary containing numeric values.\n\n    Returns:\n    int: The sum of all items in the dictionary.\n    \"\"\"\n    return sum(dictionary.values())", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/797": [{"task_id": "Mbpp/797", "solution": "def sum_in_range(l, r):\n    \"\"\"\n    This function takes two numbers l and r as input and returns the sum of all odd natural numbers within the range l and r.\n\n    Parameters:\n    l (int): The lower limit of the range.\n    r (int): The upper limit of the range.\n\n    Returns:\n    int: The sum of all odd natural numbers within the range l and r.\n    \"\"\"\n    # Check if l and r are valid numbers\n    if not isinstance(l, int) or not isinstance(r, int):\n        raise ValueError(\"l and r must be integers.\")\n\n    # Check if l and r are within the valid range\n    if l < 1 or r < 1:\n        raise ValueError(\"l and r must be positive integers.\")\n\n    # Check if l is greater than r\n    if l > r:\n        raise ValueError(\"l must be less than or equal to r.\")\n\n    # Calculate the sum of all odd natural numbers within the range l and r\n    sum_odd = 0\n    for num in range(l, r+1):\n        if num % 2 != 0:\n            sum_odd += num\n\n    return sum_odd", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[0, 10000]]}], "Mbpp/793": [{"task_id": "Mbpp/793", "solution": "def last(arr, target):\n    \"\"\"\n    Find the last position of an element in a sorted array.\n\n    Parameters:\n    arr (list): The sorted array.\n    target: The element to search for.\n\n    Returns:\n    int: The last position of the element in the array.\n\n    Raises:\n    ValueError: If the array is empty.\n\n    Examples:\n    >>> last([1,2,3], 1)\n    0\n    >>> last([1,2,3], 2)\n    1\n    >>> last([1,2,3], 3)\n    2\n    >>> last([1,2,3], 4)\n    -1\n    \"\"\"\n\n    if not arr:\n        raise ValueError(\"Array is empty.\")\n\n    left = 0\n    right = len(arr) - 1\n    result = -1\n\n    while left <= right:\n        mid = (left + right) // 2\n\n        if arr[mid] == target:\n            result = mid\n            left = mid + 1\n        elif arr[mid] < target:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/788": [{"task_id": "Mbpp/788", "solution": "def new_tuple(*args):\n    \"\"\"\n    Create a new tuple from the given string and list.\n\n    Parameters:\n    *args (tuple): Variable number of arguments. The first argument should be a list, and the second argument should be a string.\n\n    Returns:\n    tuple: A new tuple containing the elements from the list and the string.\n\n    Raises:\n    TypeError: If the first argument is not a list or the second argument is not a string.\n\n    Examples:\n    >>> new_tuple([\"WEB\", \"is\"], \"best\")\n    ('WEB', 'is', 'best')\n    \"\"\"\n    if not isinstance(args[0], list) or not isinstance(args[1], str):\n        raise TypeError(\"The first argument should be a list and the second argument should be a string.\")\n\n    new_tuple = tuple(args[0]) + (args[1],)\n    return new_tuple", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/784": [{"task_id": "Mbpp/784", "solution": "def mul_even_odd(numbers):\n    \"\"\"\n    Function to find the product of first even and odd number of a given list.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The product of the first even and odd number in the list.\n\n    Raises:\n    ValueError: If the list does not contain any even or odd numbers.\n\n    Examples:\n    >>> mul_even_odd([1,3,5,7,4,1,6,8])\n    4\n    >>> mul_even_odd([1,3,5,7])\n    Traceback (most recent call last):\n        ...\n    ValueError: List does not contain any even or odd numbers.\n    \"\"\"\n\n    even_numbers = [num for num in numbers if num % 2 == 0]\n    odd_numbers = [num for num in numbers if num % 2 != 0]\n\n    if not even_numbers or not odd_numbers:\n        raise ValueError(\"List does not contain any even or odd numbers.\")\n\n    return even_numbers[0] * odd_numbers[0]", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/792": [{"task_id": "Mbpp/792", "solution": "def count_list(lists):\n    \"\"\"\n    This function takes a list of lists as input and returns the count of lists in the given list.\n\n    Parameters:\n    lists (list): A list of lists.\n\n    Returns:\n    int: The count of lists in the given list.\n    \"\"\"\n    count = 0\n    for lst in lists:\n        if isinstance(lst, list):\n            count += 1\n    return count", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/786": [{"task_id": "Mbpp/786", "solution": "def right_insertion(arr, target):\n    \"\"\"\n    Function to locate the right insertion point for a specified value in sorted order.\n\n    Parameters:\n    arr (list): Sorted list of integers.\n    target (int): Target value to be inserted.\n\n    Returns:\n    int: Index of the right insertion point.\n\n    Examples:\n    >>> right_insertion([1,2,4,5], 6)\n    4\n    >>> right_insertion([1,2,4,5], 3)\n    2\n    >>> right_insertion([1,2,4,5], 1)\n    1\n    \"\"\"\n\n    # Initialize left and right pointers\n    left = 0\n    right = len(arr) - 1\n\n    # Binary search loop\n    while left <= right:\n        mid = (left + right) // 2\n\n        # If target is equal to the middle element, return the index\n        if arr[mid] == target:\n            return mid\n\n        # If target is less than the middle element, update right pointer\n        elif arr[mid] > target:\n            right = mid - 1\n\n        # If target is greater than the middle element, update left pointer\n        else:\n            left = mid + 1\n\n    # Return the index of the right insertion point\n    return left", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[[50.64327388212607, -72.16612625583227, 95.25630303581863, -75.73998556144497, 11.857449640680656, -90.20293226837086, -12.02758648076636, -35.964731488229475], false]]}], "Mbpp/800": [{"task_id": "Mbpp/800", "solution": "def remove_all_spaces(string):\n    \"\"\"\n    Remove all whitespaces from a string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    str: The string with all whitespaces removed.\n    \"\"\"\n    return string.replace(\" \", \"\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/803": [{"task_id": "Mbpp/803", "solution": "def is_perfect_square(num):\n    \"\"\"\n    Check if a given number is a perfect square.\n\n    Parameters:\n    num (int): The number to be checked.\n\n    Returns:\n    bool: True if the number is a perfect square, False otherwise.\n    \"\"\"\n    if num < 0:\n        return False\n\n    # Using binary search to find the square root\n    left = 0\n    right = num\n\n    while left <= right:\n        mid = (left + right) // 2\n        square = mid * mid\n\n        if square == num:\n            return True\n        elif square < num:\n            left = mid + 1\n        else:\n            right = mid - 1\n\n    return False", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/807": [{"task_id": "Mbpp/807", "solution": "def first_odd(numbers):\n    \"\"\"\n    Write a python function to find the first odd number in a given list of numbers.\n\n    Parameters:\n    numbers (list): A list of numbers.\n\n    Returns:\n    int: The first odd number in the list.\n\n    Raises:\n    ValueError: If no odd number is found in the list.\n\n    Examples:\n    >>> first_odd([1,3,5])\n    1\n    >>> first_odd([2,4,6])\n    Traceback (most recent call last):\n        ...\n    ValueError: No odd number found in the list.\n    \"\"\"\n    for num in numbers:\n        if num % 2 != 0:\n            return num\n    raise ValueError(\"No odd number found in the list.\")", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/806": [{"task_id": "Mbpp/806", "solution": "def max_run_uppercase(string):\n    \"\"\"\n    Write a function to find maximum run of uppercase characters in the given string.\n\n    Parameters:\n    string (str): The input string.\n\n    Returns:\n    int: The maximum run of uppercase characters in the string.\n    \"\"\"\n    max_run = 0\n    current_run = 0\n\n    for char in string:\n        if char.isupper():\n            current_run += 1\n        else:\n            max_run = max(max_run, current_run)\n            current_run = 0\n\n    return max(max_run, current_run)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [["Aaa"]]}], "Mbpp/799": [{"task_id": "Mbpp/799", "solution": "def left_rotate(num, d):\n    \"\"\"\n    Function to rotate left bits by d bits a given number.\n\n    Parameters:\n    num (int): The number to rotate.\n    d (int): The number of bits to rotate.\n\n    Returns:\n    int: The rotated number.\n    \"\"\"\n    # Shift the bits to the left by d positions\n    rotated_num = (num << d) | (num >> (32 - d))\n\n    return rotated_num", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/805": [{"task_id": "Mbpp/805", "solution": "def max_sum_list(lst):\n    \"\"\"\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n\n    Parameters:\n    lst (list): A list of lists of integers.\n\n    Returns:\n    list: The list in the list of lists with the highest sum of elements.\n\n    Examples:\n    >>> max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])\n    [10, 11, 12]\n    \"\"\"\n    max_sum = float('-inf')\n    max_list = None\n\n    for sublist in lst:\n        sublist_sum = sum(sublist)\n        if sublist_sum > max_sum:\n            max_sum = sublist_sum\n            max_list = sublist\n\n    return max_list", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/782": [{"task_id": "Mbpp/782", "solution": "def odd_length_sum(arr):\n    \"\"\"\n    Write a python function to find the sum of all odd length subarrays.\n\n    Parameters:\n    arr (list): A list of integers.\n\n    Returns:\n    int: The sum of all odd length subarrays.\n\n    Examples:\n    >>> odd_length_sum([1,2,4])\n    14\n    \"\"\"\n\n    n = len(arr)\n    result = 0\n\n    for i in range(n):\n        for j in range(i, n):\n            subarray = arr[i:j+1]\n            if len(subarray) % 2 != 0:\n                result += sum(subarray)\n\n    return result", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/453": [{"task_id": "Mbpp/453", "solution": "def sumofFactors(n):\n    \"\"\"\n    This function takes an integer 'n' as input and returns the sum of all the even factors of 'n'.\n\n    Parameters:\n    n (int): The number for which the sum of even factors is to be calculated.\n\n    Returns:\n    int: The sum of all the even factors of 'n'.\n    \"\"\"\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0 and i % 2 == 0:\n            sum += i\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}], "Mbpp/630": [{"task_id": "Mbpp/630", "solution": "def get_coordinates(coordinate):\n    x, y = coordinate\n    adjacent_coordinates = []\n    for i in range(x-1, x+2):\n        for j in range(y-1, y+2):\n            if (i, j) != coordinate:\n                adjacent_coordinates.append([i, j])\n    return adjacent_coordinates", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[[3, 4]]], "plus_fail_tests": [[[1, 1, 1]]]}], "Mbpp/752": [{"task_id": "Mbpp/752", "solution": "def jacobsthal_num(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return jacobsthal_num(n - 1) + 2 * jacobsthal_num(n - 2)", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/739": [{"task_id": "Mbpp/739", "solution": "def find_Index(n):\n    \"\"\"\n    Write a python function to find the index of smallest triangular number with n digits.\n\n    Parameters:\n    n (int): The number of digits in the triangular number.\n\n    Returns:\n    int: The index of the smallest triangular number with n digits.\n\n    Examples:\n    >>> find_Index(2)\n    4\n    \"\"\"\n\n    def is_triangular(num):\n        \"\"\"\n        Check if a number is a triangular number.\n\n        Parameters:\n        num (int): The number to check.\n\n        Returns:\n        bool: True if the number is a triangular number, False otherwise.\n        \"\"\"\n        i = 1\n        while num > 0:\n            num -= i\n            i += 1\n        return num == 0\n\n    index = 1\n    triangular_num = 1\n    while True:\n        if is_triangular(triangular_num):\n            n_digits = len(str(triangular_num))\n            if n_digits == n:\n                return index\n        index += 1\n        triangular_num += index", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[100]]}], "Mbpp/781": [{"task_id": "Mbpp/781", "solution": "def count_divisors(n):\n    \"\"\"\n    Check whether the count of divisors is even.\n\n    Parameters:\n    n (int): The number to check.\n\n    Returns:\n    bool: True if the count of divisors is even, False otherwise.\n    \"\"\"\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count % 2 == 0", "base_status": "pass", "plus_status": "fail", "base_fail_tests": [], "plus_fail_tests": [[987654321]]}], "Mbpp/255": [{"task_id": "Mbpp/255", "solution": "def combinations_colors(lst, n):\n    if n == 0:\n        return [()]\n    result = []\n    for i in range(len(lst)):\n        for combination in combinations_colors(lst, n-1):\n            result.append((lst[i],) + combination)\n    return result", "base_status": "fail", "plus_status": "fail", "base_fail_tests": [[["Red", "Green", "Blue"], 2]], "plus_fail_tests": [[["A", "B", "C", "D"], 4]]}], "Mbpp/271": [{"task_id": "Mbpp/271", "solution": "def even_Power_Sum(n):\n    \"\"\"\n    This function takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n\n    Parameters:\n    n (int): The number of even natural numbers to include in the sum.\n\n    Returns:\n    int: The sum of the first n even natural numbers raised to the fifth power.\n    \"\"\"\n    sum = 0\n    for i in range(2, 2 * n + 1, 2):\n        sum += i ** 5\n    return sum", "base_status": "pass", "plus_status": "pass", "base_fail_tests": [], "plus_fail_tests": []}]}}